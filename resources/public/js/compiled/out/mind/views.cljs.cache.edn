;; Analyzed by ClojureScript 0.0-3211
{:use-macros nil, :excludes #{}, :name mind.views, :imports nil, :requires {garden.core garden.core, reagent reagent.core, reagent.core reagent.core, re-frame.core re-frame.core, re-frame re-frame.core}, :uses {atom reagent.core, css garden.core}, :defs {lister-user {:protocol-inline nil, :meta {:arglists (quote ([])), :end-column 18, :end-line 70, :column 7, :line 70, :file "/home/fricze/Work/mind/src/cljs/mind/views.cljs"}, :name mind.views/lister-user, :variadic false, :file "src/cljs/mind/views.cljs", :end-column 18, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 70, :end-line 70, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :test true}, lister {:protocol-inline nil, :meta {:arglists (quote ([items])), :end-column 13, :end-line 65, :column 7, :line 65, :file "/home/fricze/Work/mind/src/cljs/mind/views.cljs"}, :name mind.views/lister, :variadic false, :file "src/cljs/mind/views.cljs", :end-column 13, :method-params ([items]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 65, :end-line 65, :max-fixed-arity 1, :fn-var true, :arglists (quote ([items])), :test true}, main-panel {:protocol-inline nil, :meta {:arglists (quote ([])), :end-column 17, :end-line 60, :column 7, :line 60, :file "/home/fricze/Work/mind/src/cljs/mind/views.cljs"}, :name mind.views/main-panel, :variadic false, :file "src/cljs/mind/views.cljs", :end-column 17, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 60, :end-line 60, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :test true}, panels {:meta {:end-column 17, :end-line 54, :column 11, :line 54, :file "/home/fricze/Work/mind/src/cljs/mind/views.cljs"}, :file "src/cljs/mind/views.cljs", :line 54, :column 1, :end-line 54, :end-column 17, :test true, :name mind.views/panels}, about-panel {:protocol-inline nil, :meta {:arglists (quote ([])), :end-column 18, :end-line 46, :column 7, :line 46, :file "/home/fricze/Work/mind/src/cljs/mind/views.cljs"}, :name mind.views/about-panel, :variadic false, :file "src/cljs/mind/views.cljs", :end-column 18, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 46, :end-line 46, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :test true}, home-panel {:protocol-inline nil, :meta {:arglists (quote ([])), :end-column 17, :end-line 33, :column 7, :line 33, :file "/home/fricze/Work/mind/src/cljs/mind/views.cljs"}, :name mind.views/home-panel, :variadic false, :file "src/cljs/mind/views.cljs", :end-column 17, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 33, :end-line 33, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :test true}, thought-component {:protocol-inline nil, :meta {:arglists (quote ([thought])), :end-column 24, :end-line 26, :column 7, :line 26, :file "/home/fricze/Work/mind/src/cljs/mind/views.cljs"}, :name mind.views/thought-component, :variadic false, :file "src/cljs/mind/views.cljs", :end-column 24, :method-params ([thought]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 26, :end-line 26, :max-fixed-arity 1, :fn-var true, :arglists (quote ([thought])), :test true}, new-thought-component {:protocol-inline nil, :meta {:arglists (quote ([])), :end-column 28, :end-line 10, :column 7, :line 10, :file "/home/fricze/Work/mind/src/cljs/mind/views.cljs"}, :name mind.views/new-thought-component, :variadic false, :file "src/cljs/mind/views.cljs", :end-column 28, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 10, :end-line 10, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :test true}}, :require-macros nil, :cljs.analyzer/constants {:order [:form :on-submit :add-thought :h1 :input :type :value :on-change :text :button :submit :div :style :border-bottom :padding-bottom :width :name :thoughts :content :key :id :a :href :hierarchy :default :home-panel :about-panel :active-panel :ul :li], :seen #{:home-panel :about-panel :ul :key :button :content :default :name :li :value :thoughts :width :submit :type :style :div :id :add-thought :active-panel :on-submit :form :input :padding-bottom :h1 :on-change :hierarchy :href :a :border-bottom :text}}, :doc nil}