if(typeof Math.imul == "undefined" || (Math.imul(0xffffffff,5) == 0)) {
    Math.imul = function (a, b) {
        var ah  = (a >>> 16) & 0xffff;
        var al = a & 0xffff;
        var bh  = (b >>> 16) & 0xffff;
        var bl = b & 0xffff;
        // the shift by 0 fixes the sign on the high part
        // the final |0 converts the unsigned value into a signed value
        return ((al * bl) + (((ah * bl + al * bh) << 16) >>> 0)|0);
    }
}

/**
 * React v0.12.2
 */
!function(e){if("object"==typeof exports&&"undefined"!=typeof module)module.exports=e();else if("function"==typeof define&&define.amd)define([],e);else{var f;"undefined"!=typeof window?f=window:"undefined"!=typeof global?f=global:"undefined"!=typeof self&&(f=self),f.React=e()}}(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule React
 */

"use strict";

var DOMPropertyOperations = _dereq_("./DOMPropertyOperations");
var EventPluginUtils = _dereq_("./EventPluginUtils");
var ReactChildren = _dereq_("./ReactChildren");
var ReactComponent = _dereq_("./ReactComponent");
var ReactCompositeComponent = _dereq_("./ReactCompositeComponent");
var ReactContext = _dereq_("./ReactContext");
var ReactCurrentOwner = _dereq_("./ReactCurrentOwner");
var ReactElement = _dereq_("./ReactElement");
var ReactElementValidator = _dereq_("./ReactElementValidator");
var ReactDOM = _dereq_("./ReactDOM");
var ReactDOMComponent = _dereq_("./ReactDOMComponent");
var ReactDefaultInjection = _dereq_("./ReactDefaultInjection");
var ReactInstanceHandles = _dereq_("./ReactInstanceHandles");
var ReactLegacyElement = _dereq_("./ReactLegacyElement");
var ReactMount = _dereq_("./ReactMount");
var ReactMultiChild = _dereq_("./ReactMultiChild");
var ReactPerf = _dereq_("./ReactPerf");
var ReactPropTypes = _dereq_("./ReactPropTypes");
var ReactServerRendering = _dereq_("./ReactServerRendering");
var ReactTextComponent = _dereq_("./ReactTextComponent");

var assign = _dereq_("./Object.assign");
var deprecated = _dereq_("./deprecated");
var onlyChild = _dereq_("./onlyChild");

ReactDefaultInjection.inject();

var createElement = ReactElement.createElement;
var createFactory = ReactElement.createFactory;

if ("production" !== "development") {
  createElement = ReactElementValidator.createElement;
  createFactory = ReactElementValidator.createFactory;
}

// TODO: Drop legacy elements once classes no longer export these factories
createElement = ReactLegacyElement.wrapCreateElement(
  createElement
);
createFactory = ReactLegacyElement.wrapCreateFactory(
  createFactory
);

var render = ReactPerf.measure('React', 'render', ReactMount.render);

var React = {
  Children: {
    map: ReactChildren.map,
    forEach: ReactChildren.forEach,
    count: ReactChildren.count,
    only: onlyChild
  },
  DOM: ReactDOM,
  PropTypes: ReactPropTypes,
  initializeTouchEvents: function(shouldUseTouch) {
    EventPluginUtils.useTouchEvents = shouldUseTouch;
  },
  createClass: ReactCompositeComponent.createClass,
  createElement: createElement,
  createFactory: createFactory,
  constructAndRenderComponent: ReactMount.constructAndRenderComponent,
  constructAndRenderComponentByID: ReactMount.constructAndRenderComponentByID,
  render: render,
  renderToString: ReactServerRendering.renderToString,
  renderToStaticMarkup: ReactServerRendering.renderToStaticMarkup,
  unmountComponentAtNode: ReactMount.unmountComponentAtNode,
  isValidClass: ReactLegacyElement.isValidClass,
  isValidElement: ReactElement.isValidElement,
  withContext: ReactContext.withContext,

  // Hook for JSX spread, don't use this for anything else.
  __spread: assign,

  // Deprecations (remove for 0.13)
  renderComponent: deprecated(
    'React',
    'renderComponent',
    'render',
    this,
    render
  ),
  renderComponentToString: deprecated(
    'React',
    'renderComponentToString',
    'renderToString',
    this,
    ReactServerRendering.renderToString
  ),
  renderComponentToStaticMarkup: deprecated(
    'React',
    'renderComponentToStaticMarkup',
    'renderToStaticMarkup',
    this,
    ReactServerRendering.renderToStaticMarkup
  ),
  isValidComponent: deprecated(
    'React',
    'isValidComponent',
    'isValidElement',
    this,
    ReactElement.isValidElement
  )
};

// Inject the runtime into a devtools global hook regardless of browser.
// Allows for debugging when the hook is injected on the page.
if (
  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' &&
  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.inject === 'function') {
  __REACT_DEVTOOLS_GLOBAL_HOOK__.inject({
    Component: ReactComponent,
    CurrentOwner: ReactCurrentOwner,
    DOMComponent: ReactDOMComponent,
    DOMPropertyOperations: DOMPropertyOperations,
    InstanceHandles: ReactInstanceHandles,
    Mount: ReactMount,
    MultiChild: ReactMultiChild,
    TextComponent: ReactTextComponent
  });
}

if ("production" !== "development") {
  var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");
  if (ExecutionEnvironment.canUseDOM && window.top === window.self) {

    // If we're in Chrome, look for the devtools marker and provide a download
    // link if not installed.
    if (navigator.userAgent.indexOf('Chrome') > -1) {
      if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {
        console.debug(
          'Download the React DevTools for a better development experience: ' +
          'http://fb.me/react-devtools'
        );
      }
    }

    var expectedFeatures = [
      // shims
      Array.isArray,
      Array.prototype.every,
      Array.prototype.forEach,
      Array.prototype.indexOf,
      Array.prototype.map,
      Date.now,
      Function.prototype.bind,
      Object.keys,
      String.prototype.split,
      String.prototype.trim,

      // shams
      Object.create,
      Object.freeze
    ];

    for (var i = 0; i < expectedFeatures.length; i++) {
      if (!expectedFeatures[i]) {
        console.error(
          'One or more ES5 shim/shams expected by React are not available: ' +
          'http://fb.me/react-warning-polyfills'
        );
        break;
      }
    }
  }
}

// Version exists only in the open-source version of React, not in Facebook's
// internal version.
React.version = '0.12.2';

module.exports = React;

},{"./DOMPropertyOperations":12,"./EventPluginUtils":20,"./ExecutionEnvironment":22,"./Object.assign":27,"./ReactChildren":31,"./ReactComponent":32,"./ReactCompositeComponent":34,"./ReactContext":35,"./ReactCurrentOwner":36,"./ReactDOM":37,"./ReactDOMComponent":39,"./ReactDefaultInjection":49,"./ReactElement":52,"./ReactElementValidator":53,"./ReactInstanceHandles":60,"./ReactLegacyElement":61,"./ReactMount":63,"./ReactMultiChild":64,"./ReactPerf":68,"./ReactPropTypes":72,"./ReactServerRendering":76,"./ReactTextComponent":78,"./deprecated":106,"./onlyChild":137}],2:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule AutoFocusMixin
 * @typechecks static-only
 */

"use strict";

var focusNode = _dereq_("./focusNode");

var AutoFocusMixin = {
  componentDidMount: function() {
    if (this.props.autoFocus) {
      focusNode(this.getDOMNode());
    }
  }
};

module.exports = AutoFocusMixin;

},{"./focusNode":111}],3:[function(_dereq_,module,exports){
/**
 * Copyright 2013 Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule BeforeInputEventPlugin
 * @typechecks static-only
 */

"use strict";

var EventConstants = _dereq_("./EventConstants");
var EventPropagators = _dereq_("./EventPropagators");
var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");
var SyntheticInputEvent = _dereq_("./SyntheticInputEvent");

var keyOf = _dereq_("./keyOf");

var canUseTextInputEvent = (
  ExecutionEnvironment.canUseDOM &&
  'TextEvent' in window &&
  !('documentMode' in document || isPresto())
);

/**
 * Opera <= 12 includes TextEvent in window, but does not fire
 * text input events. Rely on keypress instead.
 */
function isPresto() {
  var opera = window.opera;
  return (
    typeof opera === 'object' &&
    typeof opera.version === 'function' &&
    parseInt(opera.version(), 10) <= 12
  );
}

var SPACEBAR_CODE = 32;
var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);

var topLevelTypes = EventConstants.topLevelTypes;

// Events and their corresponding property names.
var eventTypes = {
  beforeInput: {
    phasedRegistrationNames: {
      bubbled: keyOf({onBeforeInput: null}),
      captured: keyOf({onBeforeInputCapture: null})
    },
    dependencies: [
      topLevelTypes.topCompositionEnd,
      topLevelTypes.topKeyPress,
      topLevelTypes.topTextInput,
      topLevelTypes.topPaste
    ]
  }
};

// Track characters inserted via keypress and composition events.
var fallbackChars = null;

// Track whether we've ever handled a keypress on the space key.
var hasSpaceKeypress = false;

/**
 * Return whether a native keypress event is assumed to be a command.
 * This is required because Firefox fires `keypress` events for key commands
 * (cut, copy, select-all, etc.) even though no character is inserted.
 */
function isKeypressCommand(nativeEvent) {
  return (
    (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) &&
    // ctrlKey && altKey is equivalent to AltGr, and is not a command.
    !(nativeEvent.ctrlKey && nativeEvent.altKey)
  );
}

/**
 * Create an `onBeforeInput` event to match
 * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.
 *
 * This event plugin is based on the native `textInput` event
 * available in Chrome, Safari, Opera, and IE. This event fires after
 * `onKeyPress` and `onCompositionEnd`, but before `onInput`.
 *
 * `beforeInput` is spec'd but not implemented in any browsers, and
 * the `input` event does not provide any useful information about what has
 * actually been added, contrary to the spec. Thus, `textInput` is the best
 * available event to identify the characters that have actually been inserted
 * into the target node.
 */
var BeforeInputEventPlugin = {

  eventTypes: eventTypes,

  /**
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @see {EventPluginHub.extractEvents}
   */
  extractEvents: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent) {

    var chars;

    if (canUseTextInputEvent) {
      switch (topLevelType) {
        case topLevelTypes.topKeyPress:
          /**
           * If native `textInput` events are available, our goal is to make
           * use of them. However, there is a special case: the spacebar key.
           * In Webkit, preventing default on a spacebar `textInput` event
           * cancels character insertion, but it *also* causes the browser
           * to fall back to its default spacebar behavior of scrolling the
           * page.
           *
           * Tracking at:
           * https://code.google.com/p/chromium/issues/detail?id=355103
           *
           * To avoid this issue, use the keypress event as if no `textInput`
           * event is available.
           */
          var which = nativeEvent.which;
          if (which !== SPACEBAR_CODE) {
            return;
          }

          hasSpaceKeypress = true;
          chars = SPACEBAR_CHAR;
          break;

        case topLevelTypes.topTextInput:
          // Record the characters to be added to the DOM.
          chars = nativeEvent.data;

          // If it's a spacebar character, assume that we have already handled
          // it at the keypress level and bail immediately. Android Chrome
          // doesn't give us keycodes, so we need to blacklist it.
          if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
            return;
          }

          // Otherwise, carry on.
          break;

        default:
          // For other native event types, do nothing.
          return;
      }
    } else {
      switch (topLevelType) {
        case topLevelTypes.topPaste:
          // If a paste event occurs after a keypress, throw out the input
          // chars. Paste events should not lead to BeforeInput events.
          fallbackChars = null;
          break;
        case topLevelTypes.topKeyPress:
          /**
           * As of v27, Firefox may fire keypress events even when no character
           * will be inserted. A few possibilities:
           *
           * - `which` is `0`. Arrow keys, Esc key, etc.
           *
           * - `which` is the pressed key code, but no char is available.
           *   Ex: 'AltGr + d` in Polish. There is no modified character for
           *   this key combination and no character is inserted into the
           *   document, but FF fires the keypress for char code `100` anyway.
           *   No `input` event will occur.
           *
           * - `which` is the pressed key code, but a command combination is
           *   being used. Ex: `Cmd+C`. No character is inserted, and no
           *   `input` event will occur.
           */
          if (nativeEvent.which && !isKeypressCommand(nativeEvent)) {
            fallbackChars = String.fromCharCode(nativeEvent.which);
          }
          break;
        case topLevelTypes.topCompositionEnd:
          fallbackChars = nativeEvent.data;
          break;
      }

      // If no changes have occurred to the fallback string, no relevant
      // event has fired and we're done.
      if (fallbackChars === null) {
        return;
      }

      chars = fallbackChars;
    }

    // If no characters are being inserted, no BeforeInput event should
    // be fired.
    if (!chars) {
      return;
    }

    var event = SyntheticInputEvent.getPooled(
      eventTypes.beforeInput,
      topLevelTargetID,
      nativeEvent
    );

    event.data = chars;
    fallbackChars = null;
    EventPropagators.accumulateTwoPhaseDispatches(event);
    return event;
  }
};

module.exports = BeforeInputEventPlugin;

},{"./EventConstants":16,"./EventPropagators":21,"./ExecutionEnvironment":22,"./SyntheticInputEvent":89,"./keyOf":133}],4:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule CSSProperty
 */

"use strict";

/**
 * CSS properties which accept numbers but are not in units of "px".
 */
var isUnitlessNumber = {
  columnCount: true,
  flex: true,
  flexGrow: true,
  flexShrink: true,
  fontWeight: true,
  lineClamp: true,
  lineHeight: true,
  opacity: true,
  order: true,
  orphans: true,
  widows: true,
  zIndex: true,
  zoom: true,

  // SVG-related properties
  fillOpacity: true,
  strokeOpacity: true
};

/**
 * @param {string} prefix vendor-specific prefix, eg: Webkit
 * @param {string} key style name, eg: transitionDuration
 * @return {string} style name prefixed with `prefix`, properly camelCased, eg:
 * WebkitTransitionDuration
 */
function prefixKey(prefix, key) {
  return prefix + key.charAt(0).toUpperCase() + key.substring(1);
}

/**
 * Support style names that may come passed in prefixed by adding permutations
 * of vendor prefixes.
 */
var prefixes = ['Webkit', 'ms', 'Moz', 'O'];

// Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an
// infinite loop, because it iterates over the newly added props too.
Object.keys(isUnitlessNumber).forEach(function(prop) {
  prefixes.forEach(function(prefix) {
    isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];
  });
});

/**
 * Most style properties can be unset by doing .style[prop] = '' but IE8
 * doesn't like doing that with shorthand properties so for the properties that
 * IE8 breaks on, which are listed here, we instead unset each of the
 * individual properties. See http://bugs.jquery.com/ticket/12385.
 * The 4-value 'clock' properties like margin, padding, border-width seem to
 * behave without any problems. Curiously, list-style works too without any
 * special prodding.
 */
var shorthandPropertyExpansions = {
  background: {
    backgroundImage: true,
    backgroundPosition: true,
    backgroundRepeat: true,
    backgroundColor: true
  },
  border: {
    borderWidth: true,
    borderStyle: true,
    borderColor: true
  },
  borderBottom: {
    borderBottomWidth: true,
    borderBottomStyle: true,
    borderBottomColor: true
  },
  borderLeft: {
    borderLeftWidth: true,
    borderLeftStyle: true,
    borderLeftColor: true
  },
  borderRight: {
    borderRightWidth: true,
    borderRightStyle: true,
    borderRightColor: true
  },
  borderTop: {
    borderTopWidth: true,
    borderTopStyle: true,
    borderTopColor: true
  },
  font: {
    fontStyle: true,
    fontVariant: true,
    fontWeight: true,
    fontSize: true,
    lineHeight: true,
    fontFamily: true
  }
};

var CSSProperty = {
  isUnitlessNumber: isUnitlessNumber,
  shorthandPropertyExpansions: shorthandPropertyExpansions
};

module.exports = CSSProperty;

},{}],5:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule CSSPropertyOperations
 * @typechecks static-only
 */

"use strict";

var CSSProperty = _dereq_("./CSSProperty");
var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");

var camelizeStyleName = _dereq_("./camelizeStyleName");
var dangerousStyleValue = _dereq_("./dangerousStyleValue");
var hyphenateStyleName = _dereq_("./hyphenateStyleName");
var memoizeStringOnly = _dereq_("./memoizeStringOnly");
var warning = _dereq_("./warning");

var processStyleName = memoizeStringOnly(function(styleName) {
  return hyphenateStyleName(styleName);
});

var styleFloatAccessor = 'cssFloat';
if (ExecutionEnvironment.canUseDOM) {
  // IE8 only supports accessing cssFloat (standard) as styleFloat
  if (document.documentElement.style.cssFloat === undefined) {
    styleFloatAccessor = 'styleFloat';
  }
}

if ("production" !== "development") {
  var warnedStyleNames = {};

  var warnHyphenatedStyleName = function(name) {
    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
      return;
    }

    warnedStyleNames[name] = true;
    ("production" !== "development" ? warning(
      false,
      'Unsupported style property ' + name + '. Did you mean ' +
      camelizeStyleName(name) + '?'
    ) : null);
  };
}

/**
 * Operations for dealing with CSS properties.
 */
var CSSPropertyOperations = {

  /**
   * Serializes a mapping of style properties for use as inline styles:
   *
   *   > createMarkupForStyles({width: '200px', height: 0})
   *   "width:200px;height:0;"
   *
   * Undefined values are ignored so that declarative programming is easier.
   * The result should be HTML-escaped before insertion into the DOM.
   *
   * @param {object} styles
   * @return {?string}
   */
  createMarkupForStyles: function(styles) {
    var serialized = '';
    for (var styleName in styles) {
      if (!styles.hasOwnProperty(styleName)) {
        continue;
      }
      if ("production" !== "development") {
        if (styleName.indexOf('-') > -1) {
          warnHyphenatedStyleName(styleName);
        }
      }
      var styleValue = styles[styleName];
      if (styleValue != null) {
        serialized += processStyleName(styleName) + ':';
        serialized += dangerousStyleValue(styleName, styleValue) + ';';
      }
    }
    return serialized || null;
  },

  /**
   * Sets the value for multiple styles on a node.  If a value is specified as
   * '' (empty string), the corresponding style property will be unset.
   *
   * @param {DOMElement} node
   * @param {object} styles
   */
  setValueForStyles: function(node, styles) {
    var style = node.style;
    for (var styleName in styles) {
      if (!styles.hasOwnProperty(styleName)) {
        continue;
      }
      if ("production" !== "development") {
        if (styleName.indexOf('-') > -1) {
          warnHyphenatedStyleName(styleName);
        }
      }
      var styleValue = dangerousStyleValue(styleName, styles[styleName]);
      if (styleName === 'float') {
        styleName = styleFloatAccessor;
      }
      if (styleValue) {
        style[styleName] = styleValue;
      } else {
        var expansion = CSSProperty.shorthandPropertyExpansions[styleName];
        if (expansion) {
          // Shorthand property that IE8 won't like unsetting, so unset each
          // component to placate it
          for (var individualStyleName in expansion) {
            style[individualStyleName] = '';
          }
        } else {
          style[styleName] = '';
        }
      }
    }
  }

};

module.exports = CSSPropertyOperations;

},{"./CSSProperty":4,"./ExecutionEnvironment":22,"./camelizeStyleName":100,"./dangerousStyleValue":105,"./hyphenateStyleName":124,"./memoizeStringOnly":135,"./warning":145}],6:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule CallbackQueue
 */

"use strict";

var PooledClass = _dereq_("./PooledClass");

var assign = _dereq_("./Object.assign");
var invariant = _dereq_("./invariant");

/**
 * A specialized pseudo-event module to help keep track of components waiting to
 * be notified when their DOM representations are available for use.
 *
 * This implements `PooledClass`, so you should never need to instantiate this.
 * Instead, use `CallbackQueue.getPooled()`.
 *
 * @class ReactMountReady
 * @implements PooledClass
 * @internal
 */
function CallbackQueue() {
  this._callbacks = null;
  this._contexts = null;
}

assign(CallbackQueue.prototype, {

  /**
   * Enqueues a callback to be invoked when `notifyAll` is invoked.
   *
   * @param {function} callback Invoked when `notifyAll` is invoked.
   * @param {?object} context Context to call `callback` with.
   * @internal
   */
  enqueue: function(callback, context) {
    this._callbacks = this._callbacks || [];
    this._contexts = this._contexts || [];
    this._callbacks.push(callback);
    this._contexts.push(context);
  },

  /**
   * Invokes all enqueued callbacks and clears the queue. This is invoked after
   * the DOM representation of a component has been created or updated.
   *
   * @internal
   */
  notifyAll: function() {
    var callbacks = this._callbacks;
    var contexts = this._contexts;
    if (callbacks) {
      ("production" !== "development" ? invariant(
        callbacks.length === contexts.length,
        "Mismatched list of contexts in callback queue"
      ) : invariant(callbacks.length === contexts.length));
      this._callbacks = null;
      this._contexts = null;
      for (var i = 0, l = callbacks.length; i < l; i++) {
        callbacks[i].call(contexts[i]);
      }
      callbacks.length = 0;
      contexts.length = 0;
    }
  },

  /**
   * Resets the internal queue.
   *
   * @internal
   */
  reset: function() {
    this._callbacks = null;
    this._contexts = null;
  },

  /**
   * `PooledClass` looks for this.
   */
  destructor: function() {
    this.reset();
  }

});

PooledClass.addPoolingTo(CallbackQueue);

module.exports = CallbackQueue;

},{"./Object.assign":27,"./PooledClass":28,"./invariant":126}],7:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ChangeEventPlugin
 */

"use strict";

var EventConstants = _dereq_("./EventConstants");
var EventPluginHub = _dereq_("./EventPluginHub");
var EventPropagators = _dereq_("./EventPropagators");
var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");
var ReactUpdates = _dereq_("./ReactUpdates");
var SyntheticEvent = _dereq_("./SyntheticEvent");

var isEventSupported = _dereq_("./isEventSupported");
var isTextInputElement = _dereq_("./isTextInputElement");
var keyOf = _dereq_("./keyOf");

var topLevelTypes = EventConstants.topLevelTypes;

var eventTypes = {
  change: {
    phasedRegistrationNames: {
      bubbled: keyOf({onChange: null}),
      captured: keyOf({onChangeCapture: null})
    },
    dependencies: [
      topLevelTypes.topBlur,
      topLevelTypes.topChange,
      topLevelTypes.topClick,
      topLevelTypes.topFocus,
      topLevelTypes.topInput,
      topLevelTypes.topKeyDown,
      topLevelTypes.topKeyUp,
      topLevelTypes.topSelectionChange
    ]
  }
};

/**
 * For IE shims
 */
var activeElement = null;
var activeElementID = null;
var activeElementValue = null;
var activeElementValueProp = null;

/**
 * SECTION: handle `change` event
 */
function shouldUseChangeEvent(elem) {
  return (
    elem.nodeName === 'SELECT' ||
    (elem.nodeName === 'INPUT' && elem.type === 'file')
  );
}

var doesChangeEventBubble = false;
if (ExecutionEnvironment.canUseDOM) {
  // See `handleChange` comment below
  doesChangeEventBubble = isEventSupported('change') && (
    !('documentMode' in document) || document.documentMode > 8
  );
}

function manualDispatchChangeEvent(nativeEvent) {
  var event = SyntheticEvent.getPooled(
    eventTypes.change,
    activeElementID,
    nativeEvent
  );
  EventPropagators.accumulateTwoPhaseDispatches(event);

  // If change and propertychange bubbled, we'd just bind to it like all the
  // other events and have it go through ReactBrowserEventEmitter. Since it
  // doesn't, we manually listen for the events and so we have to enqueue and
  // process the abstract event manually.
  //
  // Batching is necessary here in order to ensure that all event handlers run
  // before the next rerender (including event handlers attached to ancestor
  // elements instead of directly on the input). Without this, controlled
  // components don't work properly in conjunction with event bubbling because
  // the component is rerendered and the value reverted before all the event
  // handlers can run. See https://github.com/facebook/react/issues/708.
  ReactUpdates.batchedUpdates(runEventInBatch, event);
}

function runEventInBatch(event) {
  EventPluginHub.enqueueEvents(event);
  EventPluginHub.processEventQueue();
}

function startWatchingForChangeEventIE8(target, targetID) {
  activeElement = target;
  activeElementID = targetID;
  activeElement.attachEvent('onchange', manualDispatchChangeEvent);
}

function stopWatchingForChangeEventIE8() {
  if (!activeElement) {
    return;
  }
  activeElement.detachEvent('onchange', manualDispatchChangeEvent);
  activeElement = null;
  activeElementID = null;
}

function getTargetIDForChangeEvent(
    topLevelType,
    topLevelTarget,
    topLevelTargetID) {
  if (topLevelType === topLevelTypes.topChange) {
    return topLevelTargetID;
  }
}
function handleEventsForChangeEventIE8(
    topLevelType,
    topLevelTarget,
    topLevelTargetID) {
  if (topLevelType === topLevelTypes.topFocus) {
    // stopWatching() should be a noop here but we call it just in case we
    // missed a blur event somehow.
    stopWatchingForChangeEventIE8();
    startWatchingForChangeEventIE8(topLevelTarget, topLevelTargetID);
  } else if (topLevelType === topLevelTypes.topBlur) {
    stopWatchingForChangeEventIE8();
  }
}


/**
 * SECTION: handle `input` event
 */
var isInputEventSupported = false;
if (ExecutionEnvironment.canUseDOM) {
  // IE9 claims to support the input event but fails to trigger it when
  // deleting text, so we ignore its input events
  isInputEventSupported = isEventSupported('input') && (
    !('documentMode' in document) || document.documentMode > 9
  );
}

/**
 * (For old IE.) Replacement getter/setter for the `value` property that gets
 * set on the active element.
 */
var newValueProp =  {
  get: function() {
    return activeElementValueProp.get.call(this);
  },
  set: function(val) {
    // Cast to a string so we can do equality checks.
    activeElementValue = '' + val;
    activeElementValueProp.set.call(this, val);
  }
};

/**
 * (For old IE.) Starts tracking propertychange events on the passed-in element
 * and override the value property so that we can distinguish user events from
 * value changes in JS.
 */
function startWatchingForValueChange(target, targetID) {
  activeElement = target;
  activeElementID = targetID;
  activeElementValue = target.value;
  activeElementValueProp = Object.getOwnPropertyDescriptor(
    target.constructor.prototype,
    'value'
  );

  Object.defineProperty(activeElement, 'value', newValueProp);
  activeElement.attachEvent('onpropertychange', handlePropertyChange);
}

/**
 * (For old IE.) Removes the event listeners from the currently-tracked element,
 * if any exists.
 */
function stopWatchingForValueChange() {
  if (!activeElement) {
    return;
  }

  // delete restores the original property definition
  delete activeElement.value;
  activeElement.detachEvent('onpropertychange', handlePropertyChange);

  activeElement = null;
  activeElementID = null;
  activeElementValue = null;
  activeElementValueProp = null;
}

/**
 * (For old IE.) Handles a propertychange event, sending a `change` event if
 * the value of the active element has changed.
 */
function handlePropertyChange(nativeEvent) {
  if (nativeEvent.propertyName !== 'value') {
    return;
  }
  var value = nativeEvent.srcElement.value;
  if (value === activeElementValue) {
    return;
  }
  activeElementValue = value;

  manualDispatchChangeEvent(nativeEvent);
}

/**
 * If a `change` event should be fired, returns the target's ID.
 */
function getTargetIDForInputEvent(
    topLevelType,
    topLevelTarget,
    topLevelTargetID) {
  if (topLevelType === topLevelTypes.topInput) {
    // In modern browsers (i.e., not IE8 or IE9), the input event is exactly
    // what we want so fall through here and trigger an abstract event
    return topLevelTargetID;
  }
}

// For IE8 and IE9.
function handleEventsForInputEventIE(
    topLevelType,
    topLevelTarget,
    topLevelTargetID) {
  if (topLevelType === topLevelTypes.topFocus) {
    // In IE8, we can capture almost all .value changes by adding a
    // propertychange handler and looking for events with propertyName
    // equal to 'value'
    // In IE9, propertychange fires for most input events but is buggy and
    // doesn't fire when text is deleted, but conveniently, selectionchange
    // appears to fire in all of the remaining cases so we catch those and
    // forward the event if the value has changed
    // In either case, we don't want to call the event handler if the value
    // is changed from JS so we redefine a setter for `.value` that updates
    // our activeElementValue variable, allowing us to ignore those changes
    //
    // stopWatching() should be a noop here but we call it just in case we
    // missed a blur event somehow.
    stopWatchingForValueChange();
    startWatchingForValueChange(topLevelTarget, topLevelTargetID);
  } else if (topLevelType === topLevelTypes.topBlur) {
    stopWatchingForValueChange();
  }
}

// For IE8 and IE9.
function getTargetIDForInputEventIE(
    topLevelType,
    topLevelTarget,
    topLevelTargetID) {
  if (topLevelType === topLevelTypes.topSelectionChange ||
      topLevelType === topLevelTypes.topKeyUp ||
      topLevelType === topLevelTypes.topKeyDown) {
    // On the selectionchange event, the target is just document which isn't
    // helpful for us so just check activeElement instead.
    //
    // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire
    // propertychange on the first input event after setting `value` from a
    // script and fires only keydown, keypress, keyup. Catching keyup usually
    // gets it and catching keydown lets us fire an event for the first
    // keystroke if user does a key repeat (it'll be a little delayed: right
    // before the second keystroke). Other input methods (e.g., paste) seem to
    // fire selectionchange normally.
    if (activeElement && activeElement.value !== activeElementValue) {
      activeElementValue = activeElement.value;
      return activeElementID;
    }
  }
}


/**
 * SECTION: handle `click` event
 */
function shouldUseClickEvent(elem) {
  // Use the `click` event to detect changes to checkbox and radio inputs.
  // This approach works across all browsers, whereas `change` does not fire
  // until `blur` in IE8.
  return (
    elem.nodeName === 'INPUT' &&
    (elem.type === 'checkbox' || elem.type === 'radio')
  );
}

function getTargetIDForClickEvent(
    topLevelType,
    topLevelTarget,
    topLevelTargetID) {
  if (topLevelType === topLevelTypes.topClick) {
    return topLevelTargetID;
  }
}

/**
 * This plugin creates an `onChange` event that normalizes change events
 * across form elements. This event fires at a time when it's possible to
 * change the element's value without seeing a flicker.
 *
 * Supported elements are:
 * - input (see `isTextInputElement`)
 * - textarea
 * - select
 */
var ChangeEventPlugin = {

  eventTypes: eventTypes,

  /**
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @see {EventPluginHub.extractEvents}
   */
  extractEvents: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent) {

    var getTargetIDFunc, handleEventFunc;
    if (shouldUseChangeEvent(topLevelTarget)) {
      if (doesChangeEventBubble) {
        getTargetIDFunc = getTargetIDForChangeEvent;
      } else {
        handleEventFunc = handleEventsForChangeEventIE8;
      }
    } else if (isTextInputElement(topLevelTarget)) {
      if (isInputEventSupported) {
        getTargetIDFunc = getTargetIDForInputEvent;
      } else {
        getTargetIDFunc = getTargetIDForInputEventIE;
        handleEventFunc = handleEventsForInputEventIE;
      }
    } else if (shouldUseClickEvent(topLevelTarget)) {
      getTargetIDFunc = getTargetIDForClickEvent;
    }

    if (getTargetIDFunc) {
      var targetID = getTargetIDFunc(
        topLevelType,
        topLevelTarget,
        topLevelTargetID
      );
      if (targetID) {
        var event = SyntheticEvent.getPooled(
          eventTypes.change,
          targetID,
          nativeEvent
        );
        EventPropagators.accumulateTwoPhaseDispatches(event);
        return event;
      }
    }

    if (handleEventFunc) {
      handleEventFunc(
        topLevelType,
        topLevelTarget,
        topLevelTargetID
      );
    }
  }

};

module.exports = ChangeEventPlugin;

},{"./EventConstants":16,"./EventPluginHub":18,"./EventPropagators":21,"./ExecutionEnvironment":22,"./ReactUpdates":79,"./SyntheticEvent":87,"./isEventSupported":127,"./isTextInputElement":129,"./keyOf":133}],8:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ClientReactRootIndex
 * @typechecks
 */

"use strict";

var nextReactRootIndex = 0;

var ClientReactRootIndex = {
  createReactRootIndex: function() {
    return nextReactRootIndex++;
  }
};

module.exports = ClientReactRootIndex;

},{}],9:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule CompositionEventPlugin
 * @typechecks static-only
 */

"use strict";

var EventConstants = _dereq_("./EventConstants");
var EventPropagators = _dereq_("./EventPropagators");
var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");
var ReactInputSelection = _dereq_("./ReactInputSelection");
var SyntheticCompositionEvent = _dereq_("./SyntheticCompositionEvent");

var getTextContentAccessor = _dereq_("./getTextContentAccessor");
var keyOf = _dereq_("./keyOf");

var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space
var START_KEYCODE = 229;

var useCompositionEvent = (
  ExecutionEnvironment.canUseDOM &&
  'CompositionEvent' in window
);

// In IE9+, we have access to composition events, but the data supplied
// by the native compositionend event may be incorrect. In Korean, for example,
// the compositionend event contains only one character regardless of
// how many characters have been composed since compositionstart.
// We therefore use the fallback data while still using the native
// events as triggers.
var useFallbackData = (
  !useCompositionEvent ||
  (
    'documentMode' in document &&
    document.documentMode > 8 &&
    document.documentMode <= 11
  )
);

var topLevelTypes = EventConstants.topLevelTypes;
var currentComposition = null;

// Events and their corresponding property names.
var eventTypes = {
  compositionEnd: {
    phasedRegistrationNames: {
      bubbled: keyOf({onCompositionEnd: null}),
      captured: keyOf({onCompositionEndCapture: null})
    },
    dependencies: [
      topLevelTypes.topBlur,
      topLevelTypes.topCompositionEnd,
      topLevelTypes.topKeyDown,
      topLevelTypes.topKeyPress,
      topLevelTypes.topKeyUp,
      topLevelTypes.topMouseDown
    ]
  },
  compositionStart: {
    phasedRegistrationNames: {
      bubbled: keyOf({onCompositionStart: null}),
      captured: keyOf({onCompositionStartCapture: null})
    },
    dependencies: [
      topLevelTypes.topBlur,
      topLevelTypes.topCompositionStart,
      topLevelTypes.topKeyDown,
      topLevelTypes.topKeyPress,
      topLevelTypes.topKeyUp,
      topLevelTypes.topMouseDown
    ]
  },
  compositionUpdate: {
    phasedRegistrationNames: {
      bubbled: keyOf({onCompositionUpdate: null}),
      captured: keyOf({onCompositionUpdateCapture: null})
    },
    dependencies: [
      topLevelTypes.topBlur,
      topLevelTypes.topCompositionUpdate,
      topLevelTypes.topKeyDown,
      topLevelTypes.topKeyPress,
      topLevelTypes.topKeyUp,
      topLevelTypes.topMouseDown
    ]
  }
};

/**
 * Translate native top level events into event types.
 *
 * @param {string} topLevelType
 * @return {object}
 */
function getCompositionEventType(topLevelType) {
  switch (topLevelType) {
    case topLevelTypes.topCompositionStart:
      return eventTypes.compositionStart;
    case topLevelTypes.topCompositionEnd:
      return eventTypes.compositionEnd;
    case topLevelTypes.topCompositionUpdate:
      return eventTypes.compositionUpdate;
  }
}

/**
 * Does our fallback best-guess model think this event signifies that
 * composition has begun?
 *
 * @param {string} topLevelType
 * @param {object} nativeEvent
 * @return {boolean}
 */
function isFallbackStart(topLevelType, nativeEvent) {
  return (
    topLevelType === topLevelTypes.topKeyDown &&
    nativeEvent.keyCode === START_KEYCODE
  );
}

/**
 * Does our fallback mode think that this event is the end of composition?
 *
 * @param {string} topLevelType
 * @param {object} nativeEvent
 * @return {boolean}
 */
function isFallbackEnd(topLevelType, nativeEvent) {
  switch (topLevelType) {
    case topLevelTypes.topKeyUp:
      // Command keys insert or clear IME input.
      return (END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1);
    case topLevelTypes.topKeyDown:
      // Expect IME keyCode on each keydown. If we get any other
      // code we must have exited earlier.
      return (nativeEvent.keyCode !== START_KEYCODE);
    case topLevelTypes.topKeyPress:
    case topLevelTypes.topMouseDown:
    case topLevelTypes.topBlur:
      // Events are not possible without cancelling IME.
      return true;
    default:
      return false;
  }
}

/**
 * Helper class stores information about selection and document state
 * so we can figure out what changed at a later date.
 *
 * @param {DOMEventTarget} root
 */
function FallbackCompositionState(root) {
  this.root = root;
  this.startSelection = ReactInputSelection.getSelection(root);
  this.startValue = this.getText();
}

/**
 * Get current text of input.
 *
 * @return {string}
 */
FallbackCompositionState.prototype.getText = function() {
  return this.root.value || this.root[getTextContentAccessor()];
};

/**
 * Text that has changed since the start of composition.
 *
 * @return {string}
 */
FallbackCompositionState.prototype.getData = function() {
  var endValue = this.getText();
  var prefixLength = this.startSelection.start;
  var suffixLength = this.startValue.length - this.startSelection.end;

  return endValue.substr(
    prefixLength,
    endValue.length - suffixLength - prefixLength
  );
};

/**
 * This plugin creates `onCompositionStart`, `onCompositionUpdate` and
 * `onCompositionEnd` events on inputs, textareas and contentEditable
 * nodes.
 */
var CompositionEventPlugin = {

  eventTypes: eventTypes,

  /**
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @see {EventPluginHub.extractEvents}
   */
  extractEvents: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent) {

    var eventType;
    var data;

    if (useCompositionEvent) {
      eventType = getCompositionEventType(topLevelType);
    } else if (!currentComposition) {
      if (isFallbackStart(topLevelType, nativeEvent)) {
        eventType = eventTypes.compositionStart;
      }
    } else if (isFallbackEnd(topLevelType, nativeEvent)) {
      eventType = eventTypes.compositionEnd;
    }

    if (useFallbackData) {
      // The current composition is stored statically and must not be
      // overwritten while composition continues.
      if (!currentComposition && eventType === eventTypes.compositionStart) {
        currentComposition = new FallbackCompositionState(topLevelTarget);
      } else if (eventType === eventTypes.compositionEnd) {
        if (currentComposition) {
          data = currentComposition.getData();
          currentComposition = null;
        }
      }
    }

    if (eventType) {
      var event = SyntheticCompositionEvent.getPooled(
        eventType,
        topLevelTargetID,
        nativeEvent
      );
      if (data) {
        // Inject data generated from fallback path into the synthetic event.
        // This matches the property of native CompositionEventInterface.
        event.data = data;
      }
      EventPropagators.accumulateTwoPhaseDispatches(event);
      return event;
    }
  }
};

module.exports = CompositionEventPlugin;

},{"./EventConstants":16,"./EventPropagators":21,"./ExecutionEnvironment":22,"./ReactInputSelection":59,"./SyntheticCompositionEvent":85,"./getTextContentAccessor":121,"./keyOf":133}],10:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule DOMChildrenOperations
 * @typechecks static-only
 */

"use strict";

var Danger = _dereq_("./Danger");
var ReactMultiChildUpdateTypes = _dereq_("./ReactMultiChildUpdateTypes");

var getTextContentAccessor = _dereq_("./getTextContentAccessor");
var invariant = _dereq_("./invariant");

/**
 * The DOM property to use when setting text content.
 *
 * @type {string}
 * @private
 */
var textContentAccessor = getTextContentAccessor();

/**
 * Inserts `childNode` as a child of `parentNode` at the `index`.
 *
 * @param {DOMElement} parentNode Parent node in which to insert.
 * @param {DOMElement} childNode Child node to insert.
 * @param {number} index Index at which to insert the child.
 * @internal
 */
function insertChildAt(parentNode, childNode, index) {
  // By exploiting arrays returning `undefined` for an undefined index, we can
  // rely exclusively on `insertBefore(node, null)` instead of also using
  // `appendChild(node)`. However, using `undefined` is not allowed by all
  // browsers so we must replace it with `null`.
  parentNode.insertBefore(
    childNode,
    parentNode.childNodes[index] || null
  );
}

var updateTextContent;
if (textContentAccessor === 'textContent') {
  /**
   * Sets the text content of `node` to `text`.
   *
   * @param {DOMElement} node Node to change
   * @param {string} text New text content
   */
  updateTextContent = function(node, text) {
    node.textContent = text;
  };
} else {
  /**
   * Sets the text content of `node` to `text`.
   *
   * @param {DOMElement} node Node to change
   * @param {string} text New text content
   */
  updateTextContent = function(node, text) {
    // In order to preserve newlines correctly, we can't use .innerText to set
    // the contents (see #1080), so we empty the element then append a text node
    while (node.firstChild) {
      node.removeChild(node.firstChild);
    }
    if (text) {
      var doc = node.ownerDocument || document;
      node.appendChild(doc.createTextNode(text));
    }
  };
}

/**
 * Operations for updating with DOM children.
 */
var DOMChildrenOperations = {

  dangerouslyReplaceNodeWithMarkup: Danger.dangerouslyReplaceNodeWithMarkup,

  updateTextContent: updateTextContent,

  /**
   * Updates a component's children by processing a series of updates. The
   * update configurations are each expected to have a `parentNode` property.
   *
   * @param {array<object>} updates List of update configurations.
   * @param {array<string>} markupList List of markup strings.
   * @internal
   */
  processUpdates: function(updates, markupList) {
    var update;
    // Mapping from parent IDs to initial child orderings.
    var initialChildren = null;
    // List of children that will be moved or removed.
    var updatedChildren = null;

    for (var i = 0; update = updates[i]; i++) {
      if (update.type === ReactMultiChildUpdateTypes.MOVE_EXISTING ||
          update.type === ReactMultiChildUpdateTypes.REMOVE_NODE) {
        var updatedIndex = update.fromIndex;
        var updatedChild = update.parentNode.childNodes[updatedIndex];
        var parentID = update.parentID;

        ("production" !== "development" ? invariant(
          updatedChild,
          'processUpdates(): Unable to find child %s of element. This ' +
          'probably means the DOM was unexpectedly mutated (e.g., by the ' +
          'browser), usually due to forgetting a <tbody> when using tables, ' +
          'nesting tags like <form>, <p>, or <a>, or using non-SVG elements '+
          'in an <svg> parent. Try inspecting the child nodes of the element ' +
          'with React ID `%s`.',
          updatedIndex,
          parentID
        ) : invariant(updatedChild));

        initialChildren = initialChildren || {};
        initialChildren[parentID] = initialChildren[parentID] || [];
        initialChildren[parentID][updatedIndex] = updatedChild;

        updatedChildren = updatedChildren || [];
        updatedChildren.push(updatedChild);
      }
    }

    var renderedMarkup = Danger.dangerouslyRenderMarkup(markupList);

    // Remove updated children first so that `toIndex` is consistent.
    if (updatedChildren) {
      for (var j = 0; j < updatedChildren.length; j++) {
        updatedChildren[j].parentNode.removeChild(updatedChildren[j]);
      }
    }

    for (var k = 0; update = updates[k]; k++) {
      switch (update.type) {
        case ReactMultiChildUpdateTypes.INSERT_MARKUP:
          insertChildAt(
            update.parentNode,
            renderedMarkup[update.markupIndex],
            update.toIndex
          );
          break;
        case ReactMultiChildUpdateTypes.MOVE_EXISTING:
          insertChildAt(
            update.parentNode,
            initialChildren[update.parentID][update.fromIndex],
            update.toIndex
          );
          break;
        case ReactMultiChildUpdateTypes.TEXT_CONTENT:
          updateTextContent(
            update.parentNode,
            update.textContent
          );
          break;
        case ReactMultiChildUpdateTypes.REMOVE_NODE:
          // Already removed by the for-loop above.
          break;
      }
    }
  }

};

module.exports = DOMChildrenOperations;

},{"./Danger":13,"./ReactMultiChildUpdateTypes":65,"./getTextContentAccessor":121,"./invariant":126}],11:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule DOMProperty
 * @typechecks static-only
 */

/*jslint bitwise: true */

"use strict";

var invariant = _dereq_("./invariant");

function checkMask(value, bitmask) {
  return (value & bitmask) === bitmask;
}

var DOMPropertyInjection = {
  /**
   * Mapping from normalized, camelcased property names to a configuration that
   * specifies how the associated DOM property should be accessed or rendered.
   */
  MUST_USE_ATTRIBUTE: 0x1,
  MUST_USE_PROPERTY: 0x2,
  HAS_SIDE_EFFECTS: 0x4,
  HAS_BOOLEAN_VALUE: 0x8,
  HAS_NUMERIC_VALUE: 0x10,
  HAS_POSITIVE_NUMERIC_VALUE: 0x20 | 0x10,
  HAS_OVERLOADED_BOOLEAN_VALUE: 0x40,

  /**
   * Inject some specialized knowledge about the DOM. This takes a config object
   * with the following properties:
   *
   * isCustomAttribute: function that given an attribute name will return true
   * if it can be inserted into the DOM verbatim. Useful for data-* or aria-*
   * attributes where it's impossible to enumerate all of the possible
   * attribute names,
   *
   * Properties: object mapping DOM property name to one of the
   * DOMPropertyInjection constants or null. If your attribute isn't in here,
   * it won't get written to the DOM.
   *
   * DOMAttributeNames: object mapping React attribute name to the DOM
   * attribute name. Attribute names not specified use the **lowercase**
   * normalized name.
   *
   * DOMPropertyNames: similar to DOMAttributeNames but for DOM properties.
   * Property names not specified use the normalized name.
   *
   * DOMMutationMethods: Properties that require special mutation methods. If
   * `value` is undefined, the mutation method should unset the property.
   *
   * @param {object} domPropertyConfig the config as described above.
   */
  injectDOMPropertyConfig: function(domPropertyConfig) {
    var Properties = domPropertyConfig.Properties || {};
    var DOMAttributeNames = domPropertyConfig.DOMAttributeNames || {};
    var DOMPropertyNames = domPropertyConfig.DOMPropertyNames || {};
    var DOMMutationMethods = domPropertyConfig.DOMMutationMethods || {};

    if (domPropertyConfig.isCustomAttribute) {
      DOMProperty._isCustomAttributeFunctions.push(
        domPropertyConfig.isCustomAttribute
      );
    }

    for (var propName in Properties) {
      ("production" !== "development" ? invariant(
        !DOMProperty.isStandardName.hasOwnProperty(propName),
        'injectDOMPropertyConfig(...): You\'re trying to inject DOM property ' +
        '\'%s\' which has already been injected. You may be accidentally ' +
        'injecting the same DOM property config twice, or you may be ' +
        'injecting two configs that have conflicting property names.',
        propName
      ) : invariant(!DOMProperty.isStandardName.hasOwnProperty(propName)));

      DOMProperty.isStandardName[propName] = true;

      var lowerCased = propName.toLowerCase();
      DOMProperty.getPossibleStandardName[lowerCased] = propName;

      if (DOMAttributeNames.hasOwnProperty(propName)) {
        var attributeName = DOMAttributeNames[propName];
        DOMProperty.getPossibleStandardName[attributeName] = propName;
        DOMProperty.getAttributeName[propName] = attributeName;
      } else {
        DOMProperty.getAttributeName[propName] = lowerCased;
      }

      DOMProperty.getPropertyName[propName] =
        DOMPropertyNames.hasOwnProperty(propName) ?
          DOMPropertyNames[propName] :
          propName;

      if (DOMMutationMethods.hasOwnProperty(propName)) {
        DOMProperty.getMutationMethod[propName] = DOMMutationMethods[propName];
      } else {
        DOMProperty.getMutationMethod[propName] = null;
      }

      var propConfig = Properties[propName];
      DOMProperty.mustUseAttribute[propName] =
        checkMask(propConfig, DOMPropertyInjection.MUST_USE_ATTRIBUTE);
      DOMProperty.mustUseProperty[propName] =
        checkMask(propConfig, DOMPropertyInjection.MUST_USE_PROPERTY);
      DOMProperty.hasSideEffects[propName] =
        checkMask(propConfig, DOMPropertyInjection.HAS_SIDE_EFFECTS);
      DOMProperty.hasBooleanValue[propName] =
        checkMask(propConfig, DOMPropertyInjection.HAS_BOOLEAN_VALUE);
      DOMProperty.hasNumericValue[propName] =
        checkMask(propConfig, DOMPropertyInjection.HAS_NUMERIC_VALUE);
      DOMProperty.hasPositiveNumericValue[propName] =
        checkMask(propConfig, DOMPropertyInjection.HAS_POSITIVE_NUMERIC_VALUE);
      DOMProperty.hasOverloadedBooleanValue[propName] =
        checkMask(propConfig, DOMPropertyInjection.HAS_OVERLOADED_BOOLEAN_VALUE);

      ("production" !== "development" ? invariant(
        !DOMProperty.mustUseAttribute[propName] ||
          !DOMProperty.mustUseProperty[propName],
        'DOMProperty: Cannot require using both attribute and property: %s',
        propName
      ) : invariant(!DOMProperty.mustUseAttribute[propName] ||
        !DOMProperty.mustUseProperty[propName]));
      ("production" !== "development" ? invariant(
        DOMProperty.mustUseProperty[propName] ||
          !DOMProperty.hasSideEffects[propName],
        'DOMProperty: Properties that have side effects must use property: %s',
        propName
      ) : invariant(DOMProperty.mustUseProperty[propName] ||
        !DOMProperty.hasSideEffects[propName]));
      ("production" !== "development" ? invariant(
        !!DOMProperty.hasBooleanValue[propName] +
          !!DOMProperty.hasNumericValue[propName] +
          !!DOMProperty.hasOverloadedBooleanValue[propName] <= 1,
        'DOMProperty: Value can be one of boolean, overloaded boolean, or ' +
        'numeric value, but not a combination: %s',
        propName
      ) : invariant(!!DOMProperty.hasBooleanValue[propName] +
        !!DOMProperty.hasNumericValue[propName] +
        !!DOMProperty.hasOverloadedBooleanValue[propName] <= 1));
    }
  }
};
var defaultValueCache = {};

/**
 * DOMProperty exports lookup objects that can be used like functions:
 *
 *   > DOMProperty.isValid['id']
 *   true
 *   > DOMProperty.isValid['foobar']
 *   undefined
 *
 * Although this may be confusing, it performs better in general.
 *
 * @see http://jsperf.com/key-exists
 * @see http://jsperf.com/key-missing
 */
var DOMProperty = {

  ID_ATTRIBUTE_NAME: 'data-reactid',

  /**
   * Checks whether a property name is a standard property.
   * @type {Object}
   */
  isStandardName: {},

  /**
   * Mapping from lowercase property names to the properly cased version, used
   * to warn in the case of missing properties.
   * @type {Object}
   */
  getPossibleStandardName: {},

  /**
   * Mapping from normalized names to attribute names that differ. Attribute
   * names are used when rendering markup or with `*Attribute()`.
   * @type {Object}
   */
  getAttributeName: {},

  /**
   * Mapping from normalized names to properties on DOM node instances.
   * (This includes properties that mutate due to external factors.)
   * @type {Object}
   */
  getPropertyName: {},

  /**
   * Mapping from normalized names to mutation methods. This will only exist if
   * mutation cannot be set simply by the property or `setAttribute()`.
   * @type {Object}
   */
  getMutationMethod: {},

  /**
   * Whether the property must be accessed and mutated as an object property.
   * @type {Object}
   */
  mustUseAttribute: {},

  /**
   * Whether the property must be accessed and mutated using `*Attribute()`.
   * (This includes anything that fails `<propName> in <element>`.)
   * @type {Object}
   */
  mustUseProperty: {},

  /**
   * Whether or not setting a value causes side effects such as triggering
   * resources to be loaded or text selection changes. We must ensure that
   * the value is only set if it has changed.
   * @type {Object}
   */
  hasSideEffects: {},

  /**
   * Whether the property should be removed when set to a falsey value.
   * @type {Object}
   */
  hasBooleanValue: {},

  /**
   * Whether the property must be numeric or parse as a
   * numeric and should be removed when set to a falsey value.
   * @type {Object}
   */
  hasNumericValue: {},

  /**
   * Whether the property must be positive numeric or parse as a positive
   * numeric and should be removed when set to a falsey value.
   * @type {Object}
   */
  hasPositiveNumericValue: {},

  /**
   * Whether the property can be used as a flag as well as with a value. Removed
   * when strictly equal to false; present without a value when strictly equal
   * to true; present with a value otherwise.
   * @type {Object}
   */
  hasOverloadedBooleanValue: {},

  /**
   * All of the isCustomAttribute() functions that have been injected.
   */
  _isCustomAttributeFunctions: [],

  /**
   * Checks whether a property name is a custom attribute.
   * @method
   */
  isCustomAttribute: function(attributeName) {
    for (var i = 0; i < DOMProperty._isCustomAttributeFunctions.length; i++) {
      var isCustomAttributeFn = DOMProperty._isCustomAttributeFunctions[i];
      if (isCustomAttributeFn(attributeName)) {
        return true;
      }
    }
    return false;
  },

  /**
   * Returns the default property value for a DOM property (i.e., not an
   * attribute). Most default values are '' or false, but not all. Worse yet,
   * some (in particular, `type`) vary depending on the type of element.
   *
   * TODO: Is it better to grab all the possible properties when creating an
   * element to avoid having to create the same element twice?
   */
  getDefaultValueForProperty: function(nodeName, prop) {
    var nodeDefaults = defaultValueCache[nodeName];
    var testElement;
    if (!nodeDefaults) {
      defaultValueCache[nodeName] = nodeDefaults = {};
    }
    if (!(prop in nodeDefaults)) {
      testElement = document.createElement(nodeName);
      nodeDefaults[prop] = testElement[prop];
    }
    return nodeDefaults[prop];
  },

  injection: DOMPropertyInjection
};

module.exports = DOMProperty;

},{"./invariant":126}],12:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule DOMPropertyOperations
 * @typechecks static-only
 */

"use strict";

var DOMProperty = _dereq_("./DOMProperty");

var escapeTextForBrowser = _dereq_("./escapeTextForBrowser");
var memoizeStringOnly = _dereq_("./memoizeStringOnly");
var warning = _dereq_("./warning");

function shouldIgnoreValue(name, value) {
  return value == null ||
    (DOMProperty.hasBooleanValue[name] && !value) ||
    (DOMProperty.hasNumericValue[name] && isNaN(value)) ||
    (DOMProperty.hasPositiveNumericValue[name] && (value < 1)) ||
    (DOMProperty.hasOverloadedBooleanValue[name] && value === false);
}

var processAttributeNameAndPrefix = memoizeStringOnly(function(name) {
  return escapeTextForBrowser(name) + '="';
});

if ("production" !== "development") {
  var reactProps = {
    children: true,
    dangerouslySetInnerHTML: true,
    key: true,
    ref: true
  };
  var warnedProperties = {};

  var warnUnknownProperty = function(name) {
    if (reactProps.hasOwnProperty(name) && reactProps[name] ||
        warnedProperties.hasOwnProperty(name) && warnedProperties[name]) {
      return;
    }

    warnedProperties[name] = true;
    var lowerCasedName = name.toLowerCase();

    // data-* attributes should be lowercase; suggest the lowercase version
    var standardName = (
      DOMProperty.isCustomAttribute(lowerCasedName) ?
        lowerCasedName :
      DOMProperty.getPossibleStandardName.hasOwnProperty(lowerCasedName) ?
        DOMProperty.getPossibleStandardName[lowerCasedName] :
        null
    );

    // For now, only warn when we have a suggested correction. This prevents
    // logging too much when using transferPropsTo.
    ("production" !== "development" ? warning(
      standardName == null,
      'Unknown DOM property ' + name + '. Did you mean ' + standardName + '?'
    ) : null);

  };
}

/**
 * Operations for dealing with DOM properties.
 */
var DOMPropertyOperations = {

  /**
   * Creates markup for the ID property.
   *
   * @param {string} id Unescaped ID.
   * @return {string} Markup string.
   */
  createMarkupForID: function(id) {
    return processAttributeNameAndPrefix(DOMProperty.ID_ATTRIBUTE_NAME) +
      escapeTextForBrowser(id) + '"';
  },

  /**
   * Creates markup for a property.
   *
   * @param {string} name
   * @param {*} value
   * @return {?string} Markup string, or null if the property was invalid.
   */
  createMarkupForProperty: function(name, value) {
    if (DOMProperty.isStandardName.hasOwnProperty(name) &&
        DOMProperty.isStandardName[name]) {
      if (shouldIgnoreValue(name, value)) {
        return '';
      }
      var attributeName = DOMProperty.getAttributeName[name];
      if (DOMProperty.hasBooleanValue[name] ||
          (DOMProperty.hasOverloadedBooleanValue[name] && value === true)) {
        return escapeTextForBrowser(attributeName);
      }
      return processAttributeNameAndPrefix(attributeName) +
        escapeTextForBrowser(value) + '"';
    } else if (DOMProperty.isCustomAttribute(name)) {
      if (value == null) {
        return '';
      }
      return processAttributeNameAndPrefix(name) +
        escapeTextForBrowser(value) + '"';
    } else if ("production" !== "development") {
      warnUnknownProperty(name);
    }
    return null;
  },

  /**
   * Sets the value for a property on a node.
   *
   * @param {DOMElement} node
   * @param {string} name
   * @param {*} value
   */
  setValueForProperty: function(node, name, value) {
    if (DOMProperty.isStandardName.hasOwnProperty(name) &&
        DOMProperty.isStandardName[name]) {
      var mutationMethod = DOMProperty.getMutationMethod[name];
      if (mutationMethod) {
        mutationMethod(node, value);
      } else if (shouldIgnoreValue(name, value)) {
        this.deleteValueForProperty(node, name);
      } else if (DOMProperty.mustUseAttribute[name]) {
        // `setAttribute` with objects becomes only `[object]` in IE8/9,
        // ('' + value) makes it output the correct toString()-value.
        node.setAttribute(DOMProperty.getAttributeName[name], '' + value);
      } else {
        var propName = DOMProperty.getPropertyName[name];
        // Must explicitly cast values for HAS_SIDE_EFFECTS-properties to the
        // property type before comparing; only `value` does and is string.
        if (!DOMProperty.hasSideEffects[name] ||
            ('' + node[propName]) !== ('' + value)) {
          // Contrary to `setAttribute`, object properties are properly
          // `toString`ed by IE8/9.
          node[propName] = value;
        }
      }
    } else if (DOMProperty.isCustomAttribute(name)) {
      if (value == null) {
        node.removeAttribute(name);
      } else {
        node.setAttribute(name, '' + value);
      }
    } else if ("production" !== "development") {
      warnUnknownProperty(name);
    }
  },

  /**
   * Deletes the value for a property on a node.
   *
   * @param {DOMElement} node
   * @param {string} name
   */
  deleteValueForProperty: function(node, name) {
    if (DOMProperty.isStandardName.hasOwnProperty(name) &&
        DOMProperty.isStandardName[name]) {
      var mutationMethod = DOMProperty.getMutationMethod[name];
      if (mutationMethod) {
        mutationMethod(node, undefined);
      } else if (DOMProperty.mustUseAttribute[name]) {
        node.removeAttribute(DOMProperty.getAttributeName[name]);
      } else {
        var propName = DOMProperty.getPropertyName[name];
        var defaultValue = DOMProperty.getDefaultValueForProperty(
          node.nodeName,
          propName
        );
        if (!DOMProperty.hasSideEffects[name] ||
            ('' + node[propName]) !== defaultValue) {
          node[propName] = defaultValue;
        }
      }
    } else if (DOMProperty.isCustomAttribute(name)) {
      node.removeAttribute(name);
    } else if ("production" !== "development") {
      warnUnknownProperty(name);
    }
  }

};

module.exports = DOMPropertyOperations;

},{"./DOMProperty":11,"./escapeTextForBrowser":109,"./memoizeStringOnly":135,"./warning":145}],13:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule Danger
 * @typechecks static-only
 */

/*jslint evil: true, sub: true */

"use strict";

var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");

var createNodesFromMarkup = _dereq_("./createNodesFromMarkup");
var emptyFunction = _dereq_("./emptyFunction");
var getMarkupWrap = _dereq_("./getMarkupWrap");
var invariant = _dereq_("./invariant");

var OPEN_TAG_NAME_EXP = /^(<[^ \/>]+)/;
var RESULT_INDEX_ATTR = 'data-danger-index';

/**
 * Extracts the `nodeName` from a string of markup.
 *
 * NOTE: Extracting the `nodeName` does not require a regular expression match
 * because we make assumptions about React-generated markup (i.e. there are no
 * spaces surrounding the opening tag and there is at least one attribute).
 *
 * @param {string} markup String of markup.
 * @return {string} Node name of the supplied markup.
 * @see http://jsperf.com/extract-nodename
 */
function getNodeName(markup) {
  return markup.substring(1, markup.indexOf(' '));
}

var Danger = {

  /**
   * Renders markup into an array of nodes. The markup is expected to render
   * into a list of root nodes. Also, the length of `resultList` and
   * `markupList` should be the same.
   *
   * @param {array<string>} markupList List of markup strings to render.
   * @return {array<DOMElement>} List of rendered nodes.
   * @internal
   */
  dangerouslyRenderMarkup: function(markupList) {
    ("production" !== "development" ? invariant(
      ExecutionEnvironment.canUseDOM,
      'dangerouslyRenderMarkup(...): Cannot render markup in a worker ' +
      'thread. Make sure `window` and `document` are available globally ' +
      'before requiring React when unit testing or use ' +
      'React.renderToString for server rendering.'
    ) : invariant(ExecutionEnvironment.canUseDOM));
    var nodeName;
    var markupByNodeName = {};
    // Group markup by `nodeName` if a wrap is necessary, else by '*'.
    for (var i = 0; i < markupList.length; i++) {
      ("production" !== "development" ? invariant(
        markupList[i],
        'dangerouslyRenderMarkup(...): Missing markup.'
      ) : invariant(markupList[i]));
      nodeName = getNodeName(markupList[i]);
      nodeName = getMarkupWrap(nodeName) ? nodeName : '*';
      markupByNodeName[nodeName] = markupByNodeName[nodeName] || [];
      markupByNodeName[nodeName][i] = markupList[i];
    }
    var resultList = [];
    var resultListAssignmentCount = 0;
    for (nodeName in markupByNodeName) {
      if (!markupByNodeName.hasOwnProperty(nodeName)) {
        continue;
      }
      var markupListByNodeName = markupByNodeName[nodeName];

      // This for-in loop skips the holes of the sparse array. The order of
      // iteration should follow the order of assignment, which happens to match
      // numerical index order, but we don't rely on that.
      for (var resultIndex in markupListByNodeName) {
        if (markupListByNodeName.hasOwnProperty(resultIndex)) {
          var markup = markupListByNodeName[resultIndex];

          // Push the requested markup with an additional RESULT_INDEX_ATTR
          // attribute.  If the markup does not start with a < character, it
          // will be discarded below (with an appropriate console.error).
          markupListByNodeName[resultIndex] = markup.replace(
            OPEN_TAG_NAME_EXP,
            // This index will be parsed back out below.
            '$1 ' + RESULT_INDEX_ATTR + '="' + resultIndex + '" '
          );
        }
      }

      // Render each group of markup with similar wrapping `nodeName`.
      var renderNodes = createNodesFromMarkup(
        markupListByNodeName.join(''),
        emptyFunction // Do nothing special with <script> tags.
      );

      for (i = 0; i < renderNodes.length; ++i) {
        var renderNode = renderNodes[i];
        if (renderNode.hasAttribute &&
            renderNode.hasAttribute(RESULT_INDEX_ATTR)) {

          resultIndex = +renderNode.getAttribute(RESULT_INDEX_ATTR);
          renderNode.removeAttribute(RESULT_INDEX_ATTR);

          ("production" !== "development" ? invariant(
            !resultList.hasOwnProperty(resultIndex),
            'Danger: Assigning to an already-occupied result index.'
          ) : invariant(!resultList.hasOwnProperty(resultIndex)));

          resultList[resultIndex] = renderNode;

          // This should match resultList.length and markupList.length when
          // we're done.
          resultListAssignmentCount += 1;

        } else if ("production" !== "development") {
          console.error(
            "Danger: Discarding unexpected node:",
            renderNode
          );
        }
      }
    }

    // Although resultList was populated out of order, it should now be a dense
    // array.
    ("production" !== "development" ? invariant(
      resultListAssignmentCount === resultList.length,
      'Danger: Did not assign to every index of resultList.'
    ) : invariant(resultListAssignmentCount === resultList.length));

    ("production" !== "development" ? invariant(
      resultList.length === markupList.length,
      'Danger: Expected markup to render %s nodes, but rendered %s.',
      markupList.length,
      resultList.length
    ) : invariant(resultList.length === markupList.length));

    return resultList;
  },

  /**
   * Replaces a node with a string of markup at its current position within its
   * parent. The markup must render into a single root node.
   *
   * @param {DOMElement} oldChild Child node to replace.
   * @param {string} markup Markup to render in place of the child node.
   * @internal
   */
  dangerouslyReplaceNodeWithMarkup: function(oldChild, markup) {
    ("production" !== "development" ? invariant(
      ExecutionEnvironment.canUseDOM,
      'dangerouslyReplaceNodeWithMarkup(...): Cannot render markup in a ' +
      'worker thread. Make sure `window` and `document` are available ' +
      'globally before requiring React when unit testing or use ' +
      'React.renderToString for server rendering.'
    ) : invariant(ExecutionEnvironment.canUseDOM));
    ("production" !== "development" ? invariant(markup, 'dangerouslyReplaceNodeWithMarkup(...): Missing markup.') : invariant(markup));
    ("production" !== "development" ? invariant(
      oldChild.tagName.toLowerCase() !== 'html',
      'dangerouslyReplaceNodeWithMarkup(...): Cannot replace markup of the ' +
      '<html> node. This is because browser quirks make this unreliable ' +
      'and/or slow. If you want to render to the root you must use ' +
      'server rendering. See renderComponentToString().'
    ) : invariant(oldChild.tagName.toLowerCase() !== 'html'));

    var newChild = createNodesFromMarkup(markup, emptyFunction)[0];
    oldChild.parentNode.replaceChild(newChild, oldChild);
  }

};

module.exports = Danger;

},{"./ExecutionEnvironment":22,"./createNodesFromMarkup":104,"./emptyFunction":107,"./getMarkupWrap":118,"./invariant":126}],14:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule DefaultEventPluginOrder
 */

"use strict";

 var keyOf = _dereq_("./keyOf");

/**
 * Module that is injectable into `EventPluginHub`, that specifies a
 * deterministic ordering of `EventPlugin`s. A convenient way to reason about
 * plugins, without having to package every one of them. This is better than
 * having plugins be ordered in the same order that they are injected because
 * that ordering would be influenced by the packaging order.
 * `ResponderEventPlugin` must occur before `SimpleEventPlugin` so that
 * preventing default on events is convenient in `SimpleEventPlugin` handlers.
 */
var DefaultEventPluginOrder = [
  keyOf({ResponderEventPlugin: null}),
  keyOf({SimpleEventPlugin: null}),
  keyOf({TapEventPlugin: null}),
  keyOf({EnterLeaveEventPlugin: null}),
  keyOf({ChangeEventPlugin: null}),
  keyOf({SelectEventPlugin: null}),
  keyOf({CompositionEventPlugin: null}),
  keyOf({BeforeInputEventPlugin: null}),
  keyOf({AnalyticsEventPlugin: null}),
  keyOf({MobileSafariClickEventPlugin: null})
];

module.exports = DefaultEventPluginOrder;

},{"./keyOf":133}],15:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule EnterLeaveEventPlugin
 * @typechecks static-only
 */

"use strict";

var EventConstants = _dereq_("./EventConstants");
var EventPropagators = _dereq_("./EventPropagators");
var SyntheticMouseEvent = _dereq_("./SyntheticMouseEvent");

var ReactMount = _dereq_("./ReactMount");
var keyOf = _dereq_("./keyOf");

var topLevelTypes = EventConstants.topLevelTypes;
var getFirstReactDOM = ReactMount.getFirstReactDOM;

var eventTypes = {
  mouseEnter: {
    registrationName: keyOf({onMouseEnter: null}),
    dependencies: [
      topLevelTypes.topMouseOut,
      topLevelTypes.topMouseOver
    ]
  },
  mouseLeave: {
    registrationName: keyOf({onMouseLeave: null}),
    dependencies: [
      topLevelTypes.topMouseOut,
      topLevelTypes.topMouseOver
    ]
  }
};

var extractedEvents = [null, null];

var EnterLeaveEventPlugin = {

  eventTypes: eventTypes,

  /**
   * For almost every interaction we care about, there will be both a top-level
   * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that
   * we do not extract duplicate events. However, moving the mouse into the
   * browser from outside will not fire a `mouseout` event. In this case, we use
   * the `mouseover` top-level event.
   *
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @see {EventPluginHub.extractEvents}
   */
  extractEvents: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent) {
    if (topLevelType === topLevelTypes.topMouseOver &&
        (nativeEvent.relatedTarget || nativeEvent.fromElement)) {
      return null;
    }
    if (topLevelType !== topLevelTypes.topMouseOut &&
        topLevelType !== topLevelTypes.topMouseOver) {
      // Must not be a mouse in or mouse out - ignoring.
      return null;
    }

    var win;
    if (topLevelTarget.window === topLevelTarget) {
      // `topLevelTarget` is probably a window object.
      win = topLevelTarget;
    } else {
      // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
      var doc = topLevelTarget.ownerDocument;
      if (doc) {
        win = doc.defaultView || doc.parentWindow;
      } else {
        win = window;
      }
    }

    var from, to;
    if (topLevelType === topLevelTypes.topMouseOut) {
      from = topLevelTarget;
      to =
        getFirstReactDOM(nativeEvent.relatedTarget || nativeEvent.toElement) ||
        win;
    } else {
      from = win;
      to = topLevelTarget;
    }

    if (from === to) {
      // Nothing pertains to our managed components.
      return null;
    }

    var fromID = from ? ReactMount.getID(from) : '';
    var toID = to ? ReactMount.getID(to) : '';

    var leave = SyntheticMouseEvent.getPooled(
      eventTypes.mouseLeave,
      fromID,
      nativeEvent
    );
    leave.type = 'mouseleave';
    leave.target = from;
    leave.relatedTarget = to;

    var enter = SyntheticMouseEvent.getPooled(
      eventTypes.mouseEnter,
      toID,
      nativeEvent
    );
    enter.type = 'mouseenter';
    enter.target = to;
    enter.relatedTarget = from;

    EventPropagators.accumulateEnterLeaveDispatches(leave, enter, fromID, toID);

    extractedEvents[0] = leave;
    extractedEvents[1] = enter;

    return extractedEvents;
  }

};

module.exports = EnterLeaveEventPlugin;

},{"./EventConstants":16,"./EventPropagators":21,"./ReactMount":63,"./SyntheticMouseEvent":91,"./keyOf":133}],16:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule EventConstants
 */

"use strict";

var keyMirror = _dereq_("./keyMirror");

var PropagationPhases = keyMirror({bubbled: null, captured: null});

/**
 * Types of raw signals from the browser caught at the top level.
 */
var topLevelTypes = keyMirror({
  topBlur: null,
  topChange: null,
  topClick: null,
  topCompositionEnd: null,
  topCompositionStart: null,
  topCompositionUpdate: null,
  topContextMenu: null,
  topCopy: null,
  topCut: null,
  topDoubleClick: null,
  topDrag: null,
  topDragEnd: null,
  topDragEnter: null,
  topDragExit: null,
  topDragLeave: null,
  topDragOver: null,
  topDragStart: null,
  topDrop: null,
  topError: null,
  topFocus: null,
  topInput: null,
  topKeyDown: null,
  topKeyPress: null,
  topKeyUp: null,
  topLoad: null,
  topMouseDown: null,
  topMouseMove: null,
  topMouseOut: null,
  topMouseOver: null,
  topMouseUp: null,
  topPaste: null,
  topReset: null,
  topScroll: null,
  topSelectionChange: null,
  topSubmit: null,
  topTextInput: null,
  topTouchCancel: null,
  topTouchEnd: null,
  topTouchMove: null,
  topTouchStart: null,
  topWheel: null
});

var EventConstants = {
  topLevelTypes: topLevelTypes,
  PropagationPhases: PropagationPhases
};

module.exports = EventConstants;

},{"./keyMirror":132}],17:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule EventListener
 * @typechecks
 */

var emptyFunction = _dereq_("./emptyFunction");

/**
 * Upstream version of event listener. Does not take into account specific
 * nature of platform.
 */
var EventListener = {
  /**
   * Listen to DOM events during the bubble phase.
   *
   * @param {DOMEventTarget} target DOM element to register listener on.
   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
   * @param {function} callback Callback function.
   * @return {object} Object with a `remove` method.
   */
  listen: function(target, eventType, callback) {
    if (target.addEventListener) {
      target.addEventListener(eventType, callback, false);
      return {
        remove: function() {
          target.removeEventListener(eventType, callback, false);
        }
      };
    } else if (target.attachEvent) {
      target.attachEvent('on' + eventType, callback);
      return {
        remove: function() {
          target.detachEvent('on' + eventType, callback);
        }
      };
    }
  },

  /**
   * Listen to DOM events during the capture phase.
   *
   * @param {DOMEventTarget} target DOM element to register listener on.
   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
   * @param {function} callback Callback function.
   * @return {object} Object with a `remove` method.
   */
  capture: function(target, eventType, callback) {
    if (!target.addEventListener) {
      if ("production" !== "development") {
        console.error(
          'Attempted to listen to events during the capture phase on a ' +
          'browser that does not support the capture phase. Your application ' +
          'will not receive some events.'
        );
      }
      return {
        remove: emptyFunction
      };
    } else {
      target.addEventListener(eventType, callback, true);
      return {
        remove: function() {
          target.removeEventListener(eventType, callback, true);
        }
      };
    }
  },

  registerDefault: function() {}
};

module.exports = EventListener;

},{"./emptyFunction":107}],18:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule EventPluginHub
 */

"use strict";

var EventPluginRegistry = _dereq_("./EventPluginRegistry");
var EventPluginUtils = _dereq_("./EventPluginUtils");

var accumulateInto = _dereq_("./accumulateInto");
var forEachAccumulated = _dereq_("./forEachAccumulated");
var invariant = _dereq_("./invariant");

/**
 * Internal store for event listeners
 */
var listenerBank = {};

/**
 * Internal queue of events that have accumulated their dispatches and are
 * waiting to have their dispatches executed.
 */
var eventQueue = null;

/**
 * Dispatches an event and releases it back into the pool, unless persistent.
 *
 * @param {?object} event Synthetic event to be dispatched.
 * @private
 */
var executeDispatchesAndRelease = function(event) {
  if (event) {
    var executeDispatch = EventPluginUtils.executeDispatch;
    // Plugins can provide custom behavior when dispatching events.
    var PluginModule = EventPluginRegistry.getPluginModuleForEvent(event);
    if (PluginModule && PluginModule.executeDispatch) {
      executeDispatch = PluginModule.executeDispatch;
    }
    EventPluginUtils.executeDispatchesInOrder(event, executeDispatch);

    if (!event.isPersistent()) {
      event.constructor.release(event);
    }
  }
};

/**
 * - `InstanceHandle`: [required] Module that performs logical traversals of DOM
 *   hierarchy given ids of the logical DOM elements involved.
 */
var InstanceHandle = null;

function validateInstanceHandle() {
  var invalid = !InstanceHandle||
    !InstanceHandle.traverseTwoPhase ||
    !InstanceHandle.traverseEnterLeave;
  if (invalid) {
    throw new Error('InstanceHandle not injected before use!');
  }
}

/**
 * This is a unified interface for event plugins to be installed and configured.
 *
 * Event plugins can implement the following properties:
 *
 *   `extractEvents` {function(string, DOMEventTarget, string, object): *}
 *     Required. When a top-level event is fired, this method is expected to
 *     extract synthetic events that will in turn be queued and dispatched.
 *
 *   `eventTypes` {object}
 *     Optional, plugins that fire events must publish a mapping of registration
 *     names that are used to register listeners. Values of this mapping must
 *     be objects that contain `registrationName` or `phasedRegistrationNames`.
 *
 *   `executeDispatch` {function(object, function, string)}
 *     Optional, allows plugins to override how an event gets dispatched. By
 *     default, the listener is simply invoked.
 *
 * Each plugin that is injected into `EventsPluginHub` is immediately operable.
 *
 * @public
 */
var EventPluginHub = {

  /**
   * Methods for injecting dependencies.
   */
  injection: {

    /**
     * @param {object} InjectedMount
     * @public
     */
    injectMount: EventPluginUtils.injection.injectMount,

    /**
     * @param {object} InjectedInstanceHandle
     * @public
     */
    injectInstanceHandle: function(InjectedInstanceHandle) {
      InstanceHandle = InjectedInstanceHandle;
      if ("production" !== "development") {
        validateInstanceHandle();
      }
    },

    getInstanceHandle: function() {
      if ("production" !== "development") {
        validateInstanceHandle();
      }
      return InstanceHandle;
    },

    /**
     * @param {array} InjectedEventPluginOrder
     * @public
     */
    injectEventPluginOrder: EventPluginRegistry.injectEventPluginOrder,

    /**
     * @param {object} injectedNamesToPlugins Map from names to plugin modules.
     */
    injectEventPluginsByName: EventPluginRegistry.injectEventPluginsByName

  },

  eventNameDispatchConfigs: EventPluginRegistry.eventNameDispatchConfigs,

  registrationNameModules: EventPluginRegistry.registrationNameModules,

  /**
   * Stores `listener` at `listenerBank[registrationName][id]`. Is idempotent.
   *
   * @param {string} id ID of the DOM element.
   * @param {string} registrationName Name of listener (e.g. `onClick`).
   * @param {?function} listener The callback to store.
   */
  putListener: function(id, registrationName, listener) {
    ("production" !== "development" ? invariant(
      !listener || typeof listener === 'function',
      'Expected %s listener to be a function, instead got type %s',
      registrationName, typeof listener
    ) : invariant(!listener || typeof listener === 'function'));

    var bankForRegistrationName =
      listenerBank[registrationName] || (listenerBank[registrationName] = {});
    bankForRegistrationName[id] = listener;
  },

  /**
   * @param {string} id ID of the DOM element.
   * @param {string} registrationName Name of listener (e.g. `onClick`).
   * @return {?function} The stored callback.
   */
  getListener: function(id, registrationName) {
    var bankForRegistrationName = listenerBank[registrationName];
    return bankForRegistrationName && bankForRegistrationName[id];
  },

  /**
   * Deletes a listener from the registration bank.
   *
   * @param {string} id ID of the DOM element.
   * @param {string} registrationName Name of listener (e.g. `onClick`).
   */
  deleteListener: function(id, registrationName) {
    var bankForRegistrationName = listenerBank[registrationName];
    if (bankForRegistrationName) {
      delete bankForRegistrationName[id];
    }
  },

  /**
   * Deletes all listeners for the DOM element with the supplied ID.
   *
   * @param {string} id ID of the DOM element.
   */
  deleteAllListeners: function(id) {
    for (var registrationName in listenerBank) {
      delete listenerBank[registrationName][id];
    }
  },

  /**
   * Allows registered plugins an opportunity to extract events from top-level
   * native browser events.
   *
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @internal
   */
  extractEvents: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent) {
    var events;
    var plugins = EventPluginRegistry.plugins;
    for (var i = 0, l = plugins.length; i < l; i++) {
      // Not every plugin in the ordering may be loaded at runtime.
      var possiblePlugin = plugins[i];
      if (possiblePlugin) {
        var extractedEvents = possiblePlugin.extractEvents(
          topLevelType,
          topLevelTarget,
          topLevelTargetID,
          nativeEvent
        );
        if (extractedEvents) {
          events = accumulateInto(events, extractedEvents);
        }
      }
    }
    return events;
  },

  /**
   * Enqueues a synthetic event that should be dispatched when
   * `processEventQueue` is invoked.
   *
   * @param {*} events An accumulation of synthetic events.
   * @internal
   */
  enqueueEvents: function(events) {
    if (events) {
      eventQueue = accumulateInto(eventQueue, events);
    }
  },

  /**
   * Dispatches all synthetic events on the event queue.
   *
   * @internal
   */
  processEventQueue: function() {
    // Set `eventQueue` to null before processing it so that we can tell if more
    // events get enqueued while processing.
    var processingEventQueue = eventQueue;
    eventQueue = null;
    forEachAccumulated(processingEventQueue, executeDispatchesAndRelease);
    ("production" !== "development" ? invariant(
      !eventQueue,
      'processEventQueue(): Additional events were enqueued while processing ' +
      'an event queue. Support for this has not yet been implemented.'
    ) : invariant(!eventQueue));
  },

  /**
   * These are needed for tests only. Do not use!
   */
  __purge: function() {
    listenerBank = {};
  },

  __getListenerBank: function() {
    return listenerBank;
  }

};

module.exports = EventPluginHub;

},{"./EventPluginRegistry":19,"./EventPluginUtils":20,"./accumulateInto":97,"./forEachAccumulated":112,"./invariant":126}],19:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule EventPluginRegistry
 * @typechecks static-only
 */

"use strict";

var invariant = _dereq_("./invariant");

/**
 * Injectable ordering of event plugins.
 */
var EventPluginOrder = null;

/**
 * Injectable mapping from names to event plugin modules.
 */
var namesToPlugins = {};

/**
 * Recomputes the plugin list using the injected plugins and plugin ordering.
 *
 * @private
 */
function recomputePluginOrdering() {
  if (!EventPluginOrder) {
    // Wait until an `EventPluginOrder` is injected.
    return;
  }
  for (var pluginName in namesToPlugins) {
    var PluginModule = namesToPlugins[pluginName];
    var pluginIndex = EventPluginOrder.indexOf(pluginName);
    ("production" !== "development" ? invariant(
      pluginIndex > -1,
      'EventPluginRegistry: Cannot inject event plugins that do not exist in ' +
      'the plugin ordering, `%s`.',
      pluginName
    ) : invariant(pluginIndex > -1));
    if (EventPluginRegistry.plugins[pluginIndex]) {
      continue;
    }
    ("production" !== "development" ? invariant(
      PluginModule.extractEvents,
      'EventPluginRegistry: Event plugins must implement an `extractEvents` ' +
      'method, but `%s` does not.',
      pluginName
    ) : invariant(PluginModule.extractEvents));
    EventPluginRegistry.plugins[pluginIndex] = PluginModule;
    var publishedEvents = PluginModule.eventTypes;
    for (var eventName in publishedEvents) {
      ("production" !== "development" ? invariant(
        publishEventForPlugin(
          publishedEvents[eventName],
          PluginModule,
          eventName
        ),
        'EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.',
        eventName,
        pluginName
      ) : invariant(publishEventForPlugin(
        publishedEvents[eventName],
        PluginModule,
        eventName
      )));
    }
  }
}

/**
 * Publishes an event so that it can be dispatched by the supplied plugin.
 *
 * @param {object} dispatchConfig Dispatch configuration for the event.
 * @param {object} PluginModule Plugin publishing the event.
 * @return {boolean} True if the event was successfully published.
 * @private
 */
function publishEventForPlugin(dispatchConfig, PluginModule, eventName) {
  ("production" !== "development" ? invariant(
    !EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName),
    'EventPluginHub: More than one plugin attempted to publish the same ' +
    'event name, `%s`.',
    eventName
  ) : invariant(!EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName)));
  EventPluginRegistry.eventNameDispatchConfigs[eventName] = dispatchConfig;

  var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;
  if (phasedRegistrationNames) {
    for (var phaseName in phasedRegistrationNames) {
      if (phasedRegistrationNames.hasOwnProperty(phaseName)) {
        var phasedRegistrationName = phasedRegistrationNames[phaseName];
        publishRegistrationName(
          phasedRegistrationName,
          PluginModule,
          eventName
        );
      }
    }
    return true;
  } else if (dispatchConfig.registrationName) {
    publishRegistrationName(
      dispatchConfig.registrationName,
      PluginModule,
      eventName
    );
    return true;
  }
  return false;
}

/**
 * Publishes a registration name that is used to identify dispatched events and
 * can be used with `EventPluginHub.putListener` to register listeners.
 *
 * @param {string} registrationName Registration name to add.
 * @param {object} PluginModule Plugin publishing the event.
 * @private
 */
function publishRegistrationName(registrationName, PluginModule, eventName) {
  ("production" !== "development" ? invariant(
    !EventPluginRegistry.registrationNameModules[registrationName],
    'EventPluginHub: More than one plugin attempted to publish the same ' +
    'registration name, `%s`.',
    registrationName
  ) : invariant(!EventPluginRegistry.registrationNameModules[registrationName]));
  EventPluginRegistry.registrationNameModules[registrationName] = PluginModule;
  EventPluginRegistry.registrationNameDependencies[registrationName] =
    PluginModule.eventTypes[eventName].dependencies;
}

/**
 * Registers plugins so that they can extract and dispatch events.
 *
 * @see {EventPluginHub}
 */
var EventPluginRegistry = {

  /**
   * Ordered list of injected plugins.
   */
  plugins: [],

  /**
   * Mapping from event name to dispatch config
   */
  eventNameDispatchConfigs: {},

  /**
   * Mapping from registration name to plugin module
   */
  registrationNameModules: {},

  /**
   * Mapping from registration name to event name
   */
  registrationNameDependencies: {},

  /**
   * Injects an ordering of plugins (by plugin name). This allows the ordering
   * to be decoupled from injection of the actual plugins so that ordering is
   * always deterministic regardless of packaging, on-the-fly injection, etc.
   *
   * @param {array} InjectedEventPluginOrder
   * @internal
   * @see {EventPluginHub.injection.injectEventPluginOrder}
   */
  injectEventPluginOrder: function(InjectedEventPluginOrder) {
    ("production" !== "development" ? invariant(
      !EventPluginOrder,
      'EventPluginRegistry: Cannot inject event plugin ordering more than ' +
      'once. You are likely trying to load more than one copy of React.'
    ) : invariant(!EventPluginOrder));
    // Clone the ordering so it cannot be dynamically mutated.
    EventPluginOrder = Array.prototype.slice.call(InjectedEventPluginOrder);
    recomputePluginOrdering();
  },

  /**
   * Injects plugins to be used by `EventPluginHub`. The plugin names must be
   * in the ordering injected by `injectEventPluginOrder`.
   *
   * Plugins can be injected as part of page initialization or on-the-fly.
   *
   * @param {object} injectedNamesToPlugins Map from names to plugin modules.
   * @internal
   * @see {EventPluginHub.injection.injectEventPluginsByName}
   */
  injectEventPluginsByName: function(injectedNamesToPlugins) {
    var isOrderingDirty = false;
    for (var pluginName in injectedNamesToPlugins) {
      if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {
        continue;
      }
      var PluginModule = injectedNamesToPlugins[pluginName];
      if (!namesToPlugins.hasOwnProperty(pluginName) ||
          namesToPlugins[pluginName] !== PluginModule) {
        ("production" !== "development" ? invariant(
          !namesToPlugins[pluginName],
          'EventPluginRegistry: Cannot inject two different event plugins ' +
          'using the same name, `%s`.',
          pluginName
        ) : invariant(!namesToPlugins[pluginName]));
        namesToPlugins[pluginName] = PluginModule;
        isOrderingDirty = true;
      }
    }
    if (isOrderingDirty) {
      recomputePluginOrdering();
    }
  },

  /**
   * Looks up the plugin for the supplied event.
   *
   * @param {object} event A synthetic event.
   * @return {?object} The plugin that created the supplied event.
   * @internal
   */
  getPluginModuleForEvent: function(event) {
    var dispatchConfig = event.dispatchConfig;
    if (dispatchConfig.registrationName) {
      return EventPluginRegistry.registrationNameModules[
        dispatchConfig.registrationName
      ] || null;
    }
    for (var phase in dispatchConfig.phasedRegistrationNames) {
      if (!dispatchConfig.phasedRegistrationNames.hasOwnProperty(phase)) {
        continue;
      }
      var PluginModule = EventPluginRegistry.registrationNameModules[
        dispatchConfig.phasedRegistrationNames[phase]
      ];
      if (PluginModule) {
        return PluginModule;
      }
    }
    return null;
  },

  /**
   * Exposed for unit testing.
   * @private
   */
  _resetEventPlugins: function() {
    EventPluginOrder = null;
    for (var pluginName in namesToPlugins) {
      if (namesToPlugins.hasOwnProperty(pluginName)) {
        delete namesToPlugins[pluginName];
      }
    }
    EventPluginRegistry.plugins.length = 0;

    var eventNameDispatchConfigs = EventPluginRegistry.eventNameDispatchConfigs;
    for (var eventName in eventNameDispatchConfigs) {
      if (eventNameDispatchConfigs.hasOwnProperty(eventName)) {
        delete eventNameDispatchConfigs[eventName];
      }
    }

    var registrationNameModules = EventPluginRegistry.registrationNameModules;
    for (var registrationName in registrationNameModules) {
      if (registrationNameModules.hasOwnProperty(registrationName)) {
        delete registrationNameModules[registrationName];
      }
    }
  }

};

module.exports = EventPluginRegistry;

},{"./invariant":126}],20:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule EventPluginUtils
 */

"use strict";

var EventConstants = _dereq_("./EventConstants");

var invariant = _dereq_("./invariant");

/**
 * Injected dependencies:
 */

/**
 * - `Mount`: [required] Module that can convert between React dom IDs and
 *   actual node references.
 */
var injection = {
  Mount: null,
  injectMount: function(InjectedMount) {
    injection.Mount = InjectedMount;
    if ("production" !== "development") {
      ("production" !== "development" ? invariant(
        InjectedMount && InjectedMount.getNode,
        'EventPluginUtils.injection.injectMount(...): Injected Mount module ' +
        'is missing getNode.'
      ) : invariant(InjectedMount && InjectedMount.getNode));
    }
  }
};

var topLevelTypes = EventConstants.topLevelTypes;

function isEndish(topLevelType) {
  return topLevelType === topLevelTypes.topMouseUp ||
         topLevelType === topLevelTypes.topTouchEnd ||
         topLevelType === topLevelTypes.topTouchCancel;
}

function isMoveish(topLevelType) {
  return topLevelType === topLevelTypes.topMouseMove ||
         topLevelType === topLevelTypes.topTouchMove;
}
function isStartish(topLevelType) {
  return topLevelType === topLevelTypes.topMouseDown ||
         topLevelType === topLevelTypes.topTouchStart;
}


var validateEventDispatches;
if ("production" !== "development") {
  validateEventDispatches = function(event) {
    var dispatchListeners = event._dispatchListeners;
    var dispatchIDs = event._dispatchIDs;

    var listenersIsArr = Array.isArray(dispatchListeners);
    var idsIsArr = Array.isArray(dispatchIDs);
    var IDsLen = idsIsArr ? dispatchIDs.length : dispatchIDs ? 1 : 0;
    var listenersLen = listenersIsArr ?
      dispatchListeners.length :
      dispatchListeners ? 1 : 0;

    ("production" !== "development" ? invariant(
      idsIsArr === listenersIsArr && IDsLen === listenersLen,
      'EventPluginUtils: Invalid `event`.'
    ) : invariant(idsIsArr === listenersIsArr && IDsLen === listenersLen));
  };
}

/**
 * Invokes `cb(event, listener, id)`. Avoids using call if no scope is
 * provided. The `(listener,id)` pair effectively forms the "dispatch" but are
 * kept separate to conserve memory.
 */
function forEachEventDispatch(event, cb) {
  var dispatchListeners = event._dispatchListeners;
  var dispatchIDs = event._dispatchIDs;
  if ("production" !== "development") {
    validateEventDispatches(event);
  }
  if (Array.isArray(dispatchListeners)) {
    for (var i = 0; i < dispatchListeners.length; i++) {
      if (event.isPropagationStopped()) {
        break;
      }
      // Listeners and IDs are two parallel arrays that are always in sync.
      cb(event, dispatchListeners[i], dispatchIDs[i]);
    }
  } else if (dispatchListeners) {
    cb(event, dispatchListeners, dispatchIDs);
  }
}

/**
 * Default implementation of PluginModule.executeDispatch().
 * @param {SyntheticEvent} SyntheticEvent to handle
 * @param {function} Application-level callback
 * @param {string} domID DOM id to pass to the callback.
 */
function executeDispatch(event, listener, domID) {
  event.currentTarget = injection.Mount.getNode(domID);
  var returnValue = listener(event, domID);
  event.currentTarget = null;
  return returnValue;
}

/**
 * Standard/simple iteration through an event's collected dispatches.
 */
function executeDispatchesInOrder(event, executeDispatch) {
  forEachEventDispatch(event, executeDispatch);
  event._dispatchListeners = null;
  event._dispatchIDs = null;
}

/**
 * Standard/simple iteration through an event's collected dispatches, but stops
 * at the first dispatch execution returning true, and returns that id.
 *
 * @return id of the first dispatch execution who's listener returns true, or
 * null if no listener returned true.
 */
function executeDispatchesInOrderStopAtTrueImpl(event) {
  var dispatchListeners = event._dispatchListeners;
  var dispatchIDs = event._dispatchIDs;
  if ("production" !== "development") {
    validateEventDispatches(event);
  }
  if (Array.isArray(dispatchListeners)) {
    for (var i = 0; i < dispatchListeners.length; i++) {
      if (event.isPropagationStopped()) {
        break;
      }
      // Listeners and IDs are two parallel arrays that are always in sync.
      if (dispatchListeners[i](event, dispatchIDs[i])) {
        return dispatchIDs[i];
      }
    }
  } else if (dispatchListeners) {
    if (dispatchListeners(event, dispatchIDs)) {
      return dispatchIDs;
    }
  }
  return null;
}

/**
 * @see executeDispatchesInOrderStopAtTrueImpl
 */
function executeDispatchesInOrderStopAtTrue(event) {
  var ret = executeDispatchesInOrderStopAtTrueImpl(event);
  event._dispatchIDs = null;
  event._dispatchListeners = null;
  return ret;
}

/**
 * Execution of a "direct" dispatch - there must be at most one dispatch
 * accumulated on the event or it is considered an error. It doesn't really make
 * sense for an event with multiple dispatches (bubbled) to keep track of the
 * return values at each dispatch execution, but it does tend to make sense when
 * dealing with "direct" dispatches.
 *
 * @return The return value of executing the single dispatch.
 */
function executeDirectDispatch(event) {
  if ("production" !== "development") {
    validateEventDispatches(event);
  }
  var dispatchListener = event._dispatchListeners;
  var dispatchID = event._dispatchIDs;
  ("production" !== "development" ? invariant(
    !Array.isArray(dispatchListener),
    'executeDirectDispatch(...): Invalid `event`.'
  ) : invariant(!Array.isArray(dispatchListener)));
  var res = dispatchListener ?
    dispatchListener(event, dispatchID) :
    null;
  event._dispatchListeners = null;
  event._dispatchIDs = null;
  return res;
}

/**
 * @param {SyntheticEvent} event
 * @return {bool} True iff number of dispatches accumulated is greater than 0.
 */
function hasDispatches(event) {
  return !!event._dispatchListeners;
}

/**
 * General utilities that are useful in creating custom Event Plugins.
 */
var EventPluginUtils = {
  isEndish: isEndish,
  isMoveish: isMoveish,
  isStartish: isStartish,

  executeDirectDispatch: executeDirectDispatch,
  executeDispatch: executeDispatch,
  executeDispatchesInOrder: executeDispatchesInOrder,
  executeDispatchesInOrderStopAtTrue: executeDispatchesInOrderStopAtTrue,
  hasDispatches: hasDispatches,
  injection: injection,
  useTouchEvents: false
};

module.exports = EventPluginUtils;

},{"./EventConstants":16,"./invariant":126}],21:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule EventPropagators
 */

"use strict";

var EventConstants = _dereq_("./EventConstants");
var EventPluginHub = _dereq_("./EventPluginHub");

var accumulateInto = _dereq_("./accumulateInto");
var forEachAccumulated = _dereq_("./forEachAccumulated");

var PropagationPhases = EventConstants.PropagationPhases;
var getListener = EventPluginHub.getListener;

/**
 * Some event types have a notion of different registration names for different
 * "phases" of propagation. This finds listeners by a given phase.
 */
function listenerAtPhase(id, event, propagationPhase) {
  var registrationName =
    event.dispatchConfig.phasedRegistrationNames[propagationPhase];
  return getListener(id, registrationName);
}

/**
 * Tags a `SyntheticEvent` with dispatched listeners. Creating this function
 * here, allows us to not have to bind or create functions for each event.
 * Mutating the event's members allows us to not have to create a wrapping
 * "dispatch" object that pairs the event with the listener.
 */
function accumulateDirectionalDispatches(domID, upwards, event) {
  if ("production" !== "development") {
    if (!domID) {
      throw new Error('Dispatching id must not be null');
    }
  }
  var phase = upwards ? PropagationPhases.bubbled : PropagationPhases.captured;
  var listener = listenerAtPhase(domID, event, phase);
  if (listener) {
    event._dispatchListeners =
      accumulateInto(event._dispatchListeners, listener);
    event._dispatchIDs = accumulateInto(event._dispatchIDs, domID);
  }
}

/**
 * Collect dispatches (must be entirely collected before dispatching - see unit
 * tests). Lazily allocate the array to conserve memory.  We must loop through
 * each event and perform the traversal for each one. We can not perform a
 * single traversal for the entire collection of events because each event may
 * have a different target.
 */
function accumulateTwoPhaseDispatchesSingle(event) {
  if (event && event.dispatchConfig.phasedRegistrationNames) {
    EventPluginHub.injection.getInstanceHandle().traverseTwoPhase(
      event.dispatchMarker,
      accumulateDirectionalDispatches,
      event
    );
  }
}


/**
 * Accumulates without regard to direction, does not look for phased
 * registration names. Same as `accumulateDirectDispatchesSingle` but without
 * requiring that the `dispatchMarker` be the same as the dispatched ID.
 */
function accumulateDispatches(id, ignoredDirection, event) {
  if (event && event.dispatchConfig.registrationName) {
    var registrationName = event.dispatchConfig.registrationName;
    var listener = getListener(id, registrationName);
    if (listener) {
      event._dispatchListeners =
        accumulateInto(event._dispatchListeners, listener);
      event._dispatchIDs = accumulateInto(event._dispatchIDs, id);
    }
  }
}

/**
 * Accumulates dispatches on an `SyntheticEvent`, but only for the
 * `dispatchMarker`.
 * @param {SyntheticEvent} event
 */
function accumulateDirectDispatchesSingle(event) {
  if (event && event.dispatchConfig.registrationName) {
    accumulateDispatches(event.dispatchMarker, null, event);
  }
}

function accumulateTwoPhaseDispatches(events) {
  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle);
}

function accumulateEnterLeaveDispatches(leave, enter, fromID, toID) {
  EventPluginHub.injection.getInstanceHandle().traverseEnterLeave(
    fromID,
    toID,
    accumulateDispatches,
    leave,
    enter
  );
}


function accumulateDirectDispatches(events) {
  forEachAccumulated(events, accumulateDirectDispatchesSingle);
}



/**
 * A small set of propagation patterns, each of which will accept a small amount
 * of information, and generate a set of "dispatch ready event objects" - which
 * are sets of events that have already been annotated with a set of dispatched
 * listener functions/ids. The API is designed this way to discourage these
 * propagation strategies from actually executing the dispatches, since we
 * always want to collect the entire set of dispatches before executing event a
 * single one.
 *
 * @constructor EventPropagators
 */
var EventPropagators = {
  accumulateTwoPhaseDispatches: accumulateTwoPhaseDispatches,
  accumulateDirectDispatches: accumulateDirectDispatches,
  accumulateEnterLeaveDispatches: accumulateEnterLeaveDispatches
};

module.exports = EventPropagators;

},{"./EventConstants":16,"./EventPluginHub":18,"./accumulateInto":97,"./forEachAccumulated":112}],22:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ExecutionEnvironment
 */

/*jslint evil: true */

"use strict";

var canUseDOM = !!(
  typeof window !== 'undefined' &&
  window.document &&
  window.document.createElement
);

/**
 * Simple, lightweight module assisting with the detection and context of
 * Worker. Helps avoid circular dependencies and allows code to reason about
 * whether or not they are in a Worker, even if they never include the main
 * `ReactWorker` dependency.
 */
var ExecutionEnvironment = {

  canUseDOM: canUseDOM,

  canUseWorkers: typeof Worker !== 'undefined',

  canUseEventListeners:
    canUseDOM && !!(window.addEventListener || window.attachEvent),

  canUseViewport: canUseDOM && !!window.screen,

  isInWorker: !canUseDOM // For now, this is true - might change in the future.

};

module.exports = ExecutionEnvironment;

},{}],23:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule HTMLDOMPropertyConfig
 */

/*jslint bitwise: true*/

"use strict";

var DOMProperty = _dereq_("./DOMProperty");
var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");

var MUST_USE_ATTRIBUTE = DOMProperty.injection.MUST_USE_ATTRIBUTE;
var MUST_USE_PROPERTY = DOMProperty.injection.MUST_USE_PROPERTY;
var HAS_BOOLEAN_VALUE = DOMProperty.injection.HAS_BOOLEAN_VALUE;
var HAS_SIDE_EFFECTS = DOMProperty.injection.HAS_SIDE_EFFECTS;
var HAS_NUMERIC_VALUE = DOMProperty.injection.HAS_NUMERIC_VALUE;
var HAS_POSITIVE_NUMERIC_VALUE =
  DOMProperty.injection.HAS_POSITIVE_NUMERIC_VALUE;
var HAS_OVERLOADED_BOOLEAN_VALUE =
  DOMProperty.injection.HAS_OVERLOADED_BOOLEAN_VALUE;

var hasSVG;
if (ExecutionEnvironment.canUseDOM) {
  var implementation = document.implementation;
  hasSVG = (
    implementation &&
    implementation.hasFeature &&
    implementation.hasFeature(
      'http://www.w3.org/TR/SVG11/feature#BasicStructure',
      '1.1'
    )
  );
}


var HTMLDOMPropertyConfig = {
  isCustomAttribute: RegExp.prototype.test.bind(
    /^(data|aria)-[a-z_][a-z\d_.\-]*$/
  ),
  Properties: {
    /**
     * Standard Properties
     */
    accept: null,
    acceptCharset: null,
    accessKey: null,
    action: null,
    allowFullScreen: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
    allowTransparency: MUST_USE_ATTRIBUTE,
    alt: null,
    async: HAS_BOOLEAN_VALUE,
    autoComplete: null,
    // autoFocus is polyfilled/normalized by AutoFocusMixin
    // autoFocus: HAS_BOOLEAN_VALUE,
    autoPlay: HAS_BOOLEAN_VALUE,
    cellPadding: null,
    cellSpacing: null,
    charSet: MUST_USE_ATTRIBUTE,
    checked: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    classID: MUST_USE_ATTRIBUTE,
    // To set className on SVG elements, it's necessary to use .setAttribute;
    // this works on HTML elements too in all browsers except IE8. Conveniently,
    // IE8 doesn't support SVG and so we can simply use the attribute in
    // browsers that support SVG and the property in browsers that don't,
    // regardless of whether the element is HTML or SVG.
    className: hasSVG ? MUST_USE_ATTRIBUTE : MUST_USE_PROPERTY,
    cols: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
    colSpan: null,
    content: null,
    contentEditable: null,
    contextMenu: MUST_USE_ATTRIBUTE,
    controls: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    coords: null,
    crossOrigin: null,
    data: null, // For `<object />` acts as `src`.
    dateTime: MUST_USE_ATTRIBUTE,
    defer: HAS_BOOLEAN_VALUE,
    dir: null,
    disabled: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
    download: HAS_OVERLOADED_BOOLEAN_VALUE,
    draggable: null,
    encType: null,
    form: MUST_USE_ATTRIBUTE,
    formAction: MUST_USE_ATTRIBUTE,
    formEncType: MUST_USE_ATTRIBUTE,
    formMethod: MUST_USE_ATTRIBUTE,
    formNoValidate: HAS_BOOLEAN_VALUE,
    formTarget: MUST_USE_ATTRIBUTE,
    frameBorder: MUST_USE_ATTRIBUTE,
    height: MUST_USE_ATTRIBUTE,
    hidden: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
    href: null,
    hrefLang: null,
    htmlFor: null,
    httpEquiv: null,
    icon: null,
    id: MUST_USE_PROPERTY,
    label: null,
    lang: null,
    list: MUST_USE_ATTRIBUTE,
    loop: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    manifest: MUST_USE_ATTRIBUTE,
    marginHeight: null,
    marginWidth: null,
    max: null,
    maxLength: MUST_USE_ATTRIBUTE,
    media: MUST_USE_ATTRIBUTE,
    mediaGroup: null,
    method: null,
    min: null,
    multiple: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    muted: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    name: null,
    noValidate: HAS_BOOLEAN_VALUE,
    open: null,
    pattern: null,
    placeholder: null,
    poster: null,
    preload: null,
    radioGroup: null,
    readOnly: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    rel: null,
    required: HAS_BOOLEAN_VALUE,
    role: MUST_USE_ATTRIBUTE,
    rows: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
    rowSpan: null,
    sandbox: null,
    scope: null,
    scrolling: null,
    seamless: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
    selected: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    shape: null,
    size: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
    sizes: MUST_USE_ATTRIBUTE,
    span: HAS_POSITIVE_NUMERIC_VALUE,
    spellCheck: null,
    src: null,
    srcDoc: MUST_USE_PROPERTY,
    srcSet: MUST_USE_ATTRIBUTE,
    start: HAS_NUMERIC_VALUE,
    step: null,
    style: null,
    tabIndex: null,
    target: null,
    title: null,
    type: null,
    useMap: null,
    value: MUST_USE_PROPERTY | HAS_SIDE_EFFECTS,
    width: MUST_USE_ATTRIBUTE,
    wmode: MUST_USE_ATTRIBUTE,

    /**
     * Non-standard Properties
     */
    autoCapitalize: null, // Supported in Mobile Safari for keyboard hints
    autoCorrect: null, // Supported in Mobile Safari for keyboard hints
    itemProp: MUST_USE_ATTRIBUTE, // Microdata: http://schema.org/docs/gs.html
    itemScope: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE, // Microdata: http://schema.org/docs/gs.html
    itemType: MUST_USE_ATTRIBUTE, // Microdata: http://schema.org/docs/gs.html
    property: null // Supports OG in meta tags
  },
  DOMAttributeNames: {
    acceptCharset: 'accept-charset',
    className: 'class',
    htmlFor: 'for',
    httpEquiv: 'http-equiv'
  },
  DOMPropertyNames: {
    autoCapitalize: 'autocapitalize',
    autoComplete: 'autocomplete',
    autoCorrect: 'autocorrect',
    autoFocus: 'autofocus',
    autoPlay: 'autoplay',
    encType: 'enctype',
    hrefLang: 'hreflang',
    radioGroup: 'radiogroup',
    spellCheck: 'spellcheck',
    srcDoc: 'srcdoc',
    srcSet: 'srcset'
  }
};

module.exports = HTMLDOMPropertyConfig;

},{"./DOMProperty":11,"./ExecutionEnvironment":22}],24:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule LinkedValueUtils
 * @typechecks static-only
 */

"use strict";

var ReactPropTypes = _dereq_("./ReactPropTypes");

var invariant = _dereq_("./invariant");

var hasReadOnlyValue = {
  'button': true,
  'checkbox': true,
  'image': true,
  'hidden': true,
  'radio': true,
  'reset': true,
  'submit': true
};

function _assertSingleLink(input) {
  ("production" !== "development" ? invariant(
    input.props.checkedLink == null || input.props.valueLink == null,
    'Cannot provide a checkedLink and a valueLink. If you want to use ' +
    'checkedLink, you probably don\'t want to use valueLink and vice versa.'
  ) : invariant(input.props.checkedLink == null || input.props.valueLink == null));
}
function _assertValueLink(input) {
  _assertSingleLink(input);
  ("production" !== "development" ? invariant(
    input.props.value == null && input.props.onChange == null,
    'Cannot provide a valueLink and a value or onChange event. If you want ' +
    'to use value or onChange, you probably don\'t want to use valueLink.'
  ) : invariant(input.props.value == null && input.props.onChange == null));
}

function _assertCheckedLink(input) {
  _assertSingleLink(input);
  ("production" !== "development" ? invariant(
    input.props.checked == null && input.props.onChange == null,
    'Cannot provide a checkedLink and a checked property or onChange event. ' +
    'If you want to use checked or onChange, you probably don\'t want to ' +
    'use checkedLink'
  ) : invariant(input.props.checked == null && input.props.onChange == null));
}

/**
 * @param {SyntheticEvent} e change event to handle
 */
function _handleLinkedValueChange(e) {
  /*jshint validthis:true */
  this.props.valueLink.requestChange(e.target.value);
}

/**
  * @param {SyntheticEvent} e change event to handle
  */
function _handleLinkedCheckChange(e) {
  /*jshint validthis:true */
  this.props.checkedLink.requestChange(e.target.checked);
}

/**
 * Provide a linked `value` attribute for controlled forms. You should not use
 * this outside of the ReactDOM controlled form components.
 */
var LinkedValueUtils = {
  Mixin: {
    propTypes: {
      value: function(props, propName, componentName) {
        if (!props[propName] ||
            hasReadOnlyValue[props.type] ||
            props.onChange ||
            props.readOnly ||
            props.disabled) {
          return;
        }
        return new Error(
          'You provided a `value` prop to a form field without an ' +
          '`onChange` handler. This will render a read-only field. If ' +
          'the field should be mutable use `defaultValue`. Otherwise, ' +
          'set either `onChange` or `readOnly`.'
        );
      },
      checked: function(props, propName, componentName) {
        if (!props[propName] ||
            props.onChange ||
            props.readOnly ||
            props.disabled) {
          return;
        }
        return new Error(
          'You provided a `checked` prop to a form field without an ' +
          '`onChange` handler. This will render a read-only field. If ' +
          'the field should be mutable use `defaultChecked`. Otherwise, ' +
          'set either `onChange` or `readOnly`.'
        );
      },
      onChange: ReactPropTypes.func
    }
  },

  /**
   * @param {ReactComponent} input Form component
   * @return {*} current value of the input either from value prop or link.
   */
  getValue: function(input) {
    if (input.props.valueLink) {
      _assertValueLink(input);
      return input.props.valueLink.value;
    }
    return input.props.value;
  },

  /**
   * @param {ReactComponent} input Form component
   * @return {*} current checked status of the input either from checked prop
   *             or link.
   */
  getChecked: function(input) {
    if (input.props.checkedLink) {
      _assertCheckedLink(input);
      return input.props.checkedLink.value;
    }
    return input.props.checked;
  },

  /**
   * @param {ReactComponent} input Form component
   * @return {function} change callback either from onChange prop or link.
   */
  getOnChange: function(input) {
    if (input.props.valueLink) {
      _assertValueLink(input);
      return _handleLinkedValueChange;
    } else if (input.props.checkedLink) {
      _assertCheckedLink(input);
      return _handleLinkedCheckChange;
    }
    return input.props.onChange;
  }
};

module.exports = LinkedValueUtils;

},{"./ReactPropTypes":72,"./invariant":126}],25:[function(_dereq_,module,exports){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule LocalEventTrapMixin
 */

"use strict";

var ReactBrowserEventEmitter = _dereq_("./ReactBrowserEventEmitter");

var accumulateInto = _dereq_("./accumulateInto");
var forEachAccumulated = _dereq_("./forEachAccumulated");
var invariant = _dereq_("./invariant");

function remove(event) {
  event.remove();
}

var LocalEventTrapMixin = {
  trapBubbledEvent:function(topLevelType, handlerBaseName) {
    ("production" !== "development" ? invariant(this.isMounted(), 'Must be mounted to trap events') : invariant(this.isMounted()));
    var listener = ReactBrowserEventEmitter.trapBubbledEvent(
      topLevelType,
      handlerBaseName,
      this.getDOMNode()
    );
    this._localEventListeners =
      accumulateInto(this._localEventListeners, listener);
  },

  // trapCapturedEvent would look nearly identical. We don't implement that
  // method because it isn't currently needed.

  componentWillUnmount:function() {
    if (this._localEventListeners) {
      forEachAccumulated(this._localEventListeners, remove);
    }
  }
};

module.exports = LocalEventTrapMixin;

},{"./ReactBrowserEventEmitter":30,"./accumulateInto":97,"./forEachAccumulated":112,"./invariant":126}],26:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule MobileSafariClickEventPlugin
 * @typechecks static-only
 */

"use strict";

var EventConstants = _dereq_("./EventConstants");

var emptyFunction = _dereq_("./emptyFunction");

var topLevelTypes = EventConstants.topLevelTypes;

/**
 * Mobile Safari does not fire properly bubble click events on non-interactive
 * elements, which means delegated click listeners do not fire. The workaround
 * for this bug involves attaching an empty click listener on the target node.
 *
 * This particular plugin works around the bug by attaching an empty click
 * listener on `touchstart` (which does fire on every element).
 */
var MobileSafariClickEventPlugin = {

  eventTypes: null,

  /**
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @see {EventPluginHub.extractEvents}
   */
  extractEvents: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent) {
    if (topLevelType === topLevelTypes.topTouchStart) {
      var target = nativeEvent.target;
      if (target && !target.onclick) {
        target.onclick = emptyFunction;
      }
    }
  }

};

module.exports = MobileSafariClickEventPlugin;

},{"./EventConstants":16,"./emptyFunction":107}],27:[function(_dereq_,module,exports){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule Object.assign
 */

// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-object.assign

function assign(target, sources) {
  if (target == null) {
    throw new TypeError('Object.assign target cannot be null or undefined');
  }

  var to = Object(target);
  var hasOwnProperty = Object.prototype.hasOwnProperty;

  for (var nextIndex = 1; nextIndex < arguments.length; nextIndex++) {
    var nextSource = arguments[nextIndex];
    if (nextSource == null) {
      continue;
    }

    var from = Object(nextSource);

    // We don't currently support accessors nor proxies. Therefore this
    // copy cannot throw. If we ever supported this then we must handle
    // exceptions and side-effects. We don't support symbols so they won't
    // be transferred.

    for (var key in from) {
      if (hasOwnProperty.call(from, key)) {
        to[key] = from[key];
      }
    }
  }

  return to;
};

module.exports = assign;

},{}],28:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule PooledClass
 */

"use strict";

var invariant = _dereq_("./invariant");

/**
 * Static poolers. Several custom versions for each potential number of
 * arguments. A completely generic pooler is easy to implement, but would
 * require accessing the `arguments` object. In each of these, `this` refers to
 * the Class itself, not an instance. If any others are needed, simply add them
 * here, or in their own files.
 */
var oneArgumentPooler = function(copyFieldsFrom) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, copyFieldsFrom);
    return instance;
  } else {
    return new Klass(copyFieldsFrom);
  }
};

var twoArgumentPooler = function(a1, a2) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2);
    return instance;
  } else {
    return new Klass(a1, a2);
  }
};

var threeArgumentPooler = function(a1, a2, a3) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2, a3);
    return instance;
  } else {
    return new Klass(a1, a2, a3);
  }
};

var fiveArgumentPooler = function(a1, a2, a3, a4, a5) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2, a3, a4, a5);
    return instance;
  } else {
    return new Klass(a1, a2, a3, a4, a5);
  }
};

var standardReleaser = function(instance) {
  var Klass = this;
  ("production" !== "development" ? invariant(
    instance instanceof Klass,
    'Trying to release an instance into a pool of a different type.'
  ) : invariant(instance instanceof Klass));
  if (instance.destructor) {
    instance.destructor();
  }
  if (Klass.instancePool.length < Klass.poolSize) {
    Klass.instancePool.push(instance);
  }
};

var DEFAULT_POOL_SIZE = 10;
var DEFAULT_POOLER = oneArgumentPooler;

/**
 * Augments `CopyConstructor` to be a poolable class, augmenting only the class
 * itself (statically) not adding any prototypical fields. Any CopyConstructor
 * you give this may have a `poolSize` property, and will look for a
 * prototypical `destructor` on instances (optional).
 *
 * @param {Function} CopyConstructor Constructor that can be used to reset.
 * @param {Function} pooler Customizable pooler.
 */
var addPoolingTo = function(CopyConstructor, pooler) {
  var NewKlass = CopyConstructor;
  NewKlass.instancePool = [];
  NewKlass.getPooled = pooler || DEFAULT_POOLER;
  if (!NewKlass.poolSize) {
    NewKlass.poolSize = DEFAULT_POOL_SIZE;
  }
  NewKlass.release = standardReleaser;
  return NewKlass;
};

var PooledClass = {
  addPoolingTo: addPoolingTo,
  oneArgumentPooler: oneArgumentPooler,
  twoArgumentPooler: twoArgumentPooler,
  threeArgumentPooler: threeArgumentPooler,
  fiveArgumentPooler: fiveArgumentPooler
};

module.exports = PooledClass;

},{"./invariant":126}],29:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactBrowserComponentMixin
 */

"use strict";

var ReactEmptyComponent = _dereq_("./ReactEmptyComponent");
var ReactMount = _dereq_("./ReactMount");

var invariant = _dereq_("./invariant");

var ReactBrowserComponentMixin = {
  /**
   * Returns the DOM node rendered by this component.
   *
   * @return {DOMElement} The root node of this component.
   * @final
   * @protected
   */
  getDOMNode: function() {
    ("production" !== "development" ? invariant(
      this.isMounted(),
      'getDOMNode(): A component must be mounted to have a DOM node.'
    ) : invariant(this.isMounted()));
    if (ReactEmptyComponent.isNullComponentID(this._rootNodeID)) {
      return null;
    }
    return ReactMount.getNode(this._rootNodeID);
  }
};

module.exports = ReactBrowserComponentMixin;

},{"./ReactEmptyComponent":54,"./ReactMount":63,"./invariant":126}],30:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactBrowserEventEmitter
 * @typechecks static-only
 */

"use strict";

var EventConstants = _dereq_("./EventConstants");
var EventPluginHub = _dereq_("./EventPluginHub");
var EventPluginRegistry = _dereq_("./EventPluginRegistry");
var ReactEventEmitterMixin = _dereq_("./ReactEventEmitterMixin");
var ViewportMetrics = _dereq_("./ViewportMetrics");

var assign = _dereq_("./Object.assign");
var isEventSupported = _dereq_("./isEventSupported");

/**
 * Summary of `ReactBrowserEventEmitter` event handling:
 *
 *  - Top-level delegation is used to trap most native browser events. This
 *    may only occur in the main thread and is the responsibility of
 *    ReactEventListener, which is injected and can therefore support pluggable
 *    event sources. This is the only work that occurs in the main thread.
 *
 *  - We normalize and de-duplicate events to account for browser quirks. This
 *    may be done in the worker thread.
 *
 *  - Forward these native events (with the associated top-level type used to
 *    trap it) to `EventPluginHub`, which in turn will ask plugins if they want
 *    to extract any synthetic events.
 *
 *  - The `EventPluginHub` will then process each event by annotating them with
 *    "dispatches", a sequence of listeners and IDs that care about that event.
 *
 *  - The `EventPluginHub` then dispatches the events.
 *
 * Overview of React and the event system:
 *
 * +------------+    .
 * |    DOM     |    .
 * +------------+    .
 *       |           .
 *       v           .
 * +------------+    .
 * | ReactEvent |    .
 * |  Listener  |    .
 * +------------+    .                         +-----------+
 *       |           .               +--------+|SimpleEvent|
 *       |           .               |         |Plugin     |
 * +-----|------+    .               v         +-----------+
 * |     |      |    .    +--------------+                    +------------+
 * |     +-----------.--->|EventPluginHub|                    |    Event   |
 * |            |    .    |              |     +-----------+  | Propagators|
 * | ReactEvent |    .    |              |     |TapEvent   |  |------------|
 * |  Emitter   |    .    |              |<---+|Plugin     |  |other plugin|
 * |            |    .    |              |     +-----------+  |  utilities |
 * |     +-----------.--->|              |                    +------------+
 * |     |      |    .    +--------------+
 * +-----|------+    .                ^        +-----------+
 *       |           .                |        |Enter/Leave|
 *       +           .                +-------+|Plugin     |
 * +-------------+   .                         +-----------+
 * | application |   .
 * |-------------|   .
 * |             |   .
 * |             |   .
 * +-------------+   .
 *                   .
 *    React Core     .  General Purpose Event Plugin System
 */

var alreadyListeningTo = {};
var isMonitoringScrollValue = false;
var reactTopListenersCounter = 0;

// For events like 'submit' which don't consistently bubble (which we trap at a
// lower node than `document`), binding at `document` would cause duplicate
// events so we don't include them here
var topEventMapping = {
  topBlur: 'blur',
  topChange: 'change',
  topClick: 'click',
  topCompositionEnd: 'compositionend',
  topCompositionStart: 'compositionstart',
  topCompositionUpdate: 'compositionupdate',
  topContextMenu: 'contextmenu',
  topCopy: 'copy',
  topCut: 'cut',
  topDoubleClick: 'dblclick',
  topDrag: 'drag',
  topDragEnd: 'dragend',
  topDragEnter: 'dragenter',
  topDragExit: 'dragexit',
  topDragLeave: 'dragleave',
  topDragOver: 'dragover',
  topDragStart: 'dragstart',
  topDrop: 'drop',
  topFocus: 'focus',
  topInput: 'input',
  topKeyDown: 'keydown',
  topKeyPress: 'keypress',
  topKeyUp: 'keyup',
  topMouseDown: 'mousedown',
  topMouseMove: 'mousemove',
  topMouseOut: 'mouseout',
  topMouseOver: 'mouseover',
  topMouseUp: 'mouseup',
  topPaste: 'paste',
  topScroll: 'scroll',
  topSelectionChange: 'selectionchange',
  topTextInput: 'textInput',
  topTouchCancel: 'touchcancel',
  topTouchEnd: 'touchend',
  topTouchMove: 'touchmove',
  topTouchStart: 'touchstart',
  topWheel: 'wheel'
};

/**
 * To ensure no conflicts with other potential React instances on the page
 */
var topListenersIDKey = "_reactListenersID" + String(Math.random()).slice(2);

function getListeningForDocument(mountAt) {
  // In IE8, `mountAt` is a host object and doesn't have `hasOwnProperty`
  // directly.
  if (!Object.prototype.hasOwnProperty.call(mountAt, topListenersIDKey)) {
    mountAt[topListenersIDKey] = reactTopListenersCounter++;
    alreadyListeningTo[mountAt[topListenersIDKey]] = {};
  }
  return alreadyListeningTo[mountAt[topListenersIDKey]];
}

/**
 * `ReactBrowserEventEmitter` is used to attach top-level event listeners. For
 * example:
 *
 *   ReactBrowserEventEmitter.putListener('myID', 'onClick', myFunction);
 *
 * This would allocate a "registration" of `('onClick', myFunction)` on 'myID'.
 *
 * @internal
 */
var ReactBrowserEventEmitter = assign({}, ReactEventEmitterMixin, {

  /**
   * Injectable event backend
   */
  ReactEventListener: null,

  injection: {
    /**
     * @param {object} ReactEventListener
     */
    injectReactEventListener: function(ReactEventListener) {
      ReactEventListener.setHandleTopLevel(
        ReactBrowserEventEmitter.handleTopLevel
      );
      ReactBrowserEventEmitter.ReactEventListener = ReactEventListener;
    }
  },

  /**
   * Sets whether or not any created callbacks should be enabled.
   *
   * @param {boolean} enabled True if callbacks should be enabled.
   */
  setEnabled: function(enabled) {
    if (ReactBrowserEventEmitter.ReactEventListener) {
      ReactBrowserEventEmitter.ReactEventListener.setEnabled(enabled);
    }
  },

  /**
   * @return {boolean} True if callbacks are enabled.
   */
  isEnabled: function() {
    return !!(
      ReactBrowserEventEmitter.ReactEventListener &&
      ReactBrowserEventEmitter.ReactEventListener.isEnabled()
    );
  },

  /**
   * We listen for bubbled touch events on the document object.
   *
   * Firefox v8.01 (and possibly others) exhibited strange behavior when
   * mounting `onmousemove` events at some node that was not the document
   * element. The symptoms were that if your mouse is not moving over something
   * contained within that mount point (for example on the background) the
   * top-level listeners for `onmousemove` won't be called. However, if you
   * register the `mousemove` on the document object, then it will of course
   * catch all `mousemove`s. This along with iOS quirks, justifies restricting
   * top-level listeners to the document object only, at least for these
   * movement types of events and possibly all events.
   *
   * @see http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
   *
   * Also, `keyup`/`keypress`/`keydown` do not bubble to the window on IE, but
   * they bubble to document.
   *
   * @param {string} registrationName Name of listener (e.g. `onClick`).
   * @param {object} contentDocumentHandle Document which owns the container
   */
  listenTo: function(registrationName, contentDocumentHandle) {
    var mountAt = contentDocumentHandle;
    var isListening = getListeningForDocument(mountAt);
    var dependencies = EventPluginRegistry.
      registrationNameDependencies[registrationName];

    var topLevelTypes = EventConstants.topLevelTypes;
    for (var i = 0, l = dependencies.length; i < l; i++) {
      var dependency = dependencies[i];
      if (!(
            isListening.hasOwnProperty(dependency) &&
            isListening[dependency]
          )) {
        if (dependency === topLevelTypes.topWheel) {
          if (isEventSupported('wheel')) {
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
              topLevelTypes.topWheel,
              'wheel',
              mountAt
            );
          } else if (isEventSupported('mousewheel')) {
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
              topLevelTypes.topWheel,
              'mousewheel',
              mountAt
            );
          } else {
            // Firefox needs to capture a different mouse scroll event.
            // @see http://www.quirksmode.org/dom/events/tests/scroll.html
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
              topLevelTypes.topWheel,
              'DOMMouseScroll',
              mountAt
            );
          }
        } else if (dependency === topLevelTypes.topScroll) {

          if (isEventSupported('scroll', true)) {
            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(
              topLevelTypes.topScroll,
              'scroll',
              mountAt
            );
          } else {
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
              topLevelTypes.topScroll,
              'scroll',
              ReactBrowserEventEmitter.ReactEventListener.WINDOW_HANDLE
            );
          }
        } else if (dependency === topLevelTypes.topFocus ||
            dependency === topLevelTypes.topBlur) {

          if (isEventSupported('focus', true)) {
            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(
              topLevelTypes.topFocus,
              'focus',
              mountAt
            );
            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(
              topLevelTypes.topBlur,
              'blur',
              mountAt
            );
          } else if (isEventSupported('focusin')) {
            // IE has `focusin` and `focusout` events which bubble.
            // @see http://www.quirksmode.org/blog/archives/2008/04/delegating_the.html
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
              topLevelTypes.topFocus,
              'focusin',
              mountAt
            );
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
              topLevelTypes.topBlur,
              'focusout',
              mountAt
            );
          }

          // to make sure blur and focus event listeners are only attached once
          isListening[topLevelTypes.topBlur] = true;
          isListening[topLevelTypes.topFocus] = true;
        } else if (topEventMapping.hasOwnProperty(dependency)) {
          ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
            dependency,
            topEventMapping[dependency],
            mountAt
          );
        }

        isListening[dependency] = true;
      }
    }
  },

  trapBubbledEvent: function(topLevelType, handlerBaseName, handle) {
    return ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
      topLevelType,
      handlerBaseName,
      handle
    );
  },

  trapCapturedEvent: function(topLevelType, handlerBaseName, handle) {
    return ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(
      topLevelType,
      handlerBaseName,
      handle
    );
  },

  /**
   * Listens to window scroll and resize events. We cache scroll values so that
   * application code can access them without triggering reflows.
   *
   * NOTE: Scroll events do not bubble.
   *
   * @see http://www.quirksmode.org/dom/events/scroll.html
   */
  ensureScrollValueMonitoring: function(){
    if (!isMonitoringScrollValue) {
      var refresh = ViewportMetrics.refreshScrollValues;
      ReactBrowserEventEmitter.ReactEventListener.monitorScrollValue(refresh);
      isMonitoringScrollValue = true;
    }
  },

  eventNameDispatchConfigs: EventPluginHub.eventNameDispatchConfigs,

  registrationNameModules: EventPluginHub.registrationNameModules,

  putListener: EventPluginHub.putListener,

  getListener: EventPluginHub.getListener,

  deleteListener: EventPluginHub.deleteListener,

  deleteAllListeners: EventPluginHub.deleteAllListeners

});

module.exports = ReactBrowserEventEmitter;

},{"./EventConstants":16,"./EventPluginHub":18,"./EventPluginRegistry":19,"./Object.assign":27,"./ReactEventEmitterMixin":56,"./ViewportMetrics":96,"./isEventSupported":127}],31:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactChildren
 */

"use strict";

var PooledClass = _dereq_("./PooledClass");

var traverseAllChildren = _dereq_("./traverseAllChildren");
var warning = _dereq_("./warning");

var twoArgumentPooler = PooledClass.twoArgumentPooler;
var threeArgumentPooler = PooledClass.threeArgumentPooler;

/**
 * PooledClass representing the bookkeeping associated with performing a child
 * traversal. Allows avoiding binding callbacks.
 *
 * @constructor ForEachBookKeeping
 * @param {!function} forEachFunction Function to perform traversal with.
 * @param {?*} forEachContext Context to perform context with.
 */
function ForEachBookKeeping(forEachFunction, forEachContext) {
  this.forEachFunction = forEachFunction;
  this.forEachContext = forEachContext;
}
PooledClass.addPoolingTo(ForEachBookKeeping, twoArgumentPooler);

function forEachSingleChild(traverseContext, child, name, i) {
  var forEachBookKeeping = traverseContext;
  forEachBookKeeping.forEachFunction.call(
    forEachBookKeeping.forEachContext, child, i);
}

/**
 * Iterates through children that are typically specified as `props.children`.
 *
 * The provided forEachFunc(child, index) will be called for each
 * leaf child.
 *
 * @param {?*} children Children tree container.
 * @param {function(*, int)} forEachFunc.
 * @param {*} forEachContext Context for forEachContext.
 */
function forEachChildren(children, forEachFunc, forEachContext) {
  if (children == null) {
    return children;
  }

  var traverseContext =
    ForEachBookKeeping.getPooled(forEachFunc, forEachContext);
  traverseAllChildren(children, forEachSingleChild, traverseContext);
  ForEachBookKeeping.release(traverseContext);
}

/**
 * PooledClass representing the bookkeeping associated with performing a child
 * mapping. Allows avoiding binding callbacks.
 *
 * @constructor MapBookKeeping
 * @param {!*} mapResult Object containing the ordered map of results.
 * @param {!function} mapFunction Function to perform mapping with.
 * @param {?*} mapContext Context to perform mapping with.
 */
function MapBookKeeping(mapResult, mapFunction, mapContext) {
  this.mapResult = mapResult;
  this.mapFunction = mapFunction;
  this.mapContext = mapContext;
}
PooledClass.addPoolingTo(MapBookKeeping, threeArgumentPooler);

function mapSingleChildIntoContext(traverseContext, child, name, i) {
  var mapBookKeeping = traverseContext;
  var mapResult = mapBookKeeping.mapResult;

  var keyUnique = !mapResult.hasOwnProperty(name);
  ("production" !== "development" ? warning(
    keyUnique,
    'ReactChildren.map(...): Encountered two children with the same key, ' +
    '`%s`. Child keys must be unique; when two children share a key, only ' +
    'the first child will be used.',
    name
  ) : null);

  if (keyUnique) {
    var mappedChild =
      mapBookKeeping.mapFunction.call(mapBookKeeping.mapContext, child, i);
    mapResult[name] = mappedChild;
  }
}

/**
 * Maps children that are typically specified as `props.children`.
 *
 * The provided mapFunction(child, key, index) will be called for each
 * leaf child.
 *
 * TODO: This may likely break any calls to `ReactChildren.map` that were
 * previously relying on the fact that we guarded against null children.
 *
 * @param {?*} children Children tree container.
 * @param {function(*, int)} mapFunction.
 * @param {*} mapContext Context for mapFunction.
 * @return {object} Object containing the ordered map of results.
 */
function mapChildren(children, func, context) {
  if (children == null) {
    return children;
  }

  var mapResult = {};
  var traverseContext = MapBookKeeping.getPooled(mapResult, func, context);
  traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);
  MapBookKeeping.release(traverseContext);
  return mapResult;
}

function forEachSingleChildDummy(traverseContext, child, name, i) {
  return null;
}

/**
 * Count the number of children that are typically specified as
 * `props.children`.
 *
 * @param {?*} children Children tree container.
 * @return {number} The number of children.
 */
function countChildren(children, context) {
  return traverseAllChildren(children, forEachSingleChildDummy, null);
}

var ReactChildren = {
  forEach: forEachChildren,
  map: mapChildren,
  count: countChildren
};

module.exports = ReactChildren;

},{"./PooledClass":28,"./traverseAllChildren":144,"./warning":145}],32:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactComponent
 */

"use strict";

var ReactElement = _dereq_("./ReactElement");
var ReactOwner = _dereq_("./ReactOwner");
var ReactUpdates = _dereq_("./ReactUpdates");

var assign = _dereq_("./Object.assign");
var invariant = _dereq_("./invariant");
var keyMirror = _dereq_("./keyMirror");

/**
 * Every React component is in one of these life cycles.
 */
var ComponentLifeCycle = keyMirror({
  /**
   * Mounted components have a DOM node representation and are capable of
   * receiving new props.
   */
  MOUNTED: null,
  /**
   * Unmounted components are inactive and cannot receive new props.
   */
  UNMOUNTED: null
});

var injected = false;

/**
 * Optionally injectable environment dependent cleanup hook. (server vs.
 * browser etc). Example: A browser system caches DOM nodes based on component
 * ID and must remove that cache entry when this instance is unmounted.
 *
 * @private
 */
var unmountIDFromEnvironment = null;

/**
 * The "image" of a component tree, is the platform specific (typically
 * serialized) data that represents a tree of lower level UI building blocks.
 * On the web, this "image" is HTML markup which describes a construction of
 * low level `div` and `span` nodes. Other platforms may have different
 * encoding of this "image". This must be injected.
 *
 * @private
 */
var mountImageIntoNode = null;

/**
 * Components are the basic units of composition in React.
 *
 * Every component accepts a set of keyed input parameters known as "props" that
 * are initialized by the constructor. Once a component is mounted, the props
 * can be mutated using `setProps` or `replaceProps`.
 *
 * Every component is capable of the following operations:
 *
 *   `mountComponent`
 *     Initializes the component, renders markup, and registers event listeners.
 *
 *   `receiveComponent`
 *     Updates the rendered DOM nodes to match the given component.
 *
 *   `unmountComponent`
 *     Releases any resources allocated by this component.
 *
 * Components can also be "owned" by other components. Being owned by another
 * component means being constructed by that component. This is different from
 * being the child of a component, which means having a DOM representation that
 * is a child of the DOM representation of that component.
 *
 * @class ReactComponent
 */
var ReactComponent = {

  injection: {
    injectEnvironment: function(ReactComponentEnvironment) {
      ("production" !== "development" ? invariant(
        !injected,
        'ReactComponent: injectEnvironment() can only be called once.'
      ) : invariant(!injected));
      mountImageIntoNode = ReactComponentEnvironment.mountImageIntoNode;
      unmountIDFromEnvironment =
        ReactComponentEnvironment.unmountIDFromEnvironment;
      ReactComponent.BackendIDOperations =
        ReactComponentEnvironment.BackendIDOperations;
      injected = true;
    }
  },

  /**
   * @internal
   */
  LifeCycle: ComponentLifeCycle,

  /**
   * Injected module that provides ability to mutate individual properties.
   * Injected into the base class because many different subclasses need access
   * to this.
   *
   * @internal
   */
  BackendIDOperations: null,

  /**
   * Base functionality for every ReactComponent constructor. Mixed into the
   * `ReactComponent` prototype, but exposed statically for easy access.
   *
   * @lends {ReactComponent.prototype}
   */
  Mixin: {

    /**
     * Checks whether or not this component is mounted.
     *
     * @return {boolean} True if mounted, false otherwise.
     * @final
     * @protected
     */
    isMounted: function() {
      return this._lifeCycleState === ComponentLifeCycle.MOUNTED;
    },

    /**
     * Sets a subset of the props.
     *
     * @param {object} partialProps Subset of the next props.
     * @param {?function} callback Called after props are updated.
     * @final
     * @public
     */
    setProps: function(partialProps, callback) {
      // Merge with the pending element if it exists, otherwise with existing
      // element props.
      var element = this._pendingElement || this._currentElement;
      this.replaceProps(
        assign({}, element.props, partialProps),
        callback
      );
    },

    /**
     * Replaces all of the props.
     *
     * @param {object} props New props.
     * @param {?function} callback Called after props are updated.
     * @final
     * @public
     */
    replaceProps: function(props, callback) {
      ("production" !== "development" ? invariant(
        this.isMounted(),
        'replaceProps(...): Can only update a mounted component.'
      ) : invariant(this.isMounted()));
      ("production" !== "development" ? invariant(
        this._mountDepth === 0,
        'replaceProps(...): You called `setProps` or `replaceProps` on a ' +
        'component with a parent. This is an anti-pattern since props will ' +
        'get reactively updated when rendered. Instead, change the owner\'s ' +
        '`render` method to pass the correct value as props to the component ' +
        'where it is created.'
      ) : invariant(this._mountDepth === 0));
      // This is a deoptimized path. We optimize for always having a element.
      // This creates an extra internal element.
      this._pendingElement = ReactElement.cloneAndReplaceProps(
        this._pendingElement || this._currentElement,
        props
      );
      ReactUpdates.enqueueUpdate(this, callback);
    },

    /**
     * Schedule a partial update to the props. Only used for internal testing.
     *
     * @param {object} partialProps Subset of the next props.
     * @param {?function} callback Called after props are updated.
     * @final
     * @internal
     */
    _setPropsInternal: function(partialProps, callback) {
      // This is a deoptimized path. We optimize for always having a element.
      // This creates an extra internal element.
      var element = this._pendingElement || this._currentElement;
      this._pendingElement = ReactElement.cloneAndReplaceProps(
        element,
        assign({}, element.props, partialProps)
      );
      ReactUpdates.enqueueUpdate(this, callback);
    },

    /**
     * Base constructor for all React components.
     *
     * Subclasses that override this method should make sure to invoke
     * `ReactComponent.Mixin.construct.call(this, ...)`.
     *
     * @param {ReactElement} element
     * @internal
     */
    construct: function(element) {
      // This is the public exposed props object after it has been processed
      // with default props. The element's props represents the true internal
      // state of the props.
      this.props = element.props;
      // Record the component responsible for creating this component.
      // This is accessible through the element but we maintain an extra
      // field for compatibility with devtools and as a way to make an
      // incremental update. TODO: Consider deprecating this field.
      this._owner = element._owner;

      // All components start unmounted.
      this._lifeCycleState = ComponentLifeCycle.UNMOUNTED;

      // See ReactUpdates.
      this._pendingCallbacks = null;

      // We keep the old element and a reference to the pending element
      // to track updates.
      this._currentElement = element;
      this._pendingElement = null;
    },

    /**
     * Initializes the component, renders markup, and registers event listeners.
     *
     * NOTE: This does not insert any nodes into the DOM.
     *
     * Subclasses that override this method should make sure to invoke
     * `ReactComponent.Mixin.mountComponent.call(this, ...)`.
     *
     * @param {string} rootID DOM ID of the root node.
     * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
     * @param {number} mountDepth number of components in the owner hierarchy.
     * @return {?string} Rendered markup to be inserted into the DOM.
     * @internal
     */
    mountComponent: function(rootID, transaction, mountDepth) {
      ("production" !== "development" ? invariant(
        !this.isMounted(),
        'mountComponent(%s, ...): Can only mount an unmounted component. ' +
        'Make sure to avoid storing components between renders or reusing a ' +
        'single component instance in multiple places.',
        rootID
      ) : invariant(!this.isMounted()));
      var ref = this._currentElement.ref;
      if (ref != null) {
        var owner = this._currentElement._owner;
        ReactOwner.addComponentAsRefTo(this, ref, owner);
      }
      this._rootNodeID = rootID;
      this._lifeCycleState = ComponentLifeCycle.MOUNTED;
      this._mountDepth = mountDepth;
      // Effectively: return '';
    },

    /**
     * Releases any resources allocated by `mountComponent`.
     *
     * NOTE: This does not remove any nodes from the DOM.
     *
     * Subclasses that override this method should make sure to invoke
     * `ReactComponent.Mixin.unmountComponent.call(this)`.
     *
     * @internal
     */
    unmountComponent: function() {
      ("production" !== "development" ? invariant(
        this.isMounted(),
        'unmountComponent(): Can only unmount a mounted component.'
      ) : invariant(this.isMounted()));
      var ref = this._currentElement.ref;
      if (ref != null) {
        ReactOwner.removeComponentAsRefFrom(this, ref, this._owner);
      }
      unmountIDFromEnvironment(this._rootNodeID);
      this._rootNodeID = null;
      this._lifeCycleState = ComponentLifeCycle.UNMOUNTED;
    },

    /**
     * Given a new instance of this component, updates the rendered DOM nodes
     * as if that instance was rendered instead.
     *
     * Subclasses that override this method should make sure to invoke
     * `ReactComponent.Mixin.receiveComponent.call(this, ...)`.
     *
     * @param {object} nextComponent Next set of properties.
     * @param {ReactReconcileTransaction} transaction
     * @internal
     */
    receiveComponent: function(nextElement, transaction) {
      ("production" !== "development" ? invariant(
        this.isMounted(),
        'receiveComponent(...): Can only update a mounted component.'
      ) : invariant(this.isMounted()));
      this._pendingElement = nextElement;
      this.performUpdateIfNecessary(transaction);
    },

    /**
     * If `_pendingElement` is set, update the component.
     *
     * @param {ReactReconcileTransaction} transaction
     * @internal
     */
    performUpdateIfNecessary: function(transaction) {
      if (this._pendingElement == null) {
        return;
      }
      var prevElement = this._currentElement;
      var nextElement = this._pendingElement;
      this._currentElement = nextElement;
      this.props = nextElement.props;
      this._owner = nextElement._owner;
      this._pendingElement = null;
      this.updateComponent(transaction, prevElement);
    },

    /**
     * Updates the component's currently mounted representation.
     *
     * @param {ReactReconcileTransaction} transaction
     * @param {object} prevElement
     * @internal
     */
    updateComponent: function(transaction, prevElement) {
      var nextElement = this._currentElement;

      // If either the owner or a `ref` has changed, make sure the newest owner
      // has stored a reference to `this`, and the previous owner (if different)
      // has forgotten the reference to `this`. We use the element instead
      // of the public this.props because the post processing cannot determine
      // a ref. The ref conceptually lives on the element.

      // TODO: Should this even be possible? The owner cannot change because
      // it's forbidden by shouldUpdateReactComponent. The ref can change
      // if you swap the keys of but not the refs. Reconsider where this check
      // is made. It probably belongs where the key checking and
      // instantiateReactComponent is done.

      if (nextElement._owner !== prevElement._owner ||
          nextElement.ref !== prevElement.ref) {
        if (prevElement.ref != null) {
          ReactOwner.removeComponentAsRefFrom(
            this, prevElement.ref, prevElement._owner
          );
        }
        // Correct, even if the owner is the same, and only the ref has changed.
        if (nextElement.ref != null) {
          ReactOwner.addComponentAsRefTo(
            this,
            nextElement.ref,
            nextElement._owner
          );
        }
      }
    },

    /**
     * Mounts this component and inserts it into the DOM.
     *
     * @param {string} rootID DOM ID of the root node.
     * @param {DOMElement} container DOM element to mount into.
     * @param {boolean} shouldReuseMarkup If true, do not insert markup
     * @final
     * @internal
     * @see {ReactMount.render}
     */
    mountComponentIntoNode: function(rootID, container, shouldReuseMarkup) {
      var transaction = ReactUpdates.ReactReconcileTransaction.getPooled();
      transaction.perform(
        this._mountComponentIntoNode,
        this,
        rootID,
        container,
        transaction,
        shouldReuseMarkup
      );
      ReactUpdates.ReactReconcileTransaction.release(transaction);
    },

    /**
     * @param {string} rootID DOM ID of the root node.
     * @param {DOMElement} container DOM element to mount into.
     * @param {ReactReconcileTransaction} transaction
     * @param {boolean} shouldReuseMarkup If true, do not insert markup
     * @final
     * @private
     */
    _mountComponentIntoNode: function(
        rootID,
        container,
        transaction,
        shouldReuseMarkup) {
      var markup = this.mountComponent(rootID, transaction, 0);
      mountImageIntoNode(markup, container, shouldReuseMarkup);
    },

    /**
     * Checks if this component is owned by the supplied `owner` component.
     *
     * @param {ReactComponent} owner Component to check.
     * @return {boolean} True if `owners` owns this component.
     * @final
     * @internal
     */
    isOwnedBy: function(owner) {
      return this._owner === owner;
    },

    /**
     * Gets another component, that shares the same owner as this one, by ref.
     *
     * @param {string} ref of a sibling Component.
     * @return {?ReactComponent} the actual sibling Component.
     * @final
     * @internal
     */
    getSiblingByRef: function(ref) {
      var owner = this._owner;
      if (!owner || !owner.refs) {
        return null;
      }
      return owner.refs[ref];
    }
  }
};

module.exports = ReactComponent;

},{"./Object.assign":27,"./ReactElement":52,"./ReactOwner":67,"./ReactUpdates":79,"./invariant":126,"./keyMirror":132}],33:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactComponentBrowserEnvironment
 */

/*jslint evil: true */

"use strict";

var ReactDOMIDOperations = _dereq_("./ReactDOMIDOperations");
var ReactMarkupChecksum = _dereq_("./ReactMarkupChecksum");
var ReactMount = _dereq_("./ReactMount");
var ReactPerf = _dereq_("./ReactPerf");
var ReactReconcileTransaction = _dereq_("./ReactReconcileTransaction");

var getReactRootElementInContainer = _dereq_("./getReactRootElementInContainer");
var invariant = _dereq_("./invariant");
var setInnerHTML = _dereq_("./setInnerHTML");


var ELEMENT_NODE_TYPE = 1;
var DOC_NODE_TYPE = 9;


/**
 * Abstracts away all functionality of `ReactComponent` requires knowledge of
 * the browser context.
 */
var ReactComponentBrowserEnvironment = {
  ReactReconcileTransaction: ReactReconcileTransaction,

  BackendIDOperations: ReactDOMIDOperations,

  /**
   * If a particular environment requires that some resources be cleaned up,
   * specify this in the injected Mixin. In the DOM, we would likely want to
   * purge any cached node ID lookups.
   *
   * @private
   */
  unmountIDFromEnvironment: function(rootNodeID) {
    ReactMount.purgeID(rootNodeID);
  },

  /**
   * @param {string} markup Markup string to place into the DOM Element.
   * @param {DOMElement} container DOM Element to insert markup into.
   * @param {boolean} shouldReuseMarkup Should reuse the existing markup in the
   * container if possible.
   */
  mountImageIntoNode: ReactPerf.measure(
    'ReactComponentBrowserEnvironment',
    'mountImageIntoNode',
    function(markup, container, shouldReuseMarkup) {
      ("production" !== "development" ? invariant(
        container && (
          container.nodeType === ELEMENT_NODE_TYPE ||
            container.nodeType === DOC_NODE_TYPE
        ),
        'mountComponentIntoNode(...): Target container is not valid.'
      ) : invariant(container && (
        container.nodeType === ELEMENT_NODE_TYPE ||
          container.nodeType === DOC_NODE_TYPE
      )));

      if (shouldReuseMarkup) {
        if (ReactMarkupChecksum.canReuseMarkup(
          markup,
          getReactRootElementInContainer(container))) {
          return;
        } else {
          ("production" !== "development" ? invariant(
            container.nodeType !== DOC_NODE_TYPE,
            'You\'re trying to render a component to the document using ' +
            'server rendering but the checksum was invalid. This usually ' +
            'means you rendered a different component type or props on ' +
            'the client from the one on the server, or your render() ' +
            'methods are impure. React cannot handle this case due to ' +
            'cross-browser quirks by rendering at the document root. You ' +
            'should look for environment dependent code in your components ' +
            'and ensure the props are the same client and server side.'
          ) : invariant(container.nodeType !== DOC_NODE_TYPE));

          if ("production" !== "development") {
            console.warn(
              'React attempted to use reuse markup in a container but the ' +
              'checksum was invalid. This generally means that you are ' +
              'using server rendering and the markup generated on the ' +
              'server was not what the client was expecting. React injected ' +
              'new markup to compensate which works but you have lost many ' +
              'of the benefits of server rendering. Instead, figure out ' +
              'why the markup being generated is different on the client ' +
              'or server.'
            );
          }
        }
      }

      ("production" !== "development" ? invariant(
        container.nodeType !== DOC_NODE_TYPE,
        'You\'re trying to render a component to the document but ' +
          'you didn\'t use server rendering. We can\'t do this ' +
          'without using server rendering due to cross-browser quirks. ' +
          'See renderComponentToString() for server rendering.'
      ) : invariant(container.nodeType !== DOC_NODE_TYPE));

      setInnerHTML(container, markup);
    }
  )
};

module.exports = ReactComponentBrowserEnvironment;

},{"./ReactDOMIDOperations":41,"./ReactMarkupChecksum":62,"./ReactMount":63,"./ReactPerf":68,"./ReactReconcileTransaction":74,"./getReactRootElementInContainer":120,"./invariant":126,"./setInnerHTML":140}],34:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactCompositeComponent
 */

"use strict";

var ReactComponent = _dereq_("./ReactComponent");
var ReactContext = _dereq_("./ReactContext");
var ReactCurrentOwner = _dereq_("./ReactCurrentOwner");
var ReactElement = _dereq_("./ReactElement");
var ReactElementValidator = _dereq_("./ReactElementValidator");
var ReactEmptyComponent = _dereq_("./ReactEmptyComponent");
var ReactErrorUtils = _dereq_("./ReactErrorUtils");
var ReactLegacyElement = _dereq_("./ReactLegacyElement");
var ReactOwner = _dereq_("./ReactOwner");
var ReactPerf = _dereq_("./ReactPerf");
var ReactPropTransferer = _dereq_("./ReactPropTransferer");
var ReactPropTypeLocations = _dereq_("./ReactPropTypeLocations");
var ReactPropTypeLocationNames = _dereq_("./ReactPropTypeLocationNames");
var ReactUpdates = _dereq_("./ReactUpdates");

var assign = _dereq_("./Object.assign");
var instantiateReactComponent = _dereq_("./instantiateReactComponent");
var invariant = _dereq_("./invariant");
var keyMirror = _dereq_("./keyMirror");
var keyOf = _dereq_("./keyOf");
var monitorCodeUse = _dereq_("./monitorCodeUse");
var mapObject = _dereq_("./mapObject");
var shouldUpdateReactComponent = _dereq_("./shouldUpdateReactComponent");
var warning = _dereq_("./warning");

var MIXINS_KEY = keyOf({mixins: null});

/**
 * Policies that describe methods in `ReactCompositeComponentInterface`.
 */
var SpecPolicy = keyMirror({
  /**
   * These methods may be defined only once by the class specification or mixin.
   */
  DEFINE_ONCE: null,
  /**
   * These methods may be defined by both the class specification and mixins.
   * Subsequent definitions will be chained. These methods must return void.
   */
  DEFINE_MANY: null,
  /**
   * These methods are overriding the base ReactCompositeComponent class.
   */
  OVERRIDE_BASE: null,
  /**
   * These methods are similar to DEFINE_MANY, except we assume they return
   * objects. We try to merge the keys of the return values of all the mixed in
   * functions. If there is a key conflict we throw.
   */
  DEFINE_MANY_MERGED: null
});


var injectedMixins = [];

/**
 * Composite components are higher-level components that compose other composite
 * or native components.
 *
 * To create a new type of `ReactCompositeComponent`, pass a specification of
 * your new class to `React.createClass`. The only requirement of your class
 * specification is that you implement a `render` method.
 *
 *   var MyComponent = React.createClass({
 *     render: function() {
 *       return <div>Hello World</div>;
 *     }
 *   });
 *
 * The class specification supports a specific protocol of methods that have
 * special meaning (e.g. `render`). See `ReactCompositeComponentInterface` for
 * more the comprehensive protocol. Any other properties and methods in the
 * class specification will available on the prototype.
 *
 * @interface ReactCompositeComponentInterface
 * @internal
 */
var ReactCompositeComponentInterface = {

  /**
   * An array of Mixin objects to include when defining your component.
   *
   * @type {array}
   * @optional
   */
  mixins: SpecPolicy.DEFINE_MANY,

  /**
   * An object containing properties and methods that should be defined on
   * the component's constructor instead of its prototype (static methods).
   *
   * @type {object}
   * @optional
   */
  statics: SpecPolicy.DEFINE_MANY,

  /**
   * Definition of prop types for this component.
   *
   * @type {object}
   * @optional
   */
  propTypes: SpecPolicy.DEFINE_MANY,

  /**
   * Definition of context types for this component.
   *
   * @type {object}
   * @optional
   */
  contextTypes: SpecPolicy.DEFINE_MANY,

  /**
   * Definition of context types this component sets for its children.
   *
   * @type {object}
   * @optional
   */
  childContextTypes: SpecPolicy.DEFINE_MANY,

  // ==== Definition methods ====

  /**
   * Invoked when the component is mounted. Values in the mapping will be set on
   * `this.props` if that prop is not specified (i.e. using an `in` check).
   *
   * This method is invoked before `getInitialState` and therefore cannot rely
   * on `this.state` or use `this.setState`.
   *
   * @return {object}
   * @optional
   */
  getDefaultProps: SpecPolicy.DEFINE_MANY_MERGED,

  /**
   * Invoked once before the component is mounted. The return value will be used
   * as the initial value of `this.state`.
   *
   *   getInitialState: function() {
   *     return {
   *       isOn: false,
   *       fooBaz: new BazFoo()
   *     }
   *   }
   *
   * @return {object}
   * @optional
   */
  getInitialState: SpecPolicy.DEFINE_MANY_MERGED,

  /**
   * @return {object}
   * @optional
   */
  getChildContext: SpecPolicy.DEFINE_MANY_MERGED,

  /**
   * Uses props from `this.props` and state from `this.state` to render the
   * structure of the component.
   *
   * No guarantees are made about when or how often this method is invoked, so
   * it must not have side effects.
   *
   *   render: function() {
   *     var name = this.props.name;
   *     return <div>Hello, {name}!</div>;
   *   }
   *
   * @return {ReactComponent}
   * @nosideeffects
   * @required
   */
  render: SpecPolicy.DEFINE_ONCE,



  // ==== Delegate methods ====

  /**
   * Invoked when the component is initially created and about to be mounted.
   * This may have side effects, but any external subscriptions or data created
   * by this method must be cleaned up in `componentWillUnmount`.
   *
   * @optional
   */
  componentWillMount: SpecPolicy.DEFINE_MANY,

  /**
   * Invoked when the component has been mounted and has a DOM representation.
   * However, there is no guarantee that the DOM node is in the document.
   *
   * Use this as an opportunity to operate on the DOM when the component has
   * been mounted (initialized and rendered) for the first time.
   *
   * @param {DOMElement} rootNode DOM element representing the component.
   * @optional
   */
  componentDidMount: SpecPolicy.DEFINE_MANY,

  /**
   * Invoked before the component receives new props.
   *
   * Use this as an opportunity to react to a prop transition by updating the
   * state using `this.setState`. Current props are accessed via `this.props`.
   *
   *   componentWillReceiveProps: function(nextProps, nextContext) {
   *     this.setState({
   *       likesIncreasing: nextProps.likeCount > this.props.likeCount
   *     });
   *   }
   *
   * NOTE: There is no equivalent `componentWillReceiveState`. An incoming prop
   * transition may cause a state change, but the opposite is not true. If you
   * need it, you are probably looking for `componentWillUpdate`.
   *
   * @param {object} nextProps
   * @optional
   */
  componentWillReceiveProps: SpecPolicy.DEFINE_MANY,

  /**
   * Invoked while deciding if the component should be updated as a result of
   * receiving new props, state and/or context.
   *
   * Use this as an opportunity to `return false` when you're certain that the
   * transition to the new props/state/context will not require a component
   * update.
   *
   *   shouldComponentUpdate: function(nextProps, nextState, nextContext) {
   *     return !equal(nextProps, this.props) ||
   *       !equal(nextState, this.state) ||
   *       !equal(nextContext, this.context);
   *   }
   *
   * @param {object} nextProps
   * @param {?object} nextState
   * @param {?object} nextContext
   * @return {boolean} True if the component should update.
   * @optional
   */
  shouldComponentUpdate: SpecPolicy.DEFINE_ONCE,

  /**
   * Invoked when the component is about to update due to a transition from
   * `this.props`, `this.state` and `this.context` to `nextProps`, `nextState`
   * and `nextContext`.
   *
   * Use this as an opportunity to perform preparation before an update occurs.
   *
   * NOTE: You **cannot** use `this.setState()` in this method.
   *
   * @param {object} nextProps
   * @param {?object} nextState
   * @param {?object} nextContext
   * @param {ReactReconcileTransaction} transaction
   * @optional
   */
  componentWillUpdate: SpecPolicy.DEFINE_MANY,

  /**
   * Invoked when the component's DOM representation has been updated.
   *
   * Use this as an opportunity to operate on the DOM when the component has
   * been updated.
   *
   * @param {object} prevProps
   * @param {?object} prevState
   * @param {?object} prevContext
   * @param {DOMElement} rootNode DOM element representing the component.
   * @optional
   */
  componentDidUpdate: SpecPolicy.DEFINE_MANY,

  /**
   * Invoked when the component is about to be removed from its parent and have
   * its DOM representation destroyed.
   *
   * Use this as an opportunity to deallocate any external resources.
   *
   * NOTE: There is no `componentDidUnmount` since your component will have been
   * destroyed by that point.
   *
   * @optional
   */
  componentWillUnmount: SpecPolicy.DEFINE_MANY,



  // ==== Advanced methods ====

  /**
   * Updates the component's currently mounted DOM representation.
   *
   * By default, this implements React's rendering and reconciliation algorithm.
   * Sophisticated clients may wish to override this.
   *
   * @param {ReactReconcileTransaction} transaction
   * @internal
   * @overridable
   */
  updateComponent: SpecPolicy.OVERRIDE_BASE

};

/**
 * Mapping from class specification keys to special processing functions.
 *
 * Although these are declared like instance properties in the specification
 * when defining classes using `React.createClass`, they are actually static
 * and are accessible on the constructor instead of the prototype. Despite
 * being static, they must be defined outside of the "statics" key under
 * which all other static methods are defined.
 */
var RESERVED_SPEC_KEYS = {
  displayName: function(Constructor, displayName) {
    Constructor.displayName = displayName;
  },
  mixins: function(Constructor, mixins) {
    if (mixins) {
      for (var i = 0; i < mixins.length; i++) {
        mixSpecIntoComponent(Constructor, mixins[i]);
      }
    }
  },
  childContextTypes: function(Constructor, childContextTypes) {
    validateTypeDef(
      Constructor,
      childContextTypes,
      ReactPropTypeLocations.childContext
    );
    Constructor.childContextTypes = assign(
      {},
      Constructor.childContextTypes,
      childContextTypes
    );
  },
  contextTypes: function(Constructor, contextTypes) {
    validateTypeDef(
      Constructor,
      contextTypes,
      ReactPropTypeLocations.context
    );
    Constructor.contextTypes = assign(
      {},
      Constructor.contextTypes,
      contextTypes
    );
  },
  /**
   * Special case getDefaultProps which should move into statics but requires
   * automatic merging.
   */
  getDefaultProps: function(Constructor, getDefaultProps) {
    if (Constructor.getDefaultProps) {
      Constructor.getDefaultProps = createMergedResultFunction(
        Constructor.getDefaultProps,
        getDefaultProps
      );
    } else {
      Constructor.getDefaultProps = getDefaultProps;
    }
  },
  propTypes: function(Constructor, propTypes) {
    validateTypeDef(
      Constructor,
      propTypes,
      ReactPropTypeLocations.prop
    );
    Constructor.propTypes = assign(
      {},
      Constructor.propTypes,
      propTypes
    );
  },
  statics: function(Constructor, statics) {
    mixStaticSpecIntoComponent(Constructor, statics);
  }
};

function getDeclarationErrorAddendum(component) {
  var owner = component._owner || null;
  if (owner && owner.constructor && owner.constructor.displayName) {
    return ' Check the render method of `' + owner.constructor.displayName +
      '`.';
  }
  return '';
}

function validateTypeDef(Constructor, typeDef, location) {
  for (var propName in typeDef) {
    if (typeDef.hasOwnProperty(propName)) {
      ("production" !== "development" ? invariant(
        typeof typeDef[propName] == 'function',
        '%s: %s type `%s` is invalid; it must be a function, usually from ' +
        'React.PropTypes.',
        Constructor.displayName || 'ReactCompositeComponent',
        ReactPropTypeLocationNames[location],
        propName
      ) : invariant(typeof typeDef[propName] == 'function'));
    }
  }
}

function validateMethodOverride(proto, name) {
  var specPolicy = ReactCompositeComponentInterface.hasOwnProperty(name) ?
    ReactCompositeComponentInterface[name] :
    null;

  // Disallow overriding of base class methods unless explicitly allowed.
  if (ReactCompositeComponentMixin.hasOwnProperty(name)) {
    ("production" !== "development" ? invariant(
      specPolicy === SpecPolicy.OVERRIDE_BASE,
      'ReactCompositeComponentInterface: You are attempting to override ' +
      '`%s` from your class specification. Ensure that your method names ' +
      'do not overlap with React methods.',
      name
    ) : invariant(specPolicy === SpecPolicy.OVERRIDE_BASE));
  }

  // Disallow defining methods more than once unless explicitly allowed.
  if (proto.hasOwnProperty(name)) {
    ("production" !== "development" ? invariant(
      specPolicy === SpecPolicy.DEFINE_MANY ||
      specPolicy === SpecPolicy.DEFINE_MANY_MERGED,
      'ReactCompositeComponentInterface: You are attempting to define ' +
      '`%s` on your component more than once. This conflict may be due ' +
      'to a mixin.',
      name
    ) : invariant(specPolicy === SpecPolicy.DEFINE_MANY ||
    specPolicy === SpecPolicy.DEFINE_MANY_MERGED));
  }
}

function validateLifeCycleOnReplaceState(instance) {
  var compositeLifeCycleState = instance._compositeLifeCycleState;
  ("production" !== "development" ? invariant(
    instance.isMounted() ||
      compositeLifeCycleState === CompositeLifeCycle.MOUNTING,
    'replaceState(...): Can only update a mounted or mounting component.'
  ) : invariant(instance.isMounted() ||
    compositeLifeCycleState === CompositeLifeCycle.MOUNTING));
  ("production" !== "development" ? invariant(
    ReactCurrentOwner.current == null,
    'replaceState(...): Cannot update during an existing state transition ' +
    '(such as within `render`). Render methods should be a pure function ' +
    'of props and state.'
  ) : invariant(ReactCurrentOwner.current == null));
  ("production" !== "development" ? invariant(compositeLifeCycleState !== CompositeLifeCycle.UNMOUNTING,
    'replaceState(...): Cannot update while unmounting component. This ' +
    'usually means you called setState() on an unmounted component.'
  ) : invariant(compositeLifeCycleState !== CompositeLifeCycle.UNMOUNTING));
}

/**
 * Mixin helper which handles policy validation and reserved
 * specification keys when building `ReactCompositeComponent` classses.
 */
function mixSpecIntoComponent(Constructor, spec) {
  if (!spec) {
    return;
  }

  ("production" !== "development" ? invariant(
    !ReactLegacyElement.isValidFactory(spec),
    'ReactCompositeComponent: You\'re attempting to ' +
    'use a component class as a mixin. Instead, just use a regular object.'
  ) : invariant(!ReactLegacyElement.isValidFactory(spec)));
  ("production" !== "development" ? invariant(
    !ReactElement.isValidElement(spec),
    'ReactCompositeComponent: You\'re attempting to ' +
    'use a component as a mixin. Instead, just use a regular object.'
  ) : invariant(!ReactElement.isValidElement(spec)));

  var proto = Constructor.prototype;

  // By handling mixins before any other properties, we ensure the same
  // chaining order is applied to methods with DEFINE_MANY policy, whether
  // mixins are listed before or after these methods in the spec.
  if (spec.hasOwnProperty(MIXINS_KEY)) {
    RESERVED_SPEC_KEYS.mixins(Constructor, spec.mixins);
  }

  for (var name in spec) {
    if (!spec.hasOwnProperty(name)) {
      continue;
    }

    if (name === MIXINS_KEY) {
      // We have already handled mixins in a special case above
      continue;
    }

    var property = spec[name];
    validateMethodOverride(proto, name);

    if (RESERVED_SPEC_KEYS.hasOwnProperty(name)) {
      RESERVED_SPEC_KEYS[name](Constructor, property);
    } else {
      // Setup methods on prototype:
      // The following member methods should not be automatically bound:
      // 1. Expected ReactCompositeComponent methods (in the "interface").
      // 2. Overridden methods (that were mixed in).
      var isCompositeComponentMethod =
        ReactCompositeComponentInterface.hasOwnProperty(name);
      var isAlreadyDefined = proto.hasOwnProperty(name);
      var markedDontBind = property && property.__reactDontBind;
      var isFunction = typeof property === 'function';
      var shouldAutoBind =
        isFunction &&
        !isCompositeComponentMethod &&
        !isAlreadyDefined &&
        !markedDontBind;

      if (shouldAutoBind) {
        if (!proto.__reactAutoBindMap) {
          proto.__reactAutoBindMap = {};
        }
        proto.__reactAutoBindMap[name] = property;
        proto[name] = property;
      } else {
        if (isAlreadyDefined) {
          var specPolicy = ReactCompositeComponentInterface[name];

          // These cases should already be caught by validateMethodOverride
          ("production" !== "development" ? invariant(
            isCompositeComponentMethod && (
              specPolicy === SpecPolicy.DEFINE_MANY_MERGED ||
              specPolicy === SpecPolicy.DEFINE_MANY
            ),
            'ReactCompositeComponent: Unexpected spec policy %s for key %s ' +
            'when mixing in component specs.',
            specPolicy,
            name
          ) : invariant(isCompositeComponentMethod && (
            specPolicy === SpecPolicy.DEFINE_MANY_MERGED ||
            specPolicy === SpecPolicy.DEFINE_MANY
          )));

          // For methods which are defined more than once, call the existing
          // methods before calling the new property, merging if appropriate.
          if (specPolicy === SpecPolicy.DEFINE_MANY_MERGED) {
            proto[name] = createMergedResultFunction(proto[name], property);
          } else if (specPolicy === SpecPolicy.DEFINE_MANY) {
            proto[name] = createChainedFunction(proto[name], property);
          }
        } else {
          proto[name] = property;
          if ("production" !== "development") {
            // Add verbose displayName to the function, which helps when looking
            // at profiling tools.
            if (typeof property === 'function' && spec.displayName) {
              proto[name].displayName = spec.displayName + '_' + name;
            }
          }
        }
      }
    }
  }
}

function mixStaticSpecIntoComponent(Constructor, statics) {
  if (!statics) {
    return;
  }
  for (var name in statics) {
    var property = statics[name];
    if (!statics.hasOwnProperty(name)) {
      continue;
    }

    var isReserved = name in RESERVED_SPEC_KEYS;
    ("production" !== "development" ? invariant(
      !isReserved,
      'ReactCompositeComponent: You are attempting to define a reserved ' +
      'property, `%s`, that shouldn\'t be on the "statics" key. Define it ' +
      'as an instance property instead; it will still be accessible on the ' +
      'constructor.',
      name
    ) : invariant(!isReserved));

    var isInherited = name in Constructor;
    ("production" !== "development" ? invariant(
      !isInherited,
      'ReactCompositeComponent: You are attempting to define ' +
      '`%s` on your component more than once. This conflict may be ' +
      'due to a mixin.',
      name
    ) : invariant(!isInherited));
    Constructor[name] = property;
  }
}

/**
 * Merge two objects, but throw if both contain the same key.
 *
 * @param {object} one The first object, which is mutated.
 * @param {object} two The second object
 * @return {object} one after it has been mutated to contain everything in two.
 */
function mergeObjectsWithNoDuplicateKeys(one, two) {
  ("production" !== "development" ? invariant(
    one && two && typeof one === 'object' && typeof two === 'object',
    'mergeObjectsWithNoDuplicateKeys(): Cannot merge non-objects'
  ) : invariant(one && two && typeof one === 'object' && typeof two === 'object'));

  mapObject(two, function(value, key) {
    ("production" !== "development" ? invariant(
      one[key] === undefined,
      'mergeObjectsWithNoDuplicateKeys(): ' +
      'Tried to merge two objects with the same key: `%s`. This conflict ' +
      'may be due to a mixin; in particular, this may be caused by two ' +
      'getInitialState() or getDefaultProps() methods returning objects ' +
      'with clashing keys.',
      key
    ) : invariant(one[key] === undefined));
    one[key] = value;
  });
  return one;
}

/**
 * Creates a function that invokes two functions and merges their return values.
 *
 * @param {function} one Function to invoke first.
 * @param {function} two Function to invoke second.
 * @return {function} Function that invokes the two argument functions.
 * @private
 */
function createMergedResultFunction(one, two) {
  return function mergedResult() {
    var a = one.apply(this, arguments);
    var b = two.apply(this, arguments);
    if (a == null) {
      return b;
    } else if (b == null) {
      return a;
    }
    return mergeObjectsWithNoDuplicateKeys(a, b);
  };
}

/**
 * Creates a function that invokes two functions and ignores their return vales.
 *
 * @param {function} one Function to invoke first.
 * @param {function} two Function to invoke second.
 * @return {function} Function that invokes the two argument functions.
 * @private
 */
function createChainedFunction(one, two) {
  return function chainedFunction() {
    one.apply(this, arguments);
    two.apply(this, arguments);
  };
}

/**
 * `ReactCompositeComponent` maintains an auxiliary life cycle state in
 * `this._compositeLifeCycleState` (which can be null).
 *
 * This is different from the life cycle state maintained by `ReactComponent` in
 * `this._lifeCycleState`. The following diagram shows how the states overlap in
 * time. There are times when the CompositeLifeCycle is null - at those times it
 * is only meaningful to look at ComponentLifeCycle alone.
 *
 * Top Row: ReactComponent.ComponentLifeCycle
 * Low Row: ReactComponent.CompositeLifeCycle
 *
 * +-------+---------------------------------+--------+
 * |  UN   |             MOUNTED             |   UN   |
 * |MOUNTED|                                 | MOUNTED|
 * +-------+---------------------------------+--------+
 * |       ^--------+   +-------+   +--------^        |
 * |       |        |   |       |   |        |        |
 * |    0--|MOUNTING|-0-|RECEIVE|-0-|   UN   |--->0   |
 * |       |        |   |PROPS  |   |MOUNTING|        |
 * |       |        |   |       |   |        |        |
 * |       |        |   |       |   |        |        |
 * |       +--------+   +-------+   +--------+        |
 * |       |                                 |        |
 * +-------+---------------------------------+--------+
 */
var CompositeLifeCycle = keyMirror({
  /**
   * Components in the process of being mounted respond to state changes
   * differently.
   */
  MOUNTING: null,
  /**
   * Components in the process of being unmounted are guarded against state
   * changes.
   */
  UNMOUNTING: null,
  /**
   * Components that are mounted and receiving new props respond to state
   * changes differently.
   */
  RECEIVING_PROPS: null
});

/**
 * @lends {ReactCompositeComponent.prototype}
 */
var ReactCompositeComponentMixin = {

  /**
   * Base constructor for all composite component.
   *
   * @param {ReactElement} element
   * @final
   * @internal
   */
  construct: function(element) {
    // Children can be either an array or more than one argument
    ReactComponent.Mixin.construct.apply(this, arguments);
    ReactOwner.Mixin.construct.apply(this, arguments);

    this.state = null;
    this._pendingState = null;

    // This is the public post-processed context. The real context and pending
    // context lives on the element.
    this.context = null;

    this._compositeLifeCycleState = null;
  },

  /**
   * Checks whether or not this composite component is mounted.
   * @return {boolean} True if mounted, false otherwise.
   * @protected
   * @final
   */
  isMounted: function() {
    return ReactComponent.Mixin.isMounted.call(this) &&
      this._compositeLifeCycleState !== CompositeLifeCycle.MOUNTING;
  },

  /**
   * Initializes the component, renders markup, and registers event listeners.
   *
   * @param {string} rootID DOM ID of the root node.
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @param {number} mountDepth number of components in the owner hierarchy
   * @return {?string} Rendered markup to be inserted into the DOM.
   * @final
   * @internal
   */
  mountComponent: ReactPerf.measure(
    'ReactCompositeComponent',
    'mountComponent',
    function(rootID, transaction, mountDepth) {
      ReactComponent.Mixin.mountComponent.call(
        this,
        rootID,
        transaction,
        mountDepth
      );
      this._compositeLifeCycleState = CompositeLifeCycle.MOUNTING;

      if (this.__reactAutoBindMap) {
        this._bindAutoBindMethods();
      }

      this.context = this._processContext(this._currentElement._context);
      this.props = this._processProps(this.props);

      this.state = this.getInitialState ? this.getInitialState() : null;
      ("production" !== "development" ? invariant(
        typeof this.state === 'object' && !Array.isArray(this.state),
        '%s.getInitialState(): must return an object or null',
        this.constructor.displayName || 'ReactCompositeComponent'
      ) : invariant(typeof this.state === 'object' && !Array.isArray(this.state)));

      this._pendingState = null;
      this._pendingForceUpdate = false;

      if (this.componentWillMount) {
        this.componentWillMount();
        // When mounting, calls to `setState` by `componentWillMount` will set
        // `this._pendingState` without triggering a re-render.
        if (this._pendingState) {
          this.state = this._pendingState;
          this._pendingState = null;
        }
      }

      this._renderedComponent = instantiateReactComponent(
        this._renderValidatedComponent(),
        this._currentElement.type // The wrapping type
      );

      // Done with mounting, `setState` will now trigger UI changes.
      this._compositeLifeCycleState = null;
      var markup = this._renderedComponent.mountComponent(
        rootID,
        transaction,
        mountDepth + 1
      );
      if (this.componentDidMount) {
        transaction.getReactMountReady().enqueue(this.componentDidMount, this);
      }
      return markup;
    }
  ),

  /**
   * Releases any resources allocated by `mountComponent`.
   *
   * @final
   * @internal
   */
  unmountComponent: function() {
    this._compositeLifeCycleState = CompositeLifeCycle.UNMOUNTING;
    if (this.componentWillUnmount) {
      this.componentWillUnmount();
    }
    this._compositeLifeCycleState = null;

    this._renderedComponent.unmountComponent();
    this._renderedComponent = null;

    ReactComponent.Mixin.unmountComponent.call(this);

    // Some existing components rely on this.props even after they've been
    // destroyed (in event handlers).
    // TODO: this.props = null;
    // TODO: this.state = null;
  },

  /**
   * Sets a subset of the state. Always use this or `replaceState` to mutate
   * state. You should treat `this.state` as immutable.
   *
   * There is no guarantee that `this.state` will be immediately updated, so
   * accessing `this.state` after calling this method may return the old value.
   *
   * There is no guarantee that calls to `setState` will run synchronously,
   * as they may eventually be batched together.  You can provide an optional
   * callback that will be executed when the call to setState is actually
   * completed.
   *
   * @param {object} partialState Next partial state to be merged with state.
   * @param {?function} callback Called after state is updated.
   * @final
   * @protected
   */
  setState: function(partialState, callback) {
    ("production" !== "development" ? invariant(
      typeof partialState === 'object' || partialState == null,
      'setState(...): takes an object of state variables to update.'
    ) : invariant(typeof partialState === 'object' || partialState == null));
    if ("production" !== "development"){
      ("production" !== "development" ? warning(
        partialState != null,
        'setState(...): You passed an undefined or null state object; ' +
        'instead, use forceUpdate().'
      ) : null);
    }
    // Merge with `_pendingState` if it exists, otherwise with existing state.
    this.replaceState(
      assign({}, this._pendingState || this.state, partialState),
      callback
    );
  },

  /**
   * Replaces all of the state. Always use this or `setState` to mutate state.
   * You should treat `this.state` as immutable.
   *
   * There is no guarantee that `this.state` will be immediately updated, so
   * accessing `this.state` after calling this method may return the old value.
   *
   * @param {object} completeState Next state.
   * @param {?function} callback Called after state is updated.
   * @final
   * @protected
   */
  replaceState: function(completeState, callback) {
    validateLifeCycleOnReplaceState(this);
    this._pendingState = completeState;
    if (this._compositeLifeCycleState !== CompositeLifeCycle.MOUNTING) {
      // If we're in a componentWillMount handler, don't enqueue a rerender
      // because ReactUpdates assumes we're in a browser context (which is wrong
      // for server rendering) and we're about to do a render anyway.
      // TODO: The callback here is ignored when setState is called from
      // componentWillMount. Either fix it or disallow doing so completely in
      // favor of getInitialState.
      ReactUpdates.enqueueUpdate(this, callback);
    }
  },

  /**
   * Filters the context object to only contain keys specified in
   * `contextTypes`, and asserts that they are valid.
   *
   * @param {object} context
   * @return {?object}
   * @private
   */
  _processContext: function(context) {
    var maskedContext = null;
    var contextTypes = this.constructor.contextTypes;
    if (contextTypes) {
      maskedContext = {};
      for (var contextName in contextTypes) {
        maskedContext[contextName] = context[contextName];
      }
      if ("production" !== "development") {
        this._checkPropTypes(
          contextTypes,
          maskedContext,
          ReactPropTypeLocations.context
        );
      }
    }
    return maskedContext;
  },

  /**
   * @param {object} currentContext
   * @return {object}
   * @private
   */
  _processChildContext: function(currentContext) {
    var childContext = this.getChildContext && this.getChildContext();
    var displayName = this.constructor.displayName || 'ReactCompositeComponent';
    if (childContext) {
      ("production" !== "development" ? invariant(
        typeof this.constructor.childContextTypes === 'object',
        '%s.getChildContext(): childContextTypes must be defined in order to ' +
        'use getChildContext().',
        displayName
      ) : invariant(typeof this.constructor.childContextTypes === 'object'));
      if ("production" !== "development") {
        this._checkPropTypes(
          this.constructor.childContextTypes,
          childContext,
          ReactPropTypeLocations.childContext
        );
      }
      for (var name in childContext) {
        ("production" !== "development" ? invariant(
          name in this.constructor.childContextTypes,
          '%s.getChildContext(): key "%s" is not defined in childContextTypes.',
          displayName,
          name
        ) : invariant(name in this.constructor.childContextTypes));
      }
      return assign({}, currentContext, childContext);
    }
    return currentContext;
  },

  /**
   * Processes props by setting default values for unspecified props and
   * asserting that the props are valid. Does not mutate its argument; returns
   * a new props object with defaults merged in.
   *
   * @param {object} newProps
   * @return {object}
   * @private
   */
  _processProps: function(newProps) {
    if ("production" !== "development") {
      var propTypes = this.constructor.propTypes;
      if (propTypes) {
        this._checkPropTypes(propTypes, newProps, ReactPropTypeLocations.prop);
      }
    }
    return newProps;
  },

  /**
   * Assert that the props are valid
   *
   * @param {object} propTypes Map of prop name to a ReactPropType
   * @param {object} props
   * @param {string} location e.g. "prop", "context", "child context"
   * @private
   */
  _checkPropTypes: function(propTypes, props, location) {
    // TODO: Stop validating prop types here and only use the element
    // validation.
    var componentName = this.constructor.displayName;
    for (var propName in propTypes) {
      if (propTypes.hasOwnProperty(propName)) {
        var error =
          propTypes[propName](props, propName, componentName, location);
        if (error instanceof Error) {
          // We may want to extend this logic for similar errors in
          // renderComponent calls, so I'm abstracting it away into
          // a function to minimize refactoring in the future
          var addendum = getDeclarationErrorAddendum(this);
          ("production" !== "development" ? warning(false, error.message + addendum) : null);
        }
      }
    }
  },

  /**
   * If any of `_pendingElement`, `_pendingState`, or `_pendingForceUpdate`
   * is set, update the component.
   *
   * @param {ReactReconcileTransaction} transaction
   * @internal
   */
  performUpdateIfNecessary: function(transaction) {
    var compositeLifeCycleState = this._compositeLifeCycleState;
    // Do not trigger a state transition if we are in the middle of mounting or
    // receiving props because both of those will already be doing this.
    if (compositeLifeCycleState === CompositeLifeCycle.MOUNTING ||
        compositeLifeCycleState === CompositeLifeCycle.RECEIVING_PROPS) {
      return;
    }

    if (this._pendingElement == null &&
        this._pendingState == null &&
        !this._pendingForceUpdate) {
      return;
    }

    var nextContext = this.context;
    var nextProps = this.props;
    var nextElement = this._currentElement;
    if (this._pendingElement != null) {
      nextElement = this._pendingElement;
      nextContext = this._processContext(nextElement._context);
      nextProps = this._processProps(nextElement.props);
      this._pendingElement = null;

      this._compositeLifeCycleState = CompositeLifeCycle.RECEIVING_PROPS;
      if (this.componentWillReceiveProps) {
        this.componentWillReceiveProps(nextProps, nextContext);
      }
    }

    this._compositeLifeCycleState = null;

    var nextState = this._pendingState || this.state;
    this._pendingState = null;

    var shouldUpdate =
      this._pendingForceUpdate ||
      !this.shouldComponentUpdate ||
      this.shouldComponentUpdate(nextProps, nextState, nextContext);

    if ("production" !== "development") {
      if (typeof shouldUpdate === "undefined") {
        console.warn(
          (this.constructor.displayName || 'ReactCompositeComponent') +
          '.shouldComponentUpdate(): Returned undefined instead of a ' +
          'boolean value. Make sure to return true or false.'
        );
      }
    }

    if (shouldUpdate) {
      this._pendingForceUpdate = false;
      // Will set `this.props`, `this.state` and `this.context`.
      this._performComponentUpdate(
        nextElement,
        nextProps,
        nextState,
        nextContext,
        transaction
      );
    } else {
      // If it's determined that a component should not update, we still want
      // to set props and state.
      this._currentElement = nextElement;
      this.props = nextProps;
      this.state = nextState;
      this.context = nextContext;

      // Owner cannot change because shouldUpdateReactComponent doesn't allow
      // it. TODO: Remove this._owner completely.
      this._owner = nextElement._owner;
    }
  },

  /**
   * Merges new props and state, notifies delegate methods of update and
   * performs update.
   *
   * @param {ReactElement} nextElement Next element
   * @param {object} nextProps Next public object to set as properties.
   * @param {?object} nextState Next object to set as state.
   * @param {?object} nextContext Next public object to set as context.
   * @param {ReactReconcileTransaction} transaction
   * @private
   */
  _performComponentUpdate: function(
    nextElement,
    nextProps,
    nextState,
    nextContext,
    transaction
  ) {
    var prevElement = this._currentElement;
    var prevProps = this.props;
    var prevState = this.state;
    var prevContext = this.context;

    if (this.componentWillUpdate) {
      this.componentWillUpdate(nextProps, nextState, nextContext);
    }

    this._currentElement = nextElement;
    this.props = nextProps;
    this.state = nextState;
    this.context = nextContext;

    // Owner cannot change because shouldUpdateReactComponent doesn't allow
    // it. TODO: Remove this._owner completely.
    this._owner = nextElement._owner;

    this.updateComponent(
      transaction,
      prevElement
    );

    if (this.componentDidUpdate) {
      transaction.getReactMountReady().enqueue(
        this.componentDidUpdate.bind(this, prevProps, prevState, prevContext),
        this
      );
    }
  },

  receiveComponent: function(nextElement, transaction) {
    if (nextElement === this._currentElement &&
        nextElement._owner != null) {
      // Since elements are immutable after the owner is rendered,
      // we can do a cheap identity compare here to determine if this is a
      // superfluous reconcile. It's possible for state to be mutable but such
      // change should trigger an update of the owner which would recreate
      // the element. We explicitly check for the existence of an owner since
      // it's possible for a element created outside a composite to be
      // deeply mutated and reused.
      return;
    }

    ReactComponent.Mixin.receiveComponent.call(
      this,
      nextElement,
      transaction
    );
  },

  /**
   * Updates the component's currently mounted DOM representation.
   *
   * By default, this implements React's rendering and reconciliation algorithm.
   * Sophisticated clients may wish to override this.
   *
   * @param {ReactReconcileTransaction} transaction
   * @param {ReactElement} prevElement
   * @internal
   * @overridable
   */
  updateComponent: ReactPerf.measure(
    'ReactCompositeComponent',
    'updateComponent',
    function(transaction, prevParentElement) {
      ReactComponent.Mixin.updateComponent.call(
        this,
        transaction,
        prevParentElement
      );

      var prevComponentInstance = this._renderedComponent;
      var prevElement = prevComponentInstance._currentElement;
      var nextElement = this._renderValidatedComponent();
      if (shouldUpdateReactComponent(prevElement, nextElement)) {
        prevComponentInstance.receiveComponent(nextElement, transaction);
      } else {
        // These two IDs are actually the same! But nothing should rely on that.
        var thisID = this._rootNodeID;
        var prevComponentID = prevComponentInstance._rootNodeID;
        prevComponentInstance.unmountComponent();
        this._renderedComponent = instantiateReactComponent(
          nextElement,
          this._currentElement.type
        );
        var nextMarkup = this._renderedComponent.mountComponent(
          thisID,
          transaction,
          this._mountDepth + 1
        );
        ReactComponent.BackendIDOperations.dangerouslyReplaceNodeWithMarkupByID(
          prevComponentID,
          nextMarkup
        );
      }
    }
  ),

  /**
   * Forces an update. This should only be invoked when it is known with
   * certainty that we are **not** in a DOM transaction.
   *
   * You may want to call this when you know that some deeper aspect of the
   * component's state has changed but `setState` was not called.
   *
   * This will not invoke `shouldUpdateComponent`, but it will invoke
   * `componentWillUpdate` and `componentDidUpdate`.
   *
   * @param {?function} callback Called after update is complete.
   * @final
   * @protected
   */
  forceUpdate: function(callback) {
    var compositeLifeCycleState = this._compositeLifeCycleState;
    ("production" !== "development" ? invariant(
      this.isMounted() ||
        compositeLifeCycleState === CompositeLifeCycle.MOUNTING,
      'forceUpdate(...): Can only force an update on mounted or mounting ' +
        'components.'
    ) : invariant(this.isMounted() ||
      compositeLifeCycleState === CompositeLifeCycle.MOUNTING));
    ("production" !== "development" ? invariant(
      compositeLifeCycleState !== CompositeLifeCycle.UNMOUNTING &&
      ReactCurrentOwner.current == null,
      'forceUpdate(...): Cannot force an update while unmounting component ' +
      'or within a `render` function.'
    ) : invariant(compositeLifeCycleState !== CompositeLifeCycle.UNMOUNTING &&
    ReactCurrentOwner.current == null));
    this._pendingForceUpdate = true;
    ReactUpdates.enqueueUpdate(this, callback);
  },

  /**
   * @private
   */
  _renderValidatedComponent: ReactPerf.measure(
    'ReactCompositeComponent',
    '_renderValidatedComponent',
    function() {
      var renderedComponent;
      var previousContext = ReactContext.current;
      ReactContext.current = this._processChildContext(
        this._currentElement._context
      );
      ReactCurrentOwner.current = this;
      try {
        renderedComponent = this.render();
        if (renderedComponent === null || renderedComponent === false) {
          renderedComponent = ReactEmptyComponent.getEmptyComponent();
          ReactEmptyComponent.registerNullComponentID(this._rootNodeID);
        } else {
          ReactEmptyComponent.deregisterNullComponentID(this._rootNodeID);
        }
      } finally {
        ReactContext.current = previousContext;
        ReactCurrentOwner.current = null;
      }
      ("production" !== "development" ? invariant(
        ReactElement.isValidElement(renderedComponent),
        '%s.render(): A valid ReactComponent must be returned. You may have ' +
          'returned undefined, an array or some other invalid object.',
        this.constructor.displayName || 'ReactCompositeComponent'
      ) : invariant(ReactElement.isValidElement(renderedComponent)));
      return renderedComponent;
    }
  ),

  /**
   * @private
   */
  _bindAutoBindMethods: function() {
    for (var autoBindKey in this.__reactAutoBindMap) {
      if (!this.__reactAutoBindMap.hasOwnProperty(autoBindKey)) {
        continue;
      }
      var method = this.__reactAutoBindMap[autoBindKey];
      this[autoBindKey] = this._bindAutoBindMethod(ReactErrorUtils.guard(
        method,
        this.constructor.displayName + '.' + autoBindKey
      ));
    }
  },

  /**
   * Binds a method to the component.
   *
   * @param {function} method Method to be bound.
   * @private
   */
  _bindAutoBindMethod: function(method) {
    var component = this;
    var boundMethod = method.bind(component);
    if ("production" !== "development") {
      boundMethod.__reactBoundContext = component;
      boundMethod.__reactBoundMethod = method;
      boundMethod.__reactBoundArguments = null;
      var componentName = component.constructor.displayName;
      var _bind = boundMethod.bind;
      boundMethod.bind = function(newThis ) {for (var args=[],$__0=1,$__1=arguments.length;$__0<$__1;$__0++) args.push(arguments[$__0]);
        // User is trying to bind() an autobound method; we effectively will
        // ignore the value of "this" that the user is trying to use, so
        // let's warn.
        if (newThis !== component && newThis !== null) {
          monitorCodeUse('react_bind_warning', { component: componentName });
          console.warn(
            'bind(): React component methods may only be bound to the ' +
            'component instance. See ' + componentName
          );
        } else if (!args.length) {
          monitorCodeUse('react_bind_warning', { component: componentName });
          console.warn(
            'bind(): You are binding a component method to the component. ' +
            'React does this for you automatically in a high-performance ' +
            'way, so you can safely remove this call. See ' + componentName
          );
          return boundMethod;
        }
        var reboundMethod = _bind.apply(boundMethod, arguments);
        reboundMethod.__reactBoundContext = component;
        reboundMethod.__reactBoundMethod = method;
        reboundMethod.__reactBoundArguments = args;
        return reboundMethod;
      };
    }
    return boundMethod;
  }
};

var ReactCompositeComponentBase = function() {};
assign(
  ReactCompositeComponentBase.prototype,
  ReactComponent.Mixin,
  ReactOwner.Mixin,
  ReactPropTransferer.Mixin,
  ReactCompositeComponentMixin
);

/**
 * Module for creating composite components.
 *
 * @class ReactCompositeComponent
 * @extends ReactComponent
 * @extends ReactOwner
 * @extends ReactPropTransferer
 */
var ReactCompositeComponent = {

  LifeCycle: CompositeLifeCycle,

  Base: ReactCompositeComponentBase,

  /**
   * Creates a composite component class given a class specification.
   *
   * @param {object} spec Class specification (which must define `render`).
   * @return {function} Component constructor function.
   * @public
   */
  createClass: function(spec) {
    var Constructor = function(props) {
      // This constructor is overridden by mocks. The argument is used
      // by mocks to assert on what gets mounted. This will later be used
      // by the stand-alone class implementation.
    };
    Constructor.prototype = new ReactCompositeComponentBase();
    Constructor.prototype.constructor = Constructor;

    injectedMixins.forEach(
      mixSpecIntoComponent.bind(null, Constructor)
    );

    mixSpecIntoComponent(Constructor, spec);

    // Initialize the defaultProps property after all mixins have been merged
    if (Constructor.getDefaultProps) {
      Constructor.defaultProps = Constructor.getDefaultProps();
    }

    ("production" !== "development" ? invariant(
      Constructor.prototype.render,
      'createClass(...): Class specification must implement a `render` method.'
    ) : invariant(Constructor.prototype.render));

    if ("production" !== "development") {
      if (Constructor.prototype.componentShouldUpdate) {
        monitorCodeUse(
          'react_component_should_update_warning',
          { component: spec.displayName }
        );
        console.warn(
          (spec.displayName || 'A component') + ' has a method called ' +
          'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' +
          'The name is phrased as a question because the function is ' +
          'expected to return a value.'
         );
      }
    }

    // Reduce time spent doing lookups by setting these on the prototype.
    for (var methodName in ReactCompositeComponentInterface) {
      if (!Constructor.prototype[methodName]) {
        Constructor.prototype[methodName] = null;
      }
    }

    if ("production" !== "development") {
      return ReactLegacyElement.wrapFactory(
        ReactElementValidator.createFactory(Constructor)
      );
    }
    return ReactLegacyElement.wrapFactory(
      ReactElement.createFactory(Constructor)
    );
  },

  injection: {
    injectMixin: function(mixin) {
      injectedMixins.push(mixin);
    }
  }
};

module.exports = ReactCompositeComponent;

},{"./Object.assign":27,"./ReactComponent":32,"./ReactContext":35,"./ReactCurrentOwner":36,"./ReactElement":52,"./ReactElementValidator":53,"./ReactEmptyComponent":54,"./ReactErrorUtils":55,"./ReactLegacyElement":61,"./ReactOwner":67,"./ReactPerf":68,"./ReactPropTransferer":69,"./ReactPropTypeLocationNames":70,"./ReactPropTypeLocations":71,"./ReactUpdates":79,"./instantiateReactComponent":125,"./invariant":126,"./keyMirror":132,"./keyOf":133,"./mapObject":134,"./monitorCodeUse":136,"./shouldUpdateReactComponent":142,"./warning":145}],35:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactContext
 */

"use strict";

var assign = _dereq_("./Object.assign");

/**
 * Keeps track of the current context.
 *
 * The context is automatically passed down the component ownership hierarchy
 * and is accessible via `this.context` on ReactCompositeComponents.
 */
var ReactContext = {

  /**
   * @internal
   * @type {object}
   */
  current: {},

  /**
   * Temporarily extends the current context while executing scopedCallback.
   *
   * A typical use case might look like
   *
   *  render: function() {
   *    var children = ReactContext.withContext({foo: 'foo'}, () => (
   *
   *    ));
   *    return <div>{children}</div>;
   *  }
   *
   * @param {object} newContext New context to merge into the existing context
   * @param {function} scopedCallback Callback to run with the new context
   * @return {ReactComponent|array<ReactComponent>}
   */
  withContext: function(newContext, scopedCallback) {
    var result;
    var previousContext = ReactContext.current;
    ReactContext.current = assign({}, previousContext, newContext);
    try {
      result = scopedCallback();
    } finally {
      ReactContext.current = previousContext;
    }
    return result;
  }

};

module.exports = ReactContext;

},{"./Object.assign":27}],36:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactCurrentOwner
 */

"use strict";

/**
 * Keeps track of the current owner.
 *
 * The current owner is the component who should own any components that are
 * currently being constructed.
 *
 * The depth indicate how many composite components are above this render level.
 */
var ReactCurrentOwner = {

  /**
   * @internal
   * @type {ReactComponent}
   */
  current: null

};

module.exports = ReactCurrentOwner;

},{}],37:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOM
 * @typechecks static-only
 */

"use strict";

var ReactElement = _dereq_("./ReactElement");
var ReactElementValidator = _dereq_("./ReactElementValidator");
var ReactLegacyElement = _dereq_("./ReactLegacyElement");

var mapObject = _dereq_("./mapObject");

/**
 * Create a factory that creates HTML tag elements.
 *
 * @param {string} tag Tag name (e.g. `div`).
 * @private
 */
function createDOMFactory(tag) {
  if ("production" !== "development") {
    return ReactLegacyElement.markNonLegacyFactory(
      ReactElementValidator.createFactory(tag)
    );
  }
  return ReactLegacyElement.markNonLegacyFactory(
    ReactElement.createFactory(tag)
  );
}

/**
 * Creates a mapping from supported HTML tags to `ReactDOMComponent` classes.
 * This is also accessible via `React.DOM`.
 *
 * @public
 */
var ReactDOM = mapObject({
  a: 'a',
  abbr: 'abbr',
  address: 'address',
  area: 'area',
  article: 'article',
  aside: 'aside',
  audio: 'audio',
  b: 'b',
  base: 'base',
  bdi: 'bdi',
  bdo: 'bdo',
  big: 'big',
  blockquote: 'blockquote',
  body: 'body',
  br: 'br',
  button: 'button',
  canvas: 'canvas',
  caption: 'caption',
  cite: 'cite',
  code: 'code',
  col: 'col',
  colgroup: 'colgroup',
  data: 'data',
  datalist: 'datalist',
  dd: 'dd',
  del: 'del',
  details: 'details',
  dfn: 'dfn',
  dialog: 'dialog',
  div: 'div',
  dl: 'dl',
  dt: 'dt',
  em: 'em',
  embed: 'embed',
  fieldset: 'fieldset',
  figcaption: 'figcaption',
  figure: 'figure',
  footer: 'footer',
  form: 'form',
  h1: 'h1',
  h2: 'h2',
  h3: 'h3',
  h4: 'h4',
  h5: 'h5',
  h6: 'h6',
  head: 'head',
  header: 'header',
  hr: 'hr',
  html: 'html',
  i: 'i',
  iframe: 'iframe',
  img: 'img',
  input: 'input',
  ins: 'ins',
  kbd: 'kbd',
  keygen: 'keygen',
  label: 'label',
  legend: 'legend',
  li: 'li',
  link: 'link',
  main: 'main',
  map: 'map',
  mark: 'mark',
  menu: 'menu',
  menuitem: 'menuitem',
  meta: 'meta',
  meter: 'meter',
  nav: 'nav',
  noscript: 'noscript',
  object: 'object',
  ol: 'ol',
  optgroup: 'optgroup',
  option: 'option',
  output: 'output',
  p: 'p',
  param: 'param',
  picture: 'picture',
  pre: 'pre',
  progress: 'progress',
  q: 'q',
  rp: 'rp',
  rt: 'rt',
  ruby: 'ruby',
  s: 's',
  samp: 'samp',
  script: 'script',
  section: 'section',
  select: 'select',
  small: 'small',
  source: 'source',
  span: 'span',
  strong: 'strong',
  style: 'style',
  sub: 'sub',
  summary: 'summary',
  sup: 'sup',
  table: 'table',
  tbody: 'tbody',
  td: 'td',
  textarea: 'textarea',
  tfoot: 'tfoot',
  th: 'th',
  thead: 'thead',
  time: 'time',
  title: 'title',
  tr: 'tr',
  track: 'track',
  u: 'u',
  ul: 'ul',
  'var': 'var',
  video: 'video',
  wbr: 'wbr',

  // SVG
  circle: 'circle',
  defs: 'defs',
  ellipse: 'ellipse',
  g: 'g',
  line: 'line',
  linearGradient: 'linearGradient',
  mask: 'mask',
  path: 'path',
  pattern: 'pattern',
  polygon: 'polygon',
  polyline: 'polyline',
  radialGradient: 'radialGradient',
  rect: 'rect',
  stop: 'stop',
  svg: 'svg',
  text: 'text',
  tspan: 'tspan'

}, createDOMFactory);

module.exports = ReactDOM;

},{"./ReactElement":52,"./ReactElementValidator":53,"./ReactLegacyElement":61,"./mapObject":134}],38:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMButton
 */

"use strict";

var AutoFocusMixin = _dereq_("./AutoFocusMixin");
var ReactBrowserComponentMixin = _dereq_("./ReactBrowserComponentMixin");
var ReactCompositeComponent = _dereq_("./ReactCompositeComponent");
var ReactElement = _dereq_("./ReactElement");
var ReactDOM = _dereq_("./ReactDOM");

var keyMirror = _dereq_("./keyMirror");

// Store a reference to the <button> `ReactDOMComponent`. TODO: use string
var button = ReactElement.createFactory(ReactDOM.button.type);

var mouseListenerNames = keyMirror({
  onClick: true,
  onDoubleClick: true,
  onMouseDown: true,
  onMouseMove: true,
  onMouseUp: true,
  onClickCapture: true,
  onDoubleClickCapture: true,
  onMouseDownCapture: true,
  onMouseMoveCapture: true,
  onMouseUpCapture: true
});

/**
 * Implements a <button> native component that does not receive mouse events
 * when `disabled` is set.
 */
var ReactDOMButton = ReactCompositeComponent.createClass({
  displayName: 'ReactDOMButton',

  mixins: [AutoFocusMixin, ReactBrowserComponentMixin],

  render: function() {
    var props = {};

    // Copy the props; except the mouse listeners if we're disabled
    for (var key in this.props) {
      if (this.props.hasOwnProperty(key) &&
          (!this.props.disabled || !mouseListenerNames[key])) {
        props[key] = this.props[key];
      }
    }

    return button(props, this.props.children);
  }

});

module.exports = ReactDOMButton;

},{"./AutoFocusMixin":2,"./ReactBrowserComponentMixin":29,"./ReactCompositeComponent":34,"./ReactDOM":37,"./ReactElement":52,"./keyMirror":132}],39:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMComponent
 * @typechecks static-only
 */

"use strict";

var CSSPropertyOperations = _dereq_("./CSSPropertyOperations");
var DOMProperty = _dereq_("./DOMProperty");
var DOMPropertyOperations = _dereq_("./DOMPropertyOperations");
var ReactBrowserComponentMixin = _dereq_("./ReactBrowserComponentMixin");
var ReactComponent = _dereq_("./ReactComponent");
var ReactBrowserEventEmitter = _dereq_("./ReactBrowserEventEmitter");
var ReactMount = _dereq_("./ReactMount");
var ReactMultiChild = _dereq_("./ReactMultiChild");
var ReactPerf = _dereq_("./ReactPerf");

var assign = _dereq_("./Object.assign");
var escapeTextForBrowser = _dereq_("./escapeTextForBrowser");
var invariant = _dereq_("./invariant");
var isEventSupported = _dereq_("./isEventSupported");
var keyOf = _dereq_("./keyOf");
var monitorCodeUse = _dereq_("./monitorCodeUse");

var deleteListener = ReactBrowserEventEmitter.deleteListener;
var listenTo = ReactBrowserEventEmitter.listenTo;
var registrationNameModules = ReactBrowserEventEmitter.registrationNameModules;

// For quickly matching children type, to test if can be treated as content.
var CONTENT_TYPES = {'string': true, 'number': true};

var STYLE = keyOf({style: null});

var ELEMENT_NODE_TYPE = 1;

/**
 * @param {?object} props
 */
function assertValidProps(props) {
  if (!props) {
    return;
  }
  // Note the use of `==` which checks for null or undefined.
  ("production" !== "development" ? invariant(
    props.children == null || props.dangerouslySetInnerHTML == null,
    'Can only set one of `children` or `props.dangerouslySetInnerHTML`.'
  ) : invariant(props.children == null || props.dangerouslySetInnerHTML == null));
  if ("production" !== "development") {
    if (props.contentEditable && props.children != null) {
      console.warn(
        'A component is `contentEditable` and contains `children` managed by ' +
        'React. It is now your responsibility to guarantee that none of those '+
        'nodes are unexpectedly modified or duplicated. This is probably not ' +
        'intentional.'
      );
    }
  }
  ("production" !== "development" ? invariant(
    props.style == null || typeof props.style === 'object',
    'The `style` prop expects a mapping from style properties to values, ' +
    'not a string.'
  ) : invariant(props.style == null || typeof props.style === 'object'));
}

function putListener(id, registrationName, listener, transaction) {
  if ("production" !== "development") {
    // IE8 has no API for event capturing and the `onScroll` event doesn't
    // bubble.
    if (registrationName === 'onScroll' &&
        !isEventSupported('scroll', true)) {
      monitorCodeUse('react_no_scroll_event');
      console.warn('This browser doesn\'t support the `onScroll` event');
    }
  }
  var container = ReactMount.findReactContainerForID(id);
  if (container) {
    var doc = container.nodeType === ELEMENT_NODE_TYPE ?
      container.ownerDocument :
      container;
    listenTo(registrationName, doc);
  }
  transaction.getPutListenerQueue().enqueuePutListener(
    id,
    registrationName,
    listener
  );
}

// For HTML, certain tags should omit their close tag. We keep a whitelist for
// those special cased tags.

var omittedCloseTags = {
  'area': true,
  'base': true,
  'br': true,
  'col': true,
  'embed': true,
  'hr': true,
  'img': true,
  'input': true,
  'keygen': true,
  'link': true,
  'meta': true,
  'param': true,
  'source': true,
  'track': true,
  'wbr': true
  // NOTE: menuitem's close tag should be omitted, but that causes problems.
};

// We accept any tag to be rendered but since this gets injected into abitrary
// HTML, we want to make sure that it's a safe tag.
// http://www.w3.org/TR/REC-xml/#NT-Name

var VALID_TAG_REGEX = /^[a-zA-Z][a-zA-Z:_\.\-\d]*$/; // Simplified subset
var validatedTagCache = {};
var hasOwnProperty = {}.hasOwnProperty;

function validateDangerousTag(tag) {
  if (!hasOwnProperty.call(validatedTagCache, tag)) {
    ("production" !== "development" ? invariant(VALID_TAG_REGEX.test(tag), 'Invalid tag: %s', tag) : invariant(VALID_TAG_REGEX.test(tag)));
    validatedTagCache[tag] = true;
  }
}

/**
 * Creates a new React class that is idempotent and capable of containing other
 * React components. It accepts event listeners and DOM properties that are
 * valid according to `DOMProperty`.
 *
 *  - Event listeners: `onClick`, `onMouseDown`, etc.
 *  - DOM properties: `className`, `name`, `title`, etc.
 *
 * The `style` property functions differently from the DOM API. It accepts an
 * object mapping of style properties to values.
 *
 * @constructor ReactDOMComponent
 * @extends ReactComponent
 * @extends ReactMultiChild
 */
function ReactDOMComponent(tag) {
  validateDangerousTag(tag);
  this._tag = tag;
  this.tagName = tag.toUpperCase();
}

ReactDOMComponent.displayName = 'ReactDOMComponent';

ReactDOMComponent.Mixin = {

  /**
   * Generates root tag markup then recurses. This method has side effects and
   * is not idempotent.
   *
   * @internal
   * @param {string} rootID The root DOM ID for this node.
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @param {number} mountDepth number of components in the owner hierarchy
   * @return {string} The computed markup.
   */
  mountComponent: ReactPerf.measure(
    'ReactDOMComponent',
    'mountComponent',
    function(rootID, transaction, mountDepth) {
      ReactComponent.Mixin.mountComponent.call(
        this,
        rootID,
        transaction,
        mountDepth
      );
      assertValidProps(this.props);
      var closeTag = omittedCloseTags[this._tag] ? '' : '</' + this._tag + '>';
      return (
        this._createOpenTagMarkupAndPutListeners(transaction) +
        this._createContentMarkup(transaction) +
        closeTag
      );
    }
  ),

  /**
   * Creates markup for the open tag and all attributes.
   *
   * This method has side effects because events get registered.
   *
   * Iterating over object properties is faster than iterating over arrays.
   * @see http://jsperf.com/obj-vs-arr-iteration
   *
   * @private
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @return {string} Markup of opening tag.
   */
  _createOpenTagMarkupAndPutListeners: function(transaction) {
    var props = this.props;
    var ret = '<' + this._tag;

    for (var propKey in props) {
      if (!props.hasOwnProperty(propKey)) {
        continue;
      }
      var propValue = props[propKey];
      if (propValue == null) {
        continue;
      }
      if (registrationNameModules.hasOwnProperty(propKey)) {
        putListener(this._rootNodeID, propKey, propValue, transaction);
      } else {
        if (propKey === STYLE) {
          if (propValue) {
            propValue = props.style = assign({}, props.style);
          }
          propValue = CSSPropertyOperations.createMarkupForStyles(propValue);
        }
        var markup =
          DOMPropertyOperations.createMarkupForProperty(propKey, propValue);
        if (markup) {
          ret += ' ' + markup;
        }
      }
    }

    // For static pages, no need to put React ID and checksum. Saves lots of
    // bytes.
    if (transaction.renderToStaticMarkup) {
      return ret + '>';
    }

    var markupForID = DOMPropertyOperations.createMarkupForID(this._rootNodeID);
    return ret + ' ' + markupForID + '>';
  },

  /**
   * Creates markup for the content between the tags.
   *
   * @private
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @return {string} Content markup.
   */
  _createContentMarkup: function(transaction) {
    // Intentional use of != to avoid catching zero/false.
    var innerHTML = this.props.dangerouslySetInnerHTML;
    if (innerHTML != null) {
      if (innerHTML.__html != null) {
        return innerHTML.__html;
      }
    } else {
      var contentToUse =
        CONTENT_TYPES[typeof this.props.children] ? this.props.children : null;
      var childrenToUse = contentToUse != null ? null : this.props.children;
      if (contentToUse != null) {
        return escapeTextForBrowser(contentToUse);
      } else if (childrenToUse != null) {
        var mountImages = this.mountChildren(
          childrenToUse,
          transaction
        );
        return mountImages.join('');
      }
    }
    return '';
  },

  receiveComponent: function(nextElement, transaction) {
    if (nextElement === this._currentElement &&
        nextElement._owner != null) {
      // Since elements are immutable after the owner is rendered,
      // we can do a cheap identity compare here to determine if this is a
      // superfluous reconcile. It's possible for state to be mutable but such
      // change should trigger an update of the owner which would recreate
      // the element. We explicitly check for the existence of an owner since
      // it's possible for a element created outside a composite to be
      // deeply mutated and reused.
      return;
    }

    ReactComponent.Mixin.receiveComponent.call(
      this,
      nextElement,
      transaction
    );
  },

  /**
   * Updates a native DOM component after it has already been allocated and
   * attached to the DOM. Reconciles the root DOM node, then recurses.
   *
   * @param {ReactReconcileTransaction} transaction
   * @param {ReactElement} prevElement
   * @internal
   * @overridable
   */
  updateComponent: ReactPerf.measure(
    'ReactDOMComponent',
    'updateComponent',
    function(transaction, prevElement) {
      assertValidProps(this._currentElement.props);
      ReactComponent.Mixin.updateComponent.call(
        this,
        transaction,
        prevElement
      );
      this._updateDOMProperties(prevElement.props, transaction);
      this._updateDOMChildren(prevElement.props, transaction);
    }
  ),

  /**
   * Reconciles the properties by detecting differences in property values and
   * updating the DOM as necessary. This function is probably the single most
   * critical path for performance optimization.
   *
   * TODO: Benchmark whether checking for changed values in memory actually
   *       improves performance (especially statically positioned elements).
   * TODO: Benchmark the effects of putting this at the top since 99% of props
   *       do not change for a given reconciliation.
   * TODO: Benchmark areas that can be improved with caching.
   *
   * @private
   * @param {object} lastProps
   * @param {ReactReconcileTransaction} transaction
   */
  _updateDOMProperties: function(lastProps, transaction) {
    var nextProps = this.props;
    var propKey;
    var styleName;
    var styleUpdates;
    for (propKey in lastProps) {
      if (nextProps.hasOwnProperty(propKey) ||
         !lastProps.hasOwnProperty(propKey)) {
        continue;
      }
      if (propKey === STYLE) {
        var lastStyle = lastProps[propKey];
        for (styleName in lastStyle) {
          if (lastStyle.hasOwnProperty(styleName)) {
            styleUpdates = styleUpdates || {};
            styleUpdates[styleName] = '';
          }
        }
      } else if (registrationNameModules.hasOwnProperty(propKey)) {
        deleteListener(this._rootNodeID, propKey);
      } else if (
          DOMProperty.isStandardName[propKey] ||
          DOMProperty.isCustomAttribute(propKey)) {
        ReactComponent.BackendIDOperations.deletePropertyByID(
          this._rootNodeID,
          propKey
        );
      }
    }
    for (propKey in nextProps) {
      var nextProp = nextProps[propKey];
      var lastProp = lastProps[propKey];
      if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp) {
        continue;
      }
      if (propKey === STYLE) {
        if (nextProp) {
          nextProp = nextProps.style = assign({}, nextProp);
        }
        if (lastProp) {
          // Unset styles on `lastProp` but not on `nextProp`.
          for (styleName in lastProp) {
            if (lastProp.hasOwnProperty(styleName) &&
                (!nextProp || !nextProp.hasOwnProperty(styleName))) {
              styleUpdates = styleUpdates || {};
              styleUpdates[styleName] = '';
            }
          }
          // Update styles that changed since `lastProp`.
          for (styleName in nextProp) {
            if (nextProp.hasOwnProperty(styleName) &&
                lastProp[styleName] !== nextProp[styleName]) {
              styleUpdates = styleUpdates || {};
              styleUpdates[styleName] = nextProp[styleName];
            }
          }
        } else {
          // Relies on `updateStylesByID` not mutating `styleUpdates`.
          styleUpdates = nextProp;
        }
      } else if (registrationNameModules.hasOwnProperty(propKey)) {
        putListener(this._rootNodeID, propKey, nextProp, transaction);
      } else if (
          DOMProperty.isStandardName[propKey] ||
          DOMProperty.isCustomAttribute(propKey)) {
        ReactComponent.BackendIDOperations.updatePropertyByID(
          this._rootNodeID,
          propKey,
          nextProp
        );
      }
    }
    if (styleUpdates) {
      ReactComponent.BackendIDOperations.updateStylesByID(
        this._rootNodeID,
        styleUpdates
      );
    }
  },

  /**
   * Reconciles the children with the various properties that affect the
   * children content.
   *
   * @param {object} lastProps
   * @param {ReactReconcileTransaction} transaction
   */
  _updateDOMChildren: function(lastProps, transaction) {
    var nextProps = this.props;

    var lastContent =
      CONTENT_TYPES[typeof lastProps.children] ? lastProps.children : null;
    var nextContent =
      CONTENT_TYPES[typeof nextProps.children] ? nextProps.children : null;

    var lastHtml =
      lastProps.dangerouslySetInnerHTML &&
      lastProps.dangerouslySetInnerHTML.__html;
    var nextHtml =
      nextProps.dangerouslySetInnerHTML &&
      nextProps.dangerouslySetInnerHTML.__html;

    // Note the use of `!=` which checks for null or undefined.
    var lastChildren = lastContent != null ? null : lastProps.children;
    var nextChildren = nextContent != null ? null : nextProps.children;

    // If we're switching from children to content/html or vice versa, remove
    // the old content
    var lastHasContentOrHtml = lastContent != null || lastHtml != null;
    var nextHasContentOrHtml = nextContent != null || nextHtml != null;
    if (lastChildren != null && nextChildren == null) {
      this.updateChildren(null, transaction);
    } else if (lastHasContentOrHtml && !nextHasContentOrHtml) {
      this.updateTextContent('');
    }

    if (nextContent != null) {
      if (lastContent !== nextContent) {
        this.updateTextContent('' + nextContent);
      }
    } else if (nextHtml != null) {
      if (lastHtml !== nextHtml) {
        ReactComponent.BackendIDOperations.updateInnerHTMLByID(
          this._rootNodeID,
          nextHtml
        );
      }
    } else if (nextChildren != null) {
      this.updateChildren(nextChildren, transaction);
    }
  },

  /**
   * Destroys all event registrations for this instance. Does not remove from
   * the DOM. That must be done by the parent.
   *
   * @internal
   */
  unmountComponent: function() {
    this.unmountChildren();
    ReactBrowserEventEmitter.deleteAllListeners(this._rootNodeID);
    ReactComponent.Mixin.unmountComponent.call(this);
  }

};

assign(
  ReactDOMComponent.prototype,
  ReactComponent.Mixin,
  ReactDOMComponent.Mixin,
  ReactMultiChild.Mixin,
  ReactBrowserComponentMixin
);

module.exports = ReactDOMComponent;

},{"./CSSPropertyOperations":5,"./DOMProperty":11,"./DOMPropertyOperations":12,"./Object.assign":27,"./ReactBrowserComponentMixin":29,"./ReactBrowserEventEmitter":30,"./ReactComponent":32,"./ReactMount":63,"./ReactMultiChild":64,"./ReactPerf":68,"./escapeTextForBrowser":109,"./invariant":126,"./isEventSupported":127,"./keyOf":133,"./monitorCodeUse":136}],40:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMForm
 */

"use strict";

var EventConstants = _dereq_("./EventConstants");
var LocalEventTrapMixin = _dereq_("./LocalEventTrapMixin");
var ReactBrowserComponentMixin = _dereq_("./ReactBrowserComponentMixin");
var ReactCompositeComponent = _dereq_("./ReactCompositeComponent");
var ReactElement = _dereq_("./ReactElement");
var ReactDOM = _dereq_("./ReactDOM");

// Store a reference to the <form> `ReactDOMComponent`. TODO: use string
var form = ReactElement.createFactory(ReactDOM.form.type);

/**
 * Since onSubmit doesn't bubble OR capture on the top level in IE8, we need
 * to capture it on the <form> element itself. There are lots of hacks we could
 * do to accomplish this, but the most reliable is to make <form> a
 * composite component and use `componentDidMount` to attach the event handlers.
 */
var ReactDOMForm = ReactCompositeComponent.createClass({
  displayName: 'ReactDOMForm',

  mixins: [ReactBrowserComponentMixin, LocalEventTrapMixin],

  render: function() {
    // TODO: Instead of using `ReactDOM` directly, we should use JSX. However,
    // `jshint` fails to parse JSX so in order for linting to work in the open
    // source repo, we need to just use `ReactDOM.form`.
    return form(this.props);
  },

  componentDidMount: function() {
    this.trapBubbledEvent(EventConstants.topLevelTypes.topReset, 'reset');
    this.trapBubbledEvent(EventConstants.topLevelTypes.topSubmit, 'submit');
  }
});

module.exports = ReactDOMForm;

},{"./EventConstants":16,"./LocalEventTrapMixin":25,"./ReactBrowserComponentMixin":29,"./ReactCompositeComponent":34,"./ReactDOM":37,"./ReactElement":52}],41:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMIDOperations
 * @typechecks static-only
 */

/*jslint evil: true */

"use strict";

var CSSPropertyOperations = _dereq_("./CSSPropertyOperations");
var DOMChildrenOperations = _dereq_("./DOMChildrenOperations");
var DOMPropertyOperations = _dereq_("./DOMPropertyOperations");
var ReactMount = _dereq_("./ReactMount");
var ReactPerf = _dereq_("./ReactPerf");

var invariant = _dereq_("./invariant");
var setInnerHTML = _dereq_("./setInnerHTML");

/**
 * Errors for properties that should not be updated with `updatePropertyById()`.
 *
 * @type {object}
 * @private
 */
var INVALID_PROPERTY_ERRORS = {
  dangerouslySetInnerHTML:
    '`dangerouslySetInnerHTML` must be set using `updateInnerHTMLByID()`.',
  style: '`style` must be set using `updateStylesByID()`.'
};

/**
 * Operations used to process updates to DOM nodes. This is made injectable via
 * `ReactComponent.BackendIDOperations`.
 */
var ReactDOMIDOperations = {

  /**
   * Updates a DOM node with new property values. This should only be used to
   * update DOM properties in `DOMProperty`.
   *
   * @param {string} id ID of the node to update.
   * @param {string} name A valid property name, see `DOMProperty`.
   * @param {*} value New value of the property.
   * @internal
   */
  updatePropertyByID: ReactPerf.measure(
    'ReactDOMIDOperations',
    'updatePropertyByID',
    function(id, name, value) {
      var node = ReactMount.getNode(id);
      ("production" !== "development" ? invariant(
        !INVALID_PROPERTY_ERRORS.hasOwnProperty(name),
        'updatePropertyByID(...): %s',
        INVALID_PROPERTY_ERRORS[name]
      ) : invariant(!INVALID_PROPERTY_ERRORS.hasOwnProperty(name)));

      // If we're updating to null or undefined, we should remove the property
      // from the DOM node instead of inadvertantly setting to a string. This
      // brings us in line with the same behavior we have on initial render.
      if (value != null) {
        DOMPropertyOperations.setValueForProperty(node, name, value);
      } else {
        DOMPropertyOperations.deleteValueForProperty(node, name);
      }
    }
  ),

  /**
   * Updates a DOM node to remove a property. This should only be used to remove
   * DOM properties in `DOMProperty`.
   *
   * @param {string} id ID of the node to update.
   * @param {string} name A property name to remove, see `DOMProperty`.
   * @internal
   */
  deletePropertyByID: ReactPerf.measure(
    'ReactDOMIDOperations',
    'deletePropertyByID',
    function(id, name, value) {
      var node = ReactMount.getNode(id);
      ("production" !== "development" ? invariant(
        !INVALID_PROPERTY_ERRORS.hasOwnProperty(name),
        'updatePropertyByID(...): %s',
        INVALID_PROPERTY_ERRORS[name]
      ) : invariant(!INVALID_PROPERTY_ERRORS.hasOwnProperty(name)));
      DOMPropertyOperations.deleteValueForProperty(node, name, value);
    }
  ),

  /**
   * Updates a DOM node with new style values. If a value is specified as '',
   * the corresponding style property will be unset.
   *
   * @param {string} id ID of the node to update.
   * @param {object} styles Mapping from styles to values.
   * @internal
   */
  updateStylesByID: ReactPerf.measure(
    'ReactDOMIDOperations',
    'updateStylesByID',
    function(id, styles) {
      var node = ReactMount.getNode(id);
      CSSPropertyOperations.setValueForStyles(node, styles);
    }
  ),

  /**
   * Updates a DOM node's innerHTML.
   *
   * @param {string} id ID of the node to update.
   * @param {string} html An HTML string.
   * @internal
   */
  updateInnerHTMLByID: ReactPerf.measure(
    'ReactDOMIDOperations',
    'updateInnerHTMLByID',
    function(id, html) {
      var node = ReactMount.getNode(id);
      setInnerHTML(node, html);
    }
  ),

  /**
   * Updates a DOM node's text content set by `props.content`.
   *
   * @param {string} id ID of the node to update.
   * @param {string} content Text content.
   * @internal
   */
  updateTextContentByID: ReactPerf.measure(
    'ReactDOMIDOperations',
    'updateTextContentByID',
    function(id, content) {
      var node = ReactMount.getNode(id);
      DOMChildrenOperations.updateTextContent(node, content);
    }
  ),

  /**
   * Replaces a DOM node that exists in the document with markup.
   *
   * @param {string} id ID of child to be replaced.
   * @param {string} markup Dangerous markup to inject in place of child.
   * @internal
   * @see {Danger.dangerouslyReplaceNodeWithMarkup}
   */
  dangerouslyReplaceNodeWithMarkupByID: ReactPerf.measure(
    'ReactDOMIDOperations',
    'dangerouslyReplaceNodeWithMarkupByID',
    function(id, markup) {
      var node = ReactMount.getNode(id);
      DOMChildrenOperations.dangerouslyReplaceNodeWithMarkup(node, markup);
    }
  ),

  /**
   * Updates a component's children by processing a series of updates.
   *
   * @param {array<object>} updates List of update configurations.
   * @param {array<string>} markup List of markup strings.
   * @internal
   */
  dangerouslyProcessChildrenUpdates: ReactPerf.measure(
    'ReactDOMIDOperations',
    'dangerouslyProcessChildrenUpdates',
    function(updates, markup) {
      for (var i = 0; i < updates.length; i++) {
        updates[i].parentNode = ReactMount.getNode(updates[i].parentID);
      }
      DOMChildrenOperations.processUpdates(updates, markup);
    }
  )
};

module.exports = ReactDOMIDOperations;

},{"./CSSPropertyOperations":5,"./DOMChildrenOperations":10,"./DOMPropertyOperations":12,"./ReactMount":63,"./ReactPerf":68,"./invariant":126,"./setInnerHTML":140}],42:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMImg
 */

"use strict";

var EventConstants = _dereq_("./EventConstants");
var LocalEventTrapMixin = _dereq_("./LocalEventTrapMixin");
var ReactBrowserComponentMixin = _dereq_("./ReactBrowserComponentMixin");
var ReactCompositeComponent = _dereq_("./ReactCompositeComponent");
var ReactElement = _dereq_("./ReactElement");
var ReactDOM = _dereq_("./ReactDOM");

// Store a reference to the <img> `ReactDOMComponent`. TODO: use string
var img = ReactElement.createFactory(ReactDOM.img.type);

/**
 * Since onLoad doesn't bubble OR capture on the top level in IE8, we need to
 * capture it on the <img> element itself. There are lots of hacks we could do
 * to accomplish this, but the most reliable is to make <img> a composite
 * component and use `componentDidMount` to attach the event handlers.
 */
var ReactDOMImg = ReactCompositeComponent.createClass({
  displayName: 'ReactDOMImg',
  tagName: 'IMG',

  mixins: [ReactBrowserComponentMixin, LocalEventTrapMixin],

  render: function() {
    return img(this.props);
  },

  componentDidMount: function() {
    this.trapBubbledEvent(EventConstants.topLevelTypes.topLoad, 'load');
    this.trapBubbledEvent(EventConstants.topLevelTypes.topError, 'error');
  }
});

module.exports = ReactDOMImg;

},{"./EventConstants":16,"./LocalEventTrapMixin":25,"./ReactBrowserComponentMixin":29,"./ReactCompositeComponent":34,"./ReactDOM":37,"./ReactElement":52}],43:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMInput
 */

"use strict";

var AutoFocusMixin = _dereq_("./AutoFocusMixin");
var DOMPropertyOperations = _dereq_("./DOMPropertyOperations");
var LinkedValueUtils = _dereq_("./LinkedValueUtils");
var ReactBrowserComponentMixin = _dereq_("./ReactBrowserComponentMixin");
var ReactCompositeComponent = _dereq_("./ReactCompositeComponent");
var ReactElement = _dereq_("./ReactElement");
var ReactDOM = _dereq_("./ReactDOM");
var ReactMount = _dereq_("./ReactMount");
var ReactUpdates = _dereq_("./ReactUpdates");

var assign = _dereq_("./Object.assign");
var invariant = _dereq_("./invariant");

// Store a reference to the <input> `ReactDOMComponent`. TODO: use string
var input = ReactElement.createFactory(ReactDOM.input.type);

var instancesByReactID = {};

function forceUpdateIfMounted() {
  /*jshint validthis:true */
  if (this.isMounted()) {
    this.forceUpdate();
  }
}

/**
 * Implements an <input> native component that allows setting these optional
 * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.
 *
 * If `checked` or `value` are not supplied (or null/undefined), user actions
 * that affect the checked state or value will trigger updates to the element.
 *
 * If they are supplied (and not null/undefined), the rendered element will not
 * trigger updates to the element. Instead, the props must change in order for
 * the rendered element to be updated.
 *
 * The rendered element will be initialized as unchecked (or `defaultChecked`)
 * with an empty value (or `defaultValue`).
 *
 * @see http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html
 */
var ReactDOMInput = ReactCompositeComponent.createClass({
  displayName: 'ReactDOMInput',

  mixins: [AutoFocusMixin, LinkedValueUtils.Mixin, ReactBrowserComponentMixin],

  getInitialState: function() {
    var defaultValue = this.props.defaultValue;
    return {
      initialChecked: this.props.defaultChecked || false,
      initialValue: defaultValue != null ? defaultValue : null
    };
  },

  render: function() {
    // Clone `this.props` so we don't mutate the input.
    var props = assign({}, this.props);

    props.defaultChecked = null;
    props.defaultValue = null;

    var value = LinkedValueUtils.getValue(this);
    props.value = value != null ? value : this.state.initialValue;

    var checked = LinkedValueUtils.getChecked(this);
    props.checked = checked != null ? checked : this.state.initialChecked;

    props.onChange = this._handleChange;

    return input(props, this.props.children);
  },

  componentDidMount: function() {
    var id = ReactMount.getID(this.getDOMNode());
    instancesByReactID[id] = this;
  },

  componentWillUnmount: function() {
    var rootNode = this.getDOMNode();
    var id = ReactMount.getID(rootNode);
    delete instancesByReactID[id];
  },

  componentDidUpdate: function(prevProps, prevState, prevContext) {
    var rootNode = this.getDOMNode();
    if (this.props.checked != null) {
      DOMPropertyOperations.setValueForProperty(
        rootNode,
        'checked',
        this.props.checked || false
      );
    }

    var value = LinkedValueUtils.getValue(this);
    if (value != null) {
      // Cast `value` to a string to ensure the value is set correctly. While
      // browsers typically do this as necessary, jsdom doesn't.
      DOMPropertyOperations.setValueForProperty(rootNode, 'value', '' + value);
    }
  },

  _handleChange: function(event) {
    var returnValue;
    var onChange = LinkedValueUtils.getOnChange(this);
    if (onChange) {
      returnValue = onChange.call(this, event);
    }
    // Here we use asap to wait until all updates have propagated, which
    // is important when using controlled components within layers:
    // https://github.com/facebook/react/issues/1698
    ReactUpdates.asap(forceUpdateIfMounted, this);

    var name = this.props.name;
    if (this.props.type === 'radio' && name != null) {
      var rootNode = this.getDOMNode();
      var queryRoot = rootNode;

      while (queryRoot.parentNode) {
        queryRoot = queryRoot.parentNode;
      }

      // If `rootNode.form` was non-null, then we could try `form.elements`,
      // but that sometimes behaves strangely in IE8. We could also try using
      // `form.getElementsByName`, but that will only return direct children
      // and won't include inputs that use the HTML5 `form=` attribute. Since
      // the input might not even be in a form, let's just use the global
      // `querySelectorAll` to ensure we don't miss anything.
      var group = queryRoot.querySelectorAll(
        'input[name=' + JSON.stringify('' + name) + '][type="radio"]');

      for (var i = 0, groupLen = group.length; i < groupLen; i++) {
        var otherNode = group[i];
        if (otherNode === rootNode ||
            otherNode.form !== rootNode.form) {
          continue;
        }
        var otherID = ReactMount.getID(otherNode);
        ("production" !== "development" ? invariant(
          otherID,
          'ReactDOMInput: Mixing React and non-React radio inputs with the ' +
          'same `name` is not supported.'
        ) : invariant(otherID));
        var otherInstance = instancesByReactID[otherID];
        ("production" !== "development" ? invariant(
          otherInstance,
          'ReactDOMInput: Unknown radio button ID %s.',
          otherID
        ) : invariant(otherInstance));
        // If this is a controlled radio button group, forcing the input that
        // was previously checked to update will cause it to be come re-checked
        // as appropriate.
        ReactUpdates.asap(forceUpdateIfMounted, otherInstance);
      }
    }

    return returnValue;
  }

});

module.exports = ReactDOMInput;

},{"./AutoFocusMixin":2,"./DOMPropertyOperations":12,"./LinkedValueUtils":24,"./Object.assign":27,"./ReactBrowserComponentMixin":29,"./ReactCompositeComponent":34,"./ReactDOM":37,"./ReactElement":52,"./ReactMount":63,"./ReactUpdates":79,"./invariant":126}],44:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMOption
 */

"use strict";

var ReactBrowserComponentMixin = _dereq_("./ReactBrowserComponentMixin");
var ReactCompositeComponent = _dereq_("./ReactCompositeComponent");
var ReactElement = _dereq_("./ReactElement");
var ReactDOM = _dereq_("./ReactDOM");

var warning = _dereq_("./warning");

// Store a reference to the <option> `ReactDOMComponent`. TODO: use string
var option = ReactElement.createFactory(ReactDOM.option.type);

/**
 * Implements an <option> native component that warns when `selected` is set.
 */
var ReactDOMOption = ReactCompositeComponent.createClass({
  displayName: 'ReactDOMOption',

  mixins: [ReactBrowserComponentMixin],

  componentWillMount: function() {
    // TODO (yungsters): Remove support for `selected` in <option>.
    if ("production" !== "development") {
      ("production" !== "development" ? warning(
        this.props.selected == null,
        'Use the `defaultValue` or `value` props on <select> instead of ' +
        'setting `selected` on <option>.'
      ) : null);
    }
  },

  render: function() {
    return option(this.props, this.props.children);
  }

});

module.exports = ReactDOMOption;

},{"./ReactBrowserComponentMixin":29,"./ReactCompositeComponent":34,"./ReactDOM":37,"./ReactElement":52,"./warning":145}],45:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMSelect
 */

"use strict";

var AutoFocusMixin = _dereq_("./AutoFocusMixin");
var LinkedValueUtils = _dereq_("./LinkedValueUtils");
var ReactBrowserComponentMixin = _dereq_("./ReactBrowserComponentMixin");
var ReactCompositeComponent = _dereq_("./ReactCompositeComponent");
var ReactElement = _dereq_("./ReactElement");
var ReactDOM = _dereq_("./ReactDOM");
var ReactUpdates = _dereq_("./ReactUpdates");

var assign = _dereq_("./Object.assign");

// Store a reference to the <select> `ReactDOMComponent`. TODO: use string
var select = ReactElement.createFactory(ReactDOM.select.type);

function updateWithPendingValueIfMounted() {
  /*jshint validthis:true */
  if (this.isMounted()) {
    this.setState({value: this._pendingValue});
    this._pendingValue = 0;
  }
}

/**
 * Validation function for `value` and `defaultValue`.
 * @private
 */
function selectValueType(props, propName, componentName) {
  if (props[propName] == null) {
    return;
  }
  if (props.multiple) {
    if (!Array.isArray(props[propName])) {
      return new Error(
        ("The `" + propName + "` prop supplied to <select> must be an array if ") +
        ("`multiple` is true.")
      );
    }
  } else {
    if (Array.isArray(props[propName])) {
      return new Error(
        ("The `" + propName + "` prop supplied to <select> must be a scalar ") +
        ("value if `multiple` is false.")
      );
    }
  }
}

/**
 * If `value` is supplied, updates <option> elements on mount and update.
 * @param {ReactComponent} component Instance of ReactDOMSelect
 * @param {?*} propValue For uncontrolled components, null/undefined. For
 * controlled components, a string (or with `multiple`, a list of strings).
 * @private
 */
function updateOptions(component, propValue) {
  var multiple = component.props.multiple;
  var value = propValue != null ? propValue : component.state.value;
  var options = component.getDOMNode().options;
  var selectedValue, i, l;
  if (multiple) {
    selectedValue = {};
    for (i = 0, l = value.length; i < l; ++i) {
      selectedValue['' + value[i]] = true;
    }
  } else {
    selectedValue = '' + value;
  }
  for (i = 0, l = options.length; i < l; i++) {
    var selected = multiple ?
      selectedValue.hasOwnProperty(options[i].value) :
      options[i].value === selectedValue;

    if (selected !== options[i].selected) {
      options[i].selected = selected;
    }
  }
}

/**
 * Implements a <select> native component that allows optionally setting the
 * props `value` and `defaultValue`. If `multiple` is false, the prop must be a
 * string. If `multiple` is true, the prop must be an array of strings.
 *
 * If `value` is not supplied (or null/undefined), user actions that change the
 * selected option will trigger updates to the rendered options.
 *
 * If it is supplied (and not null/undefined), the rendered options will not
 * update in response to user actions. Instead, the `value` prop must change in
 * order for the rendered options to update.
 *
 * If `defaultValue` is provided, any options with the supplied values will be
 * selected.
 */
var ReactDOMSelect = ReactCompositeComponent.createClass({
  displayName: 'ReactDOMSelect',

  mixins: [AutoFocusMixin, LinkedValueUtils.Mixin, ReactBrowserComponentMixin],

  propTypes: {
    defaultValue: selectValueType,
    value: selectValueType
  },

  getInitialState: function() {
    return {value: this.props.defaultValue || (this.props.multiple ? [] : '')};
  },

  componentWillMount: function() {
    this._pendingValue = null;
  },

  componentWillReceiveProps: function(nextProps) {
    if (!this.props.multiple && nextProps.multiple) {
      this.setState({value: [this.state.value]});
    } else if (this.props.multiple && !nextProps.multiple) {
      this.setState({value: this.state.value[0]});
    }
  },

  render: function() {
    // Clone `this.props` so we don't mutate the input.
    var props = assign({}, this.props);

    props.onChange = this._handleChange;
    props.value = null;

    return select(props, this.props.children);
  },

  componentDidMount: function() {
    updateOptions(this, LinkedValueUtils.getValue(this));
  },

  componentDidUpdate: function(prevProps) {
    var value = LinkedValueUtils.getValue(this);
    var prevMultiple = !!prevProps.multiple;
    var multiple = !!this.props.multiple;
    if (value != null || prevMultiple !== multiple) {
      updateOptions(this, value);
    }
  },

  _handleChange: function(event) {
    var returnValue;
    var onChange = LinkedValueUtils.getOnChange(this);
    if (onChange) {
      returnValue = onChange.call(this, event);
    }

    var selectedValue;
    if (this.props.multiple) {
      selectedValue = [];
      var options = event.target.options;
      for (var i = 0, l = options.length; i < l; i++) {
        if (options[i].selected) {
          selectedValue.push(options[i].value);
        }
      }
    } else {
      selectedValue = event.target.value;
    }

    this._pendingValue = selectedValue;
    ReactUpdates.asap(updateWithPendingValueIfMounted, this);
    return returnValue;
  }

});

module.exports = ReactDOMSelect;

},{"./AutoFocusMixin":2,"./LinkedValueUtils":24,"./Object.assign":27,"./ReactBrowserComponentMixin":29,"./ReactCompositeComponent":34,"./ReactDOM":37,"./ReactElement":52,"./ReactUpdates":79}],46:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMSelection
 */

"use strict";

var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");

var getNodeForCharacterOffset = _dereq_("./getNodeForCharacterOffset");
var getTextContentAccessor = _dereq_("./getTextContentAccessor");

/**
 * While `isCollapsed` is available on the Selection object and `collapsed`
 * is available on the Range object, IE11 sometimes gets them wrong.
 * If the anchor/focus nodes and offsets are the same, the range is collapsed.
 */
function isCollapsed(anchorNode, anchorOffset, focusNode, focusOffset) {
  return anchorNode === focusNode && anchorOffset === focusOffset;
}

/**
 * Get the appropriate anchor and focus node/offset pairs for IE.
 *
 * The catch here is that IE's selection API doesn't provide information
 * about whether the selection is forward or backward, so we have to
 * behave as though it's always forward.
 *
 * IE text differs from modern selection in that it behaves as though
 * block elements end with a new line. This means character offsets will
 * differ between the two APIs.
 *
 * @param {DOMElement} node
 * @return {object}
 */
function getIEOffsets(node) {
  var selection = document.selection;
  var selectedRange = selection.createRange();
  var selectedLength = selectedRange.text.length;

  // Duplicate selection so we can move range without breaking user selection.
  var fromStart = selectedRange.duplicate();
  fromStart.moveToElementText(node);
  fromStart.setEndPoint('EndToStart', selectedRange);

  var startOffset = fromStart.text.length;
  var endOffset = startOffset + selectedLength;

  return {
    start: startOffset,
    end: endOffset
  };
}

/**
 * @param {DOMElement} node
 * @return {?object}
 */
function getModernOffsets(node) {
  var selection = window.getSelection && window.getSelection();

  if (!selection || selection.rangeCount === 0) {
    return null;
  }

  var anchorNode = selection.anchorNode;
  var anchorOffset = selection.anchorOffset;
  var focusNode = selection.focusNode;
  var focusOffset = selection.focusOffset;

  var currentRange = selection.getRangeAt(0);

  // If the node and offset values are the same, the selection is collapsed.
  // `Selection.isCollapsed` is available natively, but IE sometimes gets
  // this value wrong.
  var isSelectionCollapsed = isCollapsed(
    selection.anchorNode,
    selection.anchorOffset,
    selection.focusNode,
    selection.focusOffset
  );

  var rangeLength = isSelectionCollapsed ? 0 : currentRange.toString().length;

  var tempRange = currentRange.cloneRange();
  tempRange.selectNodeContents(node);
  tempRange.setEnd(currentRange.startContainer, currentRange.startOffset);

  var isTempRangeCollapsed = isCollapsed(
    tempRange.startContainer,
    tempRange.startOffset,
    tempRange.endContainer,
    tempRange.endOffset
  );

  var start = isTempRangeCollapsed ? 0 : tempRange.toString().length;
  var end = start + rangeLength;

  // Detect whether the selection is backward.
  var detectionRange = document.createRange();
  detectionRange.setStart(anchorNode, anchorOffset);
  detectionRange.setEnd(focusNode, focusOffset);
  var isBackward = detectionRange.collapsed;

  return {
    start: isBackward ? end : start,
    end: isBackward ? start : end
  };
}

/**
 * @param {DOMElement|DOMTextNode} node
 * @param {object} offsets
 */
function setIEOffsets(node, offsets) {
  var range = document.selection.createRange().duplicate();
  var start, end;

  if (typeof offsets.end === 'undefined') {
    start = offsets.start;
    end = start;
  } else if (offsets.start > offsets.end) {
    start = offsets.end;
    end = offsets.start;
  } else {
    start = offsets.start;
    end = offsets.end;
  }

  range.moveToElementText(node);
  range.moveStart('character', start);
  range.setEndPoint('EndToStart', range);
  range.moveEnd('character', end - start);
  range.select();
}

/**
 * In modern non-IE browsers, we can support both forward and backward
 * selections.
 *
 * Note: IE10+ supports the Selection object, but it does not support
 * the `extend` method, which means that even in modern IE, it's not possible
 * to programatically create a backward selection. Thus, for all IE
 * versions, we use the old IE API to create our selections.
 *
 * @param {DOMElement|DOMTextNode} node
 * @param {object} offsets
 */
function setModernOffsets(node, offsets) {
  if (!window.getSelection) {
    return;
  }

  var selection = window.getSelection();
  var length = node[getTextContentAccessor()].length;
  var start = Math.min(offsets.start, length);
  var end = typeof offsets.end === 'undefined' ?
            start : Math.min(offsets.end, length);

  // IE 11 uses modern selection, but doesn't support the extend method.
  // Flip backward selections, so we can set with a single range.
  if (!selection.extend && start > end) {
    var temp = end;
    end = start;
    start = temp;
  }

  var startMarker = getNodeForCharacterOffset(node, start);
  var endMarker = getNodeForCharacterOffset(node, end);

  if (startMarker && endMarker) {
    var range = document.createRange();
    range.setStart(startMarker.node, startMarker.offset);
    selection.removeAllRanges();

    if (start > end) {
      selection.addRange(range);
      selection.extend(endMarker.node, endMarker.offset);
    } else {
      range.setEnd(endMarker.node, endMarker.offset);
      selection.addRange(range);
    }
  }
}

var useIEOffsets = ExecutionEnvironment.canUseDOM && document.selection;

var ReactDOMSelection = {
  /**
   * @param {DOMElement} node
   */
  getOffsets: useIEOffsets ? getIEOffsets : getModernOffsets,

  /**
   * @param {DOMElement|DOMTextNode} node
   * @param {object} offsets
   */
  setOffsets: useIEOffsets ? setIEOffsets : setModernOffsets
};

module.exports = ReactDOMSelection;

},{"./ExecutionEnvironment":22,"./getNodeForCharacterOffset":119,"./getTextContentAccessor":121}],47:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMTextarea
 */

"use strict";

var AutoFocusMixin = _dereq_("./AutoFocusMixin");
var DOMPropertyOperations = _dereq_("./DOMPropertyOperations");
var LinkedValueUtils = _dereq_("./LinkedValueUtils");
var ReactBrowserComponentMixin = _dereq_("./ReactBrowserComponentMixin");
var ReactCompositeComponent = _dereq_("./ReactCompositeComponent");
var ReactElement = _dereq_("./ReactElement");
var ReactDOM = _dereq_("./ReactDOM");
var ReactUpdates = _dereq_("./ReactUpdates");

var assign = _dereq_("./Object.assign");
var invariant = _dereq_("./invariant");

var warning = _dereq_("./warning");

// Store a reference to the <textarea> `ReactDOMComponent`. TODO: use string
var textarea = ReactElement.createFactory(ReactDOM.textarea.type);

function forceUpdateIfMounted() {
  /*jshint validthis:true */
  if (this.isMounted()) {
    this.forceUpdate();
  }
}

/**
 * Implements a <textarea> native component that allows setting `value`, and
 * `defaultValue`. This differs from the traditional DOM API because value is
 * usually set as PCDATA children.
 *
 * If `value` is not supplied (or null/undefined), user actions that affect the
 * value will trigger updates to the element.
 *
 * If `value` is supplied (and not null/undefined), the rendered element will
 * not trigger updates to the element. Instead, the `value` prop must change in
 * order for the rendered element to be updated.
 *
 * The rendered element will be initialized with an empty value, the prop
 * `defaultValue` if specified, or the children content (deprecated).
 */
var ReactDOMTextarea = ReactCompositeComponent.createClass({
  displayName: 'ReactDOMTextarea',

  mixins: [AutoFocusMixin, LinkedValueUtils.Mixin, ReactBrowserComponentMixin],

  getInitialState: function() {
    var defaultValue = this.props.defaultValue;
    // TODO (yungsters): Remove support for children content in <textarea>.
    var children = this.props.children;
    if (children != null) {
      if ("production" !== "development") {
        ("production" !== "development" ? warning(
          false,
          'Use the `defaultValue` or `value` props instead of setting ' +
          'children on <textarea>.'
        ) : null);
      }
      ("production" !== "development" ? invariant(
        defaultValue == null,
        'If you supply `defaultValue` on a <textarea>, do not pass children.'
      ) : invariant(defaultValue == null));
      if (Array.isArray(children)) {
        ("production" !== "development" ? invariant(
          children.length <= 1,
          '<textarea> can only have at most one child.'
        ) : invariant(children.length <= 1));
        children = children[0];
      }

      defaultValue = '' + children;
    }
    if (defaultValue == null) {
      defaultValue = '';
    }
    var value = LinkedValueUtils.getValue(this);
    return {
      // We save the initial value so that `ReactDOMComponent` doesn't update
      // `textContent` (unnecessary since we update value).
      // The initial value can be a boolean or object so that's why it's
      // forced to be a string.
      initialValue: '' + (value != null ? value : defaultValue)
    };
  },

  render: function() {
    // Clone `this.props` so we don't mutate the input.
    var props = assign({}, this.props);

    ("production" !== "development" ? invariant(
      props.dangerouslySetInnerHTML == null,
      '`dangerouslySetInnerHTML` does not make sense on <textarea>.'
    ) : invariant(props.dangerouslySetInnerHTML == null));

    props.defaultValue = null;
    props.value = null;
    props.onChange = this._handleChange;

    // Always set children to the same thing. In IE9, the selection range will
    // get reset if `textContent` is mutated.
    return textarea(props, this.state.initialValue);
  },

  componentDidUpdate: function(prevProps, prevState, prevContext) {
    var value = LinkedValueUtils.getValue(this);
    if (value != null) {
      var rootNode = this.getDOMNode();
      // Cast `value` to a string to ensure the value is set correctly. While
      // browsers typically do this as necessary, jsdom doesn't.
      DOMPropertyOperations.setValueForProperty(rootNode, 'value', '' + value);
    }
  },

  _handleChange: function(event) {
    var returnValue;
    var onChange = LinkedValueUtils.getOnChange(this);
    if (onChange) {
      returnValue = onChange.call(this, event);
    }
    ReactUpdates.asap(forceUpdateIfMounted, this);
    return returnValue;
  }

});

module.exports = ReactDOMTextarea;

},{"./AutoFocusMixin":2,"./DOMPropertyOperations":12,"./LinkedValueUtils":24,"./Object.assign":27,"./ReactBrowserComponentMixin":29,"./ReactCompositeComponent":34,"./ReactDOM":37,"./ReactElement":52,"./ReactUpdates":79,"./invariant":126,"./warning":145}],48:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDefaultBatchingStrategy
 */

"use strict";

var ReactUpdates = _dereq_("./ReactUpdates");
var Transaction = _dereq_("./Transaction");

var assign = _dereq_("./Object.assign");
var emptyFunction = _dereq_("./emptyFunction");

var RESET_BATCHED_UPDATES = {
  initialize: emptyFunction,
  close: function() {
    ReactDefaultBatchingStrategy.isBatchingUpdates = false;
  }
};

var FLUSH_BATCHED_UPDATES = {
  initialize: emptyFunction,
  close: ReactUpdates.flushBatchedUpdates.bind(ReactUpdates)
};

var TRANSACTION_WRAPPERS = [FLUSH_BATCHED_UPDATES, RESET_BATCHED_UPDATES];

function ReactDefaultBatchingStrategyTransaction() {
  this.reinitializeTransaction();
}

assign(
  ReactDefaultBatchingStrategyTransaction.prototype,
  Transaction.Mixin,
  {
    getTransactionWrappers: function() {
      return TRANSACTION_WRAPPERS;
    }
  }
);

var transaction = new ReactDefaultBatchingStrategyTransaction();

var ReactDefaultBatchingStrategy = {
  isBatchingUpdates: false,

  /**
   * Call the provided function in a context within which calls to `setState`
   * and friends are batched such that components aren't updated unnecessarily.
   */
  batchedUpdates: function(callback, a, b) {
    var alreadyBatchingUpdates = ReactDefaultBatchingStrategy.isBatchingUpdates;

    ReactDefaultBatchingStrategy.isBatchingUpdates = true;

    // The code is written this way to avoid extra allocations
    if (alreadyBatchingUpdates) {
      callback(a, b);
    } else {
      transaction.perform(callback, null, a, b);
    }
  }
};

module.exports = ReactDefaultBatchingStrategy;

},{"./Object.assign":27,"./ReactUpdates":79,"./Transaction":95,"./emptyFunction":107}],49:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDefaultInjection
 */

"use strict";

var BeforeInputEventPlugin = _dereq_("./BeforeInputEventPlugin");
var ChangeEventPlugin = _dereq_("./ChangeEventPlugin");
var ClientReactRootIndex = _dereq_("./ClientReactRootIndex");
var CompositionEventPlugin = _dereq_("./CompositionEventPlugin");
var DefaultEventPluginOrder = _dereq_("./DefaultEventPluginOrder");
var EnterLeaveEventPlugin = _dereq_("./EnterLeaveEventPlugin");
var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");
var HTMLDOMPropertyConfig = _dereq_("./HTMLDOMPropertyConfig");
var MobileSafariClickEventPlugin = _dereq_("./MobileSafariClickEventPlugin");
var ReactBrowserComponentMixin = _dereq_("./ReactBrowserComponentMixin");
var ReactComponentBrowserEnvironment =
  _dereq_("./ReactComponentBrowserEnvironment");
var ReactDefaultBatchingStrategy = _dereq_("./ReactDefaultBatchingStrategy");
var ReactDOMComponent = _dereq_("./ReactDOMComponent");
var ReactDOMButton = _dereq_("./ReactDOMButton");
var ReactDOMForm = _dereq_("./ReactDOMForm");
var ReactDOMImg = _dereq_("./ReactDOMImg");
var ReactDOMInput = _dereq_("./ReactDOMInput");
var ReactDOMOption = _dereq_("./ReactDOMOption");
var ReactDOMSelect = _dereq_("./ReactDOMSelect");
var ReactDOMTextarea = _dereq_("./ReactDOMTextarea");
var ReactEventListener = _dereq_("./ReactEventListener");
var ReactInjection = _dereq_("./ReactInjection");
var ReactInstanceHandles = _dereq_("./ReactInstanceHandles");
var ReactMount = _dereq_("./ReactMount");
var SelectEventPlugin = _dereq_("./SelectEventPlugin");
var ServerReactRootIndex = _dereq_("./ServerReactRootIndex");
var SimpleEventPlugin = _dereq_("./SimpleEventPlugin");
var SVGDOMPropertyConfig = _dereq_("./SVGDOMPropertyConfig");

var createFullPageComponent = _dereq_("./createFullPageComponent");

function inject() {
  ReactInjection.EventEmitter.injectReactEventListener(
    ReactEventListener
  );

  /**
   * Inject modules for resolving DOM hierarchy and plugin ordering.
   */
  ReactInjection.EventPluginHub.injectEventPluginOrder(DefaultEventPluginOrder);
  ReactInjection.EventPluginHub.injectInstanceHandle(ReactInstanceHandles);
  ReactInjection.EventPluginHub.injectMount(ReactMount);

  /**
   * Some important event plugins included by default (without having to require
   * them).
   */
  ReactInjection.EventPluginHub.injectEventPluginsByName({
    SimpleEventPlugin: SimpleEventPlugin,
    EnterLeaveEventPlugin: EnterLeaveEventPlugin,
    ChangeEventPlugin: ChangeEventPlugin,
    CompositionEventPlugin: CompositionEventPlugin,
    MobileSafariClickEventPlugin: MobileSafariClickEventPlugin,
    SelectEventPlugin: SelectEventPlugin,
    BeforeInputEventPlugin: BeforeInputEventPlugin
  });

  ReactInjection.NativeComponent.injectGenericComponentClass(
    ReactDOMComponent
  );

  ReactInjection.NativeComponent.injectComponentClasses({
    'button': ReactDOMButton,
    'form': ReactDOMForm,
    'img': ReactDOMImg,
    'input': ReactDOMInput,
    'option': ReactDOMOption,
    'select': ReactDOMSelect,
    'textarea': ReactDOMTextarea,

    'html': createFullPageComponent('html'),
    'head': createFullPageComponent('head'),
    'body': createFullPageComponent('body')
  });

  // This needs to happen after createFullPageComponent() otherwise the mixin
  // gets double injected.
  ReactInjection.CompositeComponent.injectMixin(ReactBrowserComponentMixin);

  ReactInjection.DOMProperty.injectDOMPropertyConfig(HTMLDOMPropertyConfig);
  ReactInjection.DOMProperty.injectDOMPropertyConfig(SVGDOMPropertyConfig);

  ReactInjection.EmptyComponent.injectEmptyComponent('noscript');

  ReactInjection.Updates.injectReconcileTransaction(
    ReactComponentBrowserEnvironment.ReactReconcileTransaction
  );
  ReactInjection.Updates.injectBatchingStrategy(
    ReactDefaultBatchingStrategy
  );

  ReactInjection.RootIndex.injectCreateReactRootIndex(
    ExecutionEnvironment.canUseDOM ?
      ClientReactRootIndex.createReactRootIndex :
      ServerReactRootIndex.createReactRootIndex
  );

  ReactInjection.Component.injectEnvironment(ReactComponentBrowserEnvironment);

  if ("production" !== "development") {
    var url = (ExecutionEnvironment.canUseDOM && window.location.href) || '';
    if ((/[?&]react_perf\b/).test(url)) {
      var ReactDefaultPerf = _dereq_("./ReactDefaultPerf");
      ReactDefaultPerf.start();
    }
  }
}

module.exports = {
  inject: inject
};

},{"./BeforeInputEventPlugin":3,"./ChangeEventPlugin":7,"./ClientReactRootIndex":8,"./CompositionEventPlugin":9,"./DefaultEventPluginOrder":14,"./EnterLeaveEventPlugin":15,"./ExecutionEnvironment":22,"./HTMLDOMPropertyConfig":23,"./MobileSafariClickEventPlugin":26,"./ReactBrowserComponentMixin":29,"./ReactComponentBrowserEnvironment":33,"./ReactDOMButton":38,"./ReactDOMComponent":39,"./ReactDOMForm":40,"./ReactDOMImg":42,"./ReactDOMInput":43,"./ReactDOMOption":44,"./ReactDOMSelect":45,"./ReactDOMTextarea":47,"./ReactDefaultBatchingStrategy":48,"./ReactDefaultPerf":50,"./ReactEventListener":57,"./ReactInjection":58,"./ReactInstanceHandles":60,"./ReactMount":63,"./SVGDOMPropertyConfig":80,"./SelectEventPlugin":81,"./ServerReactRootIndex":82,"./SimpleEventPlugin":83,"./createFullPageComponent":103}],50:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDefaultPerf
 * @typechecks static-only
 */

"use strict";

var DOMProperty = _dereq_("./DOMProperty");
var ReactDefaultPerfAnalysis = _dereq_("./ReactDefaultPerfAnalysis");
var ReactMount = _dereq_("./ReactMount");
var ReactPerf = _dereq_("./ReactPerf");

var performanceNow = _dereq_("./performanceNow");

function roundFloat(val) {
  return Math.floor(val * 100) / 100;
}

function addValue(obj, key, val) {
  obj[key] = (obj[key] || 0) + val;
}

var ReactDefaultPerf = {
  _allMeasurements: [], // last item in the list is the current one
  _mountStack: [0],
  _injected: false,

  start: function() {
    if (!ReactDefaultPerf._injected) {
      ReactPerf.injection.injectMeasure(ReactDefaultPerf.measure);
    }

    ReactDefaultPerf._allMeasurements.length = 0;
    ReactPerf.enableMeasure = true;
  },

  stop: function() {
    ReactPerf.enableMeasure = false;
  },

  getLastMeasurements: function() {
    return ReactDefaultPerf._allMeasurements;
  },

  printExclusive: function(measurements) {
    measurements = measurements || ReactDefaultPerf._allMeasurements;
    var summary = ReactDefaultPerfAnalysis.getExclusiveSummary(measurements);
    console.table(summary.map(function(item) {
      return {
        'Component class name': item.componentName,
        'Total inclusive time (ms)': roundFloat(item.inclusive),
        'Exclusive mount time (ms)': roundFloat(item.exclusive),
        'Exclusive render time (ms)': roundFloat(item.render),
        'Mount time per instance (ms)': roundFloat(item.exclusive / item.count),
        'Render time per instance (ms)': roundFloat(item.render / item.count),
        'Instances': item.count
      };
    }));
    // TODO: ReactDefaultPerfAnalysis.getTotalTime() does not return the correct
    // number.
  },

  printInclusive: function(measurements) {
    measurements = measurements || ReactDefaultPerf._allMeasurements;
    var summary = ReactDefaultPerfAnalysis.getInclusiveSummary(measurements);
    console.table(summary.map(function(item) {
      return {
        'Owner > component': item.componentName,
        'Inclusive time (ms)': roundFloat(item.time),
        'Instances': item.count
      };
    }));
    console.log(
      'Total time:',
      ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms'
    );
  },

  getMeasurementsSummaryMap: function(measurements) {
    var summary = ReactDefaultPerfAnalysis.getInclusiveSummary(
      measurements,
      true
    );
    return summary.map(function(item) {
      return {
        'Owner > component': item.componentName,
        'Wasted time (ms)': item.time,
        'Instances': item.count
      };
    });
  },

  printWasted: function(measurements) {
    measurements = measurements || ReactDefaultPerf._allMeasurements;
    console.table(ReactDefaultPerf.getMeasurementsSummaryMap(measurements));
    console.log(
      'Total time:',
      ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms'
    );
  },

  printDOM: function(measurements) {
    measurements = measurements || ReactDefaultPerf._allMeasurements;
    var summary = ReactDefaultPerfAnalysis.getDOMSummary(measurements);
    console.table(summary.map(function(item) {
      var result = {};
      result[DOMProperty.ID_ATTRIBUTE_NAME] = item.id;
      result['type'] = item.type;
      result['args'] = JSON.stringify(item.args);
      return result;
    }));
    console.log(
      'Total time:',
      ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms'
    );
  },

  _recordWrite: function(id, fnName, totalTime, args) {
    // TODO: totalTime isn't that useful since it doesn't count paints/reflows
    var writes =
      ReactDefaultPerf
        ._allMeasurements[ReactDefaultPerf._allMeasurements.length - 1]
        .writes;
    writes[id] = writes[id] || [];
    writes[id].push({
      type: fnName,
      time: totalTime,
      args: args
    });
  },

  measure: function(moduleName, fnName, func) {
    return function() {for (var args=[],$__0=0,$__1=arguments.length;$__0<$__1;$__0++) args.push(arguments[$__0]);
      var totalTime;
      var rv;
      var start;

      if (fnName === '_renderNewRootComponent' ||
          fnName === 'flushBatchedUpdates') {
        // A "measurement" is a set of metrics recorded for each flush. We want
        // to group the metrics for a given flush together so we can look at the
        // components that rendered and the DOM operations that actually
        // happened to determine the amount of "wasted work" performed.
        ReactDefaultPerf._allMeasurements.push({
          exclusive: {},
          inclusive: {},
          render: {},
          counts: {},
          writes: {},
          displayNames: {},
          totalTime: 0
        });
        start = performanceNow();
        rv = func.apply(this, args);
        ReactDefaultPerf._allMeasurements[
          ReactDefaultPerf._allMeasurements.length - 1
        ].totalTime = performanceNow() - start;
        return rv;
      } else if (moduleName === 'ReactDOMIDOperations' ||
        moduleName === 'ReactComponentBrowserEnvironment') {
        start = performanceNow();
        rv = func.apply(this, args);
        totalTime = performanceNow() - start;

        if (fnName === 'mountImageIntoNode') {
          var mountID = ReactMount.getID(args[1]);
          ReactDefaultPerf._recordWrite(mountID, fnName, totalTime, args[0]);
        } else if (fnName === 'dangerouslyProcessChildrenUpdates') {
          // special format
          args[0].forEach(function(update) {
            var writeArgs = {};
            if (update.fromIndex !== null) {
              writeArgs.fromIndex = update.fromIndex;
            }
            if (update.toIndex !== null) {
              writeArgs.toIndex = update.toIndex;
            }
            if (update.textContent !== null) {
              writeArgs.textContent = update.textContent;
            }
            if (update.markupIndex !== null) {
              writeArgs.markup = args[1][update.markupIndex];
            }
            ReactDefaultPerf._recordWrite(
              update.parentID,
              update.type,
              totalTime,
              writeArgs
            );
          });
        } else {
          // basic format
          ReactDefaultPerf._recordWrite(
            args[0],
            fnName,
            totalTime,
            Array.prototype.slice.call(args, 1)
          );
        }
        return rv;
      } else if (moduleName === 'ReactCompositeComponent' && (
        fnName === 'mountComponent' ||
        fnName === 'updateComponent' || // TODO: receiveComponent()?
        fnName === '_renderValidatedComponent')) {

        var rootNodeID = fnName === 'mountComponent' ?
          args[0] :
          this._rootNodeID;
        var isRender = fnName === '_renderValidatedComponent';
        var isMount = fnName === 'mountComponent';

        var mountStack = ReactDefaultPerf._mountStack;
        var entry = ReactDefaultPerf._allMeasurements[
          ReactDefaultPerf._allMeasurements.length - 1
        ];

        if (isRender) {
          addValue(entry.counts, rootNodeID, 1);
        } else if (isMount) {
          mountStack.push(0);
        }

        start = performanceNow();
        rv = func.apply(this, args);
        totalTime = performanceNow() - start;

        if (isRender) {
          addValue(entry.render, rootNodeID, totalTime);
        } else if (isMount) {
          var subMountTime = mountStack.pop();
          mountStack[mountStack.length - 1] += totalTime;
          addValue(entry.exclusive, rootNodeID, totalTime - subMountTime);
          addValue(entry.inclusive, rootNodeID, totalTime);
        } else {
          addValue(entry.inclusive, rootNodeID, totalTime);
        }

        entry.displayNames[rootNodeID] = {
          current: this.constructor.displayName,
          owner: this._owner ? this._owner.constructor.displayName : '<root>'
        };

        return rv;
      } else {
        return func.apply(this, args);
      }
    };
  }
};

module.exports = ReactDefaultPerf;

},{"./DOMProperty":11,"./ReactDefaultPerfAnalysis":51,"./ReactMount":63,"./ReactPerf":68,"./performanceNow":139}],51:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDefaultPerfAnalysis
 */

var assign = _dereq_("./Object.assign");

// Don't try to save users less than 1.2ms (a number I made up)
var DONT_CARE_THRESHOLD = 1.2;
var DOM_OPERATION_TYPES = {
  'mountImageIntoNode': 'set innerHTML',
  INSERT_MARKUP: 'set innerHTML',
  MOVE_EXISTING: 'move',
  REMOVE_NODE: 'remove',
  TEXT_CONTENT: 'set textContent',
  'updatePropertyByID': 'update attribute',
  'deletePropertyByID': 'delete attribute',
  'updateStylesByID': 'update styles',
  'updateInnerHTMLByID': 'set innerHTML',
  'dangerouslyReplaceNodeWithMarkupByID': 'replace'
};

function getTotalTime(measurements) {
  // TODO: return number of DOM ops? could be misleading.
  // TODO: measure dropped frames after reconcile?
  // TODO: log total time of each reconcile and the top-level component
  // class that triggered it.
  var totalTime = 0;
  for (var i = 0; i < measurements.length; i++) {
    var measurement = measurements[i];
    totalTime += measurement.totalTime;
  }
  return totalTime;
}

function getDOMSummary(measurements) {
  var items = [];
  for (var i = 0; i < measurements.length; i++) {
    var measurement = measurements[i];
    var id;

    for (id in measurement.writes) {
      measurement.writes[id].forEach(function(write) {
        items.push({
          id: id,
          type: DOM_OPERATION_TYPES[write.type] || write.type,
          args: write.args
        });
      });
    }
  }
  return items;
}

function getExclusiveSummary(measurements) {
  var candidates = {};
  var displayName;

  for (var i = 0; i < measurements.length; i++) {
    var measurement = measurements[i];
    var allIDs = assign(
      {},
      measurement.exclusive,
      measurement.inclusive
    );

    for (var id in allIDs) {
      displayName = measurement.displayNames[id].current;

      candidates[displayName] = candidates[displayName] || {
        componentName: displayName,
        inclusive: 0,
        exclusive: 0,
        render: 0,
        count: 0
      };
      if (measurement.render[id]) {
        candidates[displayName].render += measurement.render[id];
      }
      if (measurement.exclusive[id]) {
        candidates[displayName].exclusive += measurement.exclusive[id];
      }
      if (measurement.inclusive[id]) {
        candidates[displayName].inclusive += measurement.inclusive[id];
      }
      if (measurement.counts[id]) {
        candidates[displayName].count += measurement.counts[id];
      }
    }
  }

  // Now make a sorted array with the results.
  var arr = [];
  for (displayName in candidates) {
    if (candidates[displayName].exclusive >= DONT_CARE_THRESHOLD) {
      arr.push(candidates[displayName]);
    }
  }

  arr.sort(function(a, b) {
    return b.exclusive - a.exclusive;
  });

  return arr;
}

function getInclusiveSummary(measurements, onlyClean) {
  var candidates = {};
  var inclusiveKey;

  for (var i = 0; i < measurements.length; i++) {
    var measurement = measurements[i];
    var allIDs = assign(
      {},
      measurement.exclusive,
      measurement.inclusive
    );
    var cleanComponents;

    if (onlyClean) {
      cleanComponents = getUnchangedComponents(measurement);
    }

    for (var id in allIDs) {
      if (onlyClean && !cleanComponents[id]) {
        continue;
      }

      var displayName = measurement.displayNames[id];

      // Inclusive time is not useful for many components without knowing where
      // they are instantiated. So we aggregate inclusive time with both the
      // owner and current displayName as the key.
      inclusiveKey = displayName.owner + ' > ' + displayName.current;

      candidates[inclusiveKey] = candidates[inclusiveKey] || {
        componentName: inclusiveKey,
        time: 0,
        count: 0
      };

      if (measurement.inclusive[id]) {
        candidates[inclusiveKey].time += measurement.inclusive[id];
      }
      if (measurement.counts[id]) {
        candidates[inclusiveKey].count += measurement.counts[id];
      }
    }
  }

  // Now make a sorted array with the results.
  var arr = [];
  for (inclusiveKey in candidates) {
    if (candidates[inclusiveKey].time >= DONT_CARE_THRESHOLD) {
      arr.push(candidates[inclusiveKey]);
    }
  }

  arr.sort(function(a, b) {
    return b.time - a.time;
  });

  return arr;
}

function getUnchangedComponents(measurement) {
  // For a given reconcile, look at which components did not actually
  // render anything to the DOM and return a mapping of their ID to
  // the amount of time it took to render the entire subtree.
  var cleanComponents = {};
  var dirtyLeafIDs = Object.keys(measurement.writes);
  var allIDs = assign({}, measurement.exclusive, measurement.inclusive);

  for (var id in allIDs) {
    var isDirty = false;
    // For each component that rendered, see if a component that triggered
    // a DOM op is in its subtree.
    for (var i = 0; i < dirtyLeafIDs.length; i++) {
      if (dirtyLeafIDs[i].indexOf(id) === 0) {
        isDirty = true;
        break;
      }
    }
    if (!isDirty && measurement.counts[id] > 0) {
      cleanComponents[id] = true;
    }
  }
  return cleanComponents;
}

var ReactDefaultPerfAnalysis = {
  getExclusiveSummary: getExclusiveSummary,
  getInclusiveSummary: getInclusiveSummary,
  getDOMSummary: getDOMSummary,
  getTotalTime: getTotalTime
};

module.exports = ReactDefaultPerfAnalysis;

},{"./Object.assign":27}],52:[function(_dereq_,module,exports){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactElement
 */

"use strict";

var ReactContext = _dereq_("./ReactContext");
var ReactCurrentOwner = _dereq_("./ReactCurrentOwner");

var warning = _dereq_("./warning");

var RESERVED_PROPS = {
  key: true,
  ref: true
};

/**
 * Warn for mutations.
 *
 * @internal
 * @param {object} object
 * @param {string} key
 */
function defineWarningProperty(object, key) {
  Object.defineProperty(object, key, {

    configurable: false,
    enumerable: true,

    get: function() {
      if (!this._store) {
        return null;
      }
      return this._store[key];
    },

    set: function(value) {
      ("production" !== "development" ? warning(
        false,
        'Don\'t set the ' + key + ' property of the component. ' +
        'Mutate the existing props object instead.'
      ) : null);
      this._store[key] = value;
    }

  });
}

/**
 * This is updated to true if the membrane is successfully created.
 */
var useMutationMembrane = false;

/**
 * Warn for mutations.
 *
 * @internal
 * @param {object} element
 */
function defineMutationMembrane(prototype) {
  try {
    var pseudoFrozenProperties = {
      props: true
    };
    for (var key in pseudoFrozenProperties) {
      defineWarningProperty(prototype, key);
    }
    useMutationMembrane = true;
  } catch (x) {
    // IE will fail on defineProperty
  }
}

/**
 * Base constructor for all React elements. This is only used to make this
 * work with a dynamic instanceof check. Nothing should live on this prototype.
 *
 * @param {*} type
 * @param {string|object} ref
 * @param {*} key
 * @param {*} props
 * @internal
 */
var ReactElement = function(type, key, ref, owner, context, props) {
  // Built-in properties that belong on the element
  this.type = type;
  this.key = key;
  this.ref = ref;

  // Record the component responsible for creating this element.
  this._owner = owner;

  // TODO: Deprecate withContext, and then the context becomes accessible
  // through the owner.
  this._context = context;

  if ("production" !== "development") {
    // The validation flag and props are currently mutative. We put them on
    // an external backing store so that we can freeze the whole object.
    // This can be replaced with a WeakMap once they are implemented in
    // commonly used development environments.
    this._store = { validated: false, props: props };

    // We're not allowed to set props directly on the object so we early
    // return and rely on the prototype membrane to forward to the backing
    // store.
    if (useMutationMembrane) {
      Object.freeze(this);
      return;
    }
  }

  this.props = props;
};

// We intentionally don't expose the function on the constructor property.
// ReactElement should be indistinguishable from a plain object.
ReactElement.prototype = {
  _isReactElement: true
};

if ("production" !== "development") {
  defineMutationMembrane(ReactElement.prototype);
}

ReactElement.createElement = function(type, config, children) {
  var propName;

  // Reserved names are extracted
  var props = {};

  var key = null;
  var ref = null;

  if (config != null) {
    ref = config.ref === undefined ? null : config.ref;
    if ("production" !== "development") {
      ("production" !== "development" ? warning(
        config.key !== null,
        'createElement(...): Encountered component with a `key` of null. In ' +
        'a future version, this will be treated as equivalent to the string ' +
        '\'null\'; instead, provide an explicit key or use undefined.'
      ) : null);
    }
    // TODO: Change this back to `config.key === undefined`
    key = config.key == null ? null : '' + config.key;
    // Remaining properties are added to a new props object
    for (propName in config) {
      if (config.hasOwnProperty(propName) &&
          !RESERVED_PROPS.hasOwnProperty(propName)) {
        props[propName] = config[propName];
      }
    }
  }

  // Children can be more than one argument, and those are transferred onto
  // the newly allocated props object.
  var childrenLength = arguments.length - 2;
  if (childrenLength === 1) {
    props.children = children;
  } else if (childrenLength > 1) {
    var childArray = Array(childrenLength);
    for (var i = 0; i < childrenLength; i++) {
      childArray[i] = arguments[i + 2];
    }
    props.children = childArray;
  }

  // Resolve default props
  if (type && type.defaultProps) {
    var defaultProps = type.defaultProps;
    for (propName in defaultProps) {
      if (typeof props[propName] === 'undefined') {
        props[propName] = defaultProps[propName];
      }
    }
  }

  return new ReactElement(
    type,
    key,
    ref,
    ReactCurrentOwner.current,
    ReactContext.current,
    props
  );
};

ReactElement.createFactory = function(type) {
  var factory = ReactElement.createElement.bind(null, type);
  // Expose the type on the factory and the prototype so that it can be
  // easily accessed on elements. E.g. <Foo />.type === Foo.type.
  // This should not be named `constructor` since this may not be the function
  // that created the element, and it may not even be a constructor.
  factory.type = type;
  return factory;
};

ReactElement.cloneAndReplaceProps = function(oldElement, newProps) {
  var newElement = new ReactElement(
    oldElement.type,
    oldElement.key,
    oldElement.ref,
    oldElement._owner,
    oldElement._context,
    newProps
  );

  if ("production" !== "development") {
    // If the key on the original is valid, then the clone is valid
    newElement._store.validated = oldElement._store.validated;
  }
  return newElement;
};

/**
 * @param {?object} object
 * @return {boolean} True if `object` is a valid component.
 * @final
 */
ReactElement.isValidElement = function(object) {
  // ReactTestUtils is often used outside of beforeEach where as React is
  // within it. This leads to two different instances of React on the same
  // page. To identify a element from a different React instance we use
  // a flag instead of an instanceof check.
  var isElement = !!(object && object._isReactElement);
  // if (isElement && !(object instanceof ReactElement)) {
  // This is an indicator that you're using multiple versions of React at the
  // same time. This will screw with ownership and stuff. Fix it, please.
  // TODO: We could possibly warn here.
  // }
  return isElement;
};

module.exports = ReactElement;

},{"./ReactContext":35,"./ReactCurrentOwner":36,"./warning":145}],53:[function(_dereq_,module,exports){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactElementValidator
 */

/**
 * ReactElementValidator provides a wrapper around a element factory
 * which validates the props passed to the element. This is intended to be
 * used only in DEV and could be replaced by a static type checker for languages
 * that support it.
 */

"use strict";

var ReactElement = _dereq_("./ReactElement");
var ReactPropTypeLocations = _dereq_("./ReactPropTypeLocations");
var ReactCurrentOwner = _dereq_("./ReactCurrentOwner");

var monitorCodeUse = _dereq_("./monitorCodeUse");
var warning = _dereq_("./warning");

/**
 * Warn if there's no key explicitly set on dynamic arrays of children or
 * object keys are not valid. This allows us to keep track of children between
 * updates.
 */
var ownerHasKeyUseWarning = {
  'react_key_warning': {},
  'react_numeric_key_warning': {}
};
var ownerHasMonitoredObjectMap = {};

var loggedTypeFailures = {};

var NUMERIC_PROPERTY_REGEX = /^\d+$/;

/**
 * Gets the current owner's displayName for use in warnings.
 *
 * @internal
 * @return {?string} Display name or undefined
 */
function getCurrentOwnerDisplayName() {
  var current = ReactCurrentOwner.current;
  return current && current.constructor.displayName || undefined;
}

/**
 * Warn if the component doesn't have an explicit key assigned to it.
 * This component is in an array. The array could grow and shrink or be
 * reordered. All children that haven't already been validated are required to
 * have a "key" property assigned to it.
 *
 * @internal
 * @param {ReactComponent} component Component that requires a key.
 * @param {*} parentType component's parent's type.
 */
function validateExplicitKey(component, parentType) {
  if (component._store.validated || component.key != null) {
    return;
  }
  component._store.validated = true;

  warnAndMonitorForKeyUse(
    'react_key_warning',
    'Each child in an array should have a unique "key" prop.',
    component,
    parentType
  );
}

/**
 * Warn if the key is being defined as an object property but has an incorrect
 * value.
 *
 * @internal
 * @param {string} name Property name of the key.
 * @param {ReactComponent} component Component that requires a key.
 * @param {*} parentType component's parent's type.
 */
function validatePropertyKey(name, component, parentType) {
  if (!NUMERIC_PROPERTY_REGEX.test(name)) {
    return;
  }
  warnAndMonitorForKeyUse(
    'react_numeric_key_warning',
    'Child objects should have non-numeric keys so ordering is preserved.',
    component,
    parentType
  );
}

/**
 * Shared warning and monitoring code for the key warnings.
 *
 * @internal
 * @param {string} warningID The id used when logging.
 * @param {string} message The base warning that gets output.
 * @param {ReactComponent} component Component that requires a key.
 * @param {*} parentType component's parent's type.
 */
function warnAndMonitorForKeyUse(warningID, message, component, parentType) {
  var ownerName = getCurrentOwnerDisplayName();
  var parentName = parentType.displayName;

  var useName = ownerName || parentName;
  var memoizer = ownerHasKeyUseWarning[warningID];
  if (memoizer.hasOwnProperty(useName)) {
    return;
  }
  memoizer[useName] = true;

  message += ownerName ?
    (" Check the render method of " + ownerName + ".") :
    (" Check the renderComponent call using <" + parentName + ">.");

  // Usually the current owner is the offender, but if it accepts children as a
  // property, it may be the creator of the child that's responsible for
  // assigning it a key.
  var childOwnerName = null;
  if (component._owner && component._owner !== ReactCurrentOwner.current) {
    // Name of the component that originally created this child.
    childOwnerName = component._owner.constructor.displayName;

    message += (" It was passed a child from " + childOwnerName + ".");
  }

  message += ' See http://fb.me/react-warning-keys for more information.';
  monitorCodeUse(warningID, {
    component: useName,
    componentOwner: childOwnerName
  });
  console.warn(message);
}

/**
 * Log that we're using an object map. We're considering deprecating this
 * feature and replace it with proper Map and ImmutableMap data structures.
 *
 * @internal
 */
function monitorUseOfObjectMap() {
  var currentName = getCurrentOwnerDisplayName() || '';
  if (ownerHasMonitoredObjectMap.hasOwnProperty(currentName)) {
    return;
  }
  ownerHasMonitoredObjectMap[currentName] = true;
  monitorCodeUse('react_object_map_children');
}

/**
 * Ensure that every component either is passed in a static location, in an
 * array with an explicit keys property defined, or in an object literal
 * with valid key property.
 *
 * @internal
 * @param {*} component Statically passed child of any type.
 * @param {*} parentType component's parent's type.
 * @return {boolean}
 */
function validateChildKeys(component, parentType) {
  if (Array.isArray(component)) {
    for (var i = 0; i < component.length; i++) {
      var child = component[i];
      if (ReactElement.isValidElement(child)) {
        validateExplicitKey(child, parentType);
      }
    }
  } else if (ReactElement.isValidElement(component)) {
    // This component was passed in a valid location.
    component._store.validated = true;
  } else if (component && typeof component === 'object') {
    monitorUseOfObjectMap();
    for (var name in component) {
      validatePropertyKey(name, component[name], parentType);
    }
  }
}

/**
 * Assert that the props are valid
 *
 * @param {string} componentName Name of the component for error messages.
 * @param {object} propTypes Map of prop name to a ReactPropType
 * @param {object} props
 * @param {string} location e.g. "prop", "context", "child context"
 * @private
 */
function checkPropTypes(componentName, propTypes, props, location) {
  for (var propName in propTypes) {
    if (propTypes.hasOwnProperty(propName)) {
      var error;
      // Prop type validation may throw. In case they do, we don't want to
      // fail the render phase where it didn't fail before. So we log it.
      // After these have been cleaned up, we'll let them throw.
      try {
        error = propTypes[propName](props, propName, componentName, location);
      } catch (ex) {
        error = ex;
      }
      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
        // Only monitor this failure once because there tends to be a lot of the
        // same error.
        loggedTypeFailures[error.message] = true;
        // This will soon use the warning module
        monitorCodeUse(
          'react_failed_descriptor_type_check',
          { message: error.message }
        );
      }
    }
  }
}

var ReactElementValidator = {

  createElement: function(type, props, children) {
    // We warn in this case but don't throw. We expect the element creation to
    // succeed and there will likely be errors in render.
    ("production" !== "development" ? warning(
      type != null,
      'React.createElement: type should not be null or undefined. It should ' +
        'be a string (for DOM elements) or a ReactClass (for composite ' +
        'components).'
    ) : null);

    var element = ReactElement.createElement.apply(this, arguments);

    // The result can be nullish if a mock or a custom function is used.
    // TODO: Drop this when these are no longer allowed as the type argument.
    if (element == null) {
      return element;
    }

    for (var i = 2; i < arguments.length; i++) {
      validateChildKeys(arguments[i], type);
    }

    if (type) {
      var name = type.displayName;
      if (type.propTypes) {
        checkPropTypes(
          name,
          type.propTypes,
          element.props,
          ReactPropTypeLocations.prop
        );
      }
      if (type.contextTypes) {
        checkPropTypes(
          name,
          type.contextTypes,
          element._context,
          ReactPropTypeLocations.context
        );
      }
    }
    return element;
  },

  createFactory: function(type) {
    var validatedFactory = ReactElementValidator.createElement.bind(
      null,
      type
    );
    validatedFactory.type = type;
    return validatedFactory;
  }

};

module.exports = ReactElementValidator;

},{"./ReactCurrentOwner":36,"./ReactElement":52,"./ReactPropTypeLocations":71,"./monitorCodeUse":136,"./warning":145}],54:[function(_dereq_,module,exports){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactEmptyComponent
 */

"use strict";

var ReactElement = _dereq_("./ReactElement");

var invariant = _dereq_("./invariant");

var component;
// This registry keeps track of the React IDs of the components that rendered to
// `null` (in reality a placeholder such as `noscript`)
var nullComponentIdsRegistry = {};

var ReactEmptyComponentInjection = {
  injectEmptyComponent: function(emptyComponent) {
    component = ReactElement.createFactory(emptyComponent);
  }
};

/**
 * @return {ReactComponent} component The injected empty component.
 */
function getEmptyComponent() {
  ("production" !== "development" ? invariant(
    component,
    'Trying to return null from a render, but no null placeholder component ' +
    'was injected.'
  ) : invariant(component));
  return component();
}

/**
 * Mark the component as having rendered to null.
 * @param {string} id Component's `_rootNodeID`.
 */
function registerNullComponentID(id) {
  nullComponentIdsRegistry[id] = true;
}

/**
 * Unmark the component as having rendered to null: it renders to something now.
 * @param {string} id Component's `_rootNodeID`.
 */
function deregisterNullComponentID(id) {
  delete nullComponentIdsRegistry[id];
}

/**
 * @param {string} id Component's `_rootNodeID`.
 * @return {boolean} True if the component is rendered to null.
 */
function isNullComponentID(id) {
  return nullComponentIdsRegistry[id];
}

var ReactEmptyComponent = {
  deregisterNullComponentID: deregisterNullComponentID,
  getEmptyComponent: getEmptyComponent,
  injection: ReactEmptyComponentInjection,
  isNullComponentID: isNullComponentID,
  registerNullComponentID: registerNullComponentID
};

module.exports = ReactEmptyComponent;

},{"./ReactElement":52,"./invariant":126}],55:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactErrorUtils
 * @typechecks
 */

"use strict";

var ReactErrorUtils = {
  /**
   * Creates a guarded version of a function. This is supposed to make debugging
   * of event handlers easier. To aid debugging with the browser's debugger,
   * this currently simply returns the original function.
   *
   * @param {function} func Function to be executed
   * @param {string} name The name of the guard
   * @return {function}
   */
  guard: function(func, name) {
    return func;
  }
};

module.exports = ReactErrorUtils;

},{}],56:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactEventEmitterMixin
 */

"use strict";

var EventPluginHub = _dereq_("./EventPluginHub");

function runEventQueueInBatch(events) {
  EventPluginHub.enqueueEvents(events);
  EventPluginHub.processEventQueue();
}

var ReactEventEmitterMixin = {

  /**
   * Streams a fired top-level event to `EventPluginHub` where plugins have the
   * opportunity to create `ReactEvent`s to be dispatched.
   *
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {object} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native environment event.
   */
  handleTopLevel: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent) {
    var events = EventPluginHub.extractEvents(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent
    );

    runEventQueueInBatch(events);
  }
};

module.exports = ReactEventEmitterMixin;

},{"./EventPluginHub":18}],57:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactEventListener
 * @typechecks static-only
 */

"use strict";

var EventListener = _dereq_("./EventListener");
var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");
var PooledClass = _dereq_("./PooledClass");
var ReactInstanceHandles = _dereq_("./ReactInstanceHandles");
var ReactMount = _dereq_("./ReactMount");
var ReactUpdates = _dereq_("./ReactUpdates");

var assign = _dereq_("./Object.assign");
var getEventTarget = _dereq_("./getEventTarget");
var getUnboundedScrollPosition = _dereq_("./getUnboundedScrollPosition");

/**
 * Finds the parent React component of `node`.
 *
 * @param {*} node
 * @return {?DOMEventTarget} Parent container, or `null` if the specified node
 *                           is not nested.
 */
function findParent(node) {
  // TODO: It may be a good idea to cache this to prevent unnecessary DOM
  // traversal, but caching is difficult to do correctly without using a
  // mutation observer to listen for all DOM changes.
  var nodeID = ReactMount.getID(node);
  var rootID = ReactInstanceHandles.getReactRootIDFromNodeID(nodeID);
  var container = ReactMount.findReactContainerForID(rootID);
  var parent = ReactMount.getFirstReactDOM(container);
  return parent;
}

// Used to store ancestor hierarchy in top level callback
function TopLevelCallbackBookKeeping(topLevelType, nativeEvent) {
  this.topLevelType = topLevelType;
  this.nativeEvent = nativeEvent;
  this.ancestors = [];
}
assign(TopLevelCallbackBookKeeping.prototype, {
  destructor: function() {
    this.topLevelType = null;
    this.nativeEvent = null;
    this.ancestors.length = 0;
  }
});
PooledClass.addPoolingTo(
  TopLevelCallbackBookKeeping,
  PooledClass.twoArgumentPooler
);

function handleTopLevelImpl(bookKeeping) {
  var topLevelTarget = ReactMount.getFirstReactDOM(
    getEventTarget(bookKeeping.nativeEvent)
  ) || window;

  // Loop through the hierarchy, in case there's any nested components.
  // It's important that we build the array of ancestors before calling any
  // event handlers, because event handlers can modify the DOM, leading to
  // inconsistencies with ReactMount's node cache. See #1105.
  var ancestor = topLevelTarget;
  while (ancestor) {
    bookKeeping.ancestors.push(ancestor);
    ancestor = findParent(ancestor);
  }

  for (var i = 0, l = bookKeeping.ancestors.length; i < l; i++) {
    topLevelTarget = bookKeeping.ancestors[i];
    var topLevelTargetID = ReactMount.getID(topLevelTarget) || '';
    ReactEventListener._handleTopLevel(
      bookKeeping.topLevelType,
      topLevelTarget,
      topLevelTargetID,
      bookKeeping.nativeEvent
    );
  }
}

function scrollValueMonitor(cb) {
  var scrollPosition = getUnboundedScrollPosition(window);
  cb(scrollPosition);
}

var ReactEventListener = {
  _enabled: true,
  _handleTopLevel: null,

  WINDOW_HANDLE: ExecutionEnvironment.canUseDOM ? window : null,

  setHandleTopLevel: function(handleTopLevel) {
    ReactEventListener._handleTopLevel = handleTopLevel;
  },

  setEnabled: function(enabled) {
    ReactEventListener._enabled = !!enabled;
  },

  isEnabled: function() {
    return ReactEventListener._enabled;
  },


  /**
   * Traps top-level events by using event bubbling.
   *
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {string} handlerBaseName Event name (e.g. "click").
   * @param {object} handle Element on which to attach listener.
   * @return {object} An object with a remove function which will forcefully
   *                  remove the listener.
   * @internal
   */
  trapBubbledEvent: function(topLevelType, handlerBaseName, handle) {
    var element = handle;
    if (!element) {
      return;
    }
    return EventListener.listen(
      element,
      handlerBaseName,
      ReactEventListener.dispatchEvent.bind(null, topLevelType)
    );
  },

  /**
   * Traps a top-level event by using event capturing.
   *
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {string} handlerBaseName Event name (e.g. "click").
   * @param {object} handle Element on which to attach listener.
   * @return {object} An object with a remove function which will forcefully
   *                  remove the listener.
   * @internal
   */
  trapCapturedEvent: function(topLevelType, handlerBaseName, handle) {
    var element = handle;
    if (!element) {
      return;
    }
    return EventListener.capture(
      element,
      handlerBaseName,
      ReactEventListener.dispatchEvent.bind(null, topLevelType)
    );
  },

  monitorScrollValue: function(refresh) {
    var callback = scrollValueMonitor.bind(null, refresh);
    EventListener.listen(window, 'scroll', callback);
    EventListener.listen(window, 'resize', callback);
  },

  dispatchEvent: function(topLevelType, nativeEvent) {
    if (!ReactEventListener._enabled) {
      return;
    }

    var bookKeeping = TopLevelCallbackBookKeeping.getPooled(
      topLevelType,
      nativeEvent
    );
    try {
      // Event queue being processed in the same cycle allows
      // `preventDefault`.
      ReactUpdates.batchedUpdates(handleTopLevelImpl, bookKeeping);
    } finally {
      TopLevelCallbackBookKeeping.release(bookKeeping);
    }
  }
};

module.exports = ReactEventListener;

},{"./EventListener":17,"./ExecutionEnvironment":22,"./Object.assign":27,"./PooledClass":28,"./ReactInstanceHandles":60,"./ReactMount":63,"./ReactUpdates":79,"./getEventTarget":117,"./getUnboundedScrollPosition":122}],58:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactInjection
 */

"use strict";

var DOMProperty = _dereq_("./DOMProperty");
var EventPluginHub = _dereq_("./EventPluginHub");
var ReactComponent = _dereq_("./ReactComponent");
var ReactCompositeComponent = _dereq_("./ReactCompositeComponent");
var ReactEmptyComponent = _dereq_("./ReactEmptyComponent");
var ReactBrowserEventEmitter = _dereq_("./ReactBrowserEventEmitter");
var ReactNativeComponent = _dereq_("./ReactNativeComponent");
var ReactPerf = _dereq_("./ReactPerf");
var ReactRootIndex = _dereq_("./ReactRootIndex");
var ReactUpdates = _dereq_("./ReactUpdates");

var ReactInjection = {
  Component: ReactComponent.injection,
  CompositeComponent: ReactCompositeComponent.injection,
  DOMProperty: DOMProperty.injection,
  EmptyComponent: ReactEmptyComponent.injection,
  EventPluginHub: EventPluginHub.injection,
  EventEmitter: ReactBrowserEventEmitter.injection,
  NativeComponent: ReactNativeComponent.injection,
  Perf: ReactPerf.injection,
  RootIndex: ReactRootIndex.injection,
  Updates: ReactUpdates.injection
};

module.exports = ReactInjection;

},{"./DOMProperty":11,"./EventPluginHub":18,"./ReactBrowserEventEmitter":30,"./ReactComponent":32,"./ReactCompositeComponent":34,"./ReactEmptyComponent":54,"./ReactNativeComponent":66,"./ReactPerf":68,"./ReactRootIndex":75,"./ReactUpdates":79}],59:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactInputSelection
 */

"use strict";

var ReactDOMSelection = _dereq_("./ReactDOMSelection");

var containsNode = _dereq_("./containsNode");
var focusNode = _dereq_("./focusNode");
var getActiveElement = _dereq_("./getActiveElement");

function isInDocument(node) {
  return containsNode(document.documentElement, node);
}

/**
 * @ReactInputSelection: React input selection module. Based on Selection.js,
 * but modified to be suitable for react and has a couple of bug fixes (doesn't
 * assume buttons have range selections allowed).
 * Input selection module for React.
 */
var ReactInputSelection = {

  hasSelectionCapabilities: function(elem) {
    return elem && (
      (elem.nodeName === 'INPUT' && elem.type === 'text') ||
      elem.nodeName === 'TEXTAREA' ||
      elem.contentEditable === 'true'
    );
  },

  getSelectionInformation: function() {
    var focusedElem = getActiveElement();
    return {
      focusedElem: focusedElem,
      selectionRange:
          ReactInputSelection.hasSelectionCapabilities(focusedElem) ?
          ReactInputSelection.getSelection(focusedElem) :
          null
    };
  },

  /**
   * @restoreSelection: If any selection information was potentially lost,
   * restore it. This is useful when performing operations that could remove dom
   * nodes and place them back in, resulting in focus being lost.
   */
  restoreSelection: function(priorSelectionInformation) {
    var curFocusedElem = getActiveElement();
    var priorFocusedElem = priorSelectionInformation.focusedElem;
    var priorSelectionRange = priorSelectionInformation.selectionRange;
    if (curFocusedElem !== priorFocusedElem &&
        isInDocument(priorFocusedElem)) {
      if (ReactInputSelection.hasSelectionCapabilities(priorFocusedElem)) {
        ReactInputSelection.setSelection(
          priorFocusedElem,
          priorSelectionRange
        );
      }
      focusNode(priorFocusedElem);
    }
  },

  /**
   * @getSelection: Gets the selection bounds of a focused textarea, input or
   * contentEditable node.
   * -@input: Look up selection bounds of this input
   * -@return {start: selectionStart, end: selectionEnd}
   */
  getSelection: function(input) {
    var selection;

    if ('selectionStart' in input) {
      // Modern browser with input or textarea.
      selection = {
        start: input.selectionStart,
        end: input.selectionEnd
      };
    } else if (document.selection && input.nodeName === 'INPUT') {
      // IE8 input.
      var range = document.selection.createRange();
      // There can only be one selection per document in IE, so it must
      // be in our element.
      if (range.parentElement() === input) {
        selection = {
          start: -range.moveStart('character', -input.value.length),
          end: -range.moveEnd('character', -input.value.length)
        };
      }
    } else {
      // Content editable or old IE textarea.
      selection = ReactDOMSelection.getOffsets(input);
    }

    return selection || {start: 0, end: 0};
  },

  /**
   * @setSelection: Sets the selection bounds of a textarea or input and focuses
   * the input.
   * -@input     Set selection bounds of this input or textarea
   * -@offsets   Object of same form that is returned from get*
   */
  setSelection: function(input, offsets) {
    var start = offsets.start;
    var end = offsets.end;
    if (typeof end === 'undefined') {
      end = start;
    }

    if ('selectionStart' in input) {
      input.selectionStart = start;
      input.selectionEnd = Math.min(end, input.value.length);
    } else if (document.selection && input.nodeName === 'INPUT') {
      var range = input.createTextRange();
      range.collapse(true);
      range.moveStart('character', start);
      range.moveEnd('character', end - start);
      range.select();
    } else {
      ReactDOMSelection.setOffsets(input, offsets);
    }
  }
};

module.exports = ReactInputSelection;

},{"./ReactDOMSelection":46,"./containsNode":101,"./focusNode":111,"./getActiveElement":113}],60:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactInstanceHandles
 * @typechecks static-only
 */

"use strict";

var ReactRootIndex = _dereq_("./ReactRootIndex");

var invariant = _dereq_("./invariant");

var SEPARATOR = '.';
var SEPARATOR_LENGTH = SEPARATOR.length;

/**
 * Maximum depth of traversals before we consider the possibility of a bad ID.
 */
var MAX_TREE_DEPTH = 100;

/**
 * Creates a DOM ID prefix to use when mounting React components.
 *
 * @param {number} index A unique integer
 * @return {string} React root ID.
 * @internal
 */
function getReactRootIDString(index) {
  return SEPARATOR + index.toString(36);
}

/**
 * Checks if a character in the supplied ID is a separator or the end.
 *
 * @param {string} id A React DOM ID.
 * @param {number} index Index of the character to check.
 * @return {boolean} True if the character is a separator or end of the ID.
 * @private
 */
function isBoundary(id, index) {
  return id.charAt(index) === SEPARATOR || index === id.length;
}

/**
 * Checks if the supplied string is a valid React DOM ID.
 *
 * @param {string} id A React DOM ID, maybe.
 * @return {boolean} True if the string is a valid React DOM ID.
 * @private
 */
function isValidID(id) {
  return id === '' || (
    id.charAt(0) === SEPARATOR && id.charAt(id.length - 1) !== SEPARATOR
  );
}

/**
 * Checks if the first ID is an ancestor of or equal to the second ID.
 *
 * @param {string} ancestorID
 * @param {string} descendantID
 * @return {boolean} True if `ancestorID` is an ancestor of `descendantID`.
 * @internal
 */
function isAncestorIDOf(ancestorID, descendantID) {
  return (
    descendantID.indexOf(ancestorID) === 0 &&
    isBoundary(descendantID, ancestorID.length)
  );
}

/**
 * Gets the parent ID of the supplied React DOM ID, `id`.
 *
 * @param {string} id ID of a component.
 * @return {string} ID of the parent, or an empty string.
 * @private
 */
function getParentID(id) {
  return id ? id.substr(0, id.lastIndexOf(SEPARATOR)) : '';
}

/**
 * Gets the next DOM ID on the tree path from the supplied `ancestorID` to the
 * supplied `destinationID`. If they are equal, the ID is returned.
 *
 * @param {string} ancestorID ID of an ancestor node of `destinationID`.
 * @param {string} destinationID ID of the destination node.
 * @return {string} Next ID on the path from `ancestorID` to `destinationID`.
 * @private
 */
function getNextDescendantID(ancestorID, destinationID) {
  ("production" !== "development" ? invariant(
    isValidID(ancestorID) && isValidID(destinationID),
    'getNextDescendantID(%s, %s): Received an invalid React DOM ID.',
    ancestorID,
    destinationID
  ) : invariant(isValidID(ancestorID) && isValidID(destinationID)));
  ("production" !== "development" ? invariant(
    isAncestorIDOf(ancestorID, destinationID),
    'getNextDescendantID(...): React has made an invalid assumption about ' +
    'the DOM hierarchy. Expected `%s` to be an ancestor of `%s`.',
    ancestorID,
    destinationID
  ) : invariant(isAncestorIDOf(ancestorID, destinationID)));
  if (ancestorID === destinationID) {
    return ancestorID;
  }
  // Skip over the ancestor and the immediate separator. Traverse until we hit
  // another separator or we reach the end of `destinationID`.
  var start = ancestorID.length + SEPARATOR_LENGTH;
  for (var i = start; i < destinationID.length; i++) {
    if (isBoundary(destinationID, i)) {
      break;
    }
  }
  return destinationID.substr(0, i);
}

/**
 * Gets the nearest common ancestor ID of two IDs.
 *
 * Using this ID scheme, the nearest common ancestor ID is the longest common
 * prefix of the two IDs that immediately preceded a "marker" in both strings.
 *
 * @param {string} oneID
 * @param {string} twoID
 * @return {string} Nearest common ancestor ID, or the empty string if none.
 * @private
 */
function getFirstCommonAncestorID(oneID, twoID) {
  var minLength = Math.min(oneID.length, twoID.length);
  if (minLength === 0) {
    return '';
  }
  var lastCommonMarkerIndex = 0;
  // Use `<=` to traverse until the "EOL" of the shorter string.
  for (var i = 0; i <= minLength; i++) {
    if (isBoundary(oneID, i) && isBoundary(twoID, i)) {
      lastCommonMarkerIndex = i;
    } else if (oneID.charAt(i) !== twoID.charAt(i)) {
      break;
    }
  }
  var longestCommonID = oneID.substr(0, lastCommonMarkerIndex);
  ("production" !== "development" ? invariant(
    isValidID(longestCommonID),
    'getFirstCommonAncestorID(%s, %s): Expected a valid React DOM ID: %s',
    oneID,
    twoID,
    longestCommonID
  ) : invariant(isValidID(longestCommonID)));
  return longestCommonID;
}

/**
 * Traverses the parent path between two IDs (either up or down). The IDs must
 * not be the same, and there must exist a parent path between them. If the
 * callback returns `false`, traversal is stopped.
 *
 * @param {?string} start ID at which to start traversal.
 * @param {?string} stop ID at which to end traversal.
 * @param {function} cb Callback to invoke each ID with.
 * @param {?boolean} skipFirst Whether or not to skip the first node.
 * @param {?boolean} skipLast Whether or not to skip the last node.
 * @private
 */
function traverseParentPath(start, stop, cb, arg, skipFirst, skipLast) {
  start = start || '';
  stop = stop || '';
  ("production" !== "development" ? invariant(
    start !== stop,
    'traverseParentPath(...): Cannot traverse from and to the same ID, `%s`.',
    start
  ) : invariant(start !== stop));
  var traverseUp = isAncestorIDOf(stop, start);
  ("production" !== "development" ? invariant(
    traverseUp || isAncestorIDOf(start, stop),
    'traverseParentPath(%s, %s, ...): Cannot traverse from two IDs that do ' +
    'not have a parent path.',
    start,
    stop
  ) : invariant(traverseUp || isAncestorIDOf(start, stop)));
  // Traverse from `start` to `stop` one depth at a time.
  var depth = 0;
  var traverse = traverseUp ? getParentID : getNextDescendantID;
  for (var id = start; /* until break */; id = traverse(id, stop)) {
    var ret;
    if ((!skipFirst || id !== start) && (!skipLast || id !== stop)) {
      ret = cb(id, traverseUp, arg);
    }
    if (ret === false || id === stop) {
      // Only break //after// visiting `stop`.
      break;
    }
    ("production" !== "development" ? invariant(
      depth++ < MAX_TREE_DEPTH,
      'traverseParentPath(%s, %s, ...): Detected an infinite loop while ' +
      'traversing the React DOM ID tree. This may be due to malformed IDs: %s',
      start, stop
    ) : invariant(depth++ < MAX_TREE_DEPTH));
  }
}

/**
 * Manages the IDs assigned to DOM representations of React components. This
 * uses a specific scheme in order to traverse the DOM efficiently (e.g. in
 * order to simulate events).
 *
 * @internal
 */
var ReactInstanceHandles = {

  /**
   * Constructs a React root ID
   * @return {string} A React root ID.
   */
  createReactRootID: function() {
    return getReactRootIDString(ReactRootIndex.createReactRootIndex());
  },

  /**
   * Constructs a React ID by joining a root ID with a name.
   *
   * @param {string} rootID Root ID of a parent component.
   * @param {string} name A component's name (as flattened children).
   * @return {string} A React ID.
   * @internal
   */
  createReactID: function(rootID, name) {
    return rootID + name;
  },

  /**
   * Gets the DOM ID of the React component that is the root of the tree that
   * contains the React component with the supplied DOM ID.
   *
   * @param {string} id DOM ID of a React component.
   * @return {?string} DOM ID of the React component that is the root.
   * @internal
   */
  getReactRootIDFromNodeID: function(id) {
    if (id && id.charAt(0) === SEPARATOR && id.length > 1) {
      var index = id.indexOf(SEPARATOR, 1);
      return index > -1 ? id.substr(0, index) : id;
    }
    return null;
  },

  /**
   * Traverses the ID hierarchy and invokes the supplied `cb` on any IDs that
   * should would receive a `mouseEnter` or `mouseLeave` event.
   *
   * NOTE: Does not invoke the callback on the nearest common ancestor because
   * nothing "entered" or "left" that element.
   *
   * @param {string} leaveID ID being left.
   * @param {string} enterID ID being entered.
   * @param {function} cb Callback to invoke on each entered/left ID.
   * @param {*} upArg Argument to invoke the callback with on left IDs.
   * @param {*} downArg Argument to invoke the callback with on entered IDs.
   * @internal
   */
  traverseEnterLeave: function(leaveID, enterID, cb, upArg, downArg) {
    var ancestorID = getFirstCommonAncestorID(leaveID, enterID);
    if (ancestorID !== leaveID) {
      traverseParentPath(leaveID, ancestorID, cb, upArg, false, true);
    }
    if (ancestorID !== enterID) {
      traverseParentPath(ancestorID, enterID, cb, downArg, true, false);
    }
  },

  /**
   * Simulates the traversal of a two-phase, capture/bubble event dispatch.
   *
   * NOTE: This traversal happens on IDs without touching the DOM.
   *
   * @param {string} targetID ID of the target node.
   * @param {function} cb Callback to invoke.
   * @param {*} arg Argument to invoke the callback with.
   * @internal
   */
  traverseTwoPhase: function(targetID, cb, arg) {
    if (targetID) {
      traverseParentPath('', targetID, cb, arg, true, false);
      traverseParentPath(targetID, '', cb, arg, false, true);
    }
  },

  /**
   * Traverse a node ID, calling the supplied `cb` for each ancestor ID. For
   * example, passing `.0.$row-0.1` would result in `cb` getting called
   * with `.0`, `.0.$row-0`, and `.0.$row-0.1`.
   *
   * NOTE: This traversal happens on IDs without touching the DOM.
   *
   * @param {string} targetID ID of the target node.
   * @param {function} cb Callback to invoke.
   * @param {*} arg Argument to invoke the callback with.
   * @internal
   */
  traverseAncestors: function(targetID, cb, arg) {
    traverseParentPath('', targetID, cb, arg, true, false);
  },

  /**
   * Exposed for unit testing.
   * @private
   */
  _getFirstCommonAncestorID: getFirstCommonAncestorID,

  /**
   * Exposed for unit testing.
   * @private
   */
  _getNextDescendantID: getNextDescendantID,

  isAncestorIDOf: isAncestorIDOf,

  SEPARATOR: SEPARATOR

};

module.exports = ReactInstanceHandles;

},{"./ReactRootIndex":75,"./invariant":126}],61:[function(_dereq_,module,exports){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactLegacyElement
 */

"use strict";

var ReactCurrentOwner = _dereq_("./ReactCurrentOwner");

var invariant = _dereq_("./invariant");
var monitorCodeUse = _dereq_("./monitorCodeUse");
var warning = _dereq_("./warning");

var legacyFactoryLogs = {};
function warnForLegacyFactoryCall() {
  if (!ReactLegacyElementFactory._isLegacyCallWarningEnabled) {
    return;
  }
  var owner = ReactCurrentOwner.current;
  var name = owner && owner.constructor ? owner.constructor.displayName : '';
  if (!name) {
    name = 'Something';
  }
  if (legacyFactoryLogs.hasOwnProperty(name)) {
    return;
  }
  legacyFactoryLogs[name] = true;
  ("production" !== "development" ? warning(
    false,
    name + ' is calling a React component directly. ' +
    'Use a factory or JSX instead. See: http://fb.me/react-legacyfactory'
  ) : null);
  monitorCodeUse('react_legacy_factory_call', { version: 3, name: name });
}

function warnForPlainFunctionType(type) {
  var isReactClass =
    type.prototype &&
    typeof type.prototype.mountComponent === 'function' &&
    typeof type.prototype.receiveComponent === 'function';
  if (isReactClass) {
    ("production" !== "development" ? warning(
      false,
      'Did not expect to get a React class here. Use `Component` instead ' +
      'of `Component.type` or `this.constructor`.'
    ) : null);
  } else {
    if (!type._reactWarnedForThisType) {
      try {
        type._reactWarnedForThisType = true;
      } catch (x) {
        // just incase this is a frozen object or some special object
      }
      monitorCodeUse(
        'react_non_component_in_jsx',
        { version: 3, name: type.name }
      );
    }
    ("production" !== "development" ? warning(
      false,
      'This JSX uses a plain function. Only React components are ' +
      'valid in React\'s JSX transform.'
    ) : null);
  }
}

function warnForNonLegacyFactory(type) {
  ("production" !== "development" ? warning(
    false,
    'Do not pass React.DOM.' + type.type + ' to JSX or createFactory. ' +
    'Use the string "' + type.type + '" instead.'
  ) : null);
}

/**
 * Transfer static properties from the source to the target. Functions are
 * rebound to have this reflect the original source.
 */
function proxyStaticMethods(target, source) {
  if (typeof source !== 'function') {
    return;
  }
  for (var key in source) {
    if (source.hasOwnProperty(key)) {
      var value = source[key];
      if (typeof value === 'function') {
        var bound = value.bind(source);
        // Copy any properties defined on the function, such as `isRequired` on
        // a PropTypes validator.
        for (var k in value) {
          if (value.hasOwnProperty(k)) {
            bound[k] = value[k];
          }
        }
        target[key] = bound;
      } else {
        target[key] = value;
      }
    }
  }
}

// We use an object instead of a boolean because booleans are ignored by our
// mocking libraries when these factories gets mocked.
var LEGACY_MARKER = {};
var NON_LEGACY_MARKER = {};

var ReactLegacyElementFactory = {};

ReactLegacyElementFactory.wrapCreateFactory = function(createFactory) {
  var legacyCreateFactory = function(type) {
    if (typeof type !== 'function') {
      // Non-function types cannot be legacy factories
      return createFactory(type);
    }

    if (type.isReactNonLegacyFactory) {
      // This is probably a factory created by ReactDOM we unwrap it to get to
      // the underlying string type. It shouldn't have been passed here so we
      // warn.
      if ("production" !== "development") {
        warnForNonLegacyFactory(type);
      }
      return createFactory(type.type);
    }

    if (type.isReactLegacyFactory) {
      // This is probably a legacy factory created by ReactCompositeComponent.
      // We unwrap it to get to the underlying class.
      return createFactory(type.type);
    }

    if ("production" !== "development") {
      warnForPlainFunctionType(type);
    }

    // Unless it's a legacy factory, then this is probably a plain function,
    // that is expecting to be invoked by JSX. We can just return it as is.
    return type;
  };
  return legacyCreateFactory;
};

ReactLegacyElementFactory.wrapCreateElement = function(createElement) {
  var legacyCreateElement = function(type, props, children) {
    if (typeof type !== 'function') {
      // Non-function types cannot be legacy factories
      return createElement.apply(this, arguments);
    }

    var args;

    if (type.isReactNonLegacyFactory) {
      // This is probably a factory created by ReactDOM we unwrap it to get to
      // the underlying string type. It shouldn't have been passed here so we
      // warn.
      if ("production" !== "development") {
        warnForNonLegacyFactory(type);
      }
      args = Array.prototype.slice.call(arguments, 0);
      args[0] = type.type;
      return createElement.apply(this, args);
    }

    if (type.isReactLegacyFactory) {
      // This is probably a legacy factory created by ReactCompositeComponent.
      // We unwrap it to get to the underlying class.
      if (type._isMockFunction) {
        // If this is a mock function, people will expect it to be called. We
        // will actually call the original mock factory function instead. This
        // future proofs unit testing that assume that these are classes.
        type.type._mockedReactClassConstructor = type;
      }
      args = Array.prototype.slice.call(arguments, 0);
      args[0] = type.type;
      return createElement.apply(this, args);
    }

    if ("production" !== "development") {
      warnForPlainFunctionType(type);
    }

    // This is being called with a plain function we should invoke it
    // immediately as if this was used with legacy JSX.
    return type.apply(null, Array.prototype.slice.call(arguments, 1));
  };
  return legacyCreateElement;
};

ReactLegacyElementFactory.wrapFactory = function(factory) {
  ("production" !== "development" ? invariant(
    typeof factory === 'function',
    'This is suppose to accept a element factory'
  ) : invariant(typeof factory === 'function'));
  var legacyElementFactory = function(config, children) {
    // This factory should not be called when JSX is used. Use JSX instead.
    if ("production" !== "development") {
      warnForLegacyFactoryCall();
    }
    return factory.apply(this, arguments);
  };
  proxyStaticMethods(legacyElementFactory, factory.type);
  legacyElementFactory.isReactLegacyFactory = LEGACY_MARKER;
  legacyElementFactory.type = factory.type;
  return legacyElementFactory;
};

// This is used to mark a factory that will remain. E.g. we're allowed to call
// it as a function. However, you're not suppose to pass it to createElement
// or createFactory, so it will warn you if you do.
ReactLegacyElementFactory.markNonLegacyFactory = function(factory) {
  factory.isReactNonLegacyFactory = NON_LEGACY_MARKER;
  return factory;
};

// Checks if a factory function is actually a legacy factory pretending to
// be a class.
ReactLegacyElementFactory.isValidFactory = function(factory) {
  // TODO: This will be removed and moved into a class validator or something.
  return typeof factory === 'function' &&
    factory.isReactLegacyFactory === LEGACY_MARKER;
};

ReactLegacyElementFactory.isValidClass = function(factory) {
  if ("production" !== "development") {
    ("production" !== "development" ? warning(
      false,
      'isValidClass is deprecated and will be removed in a future release. ' +
      'Use a more specific validator instead.'
    ) : null);
  }
  return ReactLegacyElementFactory.isValidFactory(factory);
};

ReactLegacyElementFactory._isLegacyCallWarningEnabled = true;

module.exports = ReactLegacyElementFactory;

},{"./ReactCurrentOwner":36,"./invariant":126,"./monitorCodeUse":136,"./warning":145}],62:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactMarkupChecksum
 */

"use strict";

var adler32 = _dereq_("./adler32");

var ReactMarkupChecksum = {
  CHECKSUM_ATTR_NAME: 'data-react-checksum',

  /**
   * @param {string} markup Markup string
   * @return {string} Markup string with checksum attribute attached
   */
  addChecksumToMarkup: function(markup) {
    var checksum = adler32(markup);
    return markup.replace(
      '>',
      ' ' + ReactMarkupChecksum.CHECKSUM_ATTR_NAME + '="' + checksum + '">'
    );
  },

  /**
   * @param {string} markup to use
   * @param {DOMElement} element root React element
   * @returns {boolean} whether or not the markup is the same
   */
  canReuseMarkup: function(markup, element) {
    var existingChecksum = element.getAttribute(
      ReactMarkupChecksum.CHECKSUM_ATTR_NAME
    );
    existingChecksum = existingChecksum && parseInt(existingChecksum, 10);
    var markupChecksum = adler32(markup);
    return markupChecksum === existingChecksum;
  }
};

module.exports = ReactMarkupChecksum;

},{"./adler32":98}],63:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactMount
 */

"use strict";

var DOMProperty = _dereq_("./DOMProperty");
var ReactBrowserEventEmitter = _dereq_("./ReactBrowserEventEmitter");
var ReactCurrentOwner = _dereq_("./ReactCurrentOwner");
var ReactElement = _dereq_("./ReactElement");
var ReactLegacyElement = _dereq_("./ReactLegacyElement");
var ReactInstanceHandles = _dereq_("./ReactInstanceHandles");
var ReactPerf = _dereq_("./ReactPerf");

var containsNode = _dereq_("./containsNode");
var deprecated = _dereq_("./deprecated");
var getReactRootElementInContainer = _dereq_("./getReactRootElementInContainer");
var instantiateReactComponent = _dereq_("./instantiateReactComponent");
var invariant = _dereq_("./invariant");
var shouldUpdateReactComponent = _dereq_("./shouldUpdateReactComponent");
var warning = _dereq_("./warning");

var createElement = ReactLegacyElement.wrapCreateElement(
  ReactElement.createElement
);

var SEPARATOR = ReactInstanceHandles.SEPARATOR;

var ATTR_NAME = DOMProperty.ID_ATTRIBUTE_NAME;
var nodeCache = {};

var ELEMENT_NODE_TYPE = 1;
var DOC_NODE_TYPE = 9;

/** Mapping from reactRootID to React component instance. */
var instancesByReactRootID = {};

/** Mapping from reactRootID to `container` nodes. */
var containersByReactRootID = {};

if ("production" !== "development") {
  /** __DEV__-only mapping from reactRootID to root elements. */
  var rootElementsByReactRootID = {};
}

// Used to store breadth-first search state in findComponentRoot.
var findComponentRootReusableArray = [];

/**
 * @param {DOMElement} container DOM element that may contain a React component.
 * @return {?string} A "reactRoot" ID, if a React component is rendered.
 */
function getReactRootID(container) {
  var rootElement = getReactRootElementInContainer(container);
  return rootElement && ReactMount.getID(rootElement);
}

/**
 * Accessing node[ATTR_NAME] or calling getAttribute(ATTR_NAME) on a form
 * element can return its control whose name or ID equals ATTR_NAME. All
 * DOM nodes support `getAttributeNode` but this can also get called on
 * other objects so just return '' if we're given something other than a
 * DOM node (such as window).
 *
 * @param {?DOMElement|DOMWindow|DOMDocument|DOMTextNode} node DOM node.
 * @return {string} ID of the supplied `domNode`.
 */
function getID(node) {
  var id = internalGetID(node);
  if (id) {
    if (nodeCache.hasOwnProperty(id)) {
      var cached = nodeCache[id];
      if (cached !== node) {
        ("production" !== "development" ? invariant(
          !isValid(cached, id),
          'ReactMount: Two valid but unequal nodes with the same `%s`: %s',
          ATTR_NAME, id
        ) : invariant(!isValid(cached, id)));

        nodeCache[id] = node;
      }
    } else {
      nodeCache[id] = node;
    }
  }

  return id;
}

function internalGetID(node) {
  // If node is something like a window, document, or text node, none of
  // which support attributes or a .getAttribute method, gracefully return
  // the empty string, as if the attribute were missing.
  return node && node.getAttribute && node.getAttribute(ATTR_NAME) || '';
}

/**
 * Sets the React-specific ID of the given node.
 *
 * @param {DOMElement} node The DOM node whose ID will be set.
 * @param {string} id The value of the ID attribute.
 */
function setID(node, id) {
  var oldID = internalGetID(node);
  if (oldID !== id) {
    delete nodeCache[oldID];
  }
  node.setAttribute(ATTR_NAME, id);
  nodeCache[id] = node;
}

/**
 * Finds the node with the supplied React-generated DOM ID.
 *
 * @param {string} id A React-generated DOM ID.
 * @return {DOMElement} DOM node with the suppled `id`.
 * @internal
 */
function getNode(id) {
  if (!nodeCache.hasOwnProperty(id) || !isValid(nodeCache[id], id)) {
    nodeCache[id] = ReactMount.findReactNodeByID(id);
  }
  return nodeCache[id];
}

/**
 * A node is "valid" if it is contained by a currently mounted container.
 *
 * This means that the node does not have to be contained by a document in
 * order to be considered valid.
 *
 * @param {?DOMElement} node The candidate DOM node.
 * @param {string} id The expected ID of the node.
 * @return {boolean} Whether the node is contained by a mounted container.
 */
function isValid(node, id) {
  if (node) {
    ("production" !== "development" ? invariant(
      internalGetID(node) === id,
      'ReactMount: Unexpected modification of `%s`',
      ATTR_NAME
    ) : invariant(internalGetID(node) === id));

    var container = ReactMount.findReactContainerForID(id);
    if (container && containsNode(container, node)) {
      return true;
    }
  }

  return false;
}

/**
 * Causes the cache to forget about one React-specific ID.
 *
 * @param {string} id The ID to forget.
 */
function purgeID(id) {
  delete nodeCache[id];
}

var deepestNodeSoFar = null;
function findDeepestCachedAncestorImpl(ancestorID) {
  var ancestor = nodeCache[ancestorID];
  if (ancestor && isValid(ancestor, ancestorID)) {
    deepestNodeSoFar = ancestor;
  } else {
    // This node isn't populated in the cache, so presumably none of its
    // descendants are. Break out of the loop.
    return false;
  }
}

/**
 * Return the deepest cached node whose ID is a prefix of `targetID`.
 */
function findDeepestCachedAncestor(targetID) {
  deepestNodeSoFar = null;
  ReactInstanceHandles.traverseAncestors(
    targetID,
    findDeepestCachedAncestorImpl
  );

  var foundNode = deepestNodeSoFar;
  deepestNodeSoFar = null;
  return foundNode;
}

/**
 * Mounting is the process of initializing a React component by creatings its
 * representative DOM elements and inserting them into a supplied `container`.
 * Any prior content inside `container` is destroyed in the process.
 *
 *   ReactMount.render(
 *     component,
 *     document.getElementById('container')
 *   );
 *
 *   <div id="container">                   <-- Supplied `container`.
 *     <div data-reactid=".3">              <-- Rendered reactRoot of React
 *       // ...                                 component.
 *     </div>
 *   </div>
 *
 * Inside of `container`, the first element rendered is the "reactRoot".
 */
var ReactMount = {
  /** Exposed for debugging purposes **/
  _instancesByReactRootID: instancesByReactRootID,

  /**
   * This is a hook provided to support rendering React components while
   * ensuring that the apparent scroll position of its `container` does not
   * change.
   *
   * @param {DOMElement} container The `container` being rendered into.
   * @param {function} renderCallback This must be called once to do the render.
   */
  scrollMonitor: function(container, renderCallback) {
    renderCallback();
  },

  /**
   * Take a component that's already mounted into the DOM and replace its props
   * @param {ReactComponent} prevComponent component instance already in the DOM
   * @param {ReactComponent} nextComponent component instance to render
   * @param {DOMElement} container container to render into
   * @param {?function} callback function triggered on completion
   */
  _updateRootComponent: function(
      prevComponent,
      nextComponent,
      container,
      callback) {
    var nextProps = nextComponent.props;
    ReactMount.scrollMonitor(container, function() {
      prevComponent.replaceProps(nextProps, callback);
    });

    if ("production" !== "development") {
      // Record the root element in case it later gets transplanted.
      rootElementsByReactRootID[getReactRootID(container)] =
        getReactRootElementInContainer(container);
    }

    return prevComponent;
  },

  /**
   * Register a component into the instance map and starts scroll value
   * monitoring
   * @param {ReactComponent} nextComponent component instance to render
   * @param {DOMElement} container container to render into
   * @return {string} reactRoot ID prefix
   */
  _registerComponent: function(nextComponent, container) {
    ("production" !== "development" ? invariant(
      container && (
        container.nodeType === ELEMENT_NODE_TYPE ||
        container.nodeType === DOC_NODE_TYPE
      ),
      '_registerComponent(...): Target container is not a DOM element.'
    ) : invariant(container && (
      container.nodeType === ELEMENT_NODE_TYPE ||
      container.nodeType === DOC_NODE_TYPE
    )));

    ReactBrowserEventEmitter.ensureScrollValueMonitoring();

    var reactRootID = ReactMount.registerContainer(container);
    instancesByReactRootID[reactRootID] = nextComponent;
    return reactRootID;
  },

  /**
   * Render a new component into the DOM.
   * @param {ReactComponent} nextComponent component instance to render
   * @param {DOMElement} container container to render into
   * @param {boolean} shouldReuseMarkup if we should skip the markup insertion
   * @return {ReactComponent} nextComponent
   */
  _renderNewRootComponent: ReactPerf.measure(
    'ReactMount',
    '_renderNewRootComponent',
    function(
        nextComponent,
        container,
        shouldReuseMarkup) {
      // Various parts of our code (such as ReactCompositeComponent's
      // _renderValidatedComponent) assume that calls to render aren't nested;
      // verify that that's the case.
      ("production" !== "development" ? warning(
        ReactCurrentOwner.current == null,
        '_renderNewRootComponent(): Render methods should be a pure function ' +
        'of props and state; triggering nested component updates from ' +
        'render is not allowed. If necessary, trigger nested updates in ' +
        'componentDidUpdate.'
      ) : null);

      var componentInstance = instantiateReactComponent(nextComponent, null);
      var reactRootID = ReactMount._registerComponent(
        componentInstance,
        container
      );
      componentInstance.mountComponentIntoNode(
        reactRootID,
        container,
        shouldReuseMarkup
      );

      if ("production" !== "development") {
        // Record the root element in case it later gets transplanted.
        rootElementsByReactRootID[reactRootID] =
          getReactRootElementInContainer(container);
      }

      return componentInstance;
    }
  ),

  /**
   * Renders a React component into the DOM in the supplied `container`.
   *
   * If the React component was previously rendered into `container`, this will
   * perform an update on it and only mutate the DOM as necessary to reflect the
   * latest React component.
   *
   * @param {ReactElement} nextElement Component element to render.
   * @param {DOMElement} container DOM element to render into.
   * @param {?function} callback function triggered on completion
   * @return {ReactComponent} Component instance rendered in `container`.
   */
  render: function(nextElement, container, callback) {
    ("production" !== "development" ? invariant(
      ReactElement.isValidElement(nextElement),
      'renderComponent(): Invalid component element.%s',
      (
        typeof nextElement === 'string' ?
          ' Instead of passing an element string, make sure to instantiate ' +
          'it by passing it to React.createElement.' :
        ReactLegacyElement.isValidFactory(nextElement) ?
          ' Instead of passing a component class, make sure to instantiate ' +
          'it by passing it to React.createElement.' :
        // Check if it quacks like a element
        typeof nextElement.props !== "undefined" ?
          ' This may be caused by unintentionally loading two independent ' +
          'copies of React.' :
          ''
      )
    ) : invariant(ReactElement.isValidElement(nextElement)));

    var prevComponent = instancesByReactRootID[getReactRootID(container)];

    if (prevComponent) {
      var prevElement = prevComponent._currentElement;
      if (shouldUpdateReactComponent(prevElement, nextElement)) {
        return ReactMount._updateRootComponent(
          prevComponent,
          nextElement,
          container,
          callback
        );
      } else {
        ReactMount.unmountComponentAtNode(container);
      }
    }

    var reactRootElement = getReactRootElementInContainer(container);
    var containerHasReactMarkup =
      reactRootElement && ReactMount.isRenderedByReact(reactRootElement);

    var shouldReuseMarkup = containerHasReactMarkup && !prevComponent;

    var component = ReactMount._renderNewRootComponent(
      nextElement,
      container,
      shouldReuseMarkup
    );
    callback && callback.call(component);
    return component;
  },

  /**
   * Constructs a component instance of `constructor` with `initialProps` and
   * renders it into the supplied `container`.
   *
   * @param {function} constructor React component constructor.
   * @param {?object} props Initial props of the component instance.
   * @param {DOMElement} container DOM element to render into.
   * @return {ReactComponent} Component instance rendered in `container`.
   */
  constructAndRenderComponent: function(constructor, props, container) {
    var element = createElement(constructor, props);
    return ReactMount.render(element, container);
  },

  /**
   * Constructs a component instance of `constructor` with `initialProps` and
   * renders it into a container node identified by supplied `id`.
   *
   * @param {function} componentConstructor React component constructor
   * @param {?object} props Initial props of the component instance.
   * @param {string} id ID of the DOM element to render into.
   * @return {ReactComponent} Component instance rendered in the container node.
   */
  constructAndRenderComponentByID: function(constructor, props, id) {
    var domNode = document.getElementById(id);
    ("production" !== "development" ? invariant(
      domNode,
      'Tried to get element with id of "%s" but it is not present on the page.',
      id
    ) : invariant(domNode));
    return ReactMount.constructAndRenderComponent(constructor, props, domNode);
  },

  /**
   * Registers a container node into which React components will be rendered.
   * This also creates the "reactRoot" ID that will be assigned to the element
   * rendered within.
   *
   * @param {DOMElement} container DOM element to register as a container.
   * @return {string} The "reactRoot" ID of elements rendered within.
   */
  registerContainer: function(container) {
    var reactRootID = getReactRootID(container);
    if (reactRootID) {
      // If one exists, make sure it is a valid "reactRoot" ID.
      reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(reactRootID);
    }
    if (!reactRootID) {
      // No valid "reactRoot" ID found, create one.
      reactRootID = ReactInstanceHandles.createReactRootID();
    }
    containersByReactRootID[reactRootID] = container;
    return reactRootID;
  },

  /**
   * Unmounts and destroys the React component rendered in the `container`.
   *
   * @param {DOMElement} container DOM element containing a React component.
   * @return {boolean} True if a component was found in and unmounted from
   *                   `container`
   */
  unmountComponentAtNode: function(container) {
    // Various parts of our code (such as ReactCompositeComponent's
    // _renderValidatedComponent) assume that calls to render aren't nested;
    // verify that that's the case. (Strictly speaking, unmounting won't cause a
    // render but we still don't expect to be in a render call here.)
    ("production" !== "development" ? warning(
      ReactCurrentOwner.current == null,
      'unmountComponentAtNode(): Render methods should be a pure function of ' +
      'props and state; triggering nested component updates from render is ' +
      'not allowed. If necessary, trigger nested updates in ' +
      'componentDidUpdate.'
    ) : null);

    var reactRootID = getReactRootID(container);
    var component = instancesByReactRootID[reactRootID];
    if (!component) {
      return false;
    }
    ReactMount.unmountComponentFromNode(component, container);
    delete instancesByReactRootID[reactRootID];
    delete containersByReactRootID[reactRootID];
    if ("production" !== "development") {
      delete rootElementsByReactRootID[reactRootID];
    }
    return true;
  },

  /**
   * Unmounts a component and removes it from the DOM.
   *
   * @param {ReactComponent} instance React component instance.
   * @param {DOMElement} container DOM element to unmount from.
   * @final
   * @internal
   * @see {ReactMount.unmountComponentAtNode}
   */
  unmountComponentFromNode: function(instance, container) {
    instance.unmountComponent();

    if (container.nodeType === DOC_NODE_TYPE) {
      container = container.documentElement;
    }

    // http://jsperf.com/emptying-a-node
    while (container.lastChild) {
      container.removeChild(container.lastChild);
    }
  },

  /**
   * Finds the container DOM element that contains React component to which the
   * supplied DOM `id` belongs.
   *
   * @param {string} id The ID of an element rendered by a React component.
   * @return {?DOMElement} DOM element that contains the `id`.
   */
  findReactContainerForID: function(id) {
    var reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(id);
    var container = containersByReactRootID[reactRootID];

    if ("production" !== "development") {
      var rootElement = rootElementsByReactRootID[reactRootID];
      if (rootElement && rootElement.parentNode !== container) {
        ("production" !== "development" ? invariant(
          // Call internalGetID here because getID calls isValid which calls
          // findReactContainerForID (this function).
          internalGetID(rootElement) === reactRootID,
          'ReactMount: Root element ID differed from reactRootID.'
        ) : invariant(// Call internalGetID here because getID calls isValid which calls
        // findReactContainerForID (this function).
        internalGetID(rootElement) === reactRootID));

        var containerChild = container.firstChild;
        if (containerChild &&
            reactRootID === internalGetID(containerChild)) {
          // If the container has a new child with the same ID as the old
          // root element, then rootElementsByReactRootID[reactRootID] is
          // just stale and needs to be updated. The case that deserves a
          // warning is when the container is empty.
          rootElementsByReactRootID[reactRootID] = containerChild;
        } else {
          console.warn(
            'ReactMount: Root element has been removed from its original ' +
            'container. New container:', rootElement.parentNode
          );
        }
      }
    }

    return container;
  },

  /**
   * Finds an element rendered by React with the supplied ID.
   *
   * @param {string} id ID of a DOM node in the React component.
   * @return {DOMElement} Root DOM node of the React component.
   */
  findReactNodeByID: function(id) {
    var reactRoot = ReactMount.findReactContainerForID(id);
    return ReactMount.findComponentRoot(reactRoot, id);
  },

  /**
   * True if the supplied `node` is rendered by React.
   *
   * @param {*} node DOM Element to check.
   * @return {boolean} True if the DOM Element appears to be rendered by React.
   * @internal
   */
  isRenderedByReact: function(node) {
    if (node.nodeType !== 1) {
      // Not a DOMElement, therefore not a React component
      return false;
    }
    var id = ReactMount.getID(node);
    return id ? id.charAt(0) === SEPARATOR : false;
  },

  /**
   * Traverses up the ancestors of the supplied node to find a node that is a
   * DOM representation of a React component.
   *
   * @param {*} node
   * @return {?DOMEventTarget}
   * @internal
   */
  getFirstReactDOM: function(node) {
    var current = node;
    while (current && current.parentNode !== current) {
      if (ReactMount.isRenderedByReact(current)) {
        return current;
      }
      current = current.parentNode;
    }
    return null;
  },

  /**
   * Finds a node with the supplied `targetID` inside of the supplied
   * `ancestorNode`.  Exploits the ID naming scheme to perform the search
   * quickly.
   *
   * @param {DOMEventTarget} ancestorNode Search from this root.
   * @pararm {string} targetID ID of the DOM representation of the component.
   * @return {DOMEventTarget} DOM node with the supplied `targetID`.
   * @internal
   */
  findComponentRoot: function(ancestorNode, targetID) {
    var firstChildren = findComponentRootReusableArray;
    var childIndex = 0;

    var deepestAncestor = findDeepestCachedAncestor(targetID) || ancestorNode;

    firstChildren[0] = deepestAncestor.firstChild;
    firstChildren.length = 1;

    while (childIndex < firstChildren.length) {
      var child = firstChildren[childIndex++];
      var targetChild;

      while (child) {
        var childID = ReactMount.getID(child);
        if (childID) {
          // Even if we find the node we're looking for, we finish looping
          // through its siblings to ensure they're cached so that we don't have
          // to revisit this node again. Otherwise, we make n^2 calls to getID
          // when visiting the many children of a single node in order.

          if (targetID === childID) {
            targetChild = child;
          } else if (ReactInstanceHandles.isAncestorIDOf(childID, targetID)) {
            // If we find a child whose ID is an ancestor of the given ID,
            // then we can be sure that we only want to search the subtree
            // rooted at this child, so we can throw out the rest of the
            // search state.
            firstChildren.length = childIndex = 0;
            firstChildren.push(child.firstChild);
          }

        } else {
          // If this child had no ID, then there's a chance that it was
          // injected automatically by the browser, as when a `<table>`
          // element sprouts an extra `<tbody>` child as a side effect of
          // `.innerHTML` parsing. Optimistically continue down this
          // branch, but not before examining the other siblings.
          firstChildren.push(child.firstChild);
        }

        child = child.nextSibling;
      }

      if (targetChild) {
        // Emptying firstChildren/findComponentRootReusableArray is
        // not necessary for correctness, but it helps the GC reclaim
        // any nodes that were left at the end of the search.
        firstChildren.length = 0;

        return targetChild;
      }
    }

    firstChildren.length = 0;

    ("production" !== "development" ? invariant(
      false,
      'findComponentRoot(..., %s): Unable to find element. This probably ' +
      'means the DOM was unexpectedly mutated (e.g., by the browser), ' +
      'usually due to forgetting a <tbody> when using tables, nesting tags ' +
      'like <form>, <p>, or <a>, or using non-SVG elements in an <svg> ' +
      'parent. ' +
      'Try inspecting the child nodes of the element with React ID `%s`.',
      targetID,
      ReactMount.getID(ancestorNode)
    ) : invariant(false));
  },


  /**
   * React ID utilities.
   */

  getReactRootID: getReactRootID,

  getID: getID,

  setID: setID,

  getNode: getNode,

  purgeID: purgeID
};

// Deprecations (remove for 0.13)
ReactMount.renderComponent = deprecated(
  'ReactMount',
  'renderComponent',
  'render',
  this,
  ReactMount.render
);

module.exports = ReactMount;

},{"./DOMProperty":11,"./ReactBrowserEventEmitter":30,"./ReactCurrentOwner":36,"./ReactElement":52,"./ReactInstanceHandles":60,"./ReactLegacyElement":61,"./ReactPerf":68,"./containsNode":101,"./deprecated":106,"./getReactRootElementInContainer":120,"./instantiateReactComponent":125,"./invariant":126,"./shouldUpdateReactComponent":142,"./warning":145}],64:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactMultiChild
 * @typechecks static-only
 */

"use strict";

var ReactComponent = _dereq_("./ReactComponent");
var ReactMultiChildUpdateTypes = _dereq_("./ReactMultiChildUpdateTypes");

var flattenChildren = _dereq_("./flattenChildren");
var instantiateReactComponent = _dereq_("./instantiateReactComponent");
var shouldUpdateReactComponent = _dereq_("./shouldUpdateReactComponent");

/**
 * Updating children of a component may trigger recursive updates. The depth is
 * used to batch recursive updates to render markup more efficiently.
 *
 * @type {number}
 * @private
 */
var updateDepth = 0;

/**
 * Queue of update configuration objects.
 *
 * Each object has a `type` property that is in `ReactMultiChildUpdateTypes`.
 *
 * @type {array<object>}
 * @private
 */
var updateQueue = [];

/**
 * Queue of markup to be rendered.
 *
 * @type {array<string>}
 * @private
 */
var markupQueue = [];

/**
 * Enqueues markup to be rendered and inserted at a supplied index.
 *
 * @param {string} parentID ID of the parent component.
 * @param {string} markup Markup that renders into an element.
 * @param {number} toIndex Destination index.
 * @private
 */
function enqueueMarkup(parentID, markup, toIndex) {
  // NOTE: Null values reduce hidden classes.
  updateQueue.push({
    parentID: parentID,
    parentNode: null,
    type: ReactMultiChildUpdateTypes.INSERT_MARKUP,
    markupIndex: markupQueue.push(markup) - 1,
    textContent: null,
    fromIndex: null,
    toIndex: toIndex
  });
}

/**
 * Enqueues moving an existing element to another index.
 *
 * @param {string} parentID ID of the parent component.
 * @param {number} fromIndex Source index of the existing element.
 * @param {number} toIndex Destination index of the element.
 * @private
 */
function enqueueMove(parentID, fromIndex, toIndex) {
  // NOTE: Null values reduce hidden classes.
  updateQueue.push({
    parentID: parentID,
    parentNode: null,
    type: ReactMultiChildUpdateTypes.MOVE_EXISTING,
    markupIndex: null,
    textContent: null,
    fromIndex: fromIndex,
    toIndex: toIndex
  });
}

/**
 * Enqueues removing an element at an index.
 *
 * @param {string} parentID ID of the parent component.
 * @param {number} fromIndex Index of the element to remove.
 * @private
 */
function enqueueRemove(parentID, fromIndex) {
  // NOTE: Null values reduce hidden classes.
  updateQueue.push({
    parentID: parentID,
    parentNode: null,
    type: ReactMultiChildUpdateTypes.REMOVE_NODE,
    markupIndex: null,
    textContent: null,
    fromIndex: fromIndex,
    toIndex: null
  });
}

/**
 * Enqueues setting the text content.
 *
 * @param {string} parentID ID of the parent component.
 * @param {string} textContent Text content to set.
 * @private
 */
function enqueueTextContent(parentID, textContent) {
  // NOTE: Null values reduce hidden classes.
  updateQueue.push({
    parentID: parentID,
    parentNode: null,
    type: ReactMultiChildUpdateTypes.TEXT_CONTENT,
    markupIndex: null,
    textContent: textContent,
    fromIndex: null,
    toIndex: null
  });
}

/**
 * Processes any enqueued updates.
 *
 * @private
 */
function processQueue() {
  if (updateQueue.length) {
    ReactComponent.BackendIDOperations.dangerouslyProcessChildrenUpdates(
      updateQueue,
      markupQueue
    );
    clearQueue();
  }
}

/**
 * Clears any enqueued updates.
 *
 * @private
 */
function clearQueue() {
  updateQueue.length = 0;
  markupQueue.length = 0;
}

/**
 * ReactMultiChild are capable of reconciling multiple children.
 *
 * @class ReactMultiChild
 * @internal
 */
var ReactMultiChild = {

  /**
   * Provides common functionality for components that must reconcile multiple
   * children. This is used by `ReactDOMComponent` to mount, update, and
   * unmount child components.
   *
   * @lends {ReactMultiChild.prototype}
   */
  Mixin: {

    /**
     * Generates a "mount image" for each of the supplied children. In the case
     * of `ReactDOMComponent`, a mount image is a string of markup.
     *
     * @param {?object} nestedChildren Nested child maps.
     * @return {array} An array of mounted representations.
     * @internal
     */
    mountChildren: function(nestedChildren, transaction) {
      var children = flattenChildren(nestedChildren);
      var mountImages = [];
      var index = 0;
      this._renderedChildren = children;
      for (var name in children) {
        var child = children[name];
        if (children.hasOwnProperty(name)) {
          // The rendered children must be turned into instances as they're
          // mounted.
          var childInstance = instantiateReactComponent(child, null);
          children[name] = childInstance;
          // Inlined for performance, see `ReactInstanceHandles.createReactID`.
          var rootID = this._rootNodeID + name;
          var mountImage = childInstance.mountComponent(
            rootID,
            transaction,
            this._mountDepth + 1
          );
          childInstance._mountIndex = index;
          mountImages.push(mountImage);
          index++;
        }
      }
      return mountImages;
    },

    /**
     * Replaces any rendered children with a text content string.
     *
     * @param {string} nextContent String of content.
     * @internal
     */
    updateTextContent: function(nextContent) {
      updateDepth++;
      var errorThrown = true;
      try {
        var prevChildren = this._renderedChildren;
        // Remove any rendered children.
        for (var name in prevChildren) {
          if (prevChildren.hasOwnProperty(name)) {
            this._unmountChildByName(prevChildren[name], name);
          }
        }
        // Set new text content.
        this.setTextContent(nextContent);
        errorThrown = false;
      } finally {
        updateDepth--;
        if (!updateDepth) {
          errorThrown ? clearQueue() : processQueue();
        }
      }
    },

    /**
     * Updates the rendered children with new children.
     *
     * @param {?object} nextNestedChildren Nested child maps.
     * @param {ReactReconcileTransaction} transaction
     * @internal
     */
    updateChildren: function(nextNestedChildren, transaction) {
      updateDepth++;
      var errorThrown = true;
      try {
        this._updateChildren(nextNestedChildren, transaction);
        errorThrown = false;
      } finally {
        updateDepth--;
        if (!updateDepth) {
          errorThrown ? clearQueue() : processQueue();
        }
      }
    },

    /**
     * Improve performance by isolating this hot code path from the try/catch
     * block in `updateChildren`.
     *
     * @param {?object} nextNestedChildren Nested child maps.
     * @param {ReactReconcileTransaction} transaction
     * @final
     * @protected
     */
    _updateChildren: function(nextNestedChildren, transaction) {
      var nextChildren = flattenChildren(nextNestedChildren);
      var prevChildren = this._renderedChildren;
      if (!nextChildren && !prevChildren) {
        return;
      }
      var name;
      // `nextIndex` will increment for each child in `nextChildren`, but
      // `lastIndex` will be the last index visited in `prevChildren`.
      var lastIndex = 0;
      var nextIndex = 0;
      for (name in nextChildren) {
        if (!nextChildren.hasOwnProperty(name)) {
          continue;
        }
        var prevChild = prevChildren && prevChildren[name];
        var prevElement = prevChild && prevChild._currentElement;
        var nextElement = nextChildren[name];
        if (shouldUpdateReactComponent(prevElement, nextElement)) {
          this.moveChild(prevChild, nextIndex, lastIndex);
          lastIndex = Math.max(prevChild._mountIndex, lastIndex);
          prevChild.receiveComponent(nextElement, transaction);
          prevChild._mountIndex = nextIndex;
        } else {
          if (prevChild) {
            // Update `lastIndex` before `_mountIndex` gets unset by unmounting.
            lastIndex = Math.max(prevChild._mountIndex, lastIndex);
            this._unmountChildByName(prevChild, name);
          }
          // The child must be instantiated before it's mounted.
          var nextChildInstance = instantiateReactComponent(
            nextElement,
            null
          );
          this._mountChildByNameAtIndex(
            nextChildInstance, name, nextIndex, transaction
          );
        }
        nextIndex++;
      }
      // Remove children that are no longer present.
      for (name in prevChildren) {
        if (prevChildren.hasOwnProperty(name) &&
            !(nextChildren && nextChildren[name])) {
          this._unmountChildByName(prevChildren[name], name);
        }
      }
    },

    /**
     * Unmounts all rendered children. This should be used to clean up children
     * when this component is unmounted.
     *
     * @internal
     */
    unmountChildren: function() {
      var renderedChildren = this._renderedChildren;
      for (var name in renderedChildren) {
        var renderedChild = renderedChildren[name];
        // TODO: When is this not true?
        if (renderedChild.unmountComponent) {
          renderedChild.unmountComponent();
        }
      }
      this._renderedChildren = null;
    },

    /**
     * Moves a child component to the supplied index.
     *
     * @param {ReactComponent} child Component to move.
     * @param {number} toIndex Destination index of the element.
     * @param {number} lastIndex Last index visited of the siblings of `child`.
     * @protected
     */
    moveChild: function(child, toIndex, lastIndex) {
      // If the index of `child` is less than `lastIndex`, then it needs to
      // be moved. Otherwise, we do not need to move it because a child will be
      // inserted or moved before `child`.
      if (child._mountIndex < lastIndex) {
        enqueueMove(this._rootNodeID, child._mountIndex, toIndex);
      }
    },

    /**
     * Creates a child component.
     *
     * @param {ReactComponent} child Component to create.
     * @param {string} mountImage Markup to insert.
     * @protected
     */
    createChild: function(child, mountImage) {
      enqueueMarkup(this._rootNodeID, mountImage, child._mountIndex);
    },

    /**
     * Removes a child component.
     *
     * @param {ReactComponent} child Child to remove.
     * @protected
     */
    removeChild: function(child) {
      enqueueRemove(this._rootNodeID, child._mountIndex);
    },

    /**
     * Sets this text content string.
     *
     * @param {string} textContent Text content to set.
     * @protected
     */
    setTextContent: function(textContent) {
      enqueueTextContent(this._rootNodeID, textContent);
    },

    /**
     * Mounts a child with the supplied name.
     *
     * NOTE: This is part of `updateChildren` and is here for readability.
     *
     * @param {ReactComponent} child Component to mount.
     * @param {string} name Name of the child.
     * @param {number} index Index at which to insert the child.
     * @param {ReactReconcileTransaction} transaction
     * @private
     */
    _mountChildByNameAtIndex: function(child, name, index, transaction) {
      // Inlined for performance, see `ReactInstanceHandles.createReactID`.
      var rootID = this._rootNodeID + name;
      var mountImage = child.mountComponent(
        rootID,
        transaction,
        this._mountDepth + 1
      );
      child._mountIndex = index;
      this.createChild(child, mountImage);
      this._renderedChildren = this._renderedChildren || {};
      this._renderedChildren[name] = child;
    },

    /**
     * Unmounts a rendered child by name.
     *
     * NOTE: This is part of `updateChildren` and is here for readability.
     *
     * @param {ReactComponent} child Component to unmount.
     * @param {string} name Name of the child in `this._renderedChildren`.
     * @private
     */
    _unmountChildByName: function(child, name) {
      this.removeChild(child);
      child._mountIndex = null;
      child.unmountComponent();
      delete this._renderedChildren[name];
    }

  }

};

module.exports = ReactMultiChild;

},{"./ReactComponent":32,"./ReactMultiChildUpdateTypes":65,"./flattenChildren":110,"./instantiateReactComponent":125,"./shouldUpdateReactComponent":142}],65:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactMultiChildUpdateTypes
 */

"use strict";

var keyMirror = _dereq_("./keyMirror");

/**
 * When a component's children are updated, a series of update configuration
 * objects are created in order to batch and serialize the required changes.
 *
 * Enumerates all the possible types of update configurations.
 *
 * @internal
 */
var ReactMultiChildUpdateTypes = keyMirror({
  INSERT_MARKUP: null,
  MOVE_EXISTING: null,
  REMOVE_NODE: null,
  TEXT_CONTENT: null
});

module.exports = ReactMultiChildUpdateTypes;

},{"./keyMirror":132}],66:[function(_dereq_,module,exports){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactNativeComponent
 */

"use strict";

var assign = _dereq_("./Object.assign");
var invariant = _dereq_("./invariant");

var genericComponentClass = null;
// This registry keeps track of wrapper classes around native tags
var tagToComponentClass = {};

var ReactNativeComponentInjection = {
  // This accepts a class that receives the tag string. This is a catch all
  // that can render any kind of tag.
  injectGenericComponentClass: function(componentClass) {
    genericComponentClass = componentClass;
  },
  // This accepts a keyed object with classes as values. Each key represents a
  // tag. That particular tag will use this class instead of the generic one.
  injectComponentClasses: function(componentClasses) {
    assign(tagToComponentClass, componentClasses);
  }
};

/**
 * Create an internal class for a specific tag.
 *
 * @param {string} tag The tag for which to create an internal instance.
 * @param {any} props The props passed to the instance constructor.
 * @return {ReactComponent} component The injected empty component.
 */
function createInstanceForTag(tag, props, parentType) {
  var componentClass = tagToComponentClass[tag];
  if (componentClass == null) {
    ("production" !== "development" ? invariant(
      genericComponentClass,
      'There is no registered component for the tag %s',
      tag
    ) : invariant(genericComponentClass));
    return new genericComponentClass(tag, props);
  }
  if (parentType === tag) {
    // Avoid recursion
    ("production" !== "development" ? invariant(
      genericComponentClass,
      'There is no registered component for the tag %s',
      tag
    ) : invariant(genericComponentClass));
    return new genericComponentClass(tag, props);
  }
  // Unwrap legacy factories
  return new componentClass.type(props);
}

var ReactNativeComponent = {
  createInstanceForTag: createInstanceForTag,
  injection: ReactNativeComponentInjection
};

module.exports = ReactNativeComponent;

},{"./Object.assign":27,"./invariant":126}],67:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactOwner
 */

"use strict";

var emptyObject = _dereq_("./emptyObject");
var invariant = _dereq_("./invariant");

/**
 * ReactOwners are capable of storing references to owned components.
 *
 * All components are capable of //being// referenced by owner components, but
 * only ReactOwner components are capable of //referencing// owned components.
 * The named reference is known as a "ref".
 *
 * Refs are available when mounted and updated during reconciliation.
 *
 *   var MyComponent = React.createClass({
 *     render: function() {
 *       return (
 *         <div onClick={this.handleClick}>
 *           <CustomComponent ref="custom" />
 *         </div>
 *       );
 *     },
 *     handleClick: function() {
 *       this.refs.custom.handleClick();
 *     },
 *     componentDidMount: function() {
 *       this.refs.custom.initialize();
 *     }
 *   });
 *
 * Refs should rarely be used. When refs are used, they should only be done to
 * control data that is not handled by React's data flow.
 *
 * @class ReactOwner
 */
var ReactOwner = {

  /**
   * @param {?object} object
   * @return {boolean} True if `object` is a valid owner.
   * @final
   */
  isValidOwner: function(object) {
    return !!(
      object &&
      typeof object.attachRef === 'function' &&
      typeof object.detachRef === 'function'
    );
  },

  /**
   * Adds a component by ref to an owner component.
   *
   * @param {ReactComponent} component Component to reference.
   * @param {string} ref Name by which to refer to the component.
   * @param {ReactOwner} owner Component on which to record the ref.
   * @final
   * @internal
   */
  addComponentAsRefTo: function(component, ref, owner) {
    ("production" !== "development" ? invariant(
      ReactOwner.isValidOwner(owner),
      'addComponentAsRefTo(...): Only a ReactOwner can have refs. This ' +
      'usually means that you\'re trying to add a ref to a component that ' +
      'doesn\'t have an owner (that is, was not created inside of another ' +
      'component\'s `render` method). Try rendering this component inside of ' +
      'a new top-level component which will hold the ref.'
    ) : invariant(ReactOwner.isValidOwner(owner)));
    owner.attachRef(ref, component);
  },

  /**
   * Removes a component by ref from an owner component.
   *
   * @param {ReactComponent} component Component to dereference.
   * @param {string} ref Name of the ref to remove.
   * @param {ReactOwner} owner Component on which the ref is recorded.
   * @final
   * @internal
   */
  removeComponentAsRefFrom: function(component, ref, owner) {
    ("production" !== "development" ? invariant(
      ReactOwner.isValidOwner(owner),
      'removeComponentAsRefFrom(...): Only a ReactOwner can have refs. This ' +
      'usually means that you\'re trying to remove a ref to a component that ' +
      'doesn\'t have an owner (that is, was not created inside of another ' +
      'component\'s `render` method). Try rendering this component inside of ' +
      'a new top-level component which will hold the ref.'
    ) : invariant(ReactOwner.isValidOwner(owner)));
    // Check that `component` is still the current ref because we do not want to
    // detach the ref if another component stole it.
    if (owner.refs[ref] === component) {
      owner.detachRef(ref);
    }
  },

  /**
   * A ReactComponent must mix this in to have refs.
   *
   * @lends {ReactOwner.prototype}
   */
  Mixin: {

    construct: function() {
      this.refs = emptyObject;
    },

    /**
     * Lazily allocates the refs object and stores `component` as `ref`.
     *
     * @param {string} ref Reference name.
     * @param {component} component Component to store as `ref`.
     * @final
     * @private
     */
    attachRef: function(ref, component) {
      ("production" !== "development" ? invariant(
        component.isOwnedBy(this),
        'attachRef(%s, ...): Only a component\'s owner can store a ref to it.',
        ref
      ) : invariant(component.isOwnedBy(this)));
      var refs = this.refs === emptyObject ? (this.refs = {}) : this.refs;
      refs[ref] = component;
    },

    /**
     * Detaches a reference name.
     *
     * @param {string} ref Name to dereference.
     * @final
     * @private
     */
    detachRef: function(ref) {
      delete this.refs[ref];
    }

  }

};

module.exports = ReactOwner;

},{"./emptyObject":108,"./invariant":126}],68:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactPerf
 * @typechecks static-only
 */

"use strict";

/**
 * ReactPerf is a general AOP system designed to measure performance. This
 * module only has the hooks: see ReactDefaultPerf for the analysis tool.
 */
var ReactPerf = {
  /**
   * Boolean to enable/disable measurement. Set to false by default to prevent
   * accidental logging and perf loss.
   */
  enableMeasure: false,

  /**
   * Holds onto the measure function in use. By default, don't measure
   * anything, but we'll override this if we inject a measure function.
   */
  storedMeasure: _noMeasure,

  /**
   * Use this to wrap methods you want to measure. Zero overhead in production.
   *
   * @param {string} objName
   * @param {string} fnName
   * @param {function} func
   * @return {function}
   */
  measure: function(objName, fnName, func) {
    if ("production" !== "development") {
      var measuredFunc = null;
      var wrapper = function() {
        if (ReactPerf.enableMeasure) {
          if (!measuredFunc) {
            measuredFunc = ReactPerf.storedMeasure(objName, fnName, func);
          }
          return measuredFunc.apply(this, arguments);
        }
        return func.apply(this, arguments);
      };
      wrapper.displayName = objName + '_' + fnName;
      return wrapper;
    }
    return func;
  },

  injection: {
    /**
     * @param {function} measure
     */
    injectMeasure: function(measure) {
      ReactPerf.storedMeasure = measure;
    }
  }
};

/**
 * Simply passes through the measured function, without measuring it.
 *
 * @param {string} objName
 * @param {string} fnName
 * @param {function} func
 * @return {function}
 */
function _noMeasure(objName, fnName, func) {
  return func;
}

module.exports = ReactPerf;

},{}],69:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactPropTransferer
 */

"use strict";

var assign = _dereq_("./Object.assign");
var emptyFunction = _dereq_("./emptyFunction");
var invariant = _dereq_("./invariant");
var joinClasses = _dereq_("./joinClasses");
var warning = _dereq_("./warning");

var didWarn = false;

/**
 * Creates a transfer strategy that will merge prop values using the supplied
 * `mergeStrategy`. If a prop was previously unset, this just sets it.
 *
 * @param {function} mergeStrategy
 * @return {function}
 */
function createTransferStrategy(mergeStrategy) {
  return function(props, key, value) {
    if (!props.hasOwnProperty(key)) {
      props[key] = value;
    } else {
      props[key] = mergeStrategy(props[key], value);
    }
  };
}

var transferStrategyMerge = createTransferStrategy(function(a, b) {
  // `merge` overrides the first object's (`props[key]` above) keys using the
  // second object's (`value`) keys. An object's style's existing `propA` would
  // get overridden. Flip the order here.
  return assign({}, b, a);
});

/**
 * Transfer strategies dictate how props are transferred by `transferPropsTo`.
 * NOTE: if you add any more exceptions to this list you should be sure to
 * update `cloneWithProps()` accordingly.
 */
var TransferStrategies = {
  /**
   * Never transfer `children`.
   */
  children: emptyFunction,
  /**
   * Transfer the `className` prop by merging them.
   */
  className: createTransferStrategy(joinClasses),
  /**
   * Transfer the `style` prop (which is an object) by merging them.
   */
  style: transferStrategyMerge
};

/**
 * Mutates the first argument by transferring the properties from the second
 * argument.
 *
 * @param {object} props
 * @param {object} newProps
 * @return {object}
 */
function transferInto(props, newProps) {
  for (var thisKey in newProps) {
    if (!newProps.hasOwnProperty(thisKey)) {
      continue;
    }

    var transferStrategy = TransferStrategies[thisKey];

    if (transferStrategy && TransferStrategies.hasOwnProperty(thisKey)) {
      transferStrategy(props, thisKey, newProps[thisKey]);
    } else if (!props.hasOwnProperty(thisKey)) {
      props[thisKey] = newProps[thisKey];
    }
  }
  return props;
}

/**
 * ReactPropTransferer are capable of transferring props to another component
 * using a `transferPropsTo` method.
 *
 * @class ReactPropTransferer
 */
var ReactPropTransferer = {

  TransferStrategies: TransferStrategies,

  /**
   * Merge two props objects using TransferStrategies.
   *
   * @param {object} oldProps original props (they take precedence)
   * @param {object} newProps new props to merge in
   * @return {object} a new object containing both sets of props merged.
   */
  mergeProps: function(oldProps, newProps) {
    return transferInto(assign({}, oldProps), newProps);
  },

  /**
   * @lends {ReactPropTransferer.prototype}
   */
  Mixin: {

    /**
     * Transfer props from this component to a target component.
     *
     * Props that do not have an explicit transfer strategy will be transferred
     * only if the target component does not already have the prop set.
     *
     * This is usually used to pass down props to a returned root component.
     *
     * @param {ReactElement} element Component receiving the properties.
     * @return {ReactElement} The supplied `component`.
     * @final
     * @protected
     */
    transferPropsTo: function(element) {
      ("production" !== "development" ? invariant(
        element._owner === this,
        '%s: You can\'t call transferPropsTo() on a component that you ' +
        'don\'t own, %s. This usually means you are calling ' +
        'transferPropsTo() on a component passed in as props or children.',
        this.constructor.displayName,
        typeof element.type === 'string' ?
        element.type :
        element.type.displayName
      ) : invariant(element._owner === this));

      if ("production" !== "development") {
        if (!didWarn) {
          didWarn = true;
          ("production" !== "development" ? warning(
            false,
            'transferPropsTo is deprecated. ' +
            'See http://fb.me/react-transferpropsto for more information.'
          ) : null);
        }
      }

      // Because elements are immutable we have to merge into the existing
      // props object rather than clone it.
      transferInto(element.props, this.props);

      return element;
    }

  }
};

module.exports = ReactPropTransferer;

},{"./Object.assign":27,"./emptyFunction":107,"./invariant":126,"./joinClasses":131,"./warning":145}],70:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactPropTypeLocationNames
 */

"use strict";

var ReactPropTypeLocationNames = {};

if ("production" !== "development") {
  ReactPropTypeLocationNames = {
    prop: 'prop',
    context: 'context',
    childContext: 'child context'
  };
}

module.exports = ReactPropTypeLocationNames;

},{}],71:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactPropTypeLocations
 */

"use strict";

var keyMirror = _dereq_("./keyMirror");

var ReactPropTypeLocations = keyMirror({
  prop: null,
  context: null,
  childContext: null
});

module.exports = ReactPropTypeLocations;

},{"./keyMirror":132}],72:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactPropTypes
 */

"use strict";

var ReactElement = _dereq_("./ReactElement");
var ReactPropTypeLocationNames = _dereq_("./ReactPropTypeLocationNames");

var deprecated = _dereq_("./deprecated");
var emptyFunction = _dereq_("./emptyFunction");

/**
 * Collection of methods that allow declaration and validation of props that are
 * supplied to React components. Example usage:
 *
 *   var Props = require('ReactPropTypes');
 *   var MyArticle = React.createClass({
 *     propTypes: {
 *       // An optional string prop named "description".
 *       description: Props.string,
 *
 *       // A required enum prop named "category".
 *       category: Props.oneOf(['News','Photos']).isRequired,
 *
 *       // A prop named "dialog" that requires an instance of Dialog.
 *       dialog: Props.instanceOf(Dialog).isRequired
 *     },
 *     render: function() { ... }
 *   });
 *
 * A more formal specification of how these methods are used:
 *
 *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
 *   decl := ReactPropTypes.{type}(.isRequired)?
 *
 * Each and every declaration produces a function with the same signature. This
 * allows the creation of custom validation functions. For example:
 *
 *  var MyLink = React.createClass({
 *    propTypes: {
 *      // An optional string or URI prop named "href".
 *      href: function(props, propName, componentName) {
 *        var propValue = props[propName];
 *        if (propValue != null && typeof propValue !== 'string' &&
 *            !(propValue instanceof URI)) {
 *          return new Error(
 *            'Expected a string or an URI for ' + propName + ' in ' +
 *            componentName
 *          );
 *        }
 *      }
 *    },
 *    render: function() {...}
 *  });
 *
 * @internal
 */

var ANONYMOUS = '<<anonymous>>';

var elementTypeChecker = createElementTypeChecker();
var nodeTypeChecker = createNodeChecker();

var ReactPropTypes = {
  array: createPrimitiveTypeChecker('array'),
  bool: createPrimitiveTypeChecker('boolean'),
  func: createPrimitiveTypeChecker('function'),
  number: createPrimitiveTypeChecker('number'),
  object: createPrimitiveTypeChecker('object'),
  string: createPrimitiveTypeChecker('string'),

  any: createAnyTypeChecker(),
  arrayOf: createArrayOfTypeChecker,
  element: elementTypeChecker,
  instanceOf: createInstanceTypeChecker,
  node: nodeTypeChecker,
  objectOf: createObjectOfTypeChecker,
  oneOf: createEnumTypeChecker,
  oneOfType: createUnionTypeChecker,
  shape: createShapeTypeChecker,

  component: deprecated(
    'React.PropTypes',
    'component',
    'element',
    this,
    elementTypeChecker
  ),
  renderable: deprecated(
    'React.PropTypes',
    'renderable',
    'node',
    this,
    nodeTypeChecker
  )
};

function createChainableTypeChecker(validate) {
  function checkType(isRequired, props, propName, componentName, location) {
    componentName = componentName || ANONYMOUS;
    if (props[propName] == null) {
      var locationName = ReactPropTypeLocationNames[location];
      if (isRequired) {
        return new Error(
          ("Required " + locationName + " `" + propName + "` was not specified in ")+
          ("`" + componentName + "`.")
        );
      }
    } else {
      return validate(props, propName, componentName, location);
    }
  }

  var chainedCheckType = checkType.bind(null, false);
  chainedCheckType.isRequired = checkType.bind(null, true);

  return chainedCheckType;
}

function createPrimitiveTypeChecker(expectedType) {
  function validate(props, propName, componentName, location) {
    var propValue = props[propName];
    var propType = getPropType(propValue);
    if (propType !== expectedType) {
      var locationName = ReactPropTypeLocationNames[location];
      // `propValue` being instance of, say, date/regexp, pass the 'object'
      // check, but we can offer a more precise error message here rather than
      // 'of type `object`'.
      var preciseType = getPreciseType(propValue);

      return new Error(
        ("Invalid " + locationName + " `" + propName + "` of type `" + preciseType + "` ") +
        ("supplied to `" + componentName + "`, expected `" + expectedType + "`.")
      );
    }
  }
  return createChainableTypeChecker(validate);
}

function createAnyTypeChecker() {
  return createChainableTypeChecker(emptyFunction.thatReturns());
}

function createArrayOfTypeChecker(typeChecker) {
  function validate(props, propName, componentName, location) {
    var propValue = props[propName];
    if (!Array.isArray(propValue)) {
      var locationName = ReactPropTypeLocationNames[location];
      var propType = getPropType(propValue);
      return new Error(
        ("Invalid " + locationName + " `" + propName + "` of type ") +
        ("`" + propType + "` supplied to `" + componentName + "`, expected an array.")
      );
    }
    for (var i = 0; i < propValue.length; i++) {
      var error = typeChecker(propValue, i, componentName, location);
      if (error instanceof Error) {
        return error;
      }
    }
  }
  return createChainableTypeChecker(validate);
}

function createElementTypeChecker() {
  function validate(props, propName, componentName, location) {
    if (!ReactElement.isValidElement(props[propName])) {
      var locationName = ReactPropTypeLocationNames[location];
      return new Error(
        ("Invalid " + locationName + " `" + propName + "` supplied to ") +
        ("`" + componentName + "`, expected a ReactElement.")
      );
    }
  }
  return createChainableTypeChecker(validate);
}

function createInstanceTypeChecker(expectedClass) {
  function validate(props, propName, componentName, location) {
    if (!(props[propName] instanceof expectedClass)) {
      var locationName = ReactPropTypeLocationNames[location];
      var expectedClassName = expectedClass.name || ANONYMOUS;
      return new Error(
        ("Invalid " + locationName + " `" + propName + "` supplied to ") +
        ("`" + componentName + "`, expected instance of `" + expectedClassName + "`.")
      );
    }
  }
  return createChainableTypeChecker(validate);
}

function createEnumTypeChecker(expectedValues) {
  function validate(props, propName, componentName, location) {
    var propValue = props[propName];
    for (var i = 0; i < expectedValues.length; i++) {
      if (propValue === expectedValues[i]) {
        return;
      }
    }

    var locationName = ReactPropTypeLocationNames[location];
    var valuesString = JSON.stringify(expectedValues);
    return new Error(
      ("Invalid " + locationName + " `" + propName + "` of value `" + propValue + "` ") +
      ("supplied to `" + componentName + "`, expected one of " + valuesString + ".")
    );
  }
  return createChainableTypeChecker(validate);
}

function createObjectOfTypeChecker(typeChecker) {
  function validate(props, propName, componentName, location) {
    var propValue = props[propName];
    var propType = getPropType(propValue);
    if (propType !== 'object') {
      var locationName = ReactPropTypeLocationNames[location];
      return new Error(
        ("Invalid " + locationName + " `" + propName + "` of type ") +
        ("`" + propType + "` supplied to `" + componentName + "`, expected an object.")
      );
    }
    for (var key in propValue) {
      if (propValue.hasOwnProperty(key)) {
        var error = typeChecker(propValue, key, componentName, location);
        if (error instanceof Error) {
          return error;
        }
      }
    }
  }
  return createChainableTypeChecker(validate);
}

function createUnionTypeChecker(arrayOfTypeCheckers) {
  function validate(props, propName, componentName, location) {
    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
      var checker = arrayOfTypeCheckers[i];
      if (checker(props, propName, componentName, location) == null) {
        return;
      }
    }

    var locationName = ReactPropTypeLocationNames[location];
    return new Error(
      ("Invalid " + locationName + " `" + propName + "` supplied to ") +
      ("`" + componentName + "`.")
    );
  }
  return createChainableTypeChecker(validate);
}

function createNodeChecker() {
  function validate(props, propName, componentName, location) {
    if (!isNode(props[propName])) {
      var locationName = ReactPropTypeLocationNames[location];
      return new Error(
        ("Invalid " + locationName + " `" + propName + "` supplied to ") +
        ("`" + componentName + "`, expected a ReactNode.")
      );
    }
  }
  return createChainableTypeChecker(validate);
}

function createShapeTypeChecker(shapeTypes) {
  function validate(props, propName, componentName, location) {
    var propValue = props[propName];
    var propType = getPropType(propValue);
    if (propType !== 'object') {
      var locationName = ReactPropTypeLocationNames[location];
      return new Error(
        ("Invalid " + locationName + " `" + propName + "` of type `" + propType + "` ") +
        ("supplied to `" + componentName + "`, expected `object`.")
      );
    }
    for (var key in shapeTypes) {
      var checker = shapeTypes[key];
      if (!checker) {
        continue;
      }
      var error = checker(propValue, key, componentName, location);
      if (error) {
        return error;
      }
    }
  }
  return createChainableTypeChecker(validate, 'expected `object`');
}

function isNode(propValue) {
  switch(typeof propValue) {
    case 'number':
    case 'string':
      return true;
    case 'boolean':
      return !propValue;
    case 'object':
      if (Array.isArray(propValue)) {
        return propValue.every(isNode);
      }
      if (ReactElement.isValidElement(propValue)) {
        return true;
      }
      for (var k in propValue) {
        if (!isNode(propValue[k])) {
          return false;
        }
      }
      return true;
    default:
      return false;
  }
}

// Equivalent of `typeof` but with special handling for array and regexp.
function getPropType(propValue) {
  var propType = typeof propValue;
  if (Array.isArray(propValue)) {
    return 'array';
  }
  if (propValue instanceof RegExp) {
    // Old webkits (at least until Android 4.0) return 'function' rather than
    // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
    // passes PropTypes.object.
    return 'object';
  }
  return propType;
}

// This handles more types than `getPropType`. Only used for error messages.
// See `createPrimitiveTypeChecker`.
function getPreciseType(propValue) {
  var propType = getPropType(propValue);
  if (propType === 'object') {
    if (propValue instanceof Date) {
      return 'date';
    } else if (propValue instanceof RegExp) {
      return 'regexp';
    }
  }
  return propType;
}

module.exports = ReactPropTypes;

},{"./ReactElement":52,"./ReactPropTypeLocationNames":70,"./deprecated":106,"./emptyFunction":107}],73:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactPutListenerQueue
 */

"use strict";

var PooledClass = _dereq_("./PooledClass");
var ReactBrowserEventEmitter = _dereq_("./ReactBrowserEventEmitter");

var assign = _dereq_("./Object.assign");

function ReactPutListenerQueue() {
  this.listenersToPut = [];
}

assign(ReactPutListenerQueue.prototype, {
  enqueuePutListener: function(rootNodeID, propKey, propValue) {
    this.listenersToPut.push({
      rootNodeID: rootNodeID,
      propKey: propKey,
      propValue: propValue
    });
  },

  putListeners: function() {
    for (var i = 0; i < this.listenersToPut.length; i++) {
      var listenerToPut = this.listenersToPut[i];
      ReactBrowserEventEmitter.putListener(
        listenerToPut.rootNodeID,
        listenerToPut.propKey,
        listenerToPut.propValue
      );
    }
  },

  reset: function() {
    this.listenersToPut.length = 0;
  },

  destructor: function() {
    this.reset();
  }
});

PooledClass.addPoolingTo(ReactPutListenerQueue);

module.exports = ReactPutListenerQueue;

},{"./Object.assign":27,"./PooledClass":28,"./ReactBrowserEventEmitter":30}],74:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactReconcileTransaction
 * @typechecks static-only
 */

"use strict";

var CallbackQueue = _dereq_("./CallbackQueue");
var PooledClass = _dereq_("./PooledClass");
var ReactBrowserEventEmitter = _dereq_("./ReactBrowserEventEmitter");
var ReactInputSelection = _dereq_("./ReactInputSelection");
var ReactPutListenerQueue = _dereq_("./ReactPutListenerQueue");
var Transaction = _dereq_("./Transaction");

var assign = _dereq_("./Object.assign");

/**
 * Ensures that, when possible, the selection range (currently selected text
 * input) is not disturbed by performing the transaction.
 */
var SELECTION_RESTORATION = {
  /**
   * @return {Selection} Selection information.
   */
  initialize: ReactInputSelection.getSelectionInformation,
  /**
   * @param {Selection} sel Selection information returned from `initialize`.
   */
  close: ReactInputSelection.restoreSelection
};

/**
 * Suppresses events (blur/focus) that could be inadvertently dispatched due to
 * high level DOM manipulations (like temporarily removing a text input from the
 * DOM).
 */
var EVENT_SUPPRESSION = {
  /**
   * @return {boolean} The enabled status of `ReactBrowserEventEmitter` before
   * the reconciliation.
   */
  initialize: function() {
    var currentlyEnabled = ReactBrowserEventEmitter.isEnabled();
    ReactBrowserEventEmitter.setEnabled(false);
    return currentlyEnabled;
  },

  /**
   * @param {boolean} previouslyEnabled Enabled status of
   *   `ReactBrowserEventEmitter` before the reconciliation occured. `close`
   *   restores the previous value.
   */
  close: function(previouslyEnabled) {
    ReactBrowserEventEmitter.setEnabled(previouslyEnabled);
  }
};

/**
 * Provides a queue for collecting `componentDidMount` and
 * `componentDidUpdate` callbacks during the the transaction.
 */
var ON_DOM_READY_QUEUEING = {
  /**
   * Initializes the internal `onDOMReady` queue.
   */
  initialize: function() {
    this.reactMountReady.reset();
  },

  /**
   * After DOM is flushed, invoke all registered `onDOMReady` callbacks.
   */
  close: function() {
    this.reactMountReady.notifyAll();
  }
};

var PUT_LISTENER_QUEUEING = {
  initialize: function() {
    this.putListenerQueue.reset();
  },

  close: function() {
    this.putListenerQueue.putListeners();
  }
};

/**
 * Executed within the scope of the `Transaction` instance. Consider these as
 * being member methods, but with an implied ordering while being isolated from
 * each other.
 */
var TRANSACTION_WRAPPERS = [
  PUT_LISTENER_QUEUEING,
  SELECTION_RESTORATION,
  EVENT_SUPPRESSION,
  ON_DOM_READY_QUEUEING
];

/**
 * Currently:
 * - The order that these are listed in the transaction is critical:
 * - Suppresses events.
 * - Restores selection range.
 *
 * Future:
 * - Restore document/overflow scroll positions that were unintentionally
 *   modified via DOM insertions above the top viewport boundary.
 * - Implement/integrate with customized constraint based layout system and keep
 *   track of which dimensions must be remeasured.
 *
 * @class ReactReconcileTransaction
 */
function ReactReconcileTransaction() {
  this.reinitializeTransaction();
  // Only server-side rendering really needs this option (see
  // `ReactServerRendering`), but server-side uses
  // `ReactServerRenderingTransaction` instead. This option is here so that it's
  // accessible and defaults to false when `ReactDOMComponent` and
  // `ReactTextComponent` checks it in `mountComponent`.`
  this.renderToStaticMarkup = false;
  this.reactMountReady = CallbackQueue.getPooled(null);
  this.putListenerQueue = ReactPutListenerQueue.getPooled();
}

var Mixin = {
  /**
   * @see Transaction
   * @abstract
   * @final
   * @return {array<object>} List of operation wrap proceedures.
   *   TODO: convert to array<TransactionWrapper>
   */
  getTransactionWrappers: function() {
    return TRANSACTION_WRAPPERS;
  },

  /**
   * @return {object} The queue to collect `onDOMReady` callbacks with.
   */
  getReactMountReady: function() {
    return this.reactMountReady;
  },

  getPutListenerQueue: function() {
    return this.putListenerQueue;
  },

  /**
   * `PooledClass` looks for this, and will invoke this before allowing this
   * instance to be resused.
   */
  destructor: function() {
    CallbackQueue.release(this.reactMountReady);
    this.reactMountReady = null;

    ReactPutListenerQueue.release(this.putListenerQueue);
    this.putListenerQueue = null;
  }
};


assign(ReactReconcileTransaction.prototype, Transaction.Mixin, Mixin);

PooledClass.addPoolingTo(ReactReconcileTransaction);

module.exports = ReactReconcileTransaction;

},{"./CallbackQueue":6,"./Object.assign":27,"./PooledClass":28,"./ReactBrowserEventEmitter":30,"./ReactInputSelection":59,"./ReactPutListenerQueue":73,"./Transaction":95}],75:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactRootIndex
 * @typechecks
 */

"use strict";

var ReactRootIndexInjection = {
  /**
   * @param {function} _createReactRootIndex
   */
  injectCreateReactRootIndex: function(_createReactRootIndex) {
    ReactRootIndex.createReactRootIndex = _createReactRootIndex;
  }
};

var ReactRootIndex = {
  createReactRootIndex: null,
  injection: ReactRootIndexInjection
};

module.exports = ReactRootIndex;

},{}],76:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks static-only
 * @providesModule ReactServerRendering
 */
"use strict";

var ReactElement = _dereq_("./ReactElement");
var ReactInstanceHandles = _dereq_("./ReactInstanceHandles");
var ReactMarkupChecksum = _dereq_("./ReactMarkupChecksum");
var ReactServerRenderingTransaction =
  _dereq_("./ReactServerRenderingTransaction");

var instantiateReactComponent = _dereq_("./instantiateReactComponent");
var invariant = _dereq_("./invariant");

/**
 * @param {ReactElement} element
 * @return {string} the HTML markup
 */
function renderToString(element) {
  ("production" !== "development" ? invariant(
    ReactElement.isValidElement(element),
    'renderToString(): You must pass a valid ReactElement.'
  ) : invariant(ReactElement.isValidElement(element)));

  var transaction;
  try {
    var id = ReactInstanceHandles.createReactRootID();
    transaction = ReactServerRenderingTransaction.getPooled(false);

    return transaction.perform(function() {
      var componentInstance = instantiateReactComponent(element, null);
      var markup = componentInstance.mountComponent(id, transaction, 0);
      return ReactMarkupChecksum.addChecksumToMarkup(markup);
    }, null);
  } finally {
    ReactServerRenderingTransaction.release(transaction);
  }
}

/**
 * @param {ReactElement} element
 * @return {string} the HTML markup, without the extra React ID and checksum
 * (for generating static pages)
 */
function renderToStaticMarkup(element) {
  ("production" !== "development" ? invariant(
    ReactElement.isValidElement(element),
    'renderToStaticMarkup(): You must pass a valid ReactElement.'
  ) : invariant(ReactElement.isValidElement(element)));

  var transaction;
  try {
    var id = ReactInstanceHandles.createReactRootID();
    transaction = ReactServerRenderingTransaction.getPooled(true);

    return transaction.perform(function() {
      var componentInstance = instantiateReactComponent(element, null);
      return componentInstance.mountComponent(id, transaction, 0);
    }, null);
  } finally {
    ReactServerRenderingTransaction.release(transaction);
  }
}

module.exports = {
  renderToString: renderToString,
  renderToStaticMarkup: renderToStaticMarkup
};

},{"./ReactElement":52,"./ReactInstanceHandles":60,"./ReactMarkupChecksum":62,"./ReactServerRenderingTransaction":77,"./instantiateReactComponent":125,"./invariant":126}],77:[function(_dereq_,module,exports){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactServerRenderingTransaction
 * @typechecks
 */

"use strict";

var PooledClass = _dereq_("./PooledClass");
var CallbackQueue = _dereq_("./CallbackQueue");
var ReactPutListenerQueue = _dereq_("./ReactPutListenerQueue");
var Transaction = _dereq_("./Transaction");

var assign = _dereq_("./Object.assign");
var emptyFunction = _dereq_("./emptyFunction");

/**
 * Provides a `CallbackQueue` queue for collecting `onDOMReady` callbacks
 * during the performing of the transaction.
 */
var ON_DOM_READY_QUEUEING = {
  /**
   * Initializes the internal `onDOMReady` queue.
   */
  initialize: function() {
    this.reactMountReady.reset();
  },

  close: emptyFunction
};

var PUT_LISTENER_QUEUEING = {
  initialize: function() {
    this.putListenerQueue.reset();
  },

  close: emptyFunction
};

/**
 * Executed within the scope of the `Transaction` instance. Consider these as
 * being member methods, but with an implied ordering while being isolated from
 * each other.
 */
var TRANSACTION_WRAPPERS = [
  PUT_LISTENER_QUEUEING,
  ON_DOM_READY_QUEUEING
];

/**
 * @class ReactServerRenderingTransaction
 * @param {boolean} renderToStaticMarkup
 */
function ReactServerRenderingTransaction(renderToStaticMarkup) {
  this.reinitializeTransaction();
  this.renderToStaticMarkup = renderToStaticMarkup;
  this.reactMountReady = CallbackQueue.getPooled(null);
  this.putListenerQueue = ReactPutListenerQueue.getPooled();
}

var Mixin = {
  /**
   * @see Transaction
   * @abstract
   * @final
   * @return {array} Empty list of operation wrap proceedures.
   */
  getTransactionWrappers: function() {
    return TRANSACTION_WRAPPERS;
  },

  /**
   * @return {object} The queue to collect `onDOMReady` callbacks with.
   */
  getReactMountReady: function() {
    return this.reactMountReady;
  },

  getPutListenerQueue: function() {
    return this.putListenerQueue;
  },

  /**
   * `PooledClass` looks for this, and will invoke this before allowing this
   * instance to be resused.
   */
  destructor: function() {
    CallbackQueue.release(this.reactMountReady);
    this.reactMountReady = null;

    ReactPutListenerQueue.release(this.putListenerQueue);
    this.putListenerQueue = null;
  }
};


assign(
  ReactServerRenderingTransaction.prototype,
  Transaction.Mixin,
  Mixin
);

PooledClass.addPoolingTo(ReactServerRenderingTransaction);

module.exports = ReactServerRenderingTransaction;

},{"./CallbackQueue":6,"./Object.assign":27,"./PooledClass":28,"./ReactPutListenerQueue":73,"./Transaction":95,"./emptyFunction":107}],78:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactTextComponent
 * @typechecks static-only
 */

"use strict";

var DOMPropertyOperations = _dereq_("./DOMPropertyOperations");
var ReactComponent = _dereq_("./ReactComponent");
var ReactElement = _dereq_("./ReactElement");

var assign = _dereq_("./Object.assign");
var escapeTextForBrowser = _dereq_("./escapeTextForBrowser");

/**
 * Text nodes violate a couple assumptions that React makes about components:
 *
 *  - When mounting text into the DOM, adjacent text nodes are merged.
 *  - Text nodes cannot be assigned a React root ID.
 *
 * This component is used to wrap strings in elements so that they can undergo
 * the same reconciliation that is applied to elements.
 *
 * TODO: Investigate representing React components in the DOM with text nodes.
 *
 * @class ReactTextComponent
 * @extends ReactComponent
 * @internal
 */
var ReactTextComponent = function(props) {
  // This constructor and it's argument is currently used by mocks.
};

assign(ReactTextComponent.prototype, ReactComponent.Mixin, {

  /**
   * Creates the markup for this text node. This node is not intended to have
   * any features besides containing text content.
   *
   * @param {string} rootID DOM ID of the root node.
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @param {number} mountDepth number of components in the owner hierarchy
   * @return {string} Markup for this text node.
   * @internal
   */
  mountComponent: function(rootID, transaction, mountDepth) {
    ReactComponent.Mixin.mountComponent.call(
      this,
      rootID,
      transaction,
      mountDepth
    );

    var escapedText = escapeTextForBrowser(this.props);

    if (transaction.renderToStaticMarkup) {
      // Normally we'd wrap this in a `span` for the reasons stated above, but
      // since this is a situation where React won't take over (static pages),
      // we can simply return the text as it is.
      return escapedText;
    }

    return (
      '<span ' + DOMPropertyOperations.createMarkupForID(rootID) + '>' +
        escapedText +
      '</span>'
    );
  },

  /**
   * Updates this component by updating the text content.
   *
   * @param {object} nextComponent Contains the next text content.
   * @param {ReactReconcileTransaction} transaction
   * @internal
   */
  receiveComponent: function(nextComponent, transaction) {
    var nextProps = nextComponent.props;
    if (nextProps !== this.props) {
      this.props = nextProps;
      ReactComponent.BackendIDOperations.updateTextContentByID(
        this._rootNodeID,
        nextProps
      );
    }
  }

});

var ReactTextComponentFactory = function(text) {
  // Bypass validation and configuration
  return new ReactElement(ReactTextComponent, null, null, null, null, text);
};

ReactTextComponentFactory.type = ReactTextComponent;

module.exports = ReactTextComponentFactory;

},{"./DOMPropertyOperations":12,"./Object.assign":27,"./ReactComponent":32,"./ReactElement":52,"./escapeTextForBrowser":109}],79:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactUpdates
 */

"use strict";

var CallbackQueue = _dereq_("./CallbackQueue");
var PooledClass = _dereq_("./PooledClass");
var ReactCurrentOwner = _dereq_("./ReactCurrentOwner");
var ReactPerf = _dereq_("./ReactPerf");
var Transaction = _dereq_("./Transaction");

var assign = _dereq_("./Object.assign");
var invariant = _dereq_("./invariant");
var warning = _dereq_("./warning");

var dirtyComponents = [];
var asapCallbackQueue = CallbackQueue.getPooled();
var asapEnqueued = false;

var batchingStrategy = null;

function ensureInjected() {
  ("production" !== "development" ? invariant(
    ReactUpdates.ReactReconcileTransaction && batchingStrategy,
    'ReactUpdates: must inject a reconcile transaction class and batching ' +
    'strategy'
  ) : invariant(ReactUpdates.ReactReconcileTransaction && batchingStrategy));
}

var NESTED_UPDATES = {
  initialize: function() {
    this.dirtyComponentsLength = dirtyComponents.length;
  },
  close: function() {
    if (this.dirtyComponentsLength !== dirtyComponents.length) {
      // Additional updates were enqueued by componentDidUpdate handlers or
      // similar; before our own UPDATE_QUEUEING wrapper closes, we want to run
      // these new updates so that if A's componentDidUpdate calls setState on
      // B, B will update before the callback A's updater provided when calling
      // setState.
      dirtyComponents.splice(0, this.dirtyComponentsLength);
      flushBatchedUpdates();
    } else {
      dirtyComponents.length = 0;
    }
  }
};

var UPDATE_QUEUEING = {
  initialize: function() {
    this.callbackQueue.reset();
  },
  close: function() {
    this.callbackQueue.notifyAll();
  }
};

var TRANSACTION_WRAPPERS = [NESTED_UPDATES, UPDATE_QUEUEING];

function ReactUpdatesFlushTransaction() {
  this.reinitializeTransaction();
  this.dirtyComponentsLength = null;
  this.callbackQueue = CallbackQueue.getPooled();
  this.reconcileTransaction =
    ReactUpdates.ReactReconcileTransaction.getPooled();
}

assign(
  ReactUpdatesFlushTransaction.prototype,
  Transaction.Mixin, {
  getTransactionWrappers: function() {
    return TRANSACTION_WRAPPERS;
  },

  destructor: function() {
    this.dirtyComponentsLength = null;
    CallbackQueue.release(this.callbackQueue);
    this.callbackQueue = null;
    ReactUpdates.ReactReconcileTransaction.release(this.reconcileTransaction);
    this.reconcileTransaction = null;
  },

  perform: function(method, scope, a) {
    // Essentially calls `this.reconcileTransaction.perform(method, scope, a)`
    // with this transaction's wrappers around it.
    return Transaction.Mixin.perform.call(
      this,
      this.reconcileTransaction.perform,
      this.reconcileTransaction,
      method,
      scope,
      a
    );
  }
});

PooledClass.addPoolingTo(ReactUpdatesFlushTransaction);

function batchedUpdates(callback, a, b) {
  ensureInjected();
  batchingStrategy.batchedUpdates(callback, a, b);
}

/**
 * Array comparator for ReactComponents by owner depth
 *
 * @param {ReactComponent} c1 first component you're comparing
 * @param {ReactComponent} c2 second component you're comparing
 * @return {number} Return value usable by Array.prototype.sort().
 */
function mountDepthComparator(c1, c2) {
  return c1._mountDepth - c2._mountDepth;
}

function runBatchedUpdates(transaction) {
  var len = transaction.dirtyComponentsLength;
  ("production" !== "development" ? invariant(
    len === dirtyComponents.length,
    'Expected flush transaction\'s stored dirty-components length (%s) to ' +
    'match dirty-components array length (%s).',
    len,
    dirtyComponents.length
  ) : invariant(len === dirtyComponents.length));

  // Since reconciling a component higher in the owner hierarchy usually (not
  // always -- see shouldComponentUpdate()) will reconcile children, reconcile
  // them before their children by sorting the array.
  dirtyComponents.sort(mountDepthComparator);

  for (var i = 0; i < len; i++) {
    // If a component is unmounted before pending changes apply, ignore them
    // TODO: Queue unmounts in the same list to avoid this happening at all
    var component = dirtyComponents[i];
    if (component.isMounted()) {
      // If performUpdateIfNecessary happens to enqueue any new updates, we
      // shouldn't execute the callbacks until the next render happens, so
      // stash the callbacks first
      var callbacks = component._pendingCallbacks;
      component._pendingCallbacks = null;
      component.performUpdateIfNecessary(transaction.reconcileTransaction);

      if (callbacks) {
        for (var j = 0; j < callbacks.length; j++) {
          transaction.callbackQueue.enqueue(
            callbacks[j],
            component
          );
        }
      }
    }
  }
}

var flushBatchedUpdates = ReactPerf.measure(
  'ReactUpdates',
  'flushBatchedUpdates',
  function() {
    // ReactUpdatesFlushTransaction's wrappers will clear the dirtyComponents
    // array and perform any updates enqueued by mount-ready handlers (i.e.,
    // componentDidUpdate) but we need to check here too in order to catch
    // updates enqueued by setState callbacks and asap calls.
    while (dirtyComponents.length || asapEnqueued) {
      if (dirtyComponents.length) {
        var transaction = ReactUpdatesFlushTransaction.getPooled();
        transaction.perform(runBatchedUpdates, null, transaction);
        ReactUpdatesFlushTransaction.release(transaction);
      }

      if (asapEnqueued) {
        asapEnqueued = false;
        var queue = asapCallbackQueue;
        asapCallbackQueue = CallbackQueue.getPooled();
        queue.notifyAll();
        CallbackQueue.release(queue);
      }
    }
  }
);

/**
 * Mark a component as needing a rerender, adding an optional callback to a
 * list of functions which will be executed once the rerender occurs.
 */
function enqueueUpdate(component, callback) {
  ("production" !== "development" ? invariant(
    !callback || typeof callback === "function",
    'enqueueUpdate(...): You called `setProps`, `replaceProps`, ' +
    '`setState`, `replaceState`, or `forceUpdate` with a callback that ' +
    'isn\'t callable.'
  ) : invariant(!callback || typeof callback === "function"));
  ensureInjected();

  // Various parts of our code (such as ReactCompositeComponent's
  // _renderValidatedComponent) assume that calls to render aren't nested;
  // verify that that's the case. (This is called by each top-level update
  // function, like setProps, setState, forceUpdate, etc.; creation and
  // destruction of top-level components is guarded in ReactMount.)
  ("production" !== "development" ? warning(
    ReactCurrentOwner.current == null,
    'enqueueUpdate(): Render methods should be a pure function of props ' +
    'and state; triggering nested component updates from render is not ' +
    'allowed. If necessary, trigger nested updates in ' +
    'componentDidUpdate.'
  ) : null);

  if (!batchingStrategy.isBatchingUpdates) {
    batchingStrategy.batchedUpdates(enqueueUpdate, component, callback);
    return;
  }

  dirtyComponents.push(component);

  if (callback) {
    if (component._pendingCallbacks) {
      component._pendingCallbacks.push(callback);
    } else {
      component._pendingCallbacks = [callback];
    }
  }
}

/**
 * Enqueue a callback to be run at the end of the current batching cycle. Throws
 * if no updates are currently being performed.
 */
function asap(callback, context) {
  ("production" !== "development" ? invariant(
    batchingStrategy.isBatchingUpdates,
    'ReactUpdates.asap: Can\'t enqueue an asap callback in a context where' +
    'updates are not being batched.'
  ) : invariant(batchingStrategy.isBatchingUpdates));
  asapCallbackQueue.enqueue(callback, context);
  asapEnqueued = true;
}

var ReactUpdatesInjection = {
  injectReconcileTransaction: function(ReconcileTransaction) {
    ("production" !== "development" ? invariant(
      ReconcileTransaction,
      'ReactUpdates: must provide a reconcile transaction class'
    ) : invariant(ReconcileTransaction));
    ReactUpdates.ReactReconcileTransaction = ReconcileTransaction;
  },

  injectBatchingStrategy: function(_batchingStrategy) {
    ("production" !== "development" ? invariant(
      _batchingStrategy,
      'ReactUpdates: must provide a batching strategy'
    ) : invariant(_batchingStrategy));
    ("production" !== "development" ? invariant(
      typeof _batchingStrategy.batchedUpdates === 'function',
      'ReactUpdates: must provide a batchedUpdates() function'
    ) : invariant(typeof _batchingStrategy.batchedUpdates === 'function'));
    ("production" !== "development" ? invariant(
      typeof _batchingStrategy.isBatchingUpdates === 'boolean',
      'ReactUpdates: must provide an isBatchingUpdates boolean attribute'
    ) : invariant(typeof _batchingStrategy.isBatchingUpdates === 'boolean'));
    batchingStrategy = _batchingStrategy;
  }
};

var ReactUpdates = {
  /**
   * React references `ReactReconcileTransaction` using this property in order
   * to allow dependency injection.
   *
   * @internal
   */
  ReactReconcileTransaction: null,

  batchedUpdates: batchedUpdates,
  enqueueUpdate: enqueueUpdate,
  flushBatchedUpdates: flushBatchedUpdates,
  injection: ReactUpdatesInjection,
  asap: asap
};

module.exports = ReactUpdates;

},{"./CallbackQueue":6,"./Object.assign":27,"./PooledClass":28,"./ReactCurrentOwner":36,"./ReactPerf":68,"./Transaction":95,"./invariant":126,"./warning":145}],80:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SVGDOMPropertyConfig
 */

/*jslint bitwise: true*/

"use strict";

var DOMProperty = _dereq_("./DOMProperty");

var MUST_USE_ATTRIBUTE = DOMProperty.injection.MUST_USE_ATTRIBUTE;

var SVGDOMPropertyConfig = {
  Properties: {
    cx: MUST_USE_ATTRIBUTE,
    cy: MUST_USE_ATTRIBUTE,
    d: MUST_USE_ATTRIBUTE,
    dx: MUST_USE_ATTRIBUTE,
    dy: MUST_USE_ATTRIBUTE,
    fill: MUST_USE_ATTRIBUTE,
    fillOpacity: MUST_USE_ATTRIBUTE,
    fontFamily: MUST_USE_ATTRIBUTE,
    fontSize: MUST_USE_ATTRIBUTE,
    fx: MUST_USE_ATTRIBUTE,
    fy: MUST_USE_ATTRIBUTE,
    gradientTransform: MUST_USE_ATTRIBUTE,
    gradientUnits: MUST_USE_ATTRIBUTE,
    markerEnd: MUST_USE_ATTRIBUTE,
    markerMid: MUST_USE_ATTRIBUTE,
    markerStart: MUST_USE_ATTRIBUTE,
    offset: MUST_USE_ATTRIBUTE,
    opacity: MUST_USE_ATTRIBUTE,
    patternContentUnits: MUST_USE_ATTRIBUTE,
    patternUnits: MUST_USE_ATTRIBUTE,
    points: MUST_USE_ATTRIBUTE,
    preserveAspectRatio: MUST_USE_ATTRIBUTE,
    r: MUST_USE_ATTRIBUTE,
    rx: MUST_USE_ATTRIBUTE,
    ry: MUST_USE_ATTRIBUTE,
    spreadMethod: MUST_USE_ATTRIBUTE,
    stopColor: MUST_USE_ATTRIBUTE,
    stopOpacity: MUST_USE_ATTRIBUTE,
    stroke: MUST_USE_ATTRIBUTE,
    strokeDasharray: MUST_USE_ATTRIBUTE,
    strokeLinecap: MUST_USE_ATTRIBUTE,
    strokeOpacity: MUST_USE_ATTRIBUTE,
    strokeWidth: MUST_USE_ATTRIBUTE,
    textAnchor: MUST_USE_ATTRIBUTE,
    transform: MUST_USE_ATTRIBUTE,
    version: MUST_USE_ATTRIBUTE,
    viewBox: MUST_USE_ATTRIBUTE,
    x1: MUST_USE_ATTRIBUTE,
    x2: MUST_USE_ATTRIBUTE,
    x: MUST_USE_ATTRIBUTE,
    y1: MUST_USE_ATTRIBUTE,
    y2: MUST_USE_ATTRIBUTE,
    y: MUST_USE_ATTRIBUTE
  },
  DOMAttributeNames: {
    fillOpacity: 'fill-opacity',
    fontFamily: 'font-family',
    fontSize: 'font-size',
    gradientTransform: 'gradientTransform',
    gradientUnits: 'gradientUnits',
    markerEnd: 'marker-end',
    markerMid: 'marker-mid',
    markerStart: 'marker-start',
    patternContentUnits: 'patternContentUnits',
    patternUnits: 'patternUnits',
    preserveAspectRatio: 'preserveAspectRatio',
    spreadMethod: 'spreadMethod',
    stopColor: 'stop-color',
    stopOpacity: 'stop-opacity',
    strokeDasharray: 'stroke-dasharray',
    strokeLinecap: 'stroke-linecap',
    strokeOpacity: 'stroke-opacity',
    strokeWidth: 'stroke-width',
    textAnchor: 'text-anchor',
    viewBox: 'viewBox'
  }
};

module.exports = SVGDOMPropertyConfig;

},{"./DOMProperty":11}],81:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SelectEventPlugin
 */

"use strict";

var EventConstants = _dereq_("./EventConstants");
var EventPropagators = _dereq_("./EventPropagators");
var ReactInputSelection = _dereq_("./ReactInputSelection");
var SyntheticEvent = _dereq_("./SyntheticEvent");

var getActiveElement = _dereq_("./getActiveElement");
var isTextInputElement = _dereq_("./isTextInputElement");
var keyOf = _dereq_("./keyOf");
var shallowEqual = _dereq_("./shallowEqual");

var topLevelTypes = EventConstants.topLevelTypes;

var eventTypes = {
  select: {
    phasedRegistrationNames: {
      bubbled: keyOf({onSelect: null}),
      captured: keyOf({onSelectCapture: null})
    },
    dependencies: [
      topLevelTypes.topBlur,
      topLevelTypes.topContextMenu,
      topLevelTypes.topFocus,
      topLevelTypes.topKeyDown,
      topLevelTypes.topMouseDown,
      topLevelTypes.topMouseUp,
      topLevelTypes.topSelectionChange
    ]
  }
};

var activeElement = null;
var activeElementID = null;
var lastSelection = null;
var mouseDown = false;

/**
 * Get an object which is a unique representation of the current selection.
 *
 * The return value will not be consistent across nodes or browsers, but
 * two identical selections on the same node will return identical objects.
 *
 * @param {DOMElement} node
 * @param {object}
 */
function getSelection(node) {
  if ('selectionStart' in node &&
      ReactInputSelection.hasSelectionCapabilities(node)) {
    return {
      start: node.selectionStart,
      end: node.selectionEnd
    };
  } else if (window.getSelection) {
    var selection = window.getSelection();
    return {
      anchorNode: selection.anchorNode,
      anchorOffset: selection.anchorOffset,
      focusNode: selection.focusNode,
      focusOffset: selection.focusOffset
    };
  } else if (document.selection) {
    var range = document.selection.createRange();
    return {
      parentElement: range.parentElement(),
      text: range.text,
      top: range.boundingTop,
      left: range.boundingLeft
    };
  }
}

/**
 * Poll selection to see whether it's changed.
 *
 * @param {object} nativeEvent
 * @return {?SyntheticEvent}
 */
function constructSelectEvent(nativeEvent) {
  // Ensure we have the right element, and that the user is not dragging a
  // selection (this matches native `select` event behavior). In HTML5, select
  // fires only on input and textarea thus if there's no focused element we
  // won't dispatch.
  if (mouseDown ||
      activeElement == null ||
      activeElement != getActiveElement()) {
    return;
  }

  // Only fire when selection has actually changed.
  var currentSelection = getSelection(activeElement);
  if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
    lastSelection = currentSelection;

    var syntheticEvent = SyntheticEvent.getPooled(
      eventTypes.select,
      activeElementID,
      nativeEvent
    );

    syntheticEvent.type = 'select';
    syntheticEvent.target = activeElement;

    EventPropagators.accumulateTwoPhaseDispatches(syntheticEvent);

    return syntheticEvent;
  }
}

/**
 * This plugin creates an `onSelect` event that normalizes select events
 * across form elements.
 *
 * Supported elements are:
 * - input (see `isTextInputElement`)
 * - textarea
 * - contentEditable
 *
 * This differs from native browser implementations in the following ways:
 * - Fires on contentEditable fields as well as inputs.
 * - Fires for collapsed selection.
 * - Fires after user input.
 */
var SelectEventPlugin = {

  eventTypes: eventTypes,

  /**
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @see {EventPluginHub.extractEvents}
   */
  extractEvents: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent) {

    switch (topLevelType) {
      // Track the input node that has focus.
      case topLevelTypes.topFocus:
        if (isTextInputElement(topLevelTarget) ||
            topLevelTarget.contentEditable === 'true') {
          activeElement = topLevelTarget;
          activeElementID = topLevelTargetID;
          lastSelection = null;
        }
        break;
      case topLevelTypes.topBlur:
        activeElement = null;
        activeElementID = null;
        lastSelection = null;
        break;

      // Don't fire the event while the user is dragging. This matches the
      // semantics of the native select event.
      case topLevelTypes.topMouseDown:
        mouseDown = true;
        break;
      case topLevelTypes.topContextMenu:
      case topLevelTypes.topMouseUp:
        mouseDown = false;
        return constructSelectEvent(nativeEvent);

      // Chrome and IE fire non-standard event when selection is changed (and
      // sometimes when it hasn't).
      // Firefox doesn't support selectionchange, so check selection status
      // after each key entry. The selection changes after keydown and before
      // keyup, but we check on keydown as well in the case of holding down a
      // key, when multiple keydown events are fired but only one keyup is.
      case topLevelTypes.topSelectionChange:
      case topLevelTypes.topKeyDown:
      case topLevelTypes.topKeyUp:
        return constructSelectEvent(nativeEvent);
    }
  }
};

module.exports = SelectEventPlugin;

},{"./EventConstants":16,"./EventPropagators":21,"./ReactInputSelection":59,"./SyntheticEvent":87,"./getActiveElement":113,"./isTextInputElement":129,"./keyOf":133,"./shallowEqual":141}],82:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ServerReactRootIndex
 * @typechecks
 */

"use strict";

/**
 * Size of the reactRoot ID space. We generate random numbers for React root
 * IDs and if there's a collision the events and DOM update system will
 * get confused. In the future we need a way to generate GUIDs but for
 * now this will work on a smaller scale.
 */
var GLOBAL_MOUNT_POINT_MAX = Math.pow(2, 53);

var ServerReactRootIndex = {
  createReactRootIndex: function() {
    return Math.ceil(Math.random() * GLOBAL_MOUNT_POINT_MAX);
  }
};

module.exports = ServerReactRootIndex;

},{}],83:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SimpleEventPlugin
 */

"use strict";

var EventConstants = _dereq_("./EventConstants");
var EventPluginUtils = _dereq_("./EventPluginUtils");
var EventPropagators = _dereq_("./EventPropagators");
var SyntheticClipboardEvent = _dereq_("./SyntheticClipboardEvent");
var SyntheticEvent = _dereq_("./SyntheticEvent");
var SyntheticFocusEvent = _dereq_("./SyntheticFocusEvent");
var SyntheticKeyboardEvent = _dereq_("./SyntheticKeyboardEvent");
var SyntheticMouseEvent = _dereq_("./SyntheticMouseEvent");
var SyntheticDragEvent = _dereq_("./SyntheticDragEvent");
var SyntheticTouchEvent = _dereq_("./SyntheticTouchEvent");
var SyntheticUIEvent = _dereq_("./SyntheticUIEvent");
var SyntheticWheelEvent = _dereq_("./SyntheticWheelEvent");

var getEventCharCode = _dereq_("./getEventCharCode");

var invariant = _dereq_("./invariant");
var keyOf = _dereq_("./keyOf");
var warning = _dereq_("./warning");

var topLevelTypes = EventConstants.topLevelTypes;

var eventTypes = {
  blur: {
    phasedRegistrationNames: {
      bubbled: keyOf({onBlur: true}),
      captured: keyOf({onBlurCapture: true})
    }
  },
  click: {
    phasedRegistrationNames: {
      bubbled: keyOf({onClick: true}),
      captured: keyOf({onClickCapture: true})
    }
  },
  contextMenu: {
    phasedRegistrationNames: {
      bubbled: keyOf({onContextMenu: true}),
      captured: keyOf({onContextMenuCapture: true})
    }
  },
  copy: {
    phasedRegistrationNames: {
      bubbled: keyOf({onCopy: true}),
      captured: keyOf({onCopyCapture: true})
    }
  },
  cut: {
    phasedRegistrationNames: {
      bubbled: keyOf({onCut: true}),
      captured: keyOf({onCutCapture: true})
    }
  },
  doubleClick: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDoubleClick: true}),
      captured: keyOf({onDoubleClickCapture: true})
    }
  },
  drag: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDrag: true}),
      captured: keyOf({onDragCapture: true})
    }
  },
  dragEnd: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDragEnd: true}),
      captured: keyOf({onDragEndCapture: true})
    }
  },
  dragEnter: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDragEnter: true}),
      captured: keyOf({onDragEnterCapture: true})
    }
  },
  dragExit: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDragExit: true}),
      captured: keyOf({onDragExitCapture: true})
    }
  },
  dragLeave: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDragLeave: true}),
      captured: keyOf({onDragLeaveCapture: true})
    }
  },
  dragOver: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDragOver: true}),
      captured: keyOf({onDragOverCapture: true})
    }
  },
  dragStart: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDragStart: true}),
      captured: keyOf({onDragStartCapture: true})
    }
  },
  drop: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDrop: true}),
      captured: keyOf({onDropCapture: true})
    }
  },
  focus: {
    phasedRegistrationNames: {
      bubbled: keyOf({onFocus: true}),
      captured: keyOf({onFocusCapture: true})
    }
  },
  input: {
    phasedRegistrationNames: {
      bubbled: keyOf({onInput: true}),
      captured: keyOf({onInputCapture: true})
    }
  },
  keyDown: {
    phasedRegistrationNames: {
      bubbled: keyOf({onKeyDown: true}),
      captured: keyOf({onKeyDownCapture: true})
    }
  },
  keyPress: {
    phasedRegistrationNames: {
      bubbled: keyOf({onKeyPress: true}),
      captured: keyOf({onKeyPressCapture: true})
    }
  },
  keyUp: {
    phasedRegistrationNames: {
      bubbled: keyOf({onKeyUp: true}),
      captured: keyOf({onKeyUpCapture: true})
    }
  },
  load: {
    phasedRegistrationNames: {
      bubbled: keyOf({onLoad: true}),
      captured: keyOf({onLoadCapture: true})
    }
  },
  error: {
    phasedRegistrationNames: {
      bubbled: keyOf({onError: true}),
      captured: keyOf({onErrorCapture: true})
    }
  },
  // Note: We do not allow listening to mouseOver events. Instead, use the
  // onMouseEnter/onMouseLeave created by `EnterLeaveEventPlugin`.
  mouseDown: {
    phasedRegistrationNames: {
      bubbled: keyOf({onMouseDown: true}),
      captured: keyOf({onMouseDownCapture: true})
    }
  },
  mouseMove: {
    phasedRegistrationNames: {
      bubbled: keyOf({onMouseMove: true}),
      captured: keyOf({onMouseMoveCapture: true})
    }
  },
  mouseOut: {
    phasedRegistrationNames: {
      bubbled: keyOf({onMouseOut: true}),
      captured: keyOf({onMouseOutCapture: true})
    }
  },
  mouseOver: {
    phasedRegistrationNames: {
      bubbled: keyOf({onMouseOver: true}),
      captured: keyOf({onMouseOverCapture: true})
    }
  },
  mouseUp: {
    phasedRegistrationNames: {
      bubbled: keyOf({onMouseUp: true}),
      captured: keyOf({onMouseUpCapture: true})
    }
  },
  paste: {
    phasedRegistrationNames: {
      bubbled: keyOf({onPaste: true}),
      captured: keyOf({onPasteCapture: true})
    }
  },
  reset: {
    phasedRegistrationNames: {
      bubbled: keyOf({onReset: true}),
      captured: keyOf({onResetCapture: true})
    }
  },
  scroll: {
    phasedRegistrationNames: {
      bubbled: keyOf({onScroll: true}),
      captured: keyOf({onScrollCapture: true})
    }
  },
  submit: {
    phasedRegistrationNames: {
      bubbled: keyOf({onSubmit: true}),
      captured: keyOf({onSubmitCapture: true})
    }
  },
  touchCancel: {
    phasedRegistrationNames: {
      bubbled: keyOf({onTouchCancel: true}),
      captured: keyOf({onTouchCancelCapture: true})
    }
  },
  touchEnd: {
    phasedRegistrationNames: {
      bubbled: keyOf({onTouchEnd: true}),
      captured: keyOf({onTouchEndCapture: true})
    }
  },
  touchMove: {
    phasedRegistrationNames: {
      bubbled: keyOf({onTouchMove: true}),
      captured: keyOf({onTouchMoveCapture: true})
    }
  },
  touchStart: {
    phasedRegistrationNames: {
      bubbled: keyOf({onTouchStart: true}),
      captured: keyOf({onTouchStartCapture: true})
    }
  },
  wheel: {
    phasedRegistrationNames: {
      bubbled: keyOf({onWheel: true}),
      captured: keyOf({onWheelCapture: true})
    }
  }
};

var topLevelEventsToDispatchConfig = {
  topBlur:        eventTypes.blur,
  topClick:       eventTypes.click,
  topContextMenu: eventTypes.contextMenu,
  topCopy:        eventTypes.copy,
  topCut:         eventTypes.cut,
  topDoubleClick: eventTypes.doubleClick,
  topDrag:        eventTypes.drag,
  topDragEnd:     eventTypes.dragEnd,
  topDragEnter:   eventTypes.dragEnter,
  topDragExit:    eventTypes.dragExit,
  topDragLeave:   eventTypes.dragLeave,
  topDragOver:    eventTypes.dragOver,
  topDragStart:   eventTypes.dragStart,
  topDrop:        eventTypes.drop,
  topError:       eventTypes.error,
  topFocus:       eventTypes.focus,
  topInput:       eventTypes.input,
  topKeyDown:     eventTypes.keyDown,
  topKeyPress:    eventTypes.keyPress,
  topKeyUp:       eventTypes.keyUp,
  topLoad:        eventTypes.load,
  topMouseDown:   eventTypes.mouseDown,
  topMouseMove:   eventTypes.mouseMove,
  topMouseOut:    eventTypes.mouseOut,
  topMouseOver:   eventTypes.mouseOver,
  topMouseUp:     eventTypes.mouseUp,
  topPaste:       eventTypes.paste,
  topReset:       eventTypes.reset,
  topScroll:      eventTypes.scroll,
  topSubmit:      eventTypes.submit,
  topTouchCancel: eventTypes.touchCancel,
  topTouchEnd:    eventTypes.touchEnd,
  topTouchMove:   eventTypes.touchMove,
  topTouchStart:  eventTypes.touchStart,
  topWheel:       eventTypes.wheel
};

for (var topLevelType in topLevelEventsToDispatchConfig) {
  topLevelEventsToDispatchConfig[topLevelType].dependencies = [topLevelType];
}

var SimpleEventPlugin = {

  eventTypes: eventTypes,

  /**
   * Same as the default implementation, except cancels the event when return
   * value is false. This behavior will be disabled in a future release.
   *
   * @param {object} Event to be dispatched.
   * @param {function} Application-level callback.
   * @param {string} domID DOM ID to pass to the callback.
   */
  executeDispatch: function(event, listener, domID) {
    var returnValue = EventPluginUtils.executeDispatch(event, listener, domID);

    ("production" !== "development" ? warning(
      typeof returnValue !== 'boolean',
      'Returning `false` from an event handler is deprecated and will be ' +
      'ignored in a future release. Instead, manually call ' +
      'e.stopPropagation() or e.preventDefault(), as appropriate.'
    ) : null);

    if (returnValue === false) {
      event.stopPropagation();
      event.preventDefault();
    }
  },

  /**
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @see {EventPluginHub.extractEvents}
   */
  extractEvents: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent) {
    var dispatchConfig = topLevelEventsToDispatchConfig[topLevelType];
    if (!dispatchConfig) {
      return null;
    }
    var EventConstructor;
    switch (topLevelType) {
      case topLevelTypes.topInput:
      case topLevelTypes.topLoad:
      case topLevelTypes.topError:
      case topLevelTypes.topReset:
      case topLevelTypes.topSubmit:
        // HTML Events
        // @see http://www.w3.org/TR/html5/index.html#events-0
        EventConstructor = SyntheticEvent;
        break;
      case topLevelTypes.topKeyPress:
        // FireFox creates a keypress event for function keys too. This removes
        // the unwanted keypress events. Enter is however both printable and
        // non-printable. One would expect Tab to be as well (but it isn't).
        if (getEventCharCode(nativeEvent) === 0) {
          return null;
        }
        /* falls through */
      case topLevelTypes.topKeyDown:
      case topLevelTypes.topKeyUp:
        EventConstructor = SyntheticKeyboardEvent;
        break;
      case topLevelTypes.topBlur:
      case topLevelTypes.topFocus:
        EventConstructor = SyntheticFocusEvent;
        break;
      case topLevelTypes.topClick:
        // Firefox creates a click event on right mouse clicks. This removes the
        // unwanted click events.
        if (nativeEvent.button === 2) {
          return null;
        }
        /* falls through */
      case topLevelTypes.topContextMenu:
      case topLevelTypes.topDoubleClick:
      case topLevelTypes.topMouseDown:
      case topLevelTypes.topMouseMove:
      case topLevelTypes.topMouseOut:
      case topLevelTypes.topMouseOver:
      case topLevelTypes.topMouseUp:
        EventConstructor = SyntheticMouseEvent;
        break;
      case topLevelTypes.topDrag:
      case topLevelTypes.topDragEnd:
      case topLevelTypes.topDragEnter:
      case topLevelTypes.topDragExit:
      case topLevelTypes.topDragLeave:
      case topLevelTypes.topDragOver:
      case topLevelTypes.topDragStart:
      case topLevelTypes.topDrop:
        EventConstructor = SyntheticDragEvent;
        break;
      case topLevelTypes.topTouchCancel:
      case topLevelTypes.topTouchEnd:
      case topLevelTypes.topTouchMove:
      case topLevelTypes.topTouchStart:
        EventConstructor = SyntheticTouchEvent;
        break;
      case topLevelTypes.topScroll:
        EventConstructor = SyntheticUIEvent;
        break;
      case topLevelTypes.topWheel:
        EventConstructor = SyntheticWheelEvent;
        break;
      case topLevelTypes.topCopy:
      case topLevelTypes.topCut:
      case topLevelTypes.topPaste:
        EventConstructor = SyntheticClipboardEvent;
        break;
    }
    ("production" !== "development" ? invariant(
      EventConstructor,
      'SimpleEventPlugin: Unhandled event type, `%s`.',
      topLevelType
    ) : invariant(EventConstructor));
    var event = EventConstructor.getPooled(
      dispatchConfig,
      topLevelTargetID,
      nativeEvent
    );
    EventPropagators.accumulateTwoPhaseDispatches(event);
    return event;
  }

};

module.exports = SimpleEventPlugin;

},{"./EventConstants":16,"./EventPluginUtils":20,"./EventPropagators":21,"./SyntheticClipboardEvent":84,"./SyntheticDragEvent":86,"./SyntheticEvent":87,"./SyntheticFocusEvent":88,"./SyntheticKeyboardEvent":90,"./SyntheticMouseEvent":91,"./SyntheticTouchEvent":92,"./SyntheticUIEvent":93,"./SyntheticWheelEvent":94,"./getEventCharCode":114,"./invariant":126,"./keyOf":133,"./warning":145}],84:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticClipboardEvent
 * @typechecks static-only
 */

"use strict";

var SyntheticEvent = _dereq_("./SyntheticEvent");

/**
 * @interface Event
 * @see http://www.w3.org/TR/clipboard-apis/
 */
var ClipboardEventInterface = {
  clipboardData: function(event) {
    return (
      'clipboardData' in event ?
        event.clipboardData :
        window.clipboardData
    );
  }
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticClipboardEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticEvent.augmentClass(SyntheticClipboardEvent, ClipboardEventInterface);

module.exports = SyntheticClipboardEvent;


},{"./SyntheticEvent":87}],85:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticCompositionEvent
 * @typechecks static-only
 */

"use strict";

var SyntheticEvent = _dereq_("./SyntheticEvent");

/**
 * @interface Event
 * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents
 */
var CompositionEventInterface = {
  data: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticCompositionEvent(
  dispatchConfig,
  dispatchMarker,
  nativeEvent) {
  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticEvent.augmentClass(
  SyntheticCompositionEvent,
  CompositionEventInterface
);

module.exports = SyntheticCompositionEvent;


},{"./SyntheticEvent":87}],86:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticDragEvent
 * @typechecks static-only
 */

"use strict";

var SyntheticMouseEvent = _dereq_("./SyntheticMouseEvent");

/**
 * @interface DragEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var DragEventInterface = {
  dataTransfer: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticDragEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticMouseEvent.augmentClass(SyntheticDragEvent, DragEventInterface);

module.exports = SyntheticDragEvent;

},{"./SyntheticMouseEvent":91}],87:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticEvent
 * @typechecks static-only
 */

"use strict";

var PooledClass = _dereq_("./PooledClass");

var assign = _dereq_("./Object.assign");
var emptyFunction = _dereq_("./emptyFunction");
var getEventTarget = _dereq_("./getEventTarget");

/**
 * @interface Event
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var EventInterface = {
  type: null,
  target: getEventTarget,
  // currentTarget is set when dispatching; no use in copying it here
  currentTarget: emptyFunction.thatReturnsNull,
  eventPhase: null,
  bubbles: null,
  cancelable: null,
  timeStamp: function(event) {
    return event.timeStamp || Date.now();
  },
  defaultPrevented: null,
  isTrusted: null
};

/**
 * Synthetic events are dispatched by event plugins, typically in response to a
 * top-level event delegation handler.
 *
 * These systems should generally use pooling to reduce the frequency of garbage
 * collection. The system should check `isPersistent` to determine whether the
 * event should be released into the pool after being dispatched. Users that
 * need a persisted event should invoke `persist`.
 *
 * Synthetic events (and subclasses) implement the DOM Level 3 Events API by
 * normalizing browser quirks. Subclasses do not necessarily have to implement a
 * DOM interface; custom application-specific events can also subclass this.
 *
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 */
function SyntheticEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  this.dispatchConfig = dispatchConfig;
  this.dispatchMarker = dispatchMarker;
  this.nativeEvent = nativeEvent;

  var Interface = this.constructor.Interface;
  for (var propName in Interface) {
    if (!Interface.hasOwnProperty(propName)) {
      continue;
    }
    var normalize = Interface[propName];
    if (normalize) {
      this[propName] = normalize(nativeEvent);
    } else {
      this[propName] = nativeEvent[propName];
    }
  }

  var defaultPrevented = nativeEvent.defaultPrevented != null ?
    nativeEvent.defaultPrevented :
    nativeEvent.returnValue === false;
  if (defaultPrevented) {
    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
  } else {
    this.isDefaultPrevented = emptyFunction.thatReturnsFalse;
  }
  this.isPropagationStopped = emptyFunction.thatReturnsFalse;
}

assign(SyntheticEvent.prototype, {

  preventDefault: function() {
    this.defaultPrevented = true;
    var event = this.nativeEvent;
    event.preventDefault ? event.preventDefault() : event.returnValue = false;
    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
  },

  stopPropagation: function() {
    var event = this.nativeEvent;
    event.stopPropagation ? event.stopPropagation() : event.cancelBubble = true;
    this.isPropagationStopped = emptyFunction.thatReturnsTrue;
  },

  /**
   * We release all dispatched `SyntheticEvent`s after each event loop, adding
   * them back into the pool. This allows a way to hold onto a reference that
   * won't be added back into the pool.
   */
  persist: function() {
    this.isPersistent = emptyFunction.thatReturnsTrue;
  },

  /**
   * Checks if this event should be released back into the pool.
   *
   * @return {boolean} True if this should not be released, false otherwise.
   */
  isPersistent: emptyFunction.thatReturnsFalse,

  /**
   * `PooledClass` looks for `destructor` on each instance it releases.
   */
  destructor: function() {
    var Interface = this.constructor.Interface;
    for (var propName in Interface) {
      this[propName] = null;
    }
    this.dispatchConfig = null;
    this.dispatchMarker = null;
    this.nativeEvent = null;
  }

});

SyntheticEvent.Interface = EventInterface;

/**
 * Helper to reduce boilerplate when creating subclasses.
 *
 * @param {function} Class
 * @param {?object} Interface
 */
SyntheticEvent.augmentClass = function(Class, Interface) {
  var Super = this;

  var prototype = Object.create(Super.prototype);
  assign(prototype, Class.prototype);
  Class.prototype = prototype;
  Class.prototype.constructor = Class;

  Class.Interface = assign({}, Super.Interface, Interface);
  Class.augmentClass = Super.augmentClass;

  PooledClass.addPoolingTo(Class, PooledClass.threeArgumentPooler);
};

PooledClass.addPoolingTo(SyntheticEvent, PooledClass.threeArgumentPooler);

module.exports = SyntheticEvent;

},{"./Object.assign":27,"./PooledClass":28,"./emptyFunction":107,"./getEventTarget":117}],88:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticFocusEvent
 * @typechecks static-only
 */

"use strict";

var SyntheticUIEvent = _dereq_("./SyntheticUIEvent");

/**
 * @interface FocusEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var FocusEventInterface = {
  relatedTarget: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticFocusEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticUIEvent.augmentClass(SyntheticFocusEvent, FocusEventInterface);

module.exports = SyntheticFocusEvent;

},{"./SyntheticUIEvent":93}],89:[function(_dereq_,module,exports){
/**
 * Copyright 2013 Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticInputEvent
 * @typechecks static-only
 */

"use strict";

var SyntheticEvent = _dereq_("./SyntheticEvent");

/**
 * @interface Event
 * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105
 *      /#events-inputevents
 */
var InputEventInterface = {
  data: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticInputEvent(
  dispatchConfig,
  dispatchMarker,
  nativeEvent) {
  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticEvent.augmentClass(
  SyntheticInputEvent,
  InputEventInterface
);

module.exports = SyntheticInputEvent;


},{"./SyntheticEvent":87}],90:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticKeyboardEvent
 * @typechecks static-only
 */

"use strict";

var SyntheticUIEvent = _dereq_("./SyntheticUIEvent");

var getEventCharCode = _dereq_("./getEventCharCode");
var getEventKey = _dereq_("./getEventKey");
var getEventModifierState = _dereq_("./getEventModifierState");

/**
 * @interface KeyboardEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var KeyboardEventInterface = {
  key: getEventKey,
  location: null,
  ctrlKey: null,
  shiftKey: null,
  altKey: null,
  metaKey: null,
  repeat: null,
  locale: null,
  getModifierState: getEventModifierState,
  // Legacy Interface
  charCode: function(event) {
    // `charCode` is the result of a KeyPress event and represents the value of
    // the actual printable character.

    // KeyPress is deprecated, but its replacement is not yet final and not
    // implemented in any major browser. Only KeyPress has charCode.
    if (event.type === 'keypress') {
      return getEventCharCode(event);
    }
    return 0;
  },
  keyCode: function(event) {
    // `keyCode` is the result of a KeyDown/Up event and represents the value of
    // physical keyboard key.

    // The actual meaning of the value depends on the users' keyboard layout
    // which cannot be detected. Assuming that it is a US keyboard layout
    // provides a surprisingly accurate mapping for US and European users.
    // Due to this, it is left to the user to implement at this time.
    if (event.type === 'keydown' || event.type === 'keyup') {
      return event.keyCode;
    }
    return 0;
  },
  which: function(event) {
    // `which` is an alias for either `keyCode` or `charCode` depending on the
    // type of the event.
    if (event.type === 'keypress') {
      return getEventCharCode(event);
    }
    if (event.type === 'keydown' || event.type === 'keyup') {
      return event.keyCode;
    }
    return 0;
  }
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticKeyboardEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticUIEvent.augmentClass(SyntheticKeyboardEvent, KeyboardEventInterface);

module.exports = SyntheticKeyboardEvent;

},{"./SyntheticUIEvent":93,"./getEventCharCode":114,"./getEventKey":115,"./getEventModifierState":116}],91:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticMouseEvent
 * @typechecks static-only
 */

"use strict";

var SyntheticUIEvent = _dereq_("./SyntheticUIEvent");
var ViewportMetrics = _dereq_("./ViewportMetrics");

var getEventModifierState = _dereq_("./getEventModifierState");

/**
 * @interface MouseEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var MouseEventInterface = {
  screenX: null,
  screenY: null,
  clientX: null,
  clientY: null,
  ctrlKey: null,
  shiftKey: null,
  altKey: null,
  metaKey: null,
  getModifierState: getEventModifierState,
  button: function(event) {
    // Webkit, Firefox, IE9+
    // which:  1 2 3
    // button: 0 1 2 (standard)
    var button = event.button;
    if ('which' in event) {
      return button;
    }
    // IE<9
    // which:  undefined
    // button: 0 0 0
    // button: 1 4 2 (onmouseup)
    return button === 2 ? 2 : button === 4 ? 1 : 0;
  },
  buttons: null,
  relatedTarget: function(event) {
    return event.relatedTarget || (
      event.fromElement === event.srcElement ?
        event.toElement :
        event.fromElement
    );
  },
  // "Proprietary" Interface.
  pageX: function(event) {
    return 'pageX' in event ?
      event.pageX :
      event.clientX + ViewportMetrics.currentScrollLeft;
  },
  pageY: function(event) {
    return 'pageY' in event ?
      event.pageY :
      event.clientY + ViewportMetrics.currentScrollTop;
  }
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticMouseEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticUIEvent.augmentClass(SyntheticMouseEvent, MouseEventInterface);

module.exports = SyntheticMouseEvent;

},{"./SyntheticUIEvent":93,"./ViewportMetrics":96,"./getEventModifierState":116}],92:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticTouchEvent
 * @typechecks static-only
 */

"use strict";

var SyntheticUIEvent = _dereq_("./SyntheticUIEvent");

var getEventModifierState = _dereq_("./getEventModifierState");

/**
 * @interface TouchEvent
 * @see http://www.w3.org/TR/touch-events/
 */
var TouchEventInterface = {
  touches: null,
  targetTouches: null,
  changedTouches: null,
  altKey: null,
  metaKey: null,
  ctrlKey: null,
  shiftKey: null,
  getModifierState: getEventModifierState
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticTouchEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticUIEvent.augmentClass(SyntheticTouchEvent, TouchEventInterface);

module.exports = SyntheticTouchEvent;

},{"./SyntheticUIEvent":93,"./getEventModifierState":116}],93:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticUIEvent
 * @typechecks static-only
 */

"use strict";

var SyntheticEvent = _dereq_("./SyntheticEvent");

var getEventTarget = _dereq_("./getEventTarget");

/**
 * @interface UIEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var UIEventInterface = {
  view: function(event) {
    if (event.view) {
      return event.view;
    }

    var target = getEventTarget(event);
    if (target != null && target.window === target) {
      // target is a window object
      return target;
    }

    var doc = target.ownerDocument;
    // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
    if (doc) {
      return doc.defaultView || doc.parentWindow;
    } else {
      return window;
    }
  },
  detail: function(event) {
    return event.detail || 0;
  }
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticEvent}
 */
function SyntheticUIEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticEvent.augmentClass(SyntheticUIEvent, UIEventInterface);

module.exports = SyntheticUIEvent;

},{"./SyntheticEvent":87,"./getEventTarget":117}],94:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticWheelEvent
 * @typechecks static-only
 */

"use strict";

var SyntheticMouseEvent = _dereq_("./SyntheticMouseEvent");

/**
 * @interface WheelEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var WheelEventInterface = {
  deltaX: function(event) {
    return (
      'deltaX' in event ? event.deltaX :
      // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
      'wheelDeltaX' in event ? -event.wheelDeltaX : 0
    );
  },
  deltaY: function(event) {
    return (
      'deltaY' in event ? event.deltaY :
      // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
      'wheelDeltaY' in event ? -event.wheelDeltaY :
      // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
      'wheelDelta' in event ? -event.wheelDelta : 0
    );
  },
  deltaZ: null,

  // Browsers without "deltaMode" is reporting in raw wheel delta where one
  // notch on the scroll is always +/- 120, roughly equivalent to pixels.
  // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
  // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
  deltaMode: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticMouseEvent}
 */
function SyntheticWheelEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticMouseEvent.augmentClass(SyntheticWheelEvent, WheelEventInterface);

module.exports = SyntheticWheelEvent;

},{"./SyntheticMouseEvent":91}],95:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule Transaction
 */

"use strict";

var invariant = _dereq_("./invariant");

/**
 * `Transaction` creates a black box that is able to wrap any method such that
 * certain invariants are maintained before and after the method is invoked
 * (Even if an exception is thrown while invoking the wrapped method). Whoever
 * instantiates a transaction can provide enforcers of the invariants at
 * creation time. The `Transaction` class itself will supply one additional
 * automatic invariant for you - the invariant that any transaction instance
 * should not be run while it is already being run. You would typically create a
 * single instance of a `Transaction` for reuse multiple times, that potentially
 * is used to wrap several different methods. Wrappers are extremely simple -
 * they only require implementing two methods.
 *
 * <pre>
 *                       wrappers (injected at creation time)
 *                                      +        +
 *                                      |        |
 *                    +-----------------|--------|--------------+
 *                    |                 v        |              |
 *                    |      +---------------+   |              |
 *                    |   +--|    wrapper1   |---|----+         |
 *                    |   |  +---------------+   v    |         |
 *                    |   |          +-------------+  |         |
 *                    |   |     +----|   wrapper2  |--------+   |
 *                    |   |     |    +-------------+  |     |   |
 *                    |   |     |                     |     |   |
 *                    |   v     v                     v     v   | wrapper
 *                    | +---+ +---+   +---------+   +---+ +---+ | invariants
 * perform(anyMethod) | |   | |   |   |         |   |   | |   | | maintained
 * +----------------->|-|---|-|---|-->|anyMethod|---|---|-|---|-|-------->
 *                    | |   | |   |   |         |   |   | |   | |
 *                    | |   | |   |   |         |   |   | |   | |
 *                    | |   | |   |   |         |   |   | |   | |
 *                    | +---+ +---+   +---------+   +---+ +---+ |
 *                    |  initialize                    close    |
 *                    +-----------------------------------------+
 * </pre>
 *
 * Use cases:
 * - Preserving the input selection ranges before/after reconciliation.
 *   Restoring selection even in the event of an unexpected error.
 * - Deactivating events while rearranging the DOM, preventing blurs/focuses,
 *   while guaranteeing that afterwards, the event system is reactivated.
 * - Flushing a queue of collected DOM mutations to the main UI thread after a
 *   reconciliation takes place in a worker thread.
 * - Invoking any collected `componentDidUpdate` callbacks after rendering new
 *   content.
 * - (Future use case): Wrapping particular flushes of the `ReactWorker` queue
 *   to preserve the `scrollTop` (an automatic scroll aware DOM).
 * - (Future use case): Layout calculations before and after DOM upates.
 *
 * Transactional plugin API:
 * - A module that has an `initialize` method that returns any precomputation.
 * - and a `close` method that accepts the precomputation. `close` is invoked
 *   when the wrapped process is completed, or has failed.
 *
 * @param {Array<TransactionalWrapper>} transactionWrapper Wrapper modules
 * that implement `initialize` and `close`.
 * @return {Transaction} Single transaction for reuse in thread.
 *
 * @class Transaction
 */
var Mixin = {
  /**
   * Sets up this instance so that it is prepared for collecting metrics. Does
   * so such that this setup method may be used on an instance that is already
   * initialized, in a way that does not consume additional memory upon reuse.
   * That can be useful if you decide to make your subclass of this mixin a
   * "PooledClass".
   */
  reinitializeTransaction: function() {
    this.transactionWrappers = this.getTransactionWrappers();
    if (!this.wrapperInitData) {
      this.wrapperInitData = [];
    } else {
      this.wrapperInitData.length = 0;
    }
    this._isInTransaction = false;
  },

  _isInTransaction: false,

  /**
   * @abstract
   * @return {Array<TransactionWrapper>} Array of transaction wrappers.
   */
  getTransactionWrappers: null,

  isInTransaction: function() {
    return !!this._isInTransaction;
  },

  /**
   * Executes the function within a safety window. Use this for the top level
   * methods that result in large amounts of computation/mutations that would
   * need to be safety checked.
   *
   * @param {function} method Member of scope to call.
   * @param {Object} scope Scope to invoke from.
   * @param {Object?=} args... Arguments to pass to the method (optional).
   *                           Helps prevent need to bind in many cases.
   * @return Return value from `method`.
   */
  perform: function(method, scope, a, b, c, d, e, f) {
    ("production" !== "development" ? invariant(
      !this.isInTransaction(),
      'Transaction.perform(...): Cannot initialize a transaction when there ' +
      'is already an outstanding transaction.'
    ) : invariant(!this.isInTransaction()));
    var errorThrown;
    var ret;
    try {
      this._isInTransaction = true;
      // Catching errors makes debugging more difficult, so we start with
      // errorThrown set to true before setting it to false after calling
      // close -- if it's still set to true in the finally block, it means
      // one of these calls threw.
      errorThrown = true;
      this.initializeAll(0);
      ret = method.call(scope, a, b, c, d, e, f);
      errorThrown = false;
    } finally {
      try {
        if (errorThrown) {
          // If `method` throws, prefer to show that stack trace over any thrown
          // by invoking `closeAll`.
          try {
            this.closeAll(0);
          } catch (err) {
          }
        } else {
          // Since `method` didn't throw, we don't want to silence the exception
          // here.
          this.closeAll(0);
        }
      } finally {
        this._isInTransaction = false;
      }
    }
    return ret;
  },

  initializeAll: function(startIndex) {
    var transactionWrappers = this.transactionWrappers;
    for (var i = startIndex; i < transactionWrappers.length; i++) {
      var wrapper = transactionWrappers[i];
      try {
        // Catching errors makes debugging more difficult, so we start with the
        // OBSERVED_ERROR state before overwriting it with the real return value
        // of initialize -- if it's still set to OBSERVED_ERROR in the finally
        // block, it means wrapper.initialize threw.
        this.wrapperInitData[i] = Transaction.OBSERVED_ERROR;
        this.wrapperInitData[i] = wrapper.initialize ?
          wrapper.initialize.call(this) :
          null;
      } finally {
        if (this.wrapperInitData[i] === Transaction.OBSERVED_ERROR) {
          // The initializer for wrapper i threw an error; initialize the
          // remaining wrappers but silence any exceptions from them to ensure
          // that the first error is the one to bubble up.
          try {
            this.initializeAll(i + 1);
          } catch (err) {
          }
        }
      }
    }
  },

  /**
   * Invokes each of `this.transactionWrappers.close[i]` functions, passing into
   * them the respective return values of `this.transactionWrappers.init[i]`
   * (`close`rs that correspond to initializers that failed will not be
   * invoked).
   */
  closeAll: function(startIndex) {
    ("production" !== "development" ? invariant(
      this.isInTransaction(),
      'Transaction.closeAll(): Cannot close transaction when none are open.'
    ) : invariant(this.isInTransaction()));
    var transactionWrappers = this.transactionWrappers;
    for (var i = startIndex; i < transactionWrappers.length; i++) {
      var wrapper = transactionWrappers[i];
      var initData = this.wrapperInitData[i];
      var errorThrown;
      try {
        // Catching errors makes debugging more difficult, so we start with
        // errorThrown set to true before setting it to false after calling
        // close -- if it's still set to true in the finally block, it means
        // wrapper.close threw.
        errorThrown = true;
        if (initData !== Transaction.OBSERVED_ERROR) {
          wrapper.close && wrapper.close.call(this, initData);
        }
        errorThrown = false;
      } finally {
        if (errorThrown) {
          // The closer for wrapper i threw an error; close the remaining
          // wrappers but silence any exceptions from them to ensure that the
          // first error is the one to bubble up.
          try {
            this.closeAll(i + 1);
          } catch (e) {
          }
        }
      }
    }
    this.wrapperInitData.length = 0;
  }
};

var Transaction = {

  Mixin: Mixin,

  /**
   * Token to look for to determine if an error occured.
   */
  OBSERVED_ERROR: {}

};

module.exports = Transaction;

},{"./invariant":126}],96:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ViewportMetrics
 */

"use strict";

var getUnboundedScrollPosition = _dereq_("./getUnboundedScrollPosition");

var ViewportMetrics = {

  currentScrollLeft: 0,

  currentScrollTop: 0,

  refreshScrollValues: function() {
    var scrollPosition = getUnboundedScrollPosition(window);
    ViewportMetrics.currentScrollLeft = scrollPosition.x;
    ViewportMetrics.currentScrollTop = scrollPosition.y;
  }

};

module.exports = ViewportMetrics;

},{"./getUnboundedScrollPosition":122}],97:[function(_dereq_,module,exports){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule accumulateInto
 */

"use strict";

var invariant = _dereq_("./invariant");

/**
 *
 * Accumulates items that must not be null or undefined into the first one. This
 * is used to conserve memory by avoiding array allocations, and thus sacrifices
 * API cleanness. Since `current` can be null before being passed in and not
 * null after this function, make sure to assign it back to `current`:
 *
 * `a = accumulateInto(a, b);`
 *
 * This API should be sparingly used. Try `accumulate` for something cleaner.
 *
 * @return {*|array<*>} An accumulation of items.
 */

function accumulateInto(current, next) {
  ("production" !== "development" ? invariant(
    next != null,
    'accumulateInto(...): Accumulated items must not be null or undefined.'
  ) : invariant(next != null));
  if (current == null) {
    return next;
  }

  // Both are not empty. Warning: Never call x.concat(y) when you are not
  // certain that x is an Array (x could be a string with concat method).
  var currentIsArray = Array.isArray(current);
  var nextIsArray = Array.isArray(next);

  if (currentIsArray && nextIsArray) {
    current.push.apply(current, next);
    return current;
  }

  if (currentIsArray) {
    current.push(next);
    return current;
  }

  if (nextIsArray) {
    // A bit too dangerous to mutate `next`.
    return [current].concat(next);
  }

  return [current, next];
}

module.exports = accumulateInto;

},{"./invariant":126}],98:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule adler32
 */

/* jslint bitwise:true */

"use strict";

var MOD = 65521;

// This is a clean-room implementation of adler32 designed for detecting
// if markup is not what we expect it to be. It does not need to be
// cryptographically strong, only reasonably good at detecting if markup
// generated on the server is different than that on the client.
function adler32(data) {
  var a = 1;
  var b = 0;
  for (var i = 0; i < data.length; i++) {
    a = (a + data.charCodeAt(i)) % MOD;
    b = (b + a) % MOD;
  }
  return a | (b << 16);
}

module.exports = adler32;

},{}],99:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule camelize
 * @typechecks
 */

var _hyphenPattern = /-(.)/g;

/**
 * Camelcases a hyphenated string, for example:
 *
 *   > camelize('background-color')
 *   < "backgroundColor"
 *
 * @param {string} string
 * @return {string}
 */
function camelize(string) {
  return string.replace(_hyphenPattern, function(_, character) {
    return character.toUpperCase();
  });
}

module.exports = camelize;

},{}],100:[function(_dereq_,module,exports){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule camelizeStyleName
 * @typechecks
 */

"use strict";

var camelize = _dereq_("./camelize");

var msPattern = /^-ms-/;

/**
 * Camelcases a hyphenated CSS property name, for example:
 *
 *   > camelizeStyleName('background-color')
 *   < "backgroundColor"
 *   > camelizeStyleName('-moz-transition')
 *   < "MozTransition"
 *   > camelizeStyleName('-ms-transition')
 *   < "msTransition"
 *
 * As Andi Smith suggests
 * (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
 * is converted to lowercase `ms`.
 *
 * @param {string} string
 * @return {string}
 */
function camelizeStyleName(string) {
  return camelize(string.replace(msPattern, 'ms-'));
}

module.exports = camelizeStyleName;

},{"./camelize":99}],101:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule containsNode
 * @typechecks
 */

var isTextNode = _dereq_("./isTextNode");

/*jslint bitwise:true */

/**
 * Checks if a given DOM node contains or is another DOM node.
 *
 * @param {?DOMNode} outerNode Outer DOM node.
 * @param {?DOMNode} innerNode Inner DOM node.
 * @return {boolean} True if `outerNode` contains or is `innerNode`.
 */
function containsNode(outerNode, innerNode) {
  if (!outerNode || !innerNode) {
    return false;
  } else if (outerNode === innerNode) {
    return true;
  } else if (isTextNode(outerNode)) {
    return false;
  } else if (isTextNode(innerNode)) {
    return containsNode(outerNode, innerNode.parentNode);
  } else if (outerNode.contains) {
    return outerNode.contains(innerNode);
  } else if (outerNode.compareDocumentPosition) {
    return !!(outerNode.compareDocumentPosition(innerNode) & 16);
  } else {
    return false;
  }
}

module.exports = containsNode;

},{"./isTextNode":130}],102:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule createArrayFrom
 * @typechecks
 */

var toArray = _dereq_("./toArray");

/**
 * Perform a heuristic test to determine if an object is "array-like".
 *
 *   A monk asked Joshu, a Zen master, "Has a dog Buddha nature?"
 *   Joshu replied: "Mu."
 *
 * This function determines if its argument has "array nature": it returns
 * true if the argument is an actual array, an `arguments' object, or an
 * HTMLCollection (e.g. node.childNodes or node.getElementsByTagName()).
 *
 * It will return false for other array-like objects like Filelist.
 *
 * @param {*} obj
 * @return {boolean}
 */
function hasArrayNature(obj) {
  return (
    // not null/false
    !!obj &&
    // arrays are objects, NodeLists are functions in Safari
    (typeof obj == 'object' || typeof obj == 'function') &&
    // quacks like an array
    ('length' in obj) &&
    // not window
    !('setInterval' in obj) &&
    // no DOM node should be considered an array-like
    // a 'select' element has 'length' and 'item' properties on IE8
    (typeof obj.nodeType != 'number') &&
    (
      // a real array
      (// HTMLCollection/NodeList
      (Array.isArray(obj) ||
      // arguments
      ('callee' in obj) || 'item' in obj))
    )
  );
}

/**
 * Ensure that the argument is an array by wrapping it in an array if it is not.
 * Creates a copy of the argument if it is already an array.
 *
 * This is mostly useful idiomatically:
 *
 *   var createArrayFrom = require('createArrayFrom');
 *
 *   function takesOneOrMoreThings(things) {
 *     things = createArrayFrom(things);
 *     ...
 *   }
 *
 * This allows you to treat `things' as an array, but accept scalars in the API.
 *
 * If you need to convert an array-like object, like `arguments`, into an array
 * use toArray instead.
 *
 * @param {*} obj
 * @return {array}
 */
function createArrayFrom(obj) {
  if (!hasArrayNature(obj)) {
    return [obj];
  } else if (Array.isArray(obj)) {
    return obj.slice();
  } else {
    return toArray(obj);
  }
}

module.exports = createArrayFrom;

},{"./toArray":143}],103:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule createFullPageComponent
 * @typechecks
 */

"use strict";

// Defeat circular references by requiring this directly.
var ReactCompositeComponent = _dereq_("./ReactCompositeComponent");
var ReactElement = _dereq_("./ReactElement");

var invariant = _dereq_("./invariant");

/**
 * Create a component that will throw an exception when unmounted.
 *
 * Components like <html> <head> and <body> can't be removed or added
 * easily in a cross-browser way, however it's valuable to be able to
 * take advantage of React's reconciliation for styling and <title>
 * management. So we just document it and throw in dangerous cases.
 *
 * @param {string} tag The tag to wrap
 * @return {function} convenience constructor of new component
 */
function createFullPageComponent(tag) {
  var elementFactory = ReactElement.createFactory(tag);

  var FullPageComponent = ReactCompositeComponent.createClass({
    displayName: 'ReactFullPageComponent' + tag,

    componentWillUnmount: function() {
      ("production" !== "development" ? invariant(
        false,
        '%s tried to unmount. Because of cross-browser quirks it is ' +
        'impossible to unmount some top-level components (eg <html>, <head>, ' +
        'and <body>) reliably and efficiently. To fix this, have a single ' +
        'top-level component that never unmounts render these elements.',
        this.constructor.displayName
      ) : invariant(false));
    },

    render: function() {
      return elementFactory(this.props);
    }
  });

  return FullPageComponent;
}

module.exports = createFullPageComponent;

},{"./ReactCompositeComponent":34,"./ReactElement":52,"./invariant":126}],104:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule createNodesFromMarkup
 * @typechecks
 */

/*jslint evil: true, sub: true */

var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");

var createArrayFrom = _dereq_("./createArrayFrom");
var getMarkupWrap = _dereq_("./getMarkupWrap");
var invariant = _dereq_("./invariant");

/**
 * Dummy container used to render all markup.
 */
var dummyNode =
  ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;

/**
 * Pattern used by `getNodeName`.
 */
var nodeNamePattern = /^\s*<(\w+)/;

/**
 * Extracts the `nodeName` of the first element in a string of markup.
 *
 * @param {string} markup String of markup.
 * @return {?string} Node name of the supplied markup.
 */
function getNodeName(markup) {
  var nodeNameMatch = markup.match(nodeNamePattern);
  return nodeNameMatch && nodeNameMatch[1].toLowerCase();
}

/**
 * Creates an array containing the nodes rendered from the supplied markup. The
 * optionally supplied `handleScript` function will be invoked once for each
 * <script> element that is rendered. If no `handleScript` function is supplied,
 * an exception is thrown if any <script> elements are rendered.
 *
 * @param {string} markup A string of valid HTML markup.
 * @param {?function} handleScript Invoked once for each rendered <script>.
 * @return {array<DOMElement|DOMTextNode>} An array of rendered nodes.
 */
function createNodesFromMarkup(markup, handleScript) {
  var node = dummyNode;
  ("production" !== "development" ? invariant(!!dummyNode, 'createNodesFromMarkup dummy not initialized') : invariant(!!dummyNode));
  var nodeName = getNodeName(markup);

  var wrap = nodeName && getMarkupWrap(nodeName);
  if (wrap) {
    node.innerHTML = wrap[1] + markup + wrap[2];

    var wrapDepth = wrap[0];
    while (wrapDepth--) {
      node = node.lastChild;
    }
  } else {
    node.innerHTML = markup;
  }

  var scripts = node.getElementsByTagName('script');
  if (scripts.length) {
    ("production" !== "development" ? invariant(
      handleScript,
      'createNodesFromMarkup(...): Unexpected <script> element rendered.'
    ) : invariant(handleScript));
    createArrayFrom(scripts).forEach(handleScript);
  }

  var nodes = createArrayFrom(node.childNodes);
  while (node.lastChild) {
    node.removeChild(node.lastChild);
  }
  return nodes;
}

module.exports = createNodesFromMarkup;

},{"./ExecutionEnvironment":22,"./createArrayFrom":102,"./getMarkupWrap":118,"./invariant":126}],105:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule dangerousStyleValue
 * @typechecks static-only
 */

"use strict";

var CSSProperty = _dereq_("./CSSProperty");

var isUnitlessNumber = CSSProperty.isUnitlessNumber;

/**
 * Convert a value into the proper css writable value. The style name `name`
 * should be logical (no hyphens), as specified
 * in `CSSProperty.isUnitlessNumber`.
 *
 * @param {string} name CSS property name such as `topMargin`.
 * @param {*} value CSS property value such as `10px`.
 * @return {string} Normalized style value with dimensions applied.
 */
function dangerousStyleValue(name, value) {
  // Note that we've removed escapeTextForBrowser() calls here since the
  // whole string will be escaped when the attribute is injected into
  // the markup. If you provide unsafe user data here they can inject
  // arbitrary CSS which may be problematic (I couldn't repro this):
  // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet
  // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/
  // This is not an XSS hole but instead a potential CSS injection issue
  // which has lead to a greater discussion about how we're going to
  // trust URLs moving forward. See #2115901

  var isEmpty = value == null || typeof value === 'boolean' || value === '';
  if (isEmpty) {
    return '';
  }

  var isNonNumeric = isNaN(value);
  if (isNonNumeric || value === 0 ||
      isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name]) {
    return '' + value; // cast to string
  }

  if (typeof value === 'string') {
    value = value.trim();
  }
  return value + 'px';
}

module.exports = dangerousStyleValue;

},{"./CSSProperty":4}],106:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule deprecated
 */

var assign = _dereq_("./Object.assign");
var warning = _dereq_("./warning");

/**
 * This will log a single deprecation notice per function and forward the call
 * on to the new API.
 *
 * @param {string} namespace The namespace of the call, eg 'React'
 * @param {string} oldName The old function name, eg 'renderComponent'
 * @param {string} newName The new function name, eg 'render'
 * @param {*} ctx The context this forwarded call should run in
 * @param {function} fn The function to forward on to
 * @return {*} Will be the value as returned from `fn`
 */
function deprecated(namespace, oldName, newName, ctx, fn) {
  var warned = false;
  if ("production" !== "development") {
    var newFn = function() {
      ("production" !== "development" ? warning(
        warned,
        (namespace + "." + oldName + " will be deprecated in a future version. ") +
        ("Use " + namespace + "." + newName + " instead.")
      ) : null);
      warned = true;
      return fn.apply(ctx, arguments);
    };
    newFn.displayName = (namespace + "_" + oldName);
    // We need to make sure all properties of the original fn are copied over.
    // In particular, this is needed to support PropTypes
    return assign(newFn, fn);
  }

  return fn;
}

module.exports = deprecated;

},{"./Object.assign":27,"./warning":145}],107:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule emptyFunction
 */

function makeEmptyFunction(arg) {
  return function() {
    return arg;
  };
}

/**
 * This function accepts and discards inputs; it has no side effects. This is
 * primarily useful idiomatically for overridable function endpoints which
 * always need to be callable, since JS lacks a null-call idiom ala Cocoa.
 */
function emptyFunction() {}

emptyFunction.thatReturns = makeEmptyFunction;
emptyFunction.thatReturnsFalse = makeEmptyFunction(false);
emptyFunction.thatReturnsTrue = makeEmptyFunction(true);
emptyFunction.thatReturnsNull = makeEmptyFunction(null);
emptyFunction.thatReturnsThis = function() { return this; };
emptyFunction.thatReturnsArgument = function(arg) { return arg; };

module.exports = emptyFunction;

},{}],108:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule emptyObject
 */

"use strict";

var emptyObject = {};

if ("production" !== "development") {
  Object.freeze(emptyObject);
}

module.exports = emptyObject;

},{}],109:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule escapeTextForBrowser
 * @typechecks static-only
 */

"use strict";

var ESCAPE_LOOKUP = {
  "&": "&amp;",
  ">": "&gt;",
  "<": "&lt;",
  "\"": "&quot;",
  "'": "&#x27;"
};

var ESCAPE_REGEX = /[&><"']/g;

function escaper(match) {
  return ESCAPE_LOOKUP[match];
}

/**
 * Escapes text to prevent scripting attacks.
 *
 * @param {*} text Text value to escape.
 * @return {string} An escaped string.
 */
function escapeTextForBrowser(text) {
  return ('' + text).replace(ESCAPE_REGEX, escaper);
}

module.exports = escapeTextForBrowser;

},{}],110:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule flattenChildren
 */

"use strict";

var ReactTextComponent = _dereq_("./ReactTextComponent");

var traverseAllChildren = _dereq_("./traverseAllChildren");
var warning = _dereq_("./warning");

/**
 * @param {function} traverseContext Context passed through traversal.
 * @param {?ReactComponent} child React child component.
 * @param {!string} name String name of key path to child.
 */
function flattenSingleChildIntoContext(traverseContext, child, name) {
  // We found a component instance.
  var result = traverseContext;
  var keyUnique = !result.hasOwnProperty(name);
  ("production" !== "development" ? warning(
    keyUnique,
    'flattenChildren(...): Encountered two children with the same key, ' +
    '`%s`. Child keys must be unique; when two children share a key, only ' +
    'the first child will be used.',
    name
  ) : null);
  if (keyUnique && child != null) {
    var type = typeof child;
    var normalizedValue;

    if (type === 'string') {
      normalizedValue = ReactTextComponent(child);
    } else if (type === 'number') {
      normalizedValue = ReactTextComponent('' + child);
    } else {
      normalizedValue = child;
    }

    result[name] = normalizedValue;
  }
}

/**
 * Flattens children that are typically specified as `props.children`. Any null
 * children will not be included in the resulting object.
 * @return {!object} flattened children keyed by name.
 */
function flattenChildren(children) {
  if (children == null) {
    return children;
  }
  var result = {};
  traverseAllChildren(children, flattenSingleChildIntoContext, result);
  return result;
}

module.exports = flattenChildren;

},{"./ReactTextComponent":78,"./traverseAllChildren":144,"./warning":145}],111:[function(_dereq_,module,exports){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule focusNode
 */

"use strict";

/**
 * @param {DOMElement} node input/textarea to focus
 */
function focusNode(node) {
  // IE8 can throw "Can't move focus to the control because it is invisible,
  // not enabled, or of a type that does not accept the focus." for all kinds of
  // reasons that are too expensive and fragile to test.
  try {
    node.focus();
  } catch(e) {
  }
}

module.exports = focusNode;

},{}],112:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule forEachAccumulated
 */

"use strict";

/**
 * @param {array} an "accumulation" of items which is either an Array or
 * a single item. Useful when paired with the `accumulate` module. This is a
 * simple utility that allows us to reason about a collection of items, but
 * handling the case when there is exactly one item (and we do not need to
 * allocate an array).
 */
var forEachAccumulated = function(arr, cb, scope) {
  if (Array.isArray(arr)) {
    arr.forEach(cb, scope);
  } else if (arr) {
    cb.call(scope, arr);
  }
};

module.exports = forEachAccumulated;

},{}],113:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getActiveElement
 * @typechecks
 */

/**
 * Same as document.activeElement but wraps in a try-catch block. In IE it is
 * not safe to call document.activeElement if there is nothing focused.
 *
 * The activeElement will be null only if the document body is not yet defined.
 */
function getActiveElement() /*?DOMElement*/ {
  try {
    return document.activeElement || document.body;
  } catch (e) {
    return document.body;
  }
}

module.exports = getActiveElement;

},{}],114:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getEventCharCode
 * @typechecks static-only
 */

"use strict";

/**
 * `charCode` represents the actual "character code" and is safe to use with
 * `String.fromCharCode`. As such, only keys that correspond to printable
 * characters produce a valid `charCode`, the only exception to this is Enter.
 * The Tab-key is considered non-printable and does not have a `charCode`,
 * presumably because it does not produce a tab-character in browsers.
 *
 * @param {object} nativeEvent Native browser event.
 * @return {string} Normalized `charCode` property.
 */
function getEventCharCode(nativeEvent) {
  var charCode;
  var keyCode = nativeEvent.keyCode;

  if ('charCode' in nativeEvent) {
    charCode = nativeEvent.charCode;

    // FF does not set `charCode` for the Enter-key, check against `keyCode`.
    if (charCode === 0 && keyCode === 13) {
      charCode = 13;
    }
  } else {
    // IE8 does not implement `charCode`, but `keyCode` has the correct value.
    charCode = keyCode;
  }

  // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.
  // Must not discard the (non-)printable Enter-key.
  if (charCode >= 32 || charCode === 13) {
    return charCode;
  }

  return 0;
}

module.exports = getEventCharCode;

},{}],115:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getEventKey
 * @typechecks static-only
 */

"use strict";

var getEventCharCode = _dereq_("./getEventCharCode");

/**
 * Normalization of deprecated HTML5 `key` values
 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
 */
var normalizeKey = {
  'Esc': 'Escape',
  'Spacebar': ' ',
  'Left': 'ArrowLeft',
  'Up': 'ArrowUp',
  'Right': 'ArrowRight',
  'Down': 'ArrowDown',
  'Del': 'Delete',
  'Win': 'OS',
  'Menu': 'ContextMenu',
  'Apps': 'ContextMenu',
  'Scroll': 'ScrollLock',
  'MozPrintableKey': 'Unidentified'
};

/**
 * Translation from legacy `keyCode` to HTML5 `key`
 * Only special keys supported, all others depend on keyboard layout or browser
 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
 */
var translateToKey = {
  8: 'Backspace',
  9: 'Tab',
  12: 'Clear',
  13: 'Enter',
  16: 'Shift',
  17: 'Control',
  18: 'Alt',
  19: 'Pause',
  20: 'CapsLock',
  27: 'Escape',
  32: ' ',
  33: 'PageUp',
  34: 'PageDown',
  35: 'End',
  36: 'Home',
  37: 'ArrowLeft',
  38: 'ArrowUp',
  39: 'ArrowRight',
  40: 'ArrowDown',
  45: 'Insert',
  46: 'Delete',
  112: 'F1', 113: 'F2', 114: 'F3', 115: 'F4', 116: 'F5', 117: 'F6',
  118: 'F7', 119: 'F8', 120: 'F9', 121: 'F10', 122: 'F11', 123: 'F12',
  144: 'NumLock',
  145: 'ScrollLock',
  224: 'Meta'
};

/**
 * @param {object} nativeEvent Native browser event.
 * @return {string} Normalized `key` property.
 */
function getEventKey(nativeEvent) {
  if (nativeEvent.key) {
    // Normalize inconsistent values reported by browsers due to
    // implementations of a working draft specification.

    // FireFox implements `key` but returns `MozPrintableKey` for all
    // printable characters (normalized to `Unidentified`), ignore it.
    var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
    if (key !== 'Unidentified') {
      return key;
    }
  }

  // Browser does not implement `key`, polyfill as much of it as we can.
  if (nativeEvent.type === 'keypress') {
    var charCode = getEventCharCode(nativeEvent);

    // The enter-key is technically both printable and non-printable and can
    // thus be captured by `keypress`, no other non-printable key should.
    return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);
  }
  if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') {
    // While user keyboard layout determines the actual meaning of each
    // `keyCode` value, almost all function keys have a universal value.
    return translateToKey[nativeEvent.keyCode] || 'Unidentified';
  }
  return '';
}

module.exports = getEventKey;

},{"./getEventCharCode":114}],116:[function(_dereq_,module,exports){
/**
 * Copyright 2013 Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getEventModifierState
 * @typechecks static-only
 */

"use strict";

/**
 * Translation from modifier key to the associated property in the event.
 * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers
 */

var modifierKeyToProp = {
  'Alt': 'altKey',
  'Control': 'ctrlKey',
  'Meta': 'metaKey',
  'Shift': 'shiftKey'
};

// IE8 does not implement getModifierState so we simply map it to the only
// modifier keys exposed by the event itself, does not support Lock-keys.
// Currently, all major browsers except Chrome seems to support Lock-keys.
function modifierStateGetter(keyArg) {
  /*jshint validthis:true */
  var syntheticEvent = this;
  var nativeEvent = syntheticEvent.nativeEvent;
  if (nativeEvent.getModifierState) {
    return nativeEvent.getModifierState(keyArg);
  }
  var keyProp = modifierKeyToProp[keyArg];
  return keyProp ? !!nativeEvent[keyProp] : false;
}

function getEventModifierState(nativeEvent) {
  return modifierStateGetter;
}

module.exports = getEventModifierState;

},{}],117:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getEventTarget
 * @typechecks static-only
 */

"use strict";

/**
 * Gets the target node from a native browser event by accounting for
 * inconsistencies in browser DOM APIs.
 *
 * @param {object} nativeEvent Native browser event.
 * @return {DOMEventTarget} Target node.
 */
function getEventTarget(nativeEvent) {
  var target = nativeEvent.target || nativeEvent.srcElement || window;
  // Safari may fire events on text nodes (Node.TEXT_NODE is 3).
  // @see http://www.quirksmode.org/js/events_properties.html
  return target.nodeType === 3 ? target.parentNode : target;
}

module.exports = getEventTarget;

},{}],118:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getMarkupWrap
 */

var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");

var invariant = _dereq_("./invariant");

/**
 * Dummy container used to detect which wraps are necessary.
 */
var dummyNode =
  ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;

/**
 * Some browsers cannot use `innerHTML` to render certain elements standalone,
 * so we wrap them, render the wrapped nodes, then extract the desired node.
 *
 * In IE8, certain elements cannot render alone, so wrap all elements ('*').
 */
var shouldWrap = {
  // Force wrapping for SVG elements because if they get created inside a <div>,
  // they will be initialized in the wrong namespace (and will not display).
  'circle': true,
  'defs': true,
  'ellipse': true,
  'g': true,
  'line': true,
  'linearGradient': true,
  'path': true,
  'polygon': true,
  'polyline': true,
  'radialGradient': true,
  'rect': true,
  'stop': true,
  'text': true
};

var selectWrap = [1, '<select multiple="true">', '</select>'];
var tableWrap = [1, '<table>', '</table>'];
var trWrap = [3, '<table><tbody><tr>', '</tr></tbody></table>'];

var svgWrap = [1, '<svg>', '</svg>'];

var markupWrap = {
  '*': [1, '?<div>', '</div>'],

  'area': [1, '<map>', '</map>'],
  'col': [2, '<table><tbody></tbody><colgroup>', '</colgroup></table>'],
  'legend': [1, '<fieldset>', '</fieldset>'],
  'param': [1, '<object>', '</object>'],
  'tr': [2, '<table><tbody>', '</tbody></table>'],

  'optgroup': selectWrap,
  'option': selectWrap,

  'caption': tableWrap,
  'colgroup': tableWrap,
  'tbody': tableWrap,
  'tfoot': tableWrap,
  'thead': tableWrap,

  'td': trWrap,
  'th': trWrap,

  'circle': svgWrap,
  'defs': svgWrap,
  'ellipse': svgWrap,
  'g': svgWrap,
  'line': svgWrap,
  'linearGradient': svgWrap,
  'path': svgWrap,
  'polygon': svgWrap,
  'polyline': svgWrap,
  'radialGradient': svgWrap,
  'rect': svgWrap,
  'stop': svgWrap,
  'text': svgWrap
};

/**
 * Gets the markup wrap configuration for the supplied `nodeName`.
 *
 * NOTE: This lazily detects which wraps are necessary for the current browser.
 *
 * @param {string} nodeName Lowercase `nodeName`.
 * @return {?array} Markup wrap configuration, if applicable.
 */
function getMarkupWrap(nodeName) {
  ("production" !== "development" ? invariant(!!dummyNode, 'Markup wrapping node not initialized') : invariant(!!dummyNode));
  if (!markupWrap.hasOwnProperty(nodeName)) {
    nodeName = '*';
  }
  if (!shouldWrap.hasOwnProperty(nodeName)) {
    if (nodeName === '*') {
      dummyNode.innerHTML = '<link />';
    } else {
      dummyNode.innerHTML = '<' + nodeName + '></' + nodeName + '>';
    }
    shouldWrap[nodeName] = !dummyNode.firstChild;
  }
  return shouldWrap[nodeName] ? markupWrap[nodeName] : null;
}


module.exports = getMarkupWrap;

},{"./ExecutionEnvironment":22,"./invariant":126}],119:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getNodeForCharacterOffset
 */

"use strict";

/**
 * Given any node return the first leaf node without children.
 *
 * @param {DOMElement|DOMTextNode} node
 * @return {DOMElement|DOMTextNode}
 */
function getLeafNode(node) {
  while (node && node.firstChild) {
    node = node.firstChild;
  }
  return node;
}

/**
 * Get the next sibling within a container. This will walk up the
 * DOM if a node's siblings have been exhausted.
 *
 * @param {DOMElement|DOMTextNode} node
 * @return {?DOMElement|DOMTextNode}
 */
function getSiblingNode(node) {
  while (node) {
    if (node.nextSibling) {
      return node.nextSibling;
    }
    node = node.parentNode;
  }
}

/**
 * Get object describing the nodes which contain characters at offset.
 *
 * @param {DOMElement|DOMTextNode} root
 * @param {number} offset
 * @return {?object}
 */
function getNodeForCharacterOffset(root, offset) {
  var node = getLeafNode(root);
  var nodeStart = 0;
  var nodeEnd = 0;

  while (node) {
    if (node.nodeType == 3) {
      nodeEnd = nodeStart + node.textContent.length;

      if (nodeStart <= offset && nodeEnd >= offset) {
        return {
          node: node,
          offset: offset - nodeStart
        };
      }

      nodeStart = nodeEnd;
    }

    node = getLeafNode(getSiblingNode(node));
  }
}

module.exports = getNodeForCharacterOffset;

},{}],120:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getReactRootElementInContainer
 */

"use strict";

var DOC_NODE_TYPE = 9;

/**
 * @param {DOMElement|DOMDocument} container DOM element that may contain
 *                                           a React component
 * @return {?*} DOM element that may have the reactRoot ID, or null.
 */
function getReactRootElementInContainer(container) {
  if (!container) {
    return null;
  }

  if (container.nodeType === DOC_NODE_TYPE) {
    return container.documentElement;
  } else {
    return container.firstChild;
  }
}

module.exports = getReactRootElementInContainer;

},{}],121:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getTextContentAccessor
 */

"use strict";

var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");

var contentKey = null;

/**
 * Gets the key used to access text content on a DOM node.
 *
 * @return {?string} Key used to access text content.
 * @internal
 */
function getTextContentAccessor() {
  if (!contentKey && ExecutionEnvironment.canUseDOM) {
    // Prefer textContent to innerText because many browsers support both but
    // SVG <text> elements don't support innerText even when <div> does.
    contentKey = 'textContent' in document.documentElement ?
      'textContent' :
      'innerText';
  }
  return contentKey;
}

module.exports = getTextContentAccessor;

},{"./ExecutionEnvironment":22}],122:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getUnboundedScrollPosition
 * @typechecks
 */

"use strict";

/**
 * Gets the scroll position of the supplied element or window.
 *
 * The return values are unbounded, unlike `getScrollPosition`. This means they
 * may be negative or exceed the element boundaries (which is possible using
 * inertial scrolling).
 *
 * @param {DOMWindow|DOMElement} scrollable
 * @return {object} Map with `x` and `y` keys.
 */
function getUnboundedScrollPosition(scrollable) {
  if (scrollable === window) {
    return {
      x: window.pageXOffset || document.documentElement.scrollLeft,
      y: window.pageYOffset || document.documentElement.scrollTop
    };
  }
  return {
    x: scrollable.scrollLeft,
    y: scrollable.scrollTop
  };
}

module.exports = getUnboundedScrollPosition;

},{}],123:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule hyphenate
 * @typechecks
 */

var _uppercasePattern = /([A-Z])/g;

/**
 * Hyphenates a camelcased string, for example:
 *
 *   > hyphenate('backgroundColor')
 *   < "background-color"
 *
 * For CSS style names, use `hyphenateStyleName` instead which works properly
 * with all vendor prefixes, including `ms`.
 *
 * @param {string} string
 * @return {string}
 */
function hyphenate(string) {
  return string.replace(_uppercasePattern, '-$1').toLowerCase();
}

module.exports = hyphenate;

},{}],124:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule hyphenateStyleName
 * @typechecks
 */

"use strict";

var hyphenate = _dereq_("./hyphenate");

var msPattern = /^ms-/;

/**
 * Hyphenates a camelcased CSS property name, for example:
 *
 *   > hyphenateStyleName('backgroundColor')
 *   < "background-color"
 *   > hyphenateStyleName('MozTransition')
 *   < "-moz-transition"
 *   > hyphenateStyleName('msTransition')
 *   < "-ms-transition"
 *
 * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix
 * is converted to `-ms-`.
 *
 * @param {string} string
 * @return {string}
 */
function hyphenateStyleName(string) {
  return hyphenate(string).replace(msPattern, '-ms-');
}

module.exports = hyphenateStyleName;

},{"./hyphenate":123}],125:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule instantiateReactComponent
 * @typechecks static-only
 */

"use strict";

var warning = _dereq_("./warning");

var ReactElement = _dereq_("./ReactElement");
var ReactLegacyElement = _dereq_("./ReactLegacyElement");
var ReactNativeComponent = _dereq_("./ReactNativeComponent");
var ReactEmptyComponent = _dereq_("./ReactEmptyComponent");

/**
 * Given an `element` create an instance that will actually be mounted.
 *
 * @param {object} element
 * @param {*} parentCompositeType The composite type that resolved this.
 * @return {object} A new instance of the element's constructor.
 * @protected
 */
function instantiateReactComponent(element, parentCompositeType) {
  var instance;

  if ("production" !== "development") {
    ("production" !== "development" ? warning(
      element && (typeof element.type === 'function' ||
                     typeof element.type === 'string'),
      'Only functions or strings can be mounted as React components.'
    ) : null);

    // Resolve mock instances
    if (element.type._mockedReactClassConstructor) {
      // If this is a mocked class, we treat the legacy factory as if it was the
      // class constructor for future proofing unit tests. Because this might
      // be mocked as a legacy factory, we ignore any warnings triggerd by
      // this temporary hack.
      ReactLegacyElement._isLegacyCallWarningEnabled = false;
      try {
        instance = new element.type._mockedReactClassConstructor(
          element.props
        );
      } finally {
        ReactLegacyElement._isLegacyCallWarningEnabled = true;
      }

      // If the mock implementation was a legacy factory, then it returns a
      // element. We need to turn this into a real component instance.
      if (ReactElement.isValidElement(instance)) {
        instance = new instance.type(instance.props);
      }

      var render = instance.render;
      if (!render) {
        // For auto-mocked factories, the prototype isn't shimmed and therefore
        // there is no render function on the instance. We replace the whole
        // component with an empty component instance instead.
        element = ReactEmptyComponent.getEmptyComponent();
      } else {
        if (render._isMockFunction && !render._getMockImplementation()) {
          // Auto-mocked components may have a prototype with a mocked render
          // function. For those, we'll need to mock the result of the render
          // since we consider undefined to be invalid results from render.
          render.mockImplementation(
            ReactEmptyComponent.getEmptyComponent
          );
        }
        instance.construct(element);
        return instance;
      }
    }
  }

  // Special case string values
  if (typeof element.type === 'string') {
    instance = ReactNativeComponent.createInstanceForTag(
      element.type,
      element.props,
      parentCompositeType
    );
  } else {
    // Normal case for non-mocks and non-strings
    instance = new element.type(element.props);
  }

  if ("production" !== "development") {
    ("production" !== "development" ? warning(
      typeof instance.construct === 'function' &&
      typeof instance.mountComponent === 'function' &&
      typeof instance.receiveComponent === 'function',
      'Only React Components can be mounted.'
    ) : null);
  }

  // This actually sets up the internal instance. This will become decoupled
  // from the public instance in a future diff.
  instance.construct(element);

  return instance;
}

module.exports = instantiateReactComponent;

},{"./ReactElement":52,"./ReactEmptyComponent":54,"./ReactLegacyElement":61,"./ReactNativeComponent":66,"./warning":145}],126:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule invariant
 */

"use strict";

/**
 * Use invariant() to assert state which your program assumes to be true.
 *
 * Provide sprintf-style format (only %s is supported) and arguments
 * to provide information about what broke and what you were
 * expecting.
 *
 * The invariant message will be stripped in production, but the invariant
 * will remain to ensure logic does not differ in production.
 */

var invariant = function(condition, format, a, b, c, d, e, f) {
  if ("production" !== "development") {
    if (format === undefined) {
      throw new Error('invariant requires an error message argument');
    }
  }

  if (!condition) {
    var error;
    if (format === undefined) {
      error = new Error(
        'Minified exception occurred; use the non-minified dev environment ' +
        'for the full error message and additional helpful warnings.'
      );
    } else {
      var args = [a, b, c, d, e, f];
      var argIndex = 0;
      error = new Error(
        'Invariant Violation: ' +
        format.replace(/%s/g, function() { return args[argIndex++]; })
      );
    }

    error.framesToPop = 1; // we don't care about invariant's own frame
    throw error;
  }
};

module.exports = invariant;

},{}],127:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule isEventSupported
 */

"use strict";

var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");

var useHasFeature;
if (ExecutionEnvironment.canUseDOM) {
  useHasFeature =
    document.implementation &&
    document.implementation.hasFeature &&
    // always returns true in newer browsers as per the standard.
    // @see http://dom.spec.whatwg.org/#dom-domimplementation-hasfeature
    document.implementation.hasFeature('', '') !== true;
}

/**
 * Checks if an event is supported in the current execution environment.
 *
 * NOTE: This will not work correctly for non-generic events such as `change`,
 * `reset`, `load`, `error`, and `select`.
 *
 * Borrows from Modernizr.
 *
 * @param {string} eventNameSuffix Event name, e.g. "click".
 * @param {?boolean} capture Check if the capture phase is supported.
 * @return {boolean} True if the event is supported.
 * @internal
 * @license Modernizr 3.0.0pre (Custom Build) | MIT
 */
function isEventSupported(eventNameSuffix, capture) {
  if (!ExecutionEnvironment.canUseDOM ||
      capture && !('addEventListener' in document)) {
    return false;
  }

  var eventName = 'on' + eventNameSuffix;
  var isSupported = eventName in document;

  if (!isSupported) {
    var element = document.createElement('div');
    element.setAttribute(eventName, 'return;');
    isSupported = typeof element[eventName] === 'function';
  }

  if (!isSupported && useHasFeature && eventNameSuffix === 'wheel') {
    // This is the only way to test support for the `wheel` event in IE9+.
    isSupported = document.implementation.hasFeature('Events.wheel', '3.0');
  }

  return isSupported;
}

module.exports = isEventSupported;

},{"./ExecutionEnvironment":22}],128:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule isNode
 * @typechecks
 */

/**
 * @param {*} object The object to check.
 * @return {boolean} Whether or not the object is a DOM node.
 */
function isNode(object) {
  return !!(object && (
    typeof Node === 'function' ? object instanceof Node :
      typeof object === 'object' &&
      typeof object.nodeType === 'number' &&
      typeof object.nodeName === 'string'
  ));
}

module.exports = isNode;

},{}],129:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule isTextInputElement
 */

"use strict";

/**
 * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary
 */
var supportedInputTypes = {
  'color': true,
  'date': true,
  'datetime': true,
  'datetime-local': true,
  'email': true,
  'month': true,
  'number': true,
  'password': true,
  'range': true,
  'search': true,
  'tel': true,
  'text': true,
  'time': true,
  'url': true,
  'week': true
};

function isTextInputElement(elem) {
  return elem && (
    (elem.nodeName === 'INPUT' && supportedInputTypes[elem.type]) ||
    elem.nodeName === 'TEXTAREA'
  );
}

module.exports = isTextInputElement;

},{}],130:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule isTextNode
 * @typechecks
 */

var isNode = _dereq_("./isNode");

/**
 * @param {*} object The object to check.
 * @return {boolean} Whether or not the object is a DOM text node.
 */
function isTextNode(object) {
  return isNode(object) && object.nodeType == 3;
}

module.exports = isTextNode;

},{"./isNode":128}],131:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule joinClasses
 * @typechecks static-only
 */

"use strict";

/**
 * Combines multiple className strings into one.
 * http://jsperf.com/joinclasses-args-vs-array
 *
 * @param {...?string} classes
 * @return {string}
 */
function joinClasses(className/*, ... */) {
  if (!className) {
    className = '';
  }
  var nextClass;
  var argLength = arguments.length;
  if (argLength > 1) {
    for (var ii = 1; ii < argLength; ii++) {
      nextClass = arguments[ii];
      if (nextClass) {
        className = (className ? className + ' ' : '') + nextClass;
      }
    }
  }
  return className;
}

module.exports = joinClasses;

},{}],132:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule keyMirror
 * @typechecks static-only
 */

"use strict";

var invariant = _dereq_("./invariant");

/**
 * Constructs an enumeration with keys equal to their value.
 *
 * For example:
 *
 *   var COLORS = keyMirror({blue: null, red: null});
 *   var myColor = COLORS.blue;
 *   var isColorValid = !!COLORS[myColor];
 *
 * The last line could not be performed if the values of the generated enum were
 * not equal to their keys.
 *
 *   Input:  {key1: val1, key2: val2}
 *   Output: {key1: key1, key2: key2}
 *
 * @param {object} obj
 * @return {object}
 */
var keyMirror = function(obj) {
  var ret = {};
  var key;
  ("production" !== "development" ? invariant(
    obj instanceof Object && !Array.isArray(obj),
    'keyMirror(...): Argument must be an object.'
  ) : invariant(obj instanceof Object && !Array.isArray(obj)));
  for (key in obj) {
    if (!obj.hasOwnProperty(key)) {
      continue;
    }
    ret[key] = key;
  }
  return ret;
};

module.exports = keyMirror;

},{"./invariant":126}],133:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule keyOf
 */

/**
 * Allows extraction of a minified key. Let's the build system minify keys
 * without loosing the ability to dynamically use key strings as values
 * themselves. Pass in an object with a single key/val pair and it will return
 * you the string key of that single record. Suppose you want to grab the
 * value for a key 'className' inside of an object. Key/val minification may
 * have aliased that key to be 'xa12'. keyOf({className: null}) will return
 * 'xa12' in that case. Resolve keys you want to use once at startup time, then
 * reuse those resolutions.
 */
var keyOf = function(oneKeyObj) {
  var key;
  for (key in oneKeyObj) {
    if (!oneKeyObj.hasOwnProperty(key)) {
      continue;
    }
    return key;
  }
  return null;
};


module.exports = keyOf;

},{}],134:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule mapObject
 */

'use strict';

var hasOwnProperty = Object.prototype.hasOwnProperty;

/**
 * Executes the provided `callback` once for each enumerable own property in the
 * object and constructs a new object from the results. The `callback` is
 * invoked with three arguments:
 *
 *  - the property value
 *  - the property name
 *  - the object being traversed
 *
 * Properties that are added after the call to `mapObject` will not be visited
 * by `callback`. If the values of existing properties are changed, the value
 * passed to `callback` will be the value at the time `mapObject` visits them.
 * Properties that are deleted before being visited are not visited.
 *
 * @grep function objectMap()
 * @grep function objMap()
 *
 * @param {?object} object
 * @param {function} callback
 * @param {*} context
 * @return {?object}
 */
function mapObject(object, callback, context) {
  if (!object) {
    return null;
  }
  var result = {};
  for (var name in object) {
    if (hasOwnProperty.call(object, name)) {
      result[name] = callback.call(context, object[name], name, object);
    }
  }
  return result;
}

module.exports = mapObject;

},{}],135:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule memoizeStringOnly
 * @typechecks static-only
 */

"use strict";

/**
 * Memoizes the return value of a function that accepts one string argument.
 *
 * @param {function} callback
 * @return {function}
 */
function memoizeStringOnly(callback) {
  var cache = {};
  return function(string) {
    if (cache.hasOwnProperty(string)) {
      return cache[string];
    } else {
      return cache[string] = callback.call(this, string);
    }
  };
}

module.exports = memoizeStringOnly;

},{}],136:[function(_dereq_,module,exports){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule monitorCodeUse
 */

"use strict";

var invariant = _dereq_("./invariant");

/**
 * Provides open-source compatible instrumentation for monitoring certain API
 * uses before we're ready to issue a warning or refactor. It accepts an event
 * name which may only contain the characters [a-z0-9_] and an optional data
 * object with further information.
 */

function monitorCodeUse(eventName, data) {
  ("production" !== "development" ? invariant(
    eventName && !/[^a-z0-9_]/.test(eventName),
    'You must provide an eventName using only the characters [a-z0-9_]'
  ) : invariant(eventName && !/[^a-z0-9_]/.test(eventName)));
}

module.exports = monitorCodeUse;

},{"./invariant":126}],137:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule onlyChild
 */
"use strict";

var ReactElement = _dereq_("./ReactElement");

var invariant = _dereq_("./invariant");

/**
 * Returns the first child in a collection of children and verifies that there
 * is only one child in the collection. The current implementation of this
 * function assumes that a single child gets passed without a wrapper, but the
 * purpose of this helper function is to abstract away the particular structure
 * of children.
 *
 * @param {?object} children Child collection structure.
 * @return {ReactComponent} The first and only `ReactComponent` contained in the
 * structure.
 */
function onlyChild(children) {
  ("production" !== "development" ? invariant(
    ReactElement.isValidElement(children),
    'onlyChild must be passed a children with exactly one child.'
  ) : invariant(ReactElement.isValidElement(children)));
  return children;
}

module.exports = onlyChild;

},{"./ReactElement":52,"./invariant":126}],138:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule performance
 * @typechecks
 */

"use strict";

var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");

var performance;

if (ExecutionEnvironment.canUseDOM) {
  performance =
    window.performance ||
    window.msPerformance ||
    window.webkitPerformance;
}

module.exports = performance || {};

},{"./ExecutionEnvironment":22}],139:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule performanceNow
 * @typechecks
 */

var performance = _dereq_("./performance");

/**
 * Detect if we can use `window.performance.now()` and gracefully fallback to
 * `Date.now()` if it doesn't exist. We need to support Firefox < 15 for now
 * because of Facebook's testing infrastructure.
 */
if (!performance || !performance.now) {
  performance = Date;
}

var performanceNow = performance.now.bind(performance);

module.exports = performanceNow;

},{"./performance":138}],140:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule setInnerHTML
 */

"use strict";

var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");

var WHITESPACE_TEST = /^[ \r\n\t\f]/;
var NONVISIBLE_TEST = /<(!--|link|noscript|meta|script|style)[ \r\n\t\f\/>]/;

/**
 * Set the innerHTML property of a node, ensuring that whitespace is preserved
 * even in IE8.
 *
 * @param {DOMElement} node
 * @param {string} html
 * @internal
 */
var setInnerHTML = function(node, html) {
  node.innerHTML = html;
};

if (ExecutionEnvironment.canUseDOM) {
  // IE8: When updating a just created node with innerHTML only leading
  // whitespace is removed. When updating an existing node with innerHTML
  // whitespace in root TextNodes is also collapsed.
  // @see quirksmode.org/bugreports/archives/2004/11/innerhtml_and_t.html

  // Feature detection; only IE8 is known to behave improperly like this.
  var testElement = document.createElement('div');
  testElement.innerHTML = ' ';
  if (testElement.innerHTML === '') {
    setInnerHTML = function(node, html) {
      // Magic theory: IE8 supposedly differentiates between added and updated
      // nodes when processing innerHTML, innerHTML on updated nodes suffers
      // from worse whitespace behavior. Re-adding a node like this triggers
      // the initial and more favorable whitespace behavior.
      // TODO: What to do on a detached node?
      if (node.parentNode) {
        node.parentNode.replaceChild(node, node);
      }

      // We also implement a workaround for non-visible tags disappearing into
      // thin air on IE8, this only happens if there is no visible text
      // in-front of the non-visible tags. Piggyback on the whitespace fix
      // and simply check if any non-visible tags appear in the source.
      if (WHITESPACE_TEST.test(html) ||
          html[0] === '<' && NONVISIBLE_TEST.test(html)) {
        // Recover leading whitespace by temporarily prepending any character.
        // \uFEFF has the potential advantage of being zero-width/invisible.
        node.innerHTML = '\uFEFF' + html;

        // deleteData leaves an empty `TextNode` which offsets the index of all
        // children. Definitely want to avoid this.
        var textNode = node.firstChild;
        if (textNode.data.length === 1) {
          node.removeChild(textNode);
        } else {
          textNode.deleteData(0, 1);
        }
      } else {
        node.innerHTML = html;
      }
    };
  }
}

module.exports = setInnerHTML;

},{"./ExecutionEnvironment":22}],141:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule shallowEqual
 */

"use strict";

/**
 * Performs equality by iterating through keys on an object and returning
 * false when any key has values which are not strictly equal between
 * objA and objB. Returns true when the values of all keys are strictly equal.
 *
 * @return {boolean}
 */
function shallowEqual(objA, objB) {
  if (objA === objB) {
    return true;
  }
  var key;
  // Test for A's keys different from B.
  for (key in objA) {
    if (objA.hasOwnProperty(key) &&
        (!objB.hasOwnProperty(key) || objA[key] !== objB[key])) {
      return false;
    }
  }
  // Test for B's keys missing from A.
  for (key in objB) {
    if (objB.hasOwnProperty(key) && !objA.hasOwnProperty(key)) {
      return false;
    }
  }
  return true;
}

module.exports = shallowEqual;

},{}],142:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule shouldUpdateReactComponent
 * @typechecks static-only
 */

"use strict";

/**
 * Given a `prevElement` and `nextElement`, determines if the existing
 * instance should be updated as opposed to being destroyed or replaced by a new
 * instance. Both arguments are elements. This ensures that this logic can
 * operate on stateless trees without any backing instance.
 *
 * @param {?object} prevElement
 * @param {?object} nextElement
 * @return {boolean} True if the existing instance should be updated.
 * @protected
 */
function shouldUpdateReactComponent(prevElement, nextElement) {
  if (prevElement && nextElement &&
      prevElement.type === nextElement.type &&
      prevElement.key === nextElement.key &&
      prevElement._owner === nextElement._owner) {
    return true;
  }
  return false;
}

module.exports = shouldUpdateReactComponent;

},{}],143:[function(_dereq_,module,exports){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule toArray
 * @typechecks
 */

var invariant = _dereq_("./invariant");

/**
 * Convert array-like objects to arrays.
 *
 * This API assumes the caller knows the contents of the data type. For less
 * well defined inputs use createArrayFrom.
 *
 * @param {object|function|filelist} obj
 * @return {array}
 */
function toArray(obj) {
  var length = obj.length;

  // Some browse builtin objects can report typeof 'function' (e.g. NodeList in
  // old versions of Safari).
  ("production" !== "development" ? invariant(
    !Array.isArray(obj) &&
    (typeof obj === 'object' || typeof obj === 'function'),
    'toArray: Array-like object expected'
  ) : invariant(!Array.isArray(obj) &&
  (typeof obj === 'object' || typeof obj === 'function')));

  ("production" !== "development" ? invariant(
    typeof length === 'number',
    'toArray: Object needs a length property'
  ) : invariant(typeof length === 'number'));

  ("production" !== "development" ? invariant(
    length === 0 ||
    (length - 1) in obj,
    'toArray: Object should have keys for indices'
  ) : invariant(length === 0 ||
  (length - 1) in obj));

  // Old IE doesn't give collections access to hasOwnProperty. Assume inputs
  // without method will throw during the slice call and skip straight to the
  // fallback.
  if (obj.hasOwnProperty) {
    try {
      return Array.prototype.slice.call(obj);
    } catch (e) {
      // IE < 9 does not support Array#slice on collections objects
    }
  }

  // Fall back to copying key by key. This assumes all keys have a value,
  // so will not preserve sparsely populated inputs.
  var ret = Array(length);
  for (var ii = 0; ii < length; ii++) {
    ret[ii] = obj[ii];
  }
  return ret;
}

module.exports = toArray;

},{"./invariant":126}],144:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule traverseAllChildren
 */

"use strict";

var ReactElement = _dereq_("./ReactElement");
var ReactInstanceHandles = _dereq_("./ReactInstanceHandles");

var invariant = _dereq_("./invariant");

var SEPARATOR = ReactInstanceHandles.SEPARATOR;
var SUBSEPARATOR = ':';

/**
 * TODO: Test that:
 * 1. `mapChildren` transforms strings and numbers into `ReactTextComponent`.
 * 2. it('should fail when supplied duplicate key', function() {
 * 3. That a single child and an array with one item have the same key pattern.
 * });
 */

var userProvidedKeyEscaperLookup = {
  '=': '=0',
  '.': '=1',
  ':': '=2'
};

var userProvidedKeyEscapeRegex = /[=.:]/g;

function userProvidedKeyEscaper(match) {
  return userProvidedKeyEscaperLookup[match];
}

/**
 * Generate a key string that identifies a component within a set.
 *
 * @param {*} component A component that could contain a manual key.
 * @param {number} index Index that is used if a manual key is not provided.
 * @return {string}
 */
function getComponentKey(component, index) {
  if (component && component.key != null) {
    // Explicit key
    return wrapUserProvidedKey(component.key);
  }
  // Implicit key determined by the index in the set
  return index.toString(36);
}

/**
 * Escape a component key so that it is safe to use in a reactid.
 *
 * @param {*} key Component key to be escaped.
 * @return {string} An escaped string.
 */
function escapeUserProvidedKey(text) {
  return ('' + text).replace(
    userProvidedKeyEscapeRegex,
    userProvidedKeyEscaper
  );
}

/**
 * Wrap a `key` value explicitly provided by the user to distinguish it from
 * implicitly-generated keys generated by a component's index in its parent.
 *
 * @param {string} key Value of a user-provided `key` attribute
 * @return {string}
 */
function wrapUserProvidedKey(key) {
  return '$' + escapeUserProvidedKey(key);
}

/**
 * @param {?*} children Children tree container.
 * @param {!string} nameSoFar Name of the key path so far.
 * @param {!number} indexSoFar Number of children encountered until this point.
 * @param {!function} callback Callback to invoke with each child found.
 * @param {?*} traverseContext Used to pass information throughout the traversal
 * process.
 * @return {!number} The number of children in this subtree.
 */
var traverseAllChildrenImpl =
  function(children, nameSoFar, indexSoFar, callback, traverseContext) {
    var nextName, nextIndex;
    var subtreeCount = 0;  // Count of children found in the current subtree.
    if (Array.isArray(children)) {
      for (var i = 0; i < children.length; i++) {
        var child = children[i];
        nextName = (
          nameSoFar +
          (nameSoFar ? SUBSEPARATOR : SEPARATOR) +
          getComponentKey(child, i)
        );
        nextIndex = indexSoFar + subtreeCount;
        subtreeCount += traverseAllChildrenImpl(
          child,
          nextName,
          nextIndex,
          callback,
          traverseContext
        );
      }
    } else {
      var type = typeof children;
      var isOnlyChild = nameSoFar === '';
      // If it's the only child, treat the name as if it was wrapped in an array
      // so that it's consistent if the number of children grows
      var storageName =
        isOnlyChild ? SEPARATOR + getComponentKey(children, 0) : nameSoFar;
      if (children == null || type === 'boolean') {
        // All of the above are perceived as null.
        callback(traverseContext, null, storageName, indexSoFar);
        subtreeCount = 1;
      } else if (type === 'string' || type === 'number' ||
                 ReactElement.isValidElement(children)) {
        callback(traverseContext, children, storageName, indexSoFar);
        subtreeCount = 1;
      } else if (type === 'object') {
        ("production" !== "development" ? invariant(
          !children || children.nodeType !== 1,
          'traverseAllChildren(...): Encountered an invalid child; DOM ' +
          'elements are not valid children of React components.'
        ) : invariant(!children || children.nodeType !== 1));
        for (var key in children) {
          if (children.hasOwnProperty(key)) {
            nextName = (
              nameSoFar + (nameSoFar ? SUBSEPARATOR : SEPARATOR) +
              wrapUserProvidedKey(key) + SUBSEPARATOR +
              getComponentKey(children[key], 0)
            );
            nextIndex = indexSoFar + subtreeCount;
            subtreeCount += traverseAllChildrenImpl(
              children[key],
              nextName,
              nextIndex,
              callback,
              traverseContext
            );
          }
        }
      }
    }
    return subtreeCount;
  };

/**
 * Traverses children that are typically specified as `props.children`, but
 * might also be specified through attributes:
 *
 * - `traverseAllChildren(this.props.children, ...)`
 * - `traverseAllChildren(this.props.leftPanelChildren, ...)`
 *
 * The `traverseContext` is an optional argument that is passed through the
 * entire traversal. It can be used to store accumulations or anything else that
 * the callback might find relevant.
 *
 * @param {?*} children Children tree object.
 * @param {!function} callback To invoke upon traversing each child.
 * @param {?*} traverseContext Context for traversal.
 * @return {!number} The number of children in this subtree.
 */
function traverseAllChildren(children, callback, traverseContext) {
  if (children == null) {
    return 0;
  }

  return traverseAllChildrenImpl(children, '', 0, callback, traverseContext);
}

module.exports = traverseAllChildren;

},{"./ReactElement":52,"./ReactInstanceHandles":60,"./invariant":126}],145:[function(_dereq_,module,exports){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule warning
 */

"use strict";

var emptyFunction = _dereq_("./emptyFunction");

/**
 * Similar to invariant but only logs a warning if the condition is not met.
 * This can be used to log issues in development environments in critical
 * paths. Removing the logging code for production environments will keep the
 * same logic and follow the same code paths.
 */

var warning = emptyFunction;

if ("production" !== "development") {
  warning = function(condition, format ) {for (var args=[],$__0=2,$__1=arguments.length;$__0<$__1;$__0++) args.push(arguments[$__0]);
    if (format === undefined) {
      throw new Error(
        '`warning(condition, format, ...args)` requires a warning ' +
        'message argument'
      );
    }

    if (!condition) {
      var argIndex = 0;
      console.warn('Warning: ' + format.replace(/%s/g, function()  {return args[argIndex++];}));
    }
  };
}

module.exports = warning;

},{"./emptyFunction":107}]},{},[1])(1)
});
var CLOSURE_NO_DEPS = true;
var COMPILED = false;
var goog = goog || {};
goog.global = this;
goog.global.CLOSURE_UNCOMPILED_DEFINES;
goog.global.CLOSURE_DEFINES;
goog.isDef = function(val) {
  return val !== void 0;
};
goog.exportPath_ = function(name, opt_object, opt_objectToExportTo) {
  var parts = name.split(".");
  var cur = opt_objectToExportTo || goog.global;
  if (!(parts[0] in cur) && cur.execScript) {
    cur.execScript("var " + parts[0]);
  }
  for (var part;parts.length && (part = parts.shift());) {
    if (!parts.length && goog.isDef(opt_object)) {
      cur[part] = opt_object;
    } else {
      if (cur[part]) {
        cur = cur[part];
      } else {
        cur = cur[part] = {};
      }
    }
  }
};
goog.define = function(name, defaultValue) {
  var value = defaultValue;
  if (!COMPILED) {
    if (goog.global.CLOSURE_UNCOMPILED_DEFINES && Object.prototype.hasOwnProperty.call(goog.global.CLOSURE_UNCOMPILED_DEFINES, name)) {
      value = goog.global.CLOSURE_UNCOMPILED_DEFINES[name];
    } else {
      if (goog.global.CLOSURE_DEFINES && Object.prototype.hasOwnProperty.call(goog.global.CLOSURE_DEFINES, name)) {
        value = goog.global.CLOSURE_DEFINES[name];
      }
    }
  }
  goog.exportPath_(name, value);
};
goog.DEBUG = true;
goog.define("goog.LOCALE", "en");
goog.define("goog.TRUSTED_SITE", true);
goog.define("goog.STRICT_MODE_COMPATIBLE", false);
goog.provide = function(name) {
  if (!COMPILED) {
    if (goog.isProvided_(name)) {
      throw Error('Namespace "' + name + '" already declared.');
    }
    delete goog.implicitNamespaces_[name];
    var namespace = name;
    while (namespace = namespace.substring(0, namespace.lastIndexOf("."))) {
      if (goog.getObjectByName(namespace)) {
        break;
      }
      goog.implicitNamespaces_[namespace] = true;
    }
  }
  goog.exportPath_(name);
};
goog.setTestOnly = function(opt_message) {
  if (COMPILED && !goog.DEBUG) {
    opt_message = opt_message || "";
    throw Error("Importing test-only code into non-debug environment" + (opt_message ? ": " + opt_message : "."));
  }
};
goog.forwardDeclare = function(name) {
};
if (!COMPILED) {
  goog.isProvided_ = function(name) {
    return!goog.implicitNamespaces_[name] && goog.isDefAndNotNull(goog.getObjectByName(name));
  };
  goog.implicitNamespaces_ = {};
}
goog.getObjectByName = function(name, opt_obj) {
  var parts = name.split(".");
  var cur = opt_obj || goog.global;
  for (var part;part = parts.shift();) {
    if (goog.isDefAndNotNull(cur[part])) {
      cur = cur[part];
    } else {
      return null;
    }
  }
  return cur;
};
goog.globalize = function(obj, opt_global) {
  var global = opt_global || goog.global;
  for (var x in obj) {
    global[x] = obj[x];
  }
};
goog.addDependency = function(relPath, provides, requires) {
  if (goog.DEPENDENCIES_ENABLED) {
    var provide, require;
    var path = relPath.replace(/\\/g, "/");
    var deps = goog.dependencies_;
    for (var i = 0;provide = provides[i];i++) {
      deps.nameToPath[provide] = path;
      if (!(path in deps.pathToNames)) {
        deps.pathToNames[path] = {};
      }
      deps.pathToNames[path][provide] = true;
    }
    for (var j = 0;require = requires[j];j++) {
      if (!(path in deps.requires)) {
        deps.requires[path] = {};
      }
      deps.requires[path][require] = true;
    }
  }
};
goog.define("goog.ENABLE_DEBUG_LOADER", true);
goog.require = function(name) {
  if (!COMPILED) {
    if (goog.isProvided_(name)) {
      return;
    }
    if (goog.ENABLE_DEBUG_LOADER) {
      var path = goog.getPathFromDeps_(name);
      if (path) {
        goog.included_[path] = true;
        goog.writeScripts_();
        return;
      }
    }
    var errorMessage = "goog.require could not find: " + name;
    if (goog.global.console) {
      goog.global.console["error"](errorMessage);
    }
    throw Error(errorMessage);
  }
};
goog.basePath = "";
goog.global.CLOSURE_BASE_PATH;
goog.global.CLOSURE_NO_DEPS;
goog.global.CLOSURE_IMPORT_SCRIPT;
goog.nullFunction = function() {
};
goog.identityFunction = function(opt_returnValue, var_args) {
  return opt_returnValue;
};
goog.abstractMethod = function() {
  throw Error("unimplemented abstract method");
};
goog.addSingletonGetter = function(ctor) {
  ctor.getInstance = function() {
    if (ctor.instance_) {
      return ctor.instance_;
    }
    if (goog.DEBUG) {
      goog.instantiatedSingletons_[goog.instantiatedSingletons_.length] = ctor;
    }
    return ctor.instance_ = new ctor;
  };
};
goog.instantiatedSingletons_ = [];
goog.DEPENDENCIES_ENABLED = !COMPILED && goog.ENABLE_DEBUG_LOADER;
if (goog.DEPENDENCIES_ENABLED) {
  goog.included_ = {};
  goog.dependencies_ = {pathToNames:{}, nameToPath:{}, requires:{}, visited:{}, written:{}};
  goog.inHtmlDocument_ = function() {
    var doc = goog.global.document;
    return typeof doc != "undefined" && "write" in doc;
  };
  goog.findBasePath_ = function() {
    if (goog.global.CLOSURE_BASE_PATH) {
      goog.basePath = goog.global.CLOSURE_BASE_PATH;
      return;
    } else {
      if (!goog.inHtmlDocument_()) {
        return;
      }
    }
    var doc = goog.global.document;
    var scripts = doc.getElementsByTagName("script");
    for (var i = scripts.length - 1;i >= 0;--i) {
      var src = scripts[i].src;
      var qmark = src.lastIndexOf("?");
      var l = qmark == -1 ? src.length : qmark;
      if (src.substr(l - 7, 7) == "base.js") {
        goog.basePath = src.substr(0, l - 7);
        return;
      }
    }
  };
  goog.importScript_ = function(src) {
    var importScript = goog.global.CLOSURE_IMPORT_SCRIPT || goog.writeScriptTag_;
    if (!goog.dependencies_.written[src] && importScript(src)) {
      goog.dependencies_.written[src] = true;
    }
  };
  goog.writeScriptTag_ = function(src) {
    if (goog.inHtmlDocument_()) {
      var doc = goog.global.document;
      if (doc.readyState == "complete") {
        var isDeps = /\bdeps.js$/.test(src);
        if (isDeps) {
          return false;
        } else {
          throw Error('Cannot write "' + src + '" after document load');
        }
      }
      doc.write('\x3cscript type\x3d"text/javascript" src\x3d"' + src + '"\x3e\x3c/' + "script\x3e");
      return true;
    } else {
      return false;
    }
  };
  goog.writeScripts_ = function() {
    var scripts = [];
    var seenScript = {};
    var deps = goog.dependencies_;
    function visitNode(path) {
      if (path in deps.written) {
        return;
      }
      if (path in deps.visited) {
        if (!(path in seenScript)) {
          seenScript[path] = true;
          scripts.push(path);
        }
        return;
      }
      deps.visited[path] = true;
      if (path in deps.requires) {
        for (var requireName in deps.requires[path]) {
          if (!goog.isProvided_(requireName)) {
            if (requireName in deps.nameToPath) {
              visitNode(deps.nameToPath[requireName]);
            } else {
              throw Error("Undefined nameToPath for " + requireName);
            }
          }
        }
      }
      if (!(path in seenScript)) {
        seenScript[path] = true;
        scripts.push(path);
      }
    }
    for (var path in goog.included_) {
      if (!deps.written[path]) {
        visitNode(path);
      }
    }
    for (var i = 0;i < scripts.length;i++) {
      if (scripts[i]) {
        goog.importScript_(goog.basePath + scripts[i]);
      } else {
        throw Error("Undefined script input");
      }
    }
  };
  goog.getPathFromDeps_ = function(rule) {
    if (rule in goog.dependencies_.nameToPath) {
      return goog.dependencies_.nameToPath[rule];
    } else {
      return null;
    }
  };
  goog.findBasePath_();
  if (!goog.global.CLOSURE_NO_DEPS) {
    goog.importScript_(goog.basePath + "deps.js");
  }
}
goog.typeOf = function(value) {
  var s = typeof value;
  if (s == "object") {
    if (value) {
      if (value instanceof Array) {
        return "array";
      } else {
        if (value instanceof Object) {
          return s;
        }
      }
      var className = Object.prototype.toString.call((value));
      if (className == "[object Window]") {
        return "object";
      }
      if (className == "[object Array]" || typeof value.length == "number" && typeof value.splice != "undefined" && typeof value.propertyIsEnumerable != "undefined" && !value.propertyIsEnumerable("splice")) {
        return "array";
      }
      if (className == "[object Function]" || typeof value.call != "undefined" && typeof value.propertyIsEnumerable != "undefined" && !value.propertyIsEnumerable("call")) {
        return "function";
      }
    } else {
      return "null";
    }
  } else {
    if (s == "function" && typeof value.call == "undefined") {
      return "object";
    }
  }
  return s;
};
goog.isNull = function(val) {
  return val === null;
};
goog.isDefAndNotNull = function(val) {
  return val != null;
};
goog.isArray = function(val) {
  return goog.typeOf(val) == "array";
};
goog.isArrayLike = function(val) {
  var type = goog.typeOf(val);
  return type == "array" || type == "object" && typeof val.length == "number";
};
goog.isDateLike = function(val) {
  return goog.isObject(val) && typeof val.getFullYear == "function";
};
goog.isString = function(val) {
  return typeof val == "string";
};
goog.isBoolean = function(val) {
  return typeof val == "boolean";
};
goog.isNumber = function(val) {
  return typeof val == "number";
};
goog.isFunction = function(val) {
  return goog.typeOf(val) == "function";
};
goog.isObject = function(val) {
  var type = typeof val;
  return type == "object" && val != null || type == "function";
};
goog.getUid = function(obj) {
  return obj[goog.UID_PROPERTY_] || (obj[goog.UID_PROPERTY_] = ++goog.uidCounter_);
};
goog.hasUid = function(obj) {
  return!!obj[goog.UID_PROPERTY_];
};
goog.removeUid = function(obj) {
  if ("removeAttribute" in obj) {
    obj.removeAttribute(goog.UID_PROPERTY_);
  }
  try {
    delete obj[goog.UID_PROPERTY_];
  } catch (ex) {
  }
};
goog.UID_PROPERTY_ = "closure_uid_" + (Math.random() * 1E9 >>> 0);
goog.uidCounter_ = 0;
goog.getHashCode = goog.getUid;
goog.removeHashCode = goog.removeUid;
goog.cloneObject = function(obj) {
  var type = goog.typeOf(obj);
  if (type == "object" || type == "array") {
    if (obj.clone) {
      return obj.clone();
    }
    var clone = type == "array" ? [] : {};
    for (var key in obj) {
      clone[key] = goog.cloneObject(obj[key]);
    }
    return clone;
  }
  return obj;
};
goog.bindNative_ = function(fn, selfObj, var_args) {
  return(fn.call.apply(fn.bind, arguments));
};
goog.bindJs_ = function(fn, selfObj, var_args) {
  if (!fn) {
    throw new Error;
  }
  if (arguments.length > 2) {
    var boundArgs = Array.prototype.slice.call(arguments, 2);
    return function() {
      var newArgs = Array.prototype.slice.call(arguments);
      Array.prototype.unshift.apply(newArgs, boundArgs);
      return fn.apply(selfObj, newArgs);
    };
  } else {
    return function() {
      return fn.apply(selfObj, arguments);
    };
  }
};
goog.bind = function(fn, selfObj, var_args) {
  if (Function.prototype.bind && Function.prototype.bind.toString().indexOf("native code") != -1) {
    goog.bind = goog.bindNative_;
  } else {
    goog.bind = goog.bindJs_;
  }
  return goog.bind.apply(null, arguments);
};
goog.partial = function(fn, var_args) {
  var args = Array.prototype.slice.call(arguments, 1);
  return function() {
    var newArgs = args.slice();
    newArgs.push.apply(newArgs, arguments);
    return fn.apply(this, newArgs);
  };
};
goog.mixin = function(target, source) {
  for (var x in source) {
    target[x] = source[x];
  }
};
goog.now = goog.TRUSTED_SITE && Date.now || function() {
  return+new Date;
};
goog.globalEval = function(script) {
  if (goog.global.execScript) {
    goog.global.execScript(script, "JavaScript");
  } else {
    if (goog.global.eval) {
      if (goog.evalWorksForGlobals_ == null) {
        goog.global.eval("var _et_ \x3d 1;");
        if (typeof goog.global["_et_"] != "undefined") {
          delete goog.global["_et_"];
          goog.evalWorksForGlobals_ = true;
        } else {
          goog.evalWorksForGlobals_ = false;
        }
      }
      if (goog.evalWorksForGlobals_) {
        goog.global.eval(script);
      } else {
        var doc = goog.global.document;
        var scriptElt = doc.createElement("script");
        scriptElt.type = "text/javascript";
        scriptElt.defer = false;
        scriptElt.appendChild(doc.createTextNode(script));
        doc.body.appendChild(scriptElt);
        doc.body.removeChild(scriptElt);
      }
    } else {
      throw Error("goog.globalEval not available");
    }
  }
};
goog.evalWorksForGlobals_ = null;
goog.cssNameMapping_;
goog.cssNameMappingStyle_;
goog.getCssName = function(className, opt_modifier) {
  var getMapping = function(cssName) {
    return goog.cssNameMapping_[cssName] || cssName;
  };
  var renameByParts = function(cssName) {
    var parts = cssName.split("-");
    var mapped = [];
    for (var i = 0;i < parts.length;i++) {
      mapped.push(getMapping(parts[i]));
    }
    return mapped.join("-");
  };
  var rename;
  if (goog.cssNameMapping_) {
    rename = goog.cssNameMappingStyle_ == "BY_WHOLE" ? getMapping : renameByParts;
  } else {
    rename = function(a) {
      return a;
    };
  }
  if (opt_modifier) {
    return className + "-" + rename(opt_modifier);
  } else {
    return rename(className);
  }
};
goog.setCssNameMapping = function(mapping, opt_style) {
  goog.cssNameMapping_ = mapping;
  goog.cssNameMappingStyle_ = opt_style;
};
goog.global.CLOSURE_CSS_NAME_MAPPING;
if (!COMPILED && goog.global.CLOSURE_CSS_NAME_MAPPING) {
  goog.cssNameMapping_ = goog.global.CLOSURE_CSS_NAME_MAPPING;
}
goog.getMsg = function(str, opt_values) {
  if (opt_values) {
    str = str.replace(/\{\$([^}]+)}/g, function(match, key) {
      return key in opt_values ? opt_values[key] : match;
    });
  }
  return str;
};
goog.getMsgWithFallback = function(a, b) {
  return a;
};
goog.exportSymbol = function(publicPath, object, opt_objectToExportTo) {
  goog.exportPath_(publicPath, object, opt_objectToExportTo);
};
goog.exportProperty = function(object, publicName, symbol) {
  object[publicName] = symbol;
};
goog.inherits = function(childCtor, parentCtor) {
  function tempCtor() {
  }
  tempCtor.prototype = parentCtor.prototype;
  childCtor.superClass_ = parentCtor.prototype;
  childCtor.prototype = new tempCtor;
  childCtor.prototype.constructor = childCtor;
  childCtor.base = function(me, methodName, var_args) {
    var args = Array.prototype.slice.call(arguments, 2);
    return parentCtor.prototype[methodName].apply(me, args);
  };
};
goog.base = function(me, opt_methodName, var_args) {
  var caller = arguments.callee.caller;
  if (goog.STRICT_MODE_COMPATIBLE || goog.DEBUG && !caller) {
    throw Error("arguments.caller not defined.  goog.base() cannot be used " + "with strict mode code. See " + "http://www.ecma-international.org/ecma-262/5.1/#sec-C");
  }
  if (caller.superClass_) {
    return caller.superClass_.constructor.apply(me, Array.prototype.slice.call(arguments, 1));
  }
  var args = Array.prototype.slice.call(arguments, 2);
  var foundCaller = false;
  for (var ctor = me.constructor;ctor;ctor = ctor.superClass_ && ctor.superClass_.constructor) {
    if (ctor.prototype[opt_methodName] === caller) {
      foundCaller = true;
    } else {
      if (foundCaller) {
        return ctor.prototype[opt_methodName].apply(me, args);
      }
    }
  }
  if (me[opt_methodName] === caller) {
    return me.constructor.prototype[opt_methodName].apply(me, args);
  } else {
    throw Error("goog.base called from a method of one name " + "to a method of a different name");
  }
};
goog.scope = function(fn) {
  fn.call(goog.global);
};
if (!COMPILED) {
  goog.global["COMPILED"] = COMPILED;
}
goog.defineClass = function(superClass, def) {
  var constructor = def.constructor;
  var statics = def.statics;
  if (!constructor || constructor == Object.prototype.constructor) {
    constructor = function() {
      throw Error("cannot instantiate an interface (no constructor defined).");
    };
  }
  var cls = goog.defineClass.createSealingConstructor_(constructor, superClass);
  if (superClass) {
    goog.inherits(cls, superClass);
  }
  delete def.constructor;
  delete def.statics;
  goog.defineClass.applyProperties_(cls.prototype, def);
  if (statics != null) {
    if (statics instanceof Function) {
      statics(cls);
    } else {
      goog.defineClass.applyProperties_(cls, statics);
    }
  }
  return cls;
};
goog.defineClass.ClassDescriptor;
goog.define("goog.defineClass.SEAL_CLASS_INSTANCES", goog.DEBUG);
goog.defineClass.createSealingConstructor_ = function(ctr, superClass) {
  if (goog.defineClass.SEAL_CLASS_INSTANCES && Object.seal instanceof Function) {
    if (superClass && superClass.prototype && superClass.prototype[goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_]) {
      return ctr;
    }
    var wrappedCtr = function() {
      var instance = ctr.apply(this, arguments) || this;
      if (this.constructor === wrappedCtr) {
        Object.seal(instance);
      }
      return instance;
    };
    return wrappedCtr;
  }
  return ctr;
};
goog.defineClass.OBJECT_PROTOTYPE_FIELDS_ = ["constructor", "hasOwnProperty", "isPrototypeOf", "propertyIsEnumerable", "toLocaleString", "toString", "valueOf"];
goog.defineClass.applyProperties_ = function(target, source) {
  var key;
  for (key in source) {
    if (Object.prototype.hasOwnProperty.call(source, key)) {
      target[key] = source[key];
    }
  }
  for (var i = 0;i < goog.defineClass.OBJECT_PROTOTYPE_FIELDS_.length;i++) {
    key = goog.defineClass.OBJECT_PROTOTYPE_FIELDS_[i];
    if (Object.prototype.hasOwnProperty.call(source, key)) {
      target[key] = source[key];
    }
  }
};
goog.tagUnsealableClass = function(ctr) {
  if (!COMPILED && goog.defineClass.SEAL_CLASS_INSTANCES) {
    ctr.prototype[goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_] = true;
  }
};
goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_ = "goog_defineClass_legacy_unsealable";
goog.provide("goog.string");
goog.provide("goog.string.Unicode");
goog.define("goog.string.DETECT_DOUBLE_ESCAPING", false);
goog.string.Unicode = {NBSP:"\u00a0"};
goog.string.startsWith = function(str, prefix) {
  return str.lastIndexOf(prefix, 0) == 0;
};
goog.string.endsWith = function(str, suffix) {
  var l = str.length - suffix.length;
  return l >= 0 && str.indexOf(suffix, l) == l;
};
goog.string.caseInsensitiveStartsWith = function(str, prefix) {
  return goog.string.caseInsensitiveCompare(prefix, str.substr(0, prefix.length)) == 0;
};
goog.string.caseInsensitiveEndsWith = function(str, suffix) {
  return goog.string.caseInsensitiveCompare(suffix, str.substr(str.length - suffix.length, suffix.length)) == 0;
};
goog.string.caseInsensitiveEquals = function(str1, str2) {
  return str1.toLowerCase() == str2.toLowerCase();
};
goog.string.subs = function(str, var_args) {
  var splitParts = str.split("%s");
  var returnString = "";
  var subsArguments = Array.prototype.slice.call(arguments, 1);
  while (subsArguments.length && splitParts.length > 1) {
    returnString += splitParts.shift() + subsArguments.shift();
  }
  return returnString + splitParts.join("%s");
};
goog.string.collapseWhitespace = function(str) {
  return str.replace(/[\s\xa0]+/g, " ").replace(/^\s+|\s+$/g, "");
};
goog.string.isEmpty = function(str) {
  return/^[\s\xa0]*$/.test(str);
};
goog.string.isEmptySafe = function(str) {
  return goog.string.isEmpty(goog.string.makeSafe(str));
};
goog.string.isBreakingWhitespace = function(str) {
  return!/[^\t\n\r ]/.test(str);
};
goog.string.isAlpha = function(str) {
  return!/[^a-zA-Z]/.test(str);
};
goog.string.isNumeric = function(str) {
  return!/[^0-9]/.test(str);
};
goog.string.isAlphaNumeric = function(str) {
  return!/[^a-zA-Z0-9]/.test(str);
};
goog.string.isSpace = function(ch) {
  return ch == " ";
};
goog.string.isUnicodeChar = function(ch) {
  return ch.length == 1 && ch >= " " && ch <= "~" || ch >= "\u0080" && ch <= "\ufffd";
};
goog.string.stripNewlines = function(str) {
  return str.replace(/(\r\n|\r|\n)+/g, " ");
};
goog.string.canonicalizeNewlines = function(str) {
  return str.replace(/(\r\n|\r|\n)/g, "\n");
};
goog.string.normalizeWhitespace = function(str) {
  return str.replace(/\xa0|\s/g, " ");
};
goog.string.normalizeSpaces = function(str) {
  return str.replace(/\xa0|[ \t]+/g, " ");
};
goog.string.collapseBreakingSpaces = function(str) {
  return str.replace(/[\t\r\n ]+/g, " ").replace(/^[\t\r\n ]+|[\t\r\n ]+$/g, "");
};
goog.string.trim = function(str) {
  return str.replace(/^[\s\xa0]+|[\s\xa0]+$/g, "");
};
goog.string.trimLeft = function(str) {
  return str.replace(/^[\s\xa0]+/, "");
};
goog.string.trimRight = function(str) {
  return str.replace(/[\s\xa0]+$/, "");
};
goog.string.caseInsensitiveCompare = function(str1, str2) {
  var test1 = String(str1).toLowerCase();
  var test2 = String(str2).toLowerCase();
  if (test1 < test2) {
    return-1;
  } else {
    if (test1 == test2) {
      return 0;
    } else {
      return 1;
    }
  }
};
goog.string.numerateCompareRegExp_ = /(\.\d+)|(\d+)|(\D+)/g;
goog.string.numerateCompare = function(str1, str2) {
  if (str1 == str2) {
    return 0;
  }
  if (!str1) {
    return-1;
  }
  if (!str2) {
    return 1;
  }
  var tokens1 = str1.toLowerCase().match(goog.string.numerateCompareRegExp_);
  var tokens2 = str2.toLowerCase().match(goog.string.numerateCompareRegExp_);
  var count = Math.min(tokens1.length, tokens2.length);
  for (var i = 0;i < count;i++) {
    var a = tokens1[i];
    var b = tokens2[i];
    if (a != b) {
      var num1 = parseInt(a, 10);
      if (!isNaN(num1)) {
        var num2 = parseInt(b, 10);
        if (!isNaN(num2) && num1 - num2) {
          return num1 - num2;
        }
      }
      return a < b ? -1 : 1;
    }
  }
  if (tokens1.length != tokens2.length) {
    return tokens1.length - tokens2.length;
  }
  return str1 < str2 ? -1 : 1;
};
goog.string.urlEncode = function(str) {
  return encodeURIComponent(String(str));
};
goog.string.urlDecode = function(str) {
  return decodeURIComponent(str.replace(/\+/g, " "));
};
goog.string.newLineToBr = function(str, opt_xml) {
  return str.replace(/(\r\n|\r|\n)/g, opt_xml ? "\x3cbr /\x3e" : "\x3cbr\x3e");
};
goog.string.htmlEscape = function(str, opt_isLikelyToContainHtmlChars) {
  if (opt_isLikelyToContainHtmlChars) {
    str = str.replace(goog.string.AMP_RE_, "\x26amp;").replace(goog.string.LT_RE_, "\x26lt;").replace(goog.string.GT_RE_, "\x26gt;").replace(goog.string.QUOT_RE_, "\x26quot;").replace(goog.string.SINGLE_QUOTE_RE_, "\x26#39;").replace(goog.string.NULL_RE_, "\x26#0;");
    if (goog.string.DETECT_DOUBLE_ESCAPING) {
      str = str.replace(goog.string.E_RE_, "\x26#101;");
    }
    return str;
  } else {
    if (!goog.string.ALL_RE_.test(str)) {
      return str;
    }
    if (str.indexOf("\x26") != -1) {
      str = str.replace(goog.string.AMP_RE_, "\x26amp;");
    }
    if (str.indexOf("\x3c") != -1) {
      str = str.replace(goog.string.LT_RE_, "\x26lt;");
    }
    if (str.indexOf("\x3e") != -1) {
      str = str.replace(goog.string.GT_RE_, "\x26gt;");
    }
    if (str.indexOf('"') != -1) {
      str = str.replace(goog.string.QUOT_RE_, "\x26quot;");
    }
    if (str.indexOf("'") != -1) {
      str = str.replace(goog.string.SINGLE_QUOTE_RE_, "\x26#39;");
    }
    if (str.indexOf("\x00") != -1) {
      str = str.replace(goog.string.NULL_RE_, "\x26#0;");
    }
    if (goog.string.DETECT_DOUBLE_ESCAPING && str.indexOf("e") != -1) {
      str = str.replace(goog.string.E_RE_, "\x26#101;");
    }
    return str;
  }
};
goog.string.AMP_RE_ = /&/g;
goog.string.LT_RE_ = /</g;
goog.string.GT_RE_ = />/g;
goog.string.QUOT_RE_ = /"/g;
goog.string.SINGLE_QUOTE_RE_ = /'/g;
goog.string.NULL_RE_ = /\x00/g;
goog.string.E_RE_ = /e/g;
goog.string.ALL_RE_ = goog.string.DETECT_DOUBLE_ESCAPING ? /[\x00&<>"'e]/ : /[\x00&<>"']/;
goog.string.unescapeEntities = function(str) {
  if (goog.string.contains(str, "\x26")) {
    if ("document" in goog.global) {
      return goog.string.unescapeEntitiesUsingDom_(str);
    } else {
      return goog.string.unescapePureXmlEntities_(str);
    }
  }
  return str;
};
goog.string.unescapeEntitiesWithDocument = function(str, document) {
  if (goog.string.contains(str, "\x26")) {
    return goog.string.unescapeEntitiesUsingDom_(str, document);
  }
  return str;
};
goog.string.unescapeEntitiesUsingDom_ = function(str, opt_document) {
  var seen = {"\x26amp;":"\x26", "\x26lt;":"\x3c", "\x26gt;":"\x3e", "\x26quot;":'"'};
  var div;
  if (opt_document) {
    div = opt_document.createElement("div");
  } else {
    div = goog.global.document.createElement("div");
  }
  return str.replace(goog.string.HTML_ENTITY_PATTERN_, function(s, entity) {
    var value = seen[s];
    if (value) {
      return value;
    }
    if (entity.charAt(0) == "#") {
      var n = Number("0" + entity.substr(1));
      if (!isNaN(n)) {
        value = String.fromCharCode(n);
      }
    }
    if (!value) {
      div.innerHTML = s + " ";
      value = div.firstChild.nodeValue.slice(0, -1);
    }
    return seen[s] = value;
  });
};
goog.string.unescapePureXmlEntities_ = function(str) {
  return str.replace(/&([^;]+);/g, function(s, entity) {
    switch(entity) {
      case "amp":
        return "\x26";
      case "lt":
        return "\x3c";
      case "gt":
        return "\x3e";
      case "quot":
        return'"';
      default:
        if (entity.charAt(0) == "#") {
          var n = Number("0" + entity.substr(1));
          if (!isNaN(n)) {
            return String.fromCharCode(n);
          }
        }
        return s;
    }
  });
};
goog.string.HTML_ENTITY_PATTERN_ = /&([^;\s<&]+);?/g;
goog.string.whitespaceEscape = function(str, opt_xml) {
  return goog.string.newLineToBr(str.replace(/  /g, " \x26#160;"), opt_xml);
};
goog.string.preserveSpaces = function(str) {
  return str.replace(/(^|[\n ]) /g, "$1" + goog.string.Unicode.NBSP);
};
goog.string.stripQuotes = function(str, quoteChars) {
  var length = quoteChars.length;
  for (var i = 0;i < length;i++) {
    var quoteChar = length == 1 ? quoteChars : quoteChars.charAt(i);
    if (str.charAt(0) == quoteChar && str.charAt(str.length - 1) == quoteChar) {
      return str.substring(1, str.length - 1);
    }
  }
  return str;
};
goog.string.truncate = function(str, chars, opt_protectEscapedCharacters) {
  if (opt_protectEscapedCharacters) {
    str = goog.string.unescapeEntities(str);
  }
  if (str.length > chars) {
    str = str.substring(0, chars - 3) + "...";
  }
  if (opt_protectEscapedCharacters) {
    str = goog.string.htmlEscape(str);
  }
  return str;
};
goog.string.truncateMiddle = function(str, chars, opt_protectEscapedCharacters, opt_trailingChars) {
  if (opt_protectEscapedCharacters) {
    str = goog.string.unescapeEntities(str);
  }
  if (opt_trailingChars && str.length > chars) {
    if (opt_trailingChars > chars) {
      opt_trailingChars = chars;
    }
    var endPoint = str.length - opt_trailingChars;
    var startPoint = chars - opt_trailingChars;
    str = str.substring(0, startPoint) + "..." + str.substring(endPoint);
  } else {
    if (str.length > chars) {
      var half = Math.floor(chars / 2);
      var endPos = str.length - half;
      half += chars % 2;
      str = str.substring(0, half) + "..." + str.substring(endPos);
    }
  }
  if (opt_protectEscapedCharacters) {
    str = goog.string.htmlEscape(str);
  }
  return str;
};
goog.string.specialEscapeChars_ = {"\x00":"\\0", "\b":"\\b", "\f":"\\f", "\n":"\\n", "\r":"\\r", "\t":"\\t", "\x0B":"\\x0B", '"':'\\"', "\\":"\\\\"};
goog.string.jsEscapeCache_ = {"'":"\\'"};
goog.string.quote = function(s) {
  s = String(s);
  if (s.quote) {
    return s.quote();
  } else {
    var sb = ['"'];
    for (var i = 0;i < s.length;i++) {
      var ch = s.charAt(i);
      var cc = ch.charCodeAt(0);
      sb[i + 1] = goog.string.specialEscapeChars_[ch] || (cc > 31 && cc < 127 ? ch : goog.string.escapeChar(ch));
    }
    sb.push('"');
    return sb.join("");
  }
};
goog.string.escapeString = function(str) {
  var sb = [];
  for (var i = 0;i < str.length;i++) {
    sb[i] = goog.string.escapeChar(str.charAt(i));
  }
  return sb.join("");
};
goog.string.escapeChar = function(c) {
  if (c in goog.string.jsEscapeCache_) {
    return goog.string.jsEscapeCache_[c];
  }
  if (c in goog.string.specialEscapeChars_) {
    return goog.string.jsEscapeCache_[c] = goog.string.specialEscapeChars_[c];
  }
  var rv = c;
  var cc = c.charCodeAt(0);
  if (cc > 31 && cc < 127) {
    rv = c;
  } else {
    if (cc < 256) {
      rv = "\\x";
      if (cc < 16 || cc > 256) {
        rv += "0";
      }
    } else {
      rv = "\\u";
      if (cc < 4096) {
        rv += "0";
      }
    }
    rv += cc.toString(16).toUpperCase();
  }
  return goog.string.jsEscapeCache_[c] = rv;
};
goog.string.toMap = function(s) {
  var rv = {};
  for (var i = 0;i < s.length;i++) {
    rv[s.charAt(i)] = true;
  }
  return rv;
};
goog.string.contains = function(str, subString) {
  return str.indexOf(subString) != -1;
};
goog.string.caseInsensitiveContains = function(str, subString) {
  return goog.string.contains(str.toLowerCase(), subString.toLowerCase());
};
goog.string.countOf = function(s, ss) {
  return s && ss ? s.split(ss).length - 1 : 0;
};
goog.string.removeAt = function(s, index, stringLength) {
  var resultStr = s;
  if (index >= 0 && index < s.length && stringLength > 0) {
    resultStr = s.substr(0, index) + s.substr(index + stringLength, s.length - index - stringLength);
  }
  return resultStr;
};
goog.string.remove = function(s, ss) {
  var re = new RegExp(goog.string.regExpEscape(ss), "");
  return s.replace(re, "");
};
goog.string.removeAll = function(s, ss) {
  var re = new RegExp(goog.string.regExpEscape(ss), "g");
  return s.replace(re, "");
};
goog.string.regExpEscape = function(s) {
  return String(s).replace(/([-()\[\]{}+?*.$\^|,:#<!\\])/g, "\\$1").replace(/\x08/g, "\\x08");
};
goog.string.repeat = function(string, length) {
  return(new Array(length + 1)).join(string);
};
goog.string.padNumber = function(num, length, opt_precision) {
  var s = goog.isDef(opt_precision) ? num.toFixed(opt_precision) : String(num);
  var index = s.indexOf(".");
  if (index == -1) {
    index = s.length;
  }
  return goog.string.repeat("0", Math.max(0, length - index)) + s;
};
goog.string.makeSafe = function(obj) {
  return obj == null ? "" : String(obj);
};
goog.string.buildString = function(var_args) {
  return Array.prototype.join.call(arguments, "");
};
goog.string.getRandomString = function() {
  var x = 2147483648;
  return Math.floor(Math.random() * x).toString(36) + Math.abs(Math.floor(Math.random() * x) ^ goog.now()).toString(36);
};
goog.string.compareVersions = function(version1, version2) {
  var order = 0;
  var v1Subs = goog.string.trim(String(version1)).split(".");
  var v2Subs = goog.string.trim(String(version2)).split(".");
  var subCount = Math.max(v1Subs.length, v2Subs.length);
  for (var subIdx = 0;order == 0 && subIdx < subCount;subIdx++) {
    var v1Sub = v1Subs[subIdx] || "";
    var v2Sub = v2Subs[subIdx] || "";
    var v1CompParser = new RegExp("(\\d*)(\\D*)", "g");
    var v2CompParser = new RegExp("(\\d*)(\\D*)", "g");
    do {
      var v1Comp = v1CompParser.exec(v1Sub) || ["", "", ""];
      var v2Comp = v2CompParser.exec(v2Sub) || ["", "", ""];
      if (v1Comp[0].length == 0 && v2Comp[0].length == 0) {
        break;
      }
      var v1CompNum = v1Comp[1].length == 0 ? 0 : parseInt(v1Comp[1], 10);
      var v2CompNum = v2Comp[1].length == 0 ? 0 : parseInt(v2Comp[1], 10);
      order = goog.string.compareElements_(v1CompNum, v2CompNum) || goog.string.compareElements_(v1Comp[2].length == 0, v2Comp[2].length == 0) || goog.string.compareElements_(v1Comp[2], v2Comp[2]);
    } while (order == 0);
  }
  return order;
};
goog.string.compareElements_ = function(left, right) {
  if (left < right) {
    return-1;
  } else {
    if (left > right) {
      return 1;
    }
  }
  return 0;
};
goog.string.HASHCODE_MAX_ = 4294967296;
goog.string.hashCode = function(str) {
  var result = 0;
  for (var i = 0;i < str.length;++i) {
    result = 31 * result + str.charCodeAt(i);
    result %= goog.string.HASHCODE_MAX_;
  }
  return result;
};
goog.string.uniqueStringCounter_ = Math.random() * 2147483648 | 0;
goog.string.createUniqueString = function() {
  return "goog_" + goog.string.uniqueStringCounter_++;
};
goog.string.toNumber = function(str) {
  var num = Number(str);
  if (num == 0 && goog.string.isEmpty(str)) {
    return NaN;
  }
  return num;
};
goog.string.isLowerCamelCase = function(str) {
  return/^[a-z]+([A-Z][a-z]*)*$/.test(str);
};
goog.string.isUpperCamelCase = function(str) {
  return/^([A-Z][a-z]*)+$/.test(str);
};
goog.string.toCamelCase = function(str) {
  return String(str).replace(/\-([a-z])/g, function(all, match) {
    return match.toUpperCase();
  });
};
goog.string.toSelectorCase = function(str) {
  return String(str).replace(/([A-Z])/g, "-$1").toLowerCase();
};
goog.string.toTitleCase = function(str, opt_delimiters) {
  var delimiters = goog.isString(opt_delimiters) ? goog.string.regExpEscape(opt_delimiters) : "\\s";
  delimiters = delimiters ? "|[" + delimiters + "]+" : "";
  var regexp = new RegExp("(^" + delimiters + ")([a-z])", "g");
  return str.replace(regexp, function(all, p1, p2) {
    return p1 + p2.toUpperCase();
  });
};
goog.string.parseInt = function(value) {
  if (isFinite(value)) {
    value = String(value);
  }
  if (goog.isString(value)) {
    return/^\s*-?0x/i.test(value) ? parseInt(value, 16) : parseInt(value, 10);
  }
  return NaN;
};
goog.string.splitLimit = function(str, separator, limit) {
  var parts = str.split(separator);
  var returnVal = [];
  while (limit > 0 && parts.length) {
    returnVal.push(parts.shift());
    limit--;
  }
  if (parts.length) {
    returnVal.push(parts.join(separator));
  }
  return returnVal;
};
goog.provide("goog.object");
goog.object.forEach = function(obj, f, opt_obj) {
  for (var key in obj) {
    f.call(opt_obj, obj[key], key, obj);
  }
};
goog.object.filter = function(obj, f, opt_obj) {
  var res = {};
  for (var key in obj) {
    if (f.call(opt_obj, obj[key], key, obj)) {
      res[key] = obj[key];
    }
  }
  return res;
};
goog.object.map = function(obj, f, opt_obj) {
  var res = {};
  for (var key in obj) {
    res[key] = f.call(opt_obj, obj[key], key, obj);
  }
  return res;
};
goog.object.some = function(obj, f, opt_obj) {
  for (var key in obj) {
    if (f.call(opt_obj, obj[key], key, obj)) {
      return true;
    }
  }
  return false;
};
goog.object.every = function(obj, f, opt_obj) {
  for (var key in obj) {
    if (!f.call(opt_obj, obj[key], key, obj)) {
      return false;
    }
  }
  return true;
};
goog.object.getCount = function(obj) {
  var rv = 0;
  for (var key in obj) {
    rv++;
  }
  return rv;
};
goog.object.getAnyKey = function(obj) {
  for (var key in obj) {
    return key;
  }
};
goog.object.getAnyValue = function(obj) {
  for (var key in obj) {
    return obj[key];
  }
};
goog.object.contains = function(obj, val) {
  return goog.object.containsValue(obj, val);
};
goog.object.getValues = function(obj) {
  var res = [];
  var i = 0;
  for (var key in obj) {
    res[i++] = obj[key];
  }
  return res;
};
goog.object.getKeys = function(obj) {
  var res = [];
  var i = 0;
  for (var key in obj) {
    res[i++] = key;
  }
  return res;
};
goog.object.getValueByKeys = function(obj, var_args) {
  var isArrayLike = goog.isArrayLike(var_args);
  var keys = isArrayLike ? var_args : arguments;
  for (var i = isArrayLike ? 0 : 1;i < keys.length;i++) {
    obj = obj[keys[i]];
    if (!goog.isDef(obj)) {
      break;
    }
  }
  return obj;
};
goog.object.containsKey = function(obj, key) {
  return key in obj;
};
goog.object.containsValue = function(obj, val) {
  for (var key in obj) {
    if (obj[key] == val) {
      return true;
    }
  }
  return false;
};
goog.object.findKey = function(obj, f, opt_this) {
  for (var key in obj) {
    if (f.call(opt_this, obj[key], key, obj)) {
      return key;
    }
  }
  return undefined;
};
goog.object.findValue = function(obj, f, opt_this) {
  var key = goog.object.findKey(obj, f, opt_this);
  return key && obj[key];
};
goog.object.isEmpty = function(obj) {
  for (var key in obj) {
    return false;
  }
  return true;
};
goog.object.clear = function(obj) {
  for (var i in obj) {
    delete obj[i];
  }
};
goog.object.remove = function(obj, key) {
  var rv;
  if (rv = key in obj) {
    delete obj[key];
  }
  return rv;
};
goog.object.add = function(obj, key, val) {
  if (key in obj) {
    throw Error('The object already contains the key "' + key + '"');
  }
  goog.object.set(obj, key, val);
};
goog.object.get = function(obj, key, opt_val) {
  if (key in obj) {
    return obj[key];
  }
  return opt_val;
};
goog.object.set = function(obj, key, value) {
  obj[key] = value;
};
goog.object.setIfUndefined = function(obj, key, value) {
  return key in obj ? obj[key] : obj[key] = value;
};
goog.object.clone = function(obj) {
  var res = {};
  for (var key in obj) {
    res[key] = obj[key];
  }
  return res;
};
goog.object.unsafeClone = function(obj) {
  var type = goog.typeOf(obj);
  if (type == "object" || type == "array") {
    if (obj.clone) {
      return obj.clone();
    }
    var clone = type == "array" ? [] : {};
    for (var key in obj) {
      clone[key] = goog.object.unsafeClone(obj[key]);
    }
    return clone;
  }
  return obj;
};
goog.object.transpose = function(obj) {
  var transposed = {};
  for (var key in obj) {
    transposed[obj[key]] = key;
  }
  return transposed;
};
goog.object.PROTOTYPE_FIELDS_ = ["constructor", "hasOwnProperty", "isPrototypeOf", "propertyIsEnumerable", "toLocaleString", "toString", "valueOf"];
goog.object.extend = function(target, var_args) {
  var key, source;
  for (var i = 1;i < arguments.length;i++) {
    source = arguments[i];
    for (key in source) {
      target[key] = source[key];
    }
    for (var j = 0;j < goog.object.PROTOTYPE_FIELDS_.length;j++) {
      key = goog.object.PROTOTYPE_FIELDS_[j];
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }
};
goog.object.create = function(var_args) {
  var argLength = arguments.length;
  if (argLength == 1 && goog.isArray(arguments[0])) {
    return goog.object.create.apply(null, arguments[0]);
  }
  if (argLength % 2) {
    throw Error("Uneven number of arguments");
  }
  var rv = {};
  for (var i = 0;i < argLength;i += 2) {
    rv[arguments[i]] = arguments[i + 1];
  }
  return rv;
};
goog.object.createSet = function(var_args) {
  var argLength = arguments.length;
  if (argLength == 1 && goog.isArray(arguments[0])) {
    return goog.object.createSet.apply(null, arguments[0]);
  }
  var rv = {};
  for (var i = 0;i < argLength;i++) {
    rv[arguments[i]] = true;
  }
  return rv;
};
goog.object.createImmutableView = function(obj) {
  var result = obj;
  if (Object.isFrozen && !Object.isFrozen(obj)) {
    result = Object.create(obj);
    Object.freeze(result);
  }
  return result;
};
goog.object.isImmutableView = function(obj) {
  return!!Object.isFrozen && Object.isFrozen(obj);
};
goog.provide("goog.string.StringBuffer");
goog.string.StringBuffer = function(opt_a1, var_args) {
  if (opt_a1 != null) {
    this.append.apply(this, arguments);
  }
};
goog.string.StringBuffer.prototype.buffer_ = "";
goog.string.StringBuffer.prototype.set = function(s) {
  this.buffer_ = "" + s;
};
goog.string.StringBuffer.prototype.append = function(a1, opt_a2, var_args) {
  this.buffer_ += a1;
  if (opt_a2 != null) {
    for (var i = 1;i < arguments.length;i++) {
      this.buffer_ += arguments[i];
    }
  }
  return this;
};
goog.string.StringBuffer.prototype.clear = function() {
  this.buffer_ = "";
};
goog.string.StringBuffer.prototype.getLength = function() {
  return this.buffer_.length;
};
goog.string.StringBuffer.prototype.toString = function() {
  return this.buffer_;
};
goog.provide("goog.debug.Error");
goog.debug.Error = function(opt_msg) {
  if (Error.captureStackTrace) {
    Error.captureStackTrace(this, goog.debug.Error);
  } else {
    var stack = (new Error).stack;
    if (stack) {
      this.stack = stack;
    }
  }
  if (opt_msg) {
    this.message = String(opt_msg);
  }
};
goog.inherits(goog.debug.Error, Error);
goog.debug.Error.prototype.name = "CustomError";
goog.provide("goog.dom.NodeType");
goog.dom.NodeType = {ELEMENT:1, ATTRIBUTE:2, TEXT:3, CDATA_SECTION:4, ENTITY_REFERENCE:5, ENTITY:6, PROCESSING_INSTRUCTION:7, COMMENT:8, DOCUMENT:9, DOCUMENT_TYPE:10, DOCUMENT_FRAGMENT:11, NOTATION:12};
goog.provide("goog.asserts");
goog.provide("goog.asserts.AssertionError");
goog.require("goog.debug.Error");
goog.require("goog.dom.NodeType");
goog.require("goog.string");
goog.define("goog.asserts.ENABLE_ASSERTS", goog.DEBUG);
goog.asserts.AssertionError = function(messagePattern, messageArgs) {
  messageArgs.unshift(messagePattern);
  goog.debug.Error.call(this, goog.string.subs.apply(null, messageArgs));
  messageArgs.shift();
  this.messagePattern = messagePattern;
};
goog.inherits(goog.asserts.AssertionError, goog.debug.Error);
goog.asserts.AssertionError.prototype.name = "AssertionError";
goog.asserts.DEFAULT_ERROR_HANDLER = function(e) {
  throw e;
};
goog.asserts.errorHandler_ = goog.asserts.DEFAULT_ERROR_HANDLER;
goog.asserts.doAssertFailure_ = function(defaultMessage, defaultArgs, givenMessage, givenArgs) {
  var message = "Assertion failed";
  if (givenMessage) {
    message += ": " + givenMessage;
    var args = givenArgs;
  } else {
    if (defaultMessage) {
      message += ": " + defaultMessage;
      args = defaultArgs;
    }
  }
  var e = new goog.asserts.AssertionError("" + message, args || []);
  goog.asserts.errorHandler_(e);
};
goog.asserts.setErrorHandler = function(errorHandler) {
  if (goog.asserts.ENABLE_ASSERTS) {
    goog.asserts.errorHandler_ = errorHandler;
  }
};
goog.asserts.assert = function(condition, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !condition) {
    goog.asserts.doAssertFailure_("", null, opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return condition;
};
goog.asserts.fail = function(opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS) {
    goog.asserts.errorHandler_(new goog.asserts.AssertionError("Failure" + (opt_message ? ": " + opt_message : ""), Array.prototype.slice.call(arguments, 1)));
  }
};
goog.asserts.assertNumber = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isNumber(value)) {
    goog.asserts.doAssertFailure_("Expected number but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertString = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isString(value)) {
    goog.asserts.doAssertFailure_("Expected string but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertFunction = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isFunction(value)) {
    goog.asserts.doAssertFailure_("Expected function but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertObject = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isObject(value)) {
    goog.asserts.doAssertFailure_("Expected object but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertArray = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isArray(value)) {
    goog.asserts.doAssertFailure_("Expected array but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertBoolean = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isBoolean(value)) {
    goog.asserts.doAssertFailure_("Expected boolean but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertElement = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && (!goog.isObject(value) || value.nodeType != goog.dom.NodeType.ELEMENT)) {
    goog.asserts.doAssertFailure_("Expected Element but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertInstanceof = function(value, type, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !(value instanceof type)) {
    goog.asserts.doAssertFailure_("instanceof check failed.", null, opt_message, Array.prototype.slice.call(arguments, 3));
  }
  return value;
};
goog.asserts.assertObjectPrototypeIsIntact = function() {
  for (var key in Object.prototype) {
    goog.asserts.fail(key + " should not be enumerable in Object.prototype.");
  }
};
goog.provide("goog.array");
goog.provide("goog.array.ArrayLike");
goog.require("goog.asserts");
goog.define("goog.NATIVE_ARRAY_PROTOTYPES", goog.TRUSTED_SITE);
goog.define("goog.array.ASSUME_NATIVE_FUNCTIONS", false);
goog.array.ArrayLike;
goog.array.peek = function(array) {
  return array[array.length - 1];
};
goog.array.last = goog.array.peek;
goog.array.ARRAY_PROTOTYPE_ = Array.prototype;
goog.array.indexOf = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.indexOf) ? function(arr, obj, opt_fromIndex) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.indexOf.call(arr, obj, opt_fromIndex);
} : function(arr, obj, opt_fromIndex) {
  var fromIndex = opt_fromIndex == null ? 0 : opt_fromIndex < 0 ? Math.max(0, arr.length + opt_fromIndex) : opt_fromIndex;
  if (goog.isString(arr)) {
    if (!goog.isString(obj) || obj.length != 1) {
      return-1;
    }
    return arr.indexOf(obj, fromIndex);
  }
  for (var i = fromIndex;i < arr.length;i++) {
    if (i in arr && arr[i] === obj) {
      return i;
    }
  }
  return-1;
};
goog.array.lastIndexOf = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.lastIndexOf) ? function(arr, obj, opt_fromIndex) {
  goog.asserts.assert(arr.length != null);
  var fromIndex = opt_fromIndex == null ? arr.length - 1 : opt_fromIndex;
  return goog.array.ARRAY_PROTOTYPE_.lastIndexOf.call(arr, obj, fromIndex);
} : function(arr, obj, opt_fromIndex) {
  var fromIndex = opt_fromIndex == null ? arr.length - 1 : opt_fromIndex;
  if (fromIndex < 0) {
    fromIndex = Math.max(0, arr.length + fromIndex);
  }
  if (goog.isString(arr)) {
    if (!goog.isString(obj) || obj.length != 1) {
      return-1;
    }
    return arr.lastIndexOf(obj, fromIndex);
  }
  for (var i = fromIndex;i >= 0;i--) {
    if (i in arr && arr[i] === obj) {
      return i;
    }
  }
  return-1;
};
goog.array.forEach = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.forEach) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  goog.array.ARRAY_PROTOTYPE_.forEach.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2) {
      f.call(opt_obj, arr2[i], i, arr);
    }
  }
};
goog.array.forEachRight = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = l - 1;i >= 0;--i) {
    if (i in arr2) {
      f.call(opt_obj, arr2[i], i, arr);
    }
  }
};
goog.array.filter = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.filter) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.filter.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var res = [];
  var resLength = 0;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2) {
      var val = arr2[i];
      if (f.call(opt_obj, val, i, arr)) {
        res[resLength++] = val;
      }
    }
  }
  return res;
};
goog.array.map = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.map) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.map.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var res = new Array(l);
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2) {
      res[i] = f.call(opt_obj, arr2[i], i, arr);
    }
  }
  return res;
};
goog.array.reduce = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.reduce) ? function(arr, f, val, opt_obj) {
  goog.asserts.assert(arr.length != null);
  if (opt_obj) {
    f = goog.bind(f, opt_obj);
  }
  return goog.array.ARRAY_PROTOTYPE_.reduce.call(arr, f, val);
} : function(arr, f, val, opt_obj) {
  var rval = val;
  goog.array.forEach(arr, function(val, index) {
    rval = f.call(opt_obj, rval, val, index, arr);
  });
  return rval;
};
goog.array.reduceRight = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.reduceRight) ? function(arr, f, val, opt_obj) {
  goog.asserts.assert(arr.length != null);
  if (opt_obj) {
    f = goog.bind(f, opt_obj);
  }
  return goog.array.ARRAY_PROTOTYPE_.reduceRight.call(arr, f, val);
} : function(arr, f, val, opt_obj) {
  var rval = val;
  goog.array.forEachRight(arr, function(val, index) {
    rval = f.call(opt_obj, rval, val, index, arr);
  });
  return rval;
};
goog.array.some = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.some) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.some.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return true;
    }
  }
  return false;
};
goog.array.every = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.every) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.every.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2 && !f.call(opt_obj, arr2[i], i, arr)) {
      return false;
    }
  }
  return true;
};
goog.array.count = function(arr, f, opt_obj) {
  var count = 0;
  goog.array.forEach(arr, function(element, index, arr) {
    if (f.call(opt_obj, element, index, arr)) {
      ++count;
    }
  }, opt_obj);
  return count;
};
goog.array.find = function(arr, f, opt_obj) {
  var i = goog.array.findIndex(arr, f, opt_obj);
  return i < 0 ? null : goog.isString(arr) ? arr.charAt(i) : arr[i];
};
goog.array.findIndex = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return i;
    }
  }
  return-1;
};
goog.array.findRight = function(arr, f, opt_obj) {
  var i = goog.array.findIndexRight(arr, f, opt_obj);
  return i < 0 ? null : goog.isString(arr) ? arr.charAt(i) : arr[i];
};
goog.array.findIndexRight = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = l - 1;i >= 0;i--) {
    if (i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return i;
    }
  }
  return-1;
};
goog.array.contains = function(arr, obj) {
  return goog.array.indexOf(arr, obj) >= 0;
};
goog.array.isEmpty = function(arr) {
  return arr.length == 0;
};
goog.array.clear = function(arr) {
  if (!goog.isArray(arr)) {
    for (var i = arr.length - 1;i >= 0;i--) {
      delete arr[i];
    }
  }
  arr.length = 0;
};
goog.array.insert = function(arr, obj) {
  if (!goog.array.contains(arr, obj)) {
    arr.push(obj);
  }
};
goog.array.insertAt = function(arr, obj, opt_i) {
  goog.array.splice(arr, opt_i, 0, obj);
};
goog.array.insertArrayAt = function(arr, elementsToAdd, opt_i) {
  goog.partial(goog.array.splice, arr, opt_i, 0).apply(null, elementsToAdd);
};
goog.array.insertBefore = function(arr, obj, opt_obj2) {
  var i;
  if (arguments.length == 2 || (i = goog.array.indexOf(arr, opt_obj2)) < 0) {
    arr.push(obj);
  } else {
    goog.array.insertAt(arr, obj, i);
  }
};
goog.array.remove = function(arr, obj) {
  var i = goog.array.indexOf(arr, obj);
  var rv;
  if (rv = i >= 0) {
    goog.array.removeAt(arr, i);
  }
  return rv;
};
goog.array.removeAt = function(arr, i) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.splice.call(arr, i, 1).length == 1;
};
goog.array.removeIf = function(arr, f, opt_obj) {
  var i = goog.array.findIndex(arr, f, opt_obj);
  if (i >= 0) {
    goog.array.removeAt(arr, i);
    return true;
  }
  return false;
};
goog.array.concat = function(var_args) {
  return goog.array.ARRAY_PROTOTYPE_.concat.apply(goog.array.ARRAY_PROTOTYPE_, arguments);
};
goog.array.join = function(var_args) {
  return goog.array.ARRAY_PROTOTYPE_.concat.apply(goog.array.ARRAY_PROTOTYPE_, arguments);
};
goog.array.toArray = function(object) {
  var length = object.length;
  if (length > 0) {
    var rv = new Array(length);
    for (var i = 0;i < length;i++) {
      rv[i] = object[i];
    }
    return rv;
  }
  return[];
};
goog.array.clone = goog.array.toArray;
goog.array.extend = function(arr1, var_args) {
  for (var i = 1;i < arguments.length;i++) {
    var arr2 = arguments[i];
    var isArrayLike;
    if (goog.isArray(arr2) || (isArrayLike = goog.isArrayLike(arr2)) && Object.prototype.hasOwnProperty.call(arr2, "callee")) {
      arr1.push.apply(arr1, arr2);
    } else {
      if (isArrayLike) {
        var len1 = arr1.length;
        var len2 = arr2.length;
        for (var j = 0;j < len2;j++) {
          arr1[len1 + j] = arr2[j];
        }
      } else {
        arr1.push(arr2);
      }
    }
  }
};
goog.array.splice = function(arr, index, howMany, var_args) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.splice.apply(arr, goog.array.slice(arguments, 1));
};
goog.array.slice = function(arr, start, opt_end) {
  goog.asserts.assert(arr.length != null);
  if (arguments.length <= 2) {
    return goog.array.ARRAY_PROTOTYPE_.slice.call(arr, start);
  } else {
    return goog.array.ARRAY_PROTOTYPE_.slice.call(arr, start, opt_end);
  }
};
goog.array.removeDuplicates = function(arr, opt_rv, opt_hashFn) {
  var returnArray = opt_rv || arr;
  var defaultHashFn = function(item) {
    return goog.isObject(current) ? "o" + goog.getUid(current) : (typeof current).charAt(0) + current;
  };
  var hashFn = opt_hashFn || defaultHashFn;
  var seen = {}, cursorInsert = 0, cursorRead = 0;
  while (cursorRead < arr.length) {
    var current = arr[cursorRead++];
    var key = hashFn(current);
    if (!Object.prototype.hasOwnProperty.call(seen, key)) {
      seen[key] = true;
      returnArray[cursorInsert++] = current;
    }
  }
  returnArray.length = cursorInsert;
};
goog.array.binarySearch = function(arr, target, opt_compareFn) {
  return goog.array.binarySearch_(arr, opt_compareFn || goog.array.defaultCompare, false, target);
};
goog.array.binarySelect = function(arr, evaluator, opt_obj) {
  return goog.array.binarySearch_(arr, evaluator, true, undefined, opt_obj);
};
goog.array.binarySearch_ = function(arr, compareFn, isEvaluator, opt_target, opt_selfObj) {
  var left = 0;
  var right = arr.length;
  var found;
  while (left < right) {
    var middle = left + right >> 1;
    var compareResult;
    if (isEvaluator) {
      compareResult = compareFn.call(opt_selfObj, arr[middle], middle, arr);
    } else {
      compareResult = compareFn(opt_target, arr[middle]);
    }
    if (compareResult > 0) {
      left = middle + 1;
    } else {
      right = middle;
      found = !compareResult;
    }
  }
  return found ? left : ~left;
};
goog.array.sort = function(arr, opt_compareFn) {
  arr.sort(opt_compareFn || goog.array.defaultCompare);
};
goog.array.stableSort = function(arr, opt_compareFn) {
  for (var i = 0;i < arr.length;i++) {
    arr[i] = {index:i, value:arr[i]};
  }
  var valueCompareFn = opt_compareFn || goog.array.defaultCompare;
  function stableCompareFn(obj1, obj2) {
    return valueCompareFn(obj1.value, obj2.value) || obj1.index - obj2.index;
  }
  goog.array.sort(arr, stableCompareFn);
  for (var i = 0;i < arr.length;i++) {
    arr[i] = arr[i].value;
  }
};
goog.array.sortObjectsByKey = function(arr, key, opt_compareFn) {
  var compare = opt_compareFn || goog.array.defaultCompare;
  goog.array.sort(arr, function(a, b) {
    return compare(a[key], b[key]);
  });
};
goog.array.isSorted = function(arr, opt_compareFn, opt_strict) {
  var compare = opt_compareFn || goog.array.defaultCompare;
  for (var i = 1;i < arr.length;i++) {
    var compareResult = compare(arr[i - 1], arr[i]);
    if (compareResult > 0 || compareResult == 0 && opt_strict) {
      return false;
    }
  }
  return true;
};
goog.array.equals = function(arr1, arr2, opt_equalsFn) {
  if (!goog.isArrayLike(arr1) || !goog.isArrayLike(arr2) || arr1.length != arr2.length) {
    return false;
  }
  var l = arr1.length;
  var equalsFn = opt_equalsFn || goog.array.defaultCompareEquality;
  for (var i = 0;i < l;i++) {
    if (!equalsFn(arr1[i], arr2[i])) {
      return false;
    }
  }
  return true;
};
goog.array.compare3 = function(arr1, arr2, opt_compareFn) {
  var compare = opt_compareFn || goog.array.defaultCompare;
  var l = Math.min(arr1.length, arr2.length);
  for (var i = 0;i < l;i++) {
    var result = compare(arr1[i], arr2[i]);
    if (result != 0) {
      return result;
    }
  }
  return goog.array.defaultCompare(arr1.length, arr2.length);
};
goog.array.defaultCompare = function(a, b) {
  return a > b ? 1 : a < b ? -1 : 0;
};
goog.array.defaultCompareEquality = function(a, b) {
  return a === b;
};
goog.array.binaryInsert = function(array, value, opt_compareFn) {
  var index = goog.array.binarySearch(array, value, opt_compareFn);
  if (index < 0) {
    goog.array.insertAt(array, value, -(index + 1));
    return true;
  }
  return false;
};
goog.array.binaryRemove = function(array, value, opt_compareFn) {
  var index = goog.array.binarySearch(array, value, opt_compareFn);
  return index >= 0 ? goog.array.removeAt(array, index) : false;
};
goog.array.bucket = function(array, sorter, opt_obj) {
  var buckets = {};
  for (var i = 0;i < array.length;i++) {
    var value = array[i];
    var key = sorter.call(opt_obj, value, i, array);
    if (goog.isDef(key)) {
      var bucket = buckets[key] || (buckets[key] = []);
      bucket.push(value);
    }
  }
  return buckets;
};
goog.array.toObject = function(arr, keyFunc, opt_obj) {
  var ret = {};
  goog.array.forEach(arr, function(element, index) {
    ret[keyFunc.call(opt_obj, element, index, arr)] = element;
  });
  return ret;
};
goog.array.range = function(startOrEnd, opt_end, opt_step) {
  var array = [];
  var start = 0;
  var end = startOrEnd;
  var step = opt_step || 1;
  if (opt_end !== undefined) {
    start = startOrEnd;
    end = opt_end;
  }
  if (step * (end - start) < 0) {
    return[];
  }
  if (step > 0) {
    for (var i = start;i < end;i += step) {
      array.push(i);
    }
  } else {
    for (var i = start;i > end;i += step) {
      array.push(i);
    }
  }
  return array;
};
goog.array.repeat = function(value, n) {
  var array = [];
  for (var i = 0;i < n;i++) {
    array[i] = value;
  }
  return array;
};
goog.array.flatten = function(var_args) {
  var result = [];
  for (var i = 0;i < arguments.length;i++) {
    var element = arguments[i];
    if (goog.isArray(element)) {
      result.push.apply(result, goog.array.flatten.apply(null, element));
    } else {
      result.push(element);
    }
  }
  return result;
};
goog.array.rotate = function(array, n) {
  goog.asserts.assert(array.length != null);
  if (array.length) {
    n %= array.length;
    if (n > 0) {
      goog.array.ARRAY_PROTOTYPE_.unshift.apply(array, array.splice(-n, n));
    } else {
      if (n < 0) {
        goog.array.ARRAY_PROTOTYPE_.push.apply(array, array.splice(0, -n));
      }
    }
  }
  return array;
};
goog.array.moveItem = function(arr, fromIndex, toIndex) {
  goog.asserts.assert(fromIndex >= 0 && fromIndex < arr.length);
  goog.asserts.assert(toIndex >= 0 && toIndex < arr.length);
  var removedItems = goog.array.ARRAY_PROTOTYPE_.splice.call(arr, fromIndex, 1);
  goog.array.ARRAY_PROTOTYPE_.splice.call(arr, toIndex, 0, removedItems[0]);
};
goog.array.zip = function(var_args) {
  if (!arguments.length) {
    return[];
  }
  var result = [];
  for (var i = 0;true;i++) {
    var value = [];
    for (var j = 0;j < arguments.length;j++) {
      var arr = arguments[j];
      if (i >= arr.length) {
        return result;
      }
      value.push(arr[i]);
    }
    result.push(value);
  }
};
goog.array.shuffle = function(arr, opt_randFn) {
  var randFn = opt_randFn || Math.random;
  for (var i = arr.length - 1;i > 0;i--) {
    var j = Math.floor(randFn() * (i + 1));
    var tmp = arr[i];
    arr[i] = arr[j];
    arr[j] = tmp;
  }
};
goog.provide("cljs.core");
goog.require("goog.string.StringBuffer");
goog.require("goog.array");
goog.require("goog.object");
goog.require("goog.string");
cljs.core._STAR_clojurescript_version_STAR_ = "0.0-3211";
cljs.core._STAR_unchecked_if_STAR_ = false;
cljs.core._STAR_target_STAR_ = "default";
if (typeof cljs.core._STAR_print_fn_STAR_ !== "undefined") {
} else {
  cljs.core._STAR_print_fn_STAR_ = function cljs$core$_STAR_print_fn_STAR_(_) {
    throw new Error("No *print-fn* fn set for evaluation environment");
  };
}
cljs.core.set_print_fn_BANG_ = function cljs$core$set_print_fn_BANG_(f) {
  return cljs.core._STAR_print_fn_STAR_ = f;
};
cljs.core._STAR_flush_on_newline_STAR_ = true;
cljs.core._STAR_print_newline_STAR_ = true;
cljs.core._STAR_print_readably_STAR_ = true;
cljs.core._STAR_print_meta_STAR_ = false;
cljs.core._STAR_print_dup_STAR_ = false;
cljs.core._STAR_print_length_STAR_ = null;
cljs.core._STAR_print_level_STAR_ = null;
if (typeof cljs.core._STAR_loaded_libs_STAR_ !== "undefined") {
} else {
  cljs.core._STAR_loaded_libs_STAR_ = null;
}
cljs.core.pr_opts = function cljs$core$pr_opts() {
  return new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "flush-on-newline", "flush-on-newline", -151457939), cljs.core._STAR_flush_on_newline_STAR_, new cljs.core.Keyword(null, "readably", "readably", 1129599760), cljs.core._STAR_print_readably_STAR_, new cljs.core.Keyword(null, "meta", "meta", 1499536964), cljs.core._STAR_print_meta_STAR_, new cljs.core.Keyword(null, "dup", "dup", 556298533), cljs.core._STAR_print_dup_STAR_, new cljs.core.Keyword(null, "print-length", "print-length", 
  1931866356), cljs.core._STAR_print_length_STAR_], null);
};
cljs.core.enable_console_print_BANG_ = function cljs$core$enable_console_print_BANG_() {
  cljs.core._STAR_print_newline_STAR_ = false;
  return cljs.core._STAR_print_fn_STAR_ = function() {
    var G__15762__delegate = function(args) {
      return console.log.apply(console, function() {
        var G__15761 = args;
        return cljs.core.into_array.cljs$core$IFn$_invoke$arity$1 ? cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(G__15761) : cljs.core.into_array.call(null, G__15761);
      }());
    };
    var G__15762 = function(var_args) {
      var args = null;
      if (arguments.length > 0) {
        var G__15763__i = 0, G__15763__a = new Array(arguments.length - 0);
        while (G__15763__i < G__15763__a.length) {
          G__15763__a[G__15763__i] = arguments[G__15763__i + 0];
          ++G__15763__i;
        }
        args = new cljs.core.IndexedSeq(G__15763__a, 0);
      }
      return G__15762__delegate.call(this, args);
    };
    G__15762.cljs$lang$maxFixedArity = 0;
    G__15762.cljs$lang$applyTo = function(arglist__15764) {
      var args = cljs.core.seq(arglist__15764);
      return G__15762__delegate(args);
    };
    G__15762.cljs$core$IFn$_invoke$arity$variadic = G__15762__delegate;
    return G__15762;
  }();
};
cljs.core.truth_ = function cljs$core$truth_(x) {
  return x != null && x !== false;
};
cljs.core.not_native = null;
cljs.core.identical_QMARK_ = function cljs$core$identical_QMARK_(x, y) {
  return x === y;
};
cljs.core.nil_QMARK_ = function cljs$core$nil_QMARK_(x) {
  return x == null;
};
cljs.core.array_QMARK_ = function cljs$core$array_QMARK_(x) {
  if (cljs.core._STAR_target_STAR_ === "nodejs") {
    return Array.isArray(x);
  } else {
    return x instanceof Array;
  }
};
cljs.core.number_QMARK_ = function cljs$core$number_QMARK_(n) {
  return typeof n === "number";
};
cljs.core.not = function cljs$core$not(x) {
  if (cljs.core.truth_(x)) {
    return false;
  } else {
    return true;
  }
};
cljs.core.some_QMARK_ = function cljs$core$some_QMARK_(x) {
  return!(x == null);
};
cljs.core.object_QMARK_ = function cljs$core$object_QMARK_(x) {
  if (!(x == null)) {
    return x.constructor === Object;
  } else {
    return false;
  }
};
cljs.core.string_QMARK_ = function cljs$core$string_QMARK_(x) {
  var G__15766 = x;
  return goog.isString(G__15766);
};
cljs.core.native_satisfies_QMARK_ = function cljs$core$native_satisfies_QMARK_(p, x) {
  var x__$1 = x == null ? null : x;
  if (p[function() {
    var G__15768 = x__$1;
    return goog.typeOf(G__15768);
  }()]) {
    return true;
  } else {
    if (p["_"]) {
      return true;
    } else {
      return false;
    }
  }
};
cljs.core.is_proto_ = function cljs$core$is_proto_(x) {
  return x.constructor.prototype === x;
};
cljs.core._STAR_main_cli_fn_STAR_ = null;
cljs.core.type = function cljs$core$type(x) {
  if (x == null) {
    return null;
  } else {
    return x.constructor;
  }
};
cljs.core.missing_protocol = function cljs$core$missing_protocol(proto, obj) {
  var ty = cljs.core.type(obj);
  var ty__$1 = cljs.core.truth_(function() {
    var and__4323__auto__ = ty;
    if (cljs.core.truth_(and__4323__auto__)) {
      return ty.cljs$lang$type;
    } else {
      return and__4323__auto__;
    }
  }()) ? ty.cljs$lang$ctorStr : function() {
    var G__15770 = obj;
    return goog.typeOf(G__15770);
  }();
  return new Error(["No protocol method ", proto, " defined for type ", ty__$1, ": ", obj].join(""));
};
cljs.core.type__GT_str = function cljs$core$type__GT_str(ty) {
  var temp__4124__auto__ = ty.cljs$lang$ctorStr;
  if (cljs.core.truth_(temp__4124__auto__)) {
    var s = temp__4124__auto__;
    return s;
  } else {
    return[cljs.core.str(ty)].join("");
  }
};
cljs.core.load_file = function cljs$core$load_file(file) {
  if (cljs.core.truth_(COMPILED)) {
    return null;
  } else {
    return goog.nodeGlobalRequire(file);
  }
};
if (typeof Symbol !== "undefined" && function() {
  var G__15772 = Symbol;
  return goog.typeOf(G__15772);
}() === "function") {
  cljs.core.ITER_SYMBOL = Symbol.iterator;
} else {
  cljs.core.ITER_SYMBOL = "@@iterator";
}
cljs.core.make_array = function cljs$core$make_array() {
  var G__15774 = arguments.length;
  switch(G__15774) {
    case 1:
      return cljs.core.make_array.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.make_array.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.make_array.cljs$core$IFn$_invoke$arity$1 = function(size) {
  return new Array(size);
};
cljs.core.make_array.cljs$core$IFn$_invoke$arity$2 = function(type, size) {
  return new Array(size);
};
cljs.core.make_array.cljs$lang$maxFixedArity = 2;
cljs.core.aclone = function cljs$core$aclone(arr) {
  var len = arr.length;
  var new_arr = new Array(len);
  var n__5220__auto___15776 = len;
  var i_15777 = 0;
  while (true) {
    if (i_15777 < n__5220__auto___15776) {
      new_arr[i_15777] = arr[i_15777];
      var G__15778 = i_15777 + 1;
      i_15777 = G__15778;
      continue;
    } else {
    }
    break;
  }
  return new_arr;
};
cljs.core.array = function cljs$core$array(var_args) {
  var a = new Array(arguments.length);
  var i = 0;
  while (true) {
    if (i < a.length) {
      a[i] = arguments[i];
      var G__15779 = i + 1;
      i = G__15779;
      continue;
    } else {
      return a;
    }
    break;
  }
};
cljs.core.aget = function cljs$core$aget() {
  var G__15784 = arguments.length;
  switch(G__15784) {
    case 2:
      return cljs.core.aget.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5386__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core.aget.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5386__auto__);
  }
};
cljs.core.aget.cljs$core$IFn$_invoke$arity$2 = function(array, i) {
  return array[i];
};
cljs.core.aget.cljs$core$IFn$_invoke$arity$variadic = function(array, i, idxs) {
  var G__15785 = cljs.core.aget;
  var G__15786 = array[i];
  var G__15787 = idxs;
  return cljs.core.apply.cljs$core$IFn$_invoke$arity$3 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$3(G__15785, G__15786, G__15787) : cljs.core.apply.call(null, G__15785, G__15786, G__15787);
};
cljs.core.aget.cljs$lang$applyTo = function(seq15780) {
  var G__15781 = cljs.core.first(seq15780);
  var seq15780__$1 = cljs.core.next(seq15780);
  var G__15782 = cljs.core.first(seq15780__$1);
  var seq15780__$2 = cljs.core.next(seq15780__$1);
  return cljs.core.aget.cljs$core$IFn$_invoke$arity$variadic(G__15781, G__15782, seq15780__$2);
};
cljs.core.aget.cljs$lang$maxFixedArity = 2;
cljs.core.aset = function cljs$core$aset() {
  var G__15794 = arguments.length;
  switch(G__15794) {
    case 3:
      return cljs.core.aset.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      var argseq__5386__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 3), 0);
      return cljs.core.aset.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__5386__auto__);
  }
};
cljs.core.aset.cljs$core$IFn$_invoke$arity$3 = function(array, i, val) {
  return array[i] = val;
};
cljs.core.aset.cljs$core$IFn$_invoke$arity$variadic = function(array, idx, idx2, idxv) {
  var G__15795 = cljs.core.aset;
  var G__15796 = array[idx];
  var G__15797 = idx2;
  var G__15798 = idxv;
  return cljs.core.apply.cljs$core$IFn$_invoke$arity$4 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$4(G__15795, G__15796, G__15797, G__15798) : cljs.core.apply.call(null, G__15795, G__15796, G__15797, G__15798);
};
cljs.core.aset.cljs$lang$applyTo = function(seq15789) {
  var G__15790 = cljs.core.first(seq15789);
  var seq15789__$1 = cljs.core.next(seq15789);
  var G__15791 = cljs.core.first(seq15789__$1);
  var seq15789__$2 = cljs.core.next(seq15789__$1);
  var G__15792 = cljs.core.first(seq15789__$2);
  var seq15789__$3 = cljs.core.next(seq15789__$2);
  return cljs.core.aset.cljs$core$IFn$_invoke$arity$variadic(G__15790, G__15791, G__15792, seq15789__$3);
};
cljs.core.aset.cljs$lang$maxFixedArity = 3;
cljs.core.alength = function cljs$core$alength(array) {
  return array.length;
};
cljs.core.into_array = function cljs$core$into_array() {
  var G__15801 = arguments.length;
  switch(G__15801) {
    case 1:
      return cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.into_array.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.into_array.cljs$core$IFn$_invoke$arity$1 = function(aseq) {
  return cljs.core.into_array.cljs$core$IFn$_invoke$arity$2(null, aseq);
};
cljs.core.into_array.cljs$core$IFn$_invoke$arity$2 = function(type, aseq) {
  var G__15802 = function(a, x) {
    a.push(x);
    return a;
  };
  var G__15803 = [];
  var G__15804 = aseq;
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3 ? cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(G__15802, G__15803, G__15804) : cljs.core.reduce.call(null, G__15802, G__15803, G__15804);
};
cljs.core.into_array.cljs$lang$maxFixedArity = 2;
cljs.core.js_invoke = function cljs$core$js_invoke() {
  var argseq__5375__auto__ = 2 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0) : null;
  return cljs.core.js_invoke.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5375__auto__);
};
cljs.core.js_invoke.cljs$core$IFn$_invoke$arity$variadic = function(obj, s, args) {
  return obj[s].apply(obj, cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(args));
};
cljs.core.js_invoke.cljs$lang$maxFixedArity = 2;
cljs.core.js_invoke.cljs$lang$applyTo = function(seq15806) {
  var G__15807 = cljs.core.first(seq15806);
  var seq15806__$1 = cljs.core.next(seq15806);
  var G__15808 = cljs.core.first(seq15806__$1);
  var seq15806__$2 = cljs.core.next(seq15806__$1);
  return cljs.core.js_invoke.cljs$core$IFn$_invoke$arity$variadic(G__15807, G__15808, seq15806__$2);
};
cljs.core.Fn = function() {
  var obj15810 = {};
  return obj15810;
}();
cljs.core.IFn = function() {
  var obj15812 = {};
  return obj15812;
}();
cljs.core._invoke = function cljs$core$_invoke() {
  var G__15814 = arguments.length;
  switch(G__15814) {
    case 1:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    case 5:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    case 6:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$6(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]);
      break;
    case 7:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$7(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6]);
      break;
    case 8:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$8(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7]);
      break;
    case 9:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$9(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8]);
      break;
    case 10:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$10(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9]);
      break;
    case 11:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$11(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10]);
      break;
    case 12:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$12(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11]);
      break;
    case 13:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$13(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11], arguments[12]);
      break;
    case 14:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$14(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11], arguments[12], arguments[13]);
      break;
    case 15:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$15(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11], arguments[12], arguments[13], arguments[14]);
      break;
    case 16:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$16(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11], arguments[12], arguments[13], arguments[14], arguments[15]);
      break;
    case 17:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$17(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11], arguments[12], arguments[13], arguments[14], arguments[15], arguments[16]);
      break;
    case 18:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$18(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11], arguments[12], arguments[13], arguments[14], arguments[15], arguments[16], arguments[17]);
      break;
    case 19:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$19(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11], arguments[12], arguments[13], arguments[14], arguments[15], arguments[16], arguments[17], arguments[18]);
      break;
    case 20:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$20(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11], arguments[12], arguments[13], arguments[14], arguments[15], arguments[16], arguments[17], arguments[18], arguments[19]);
      break;
    case 21:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$21(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11], arguments[12], arguments[13], arguments[14], arguments[15], arguments[16], arguments[17], arguments[18], arguments[19], arguments[20]);
      break;
    case 22:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$22(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11], arguments[12], arguments[13], arguments[14], arguments[15], arguments[16], arguments[17], arguments[18], arguments[19], arguments[20], arguments[21]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$1 = function(this$) {
  if (function() {
    var and__4323__auto__ = this$;
    if (and__4323__auto__) {
      return this$.cljs$core$IFn$_invoke$arity$1;
    } else {
      return and__4323__auto__;
    }
  }()) {
    return this$.cljs$core$IFn$_invoke$arity$1(this$);
  } else {
    var x__4971__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4335__auto__ = cljs.core._invoke[function() {
        var G__15816 = x__4971__auto__;
        return goog.typeOf(G__15816);
      }()];
      if (or__4335__auto__) {
        return or__4335__auto__;
      } else {
        var or__4335__auto____$1 = cljs.core._invoke["_"];
        if (or__4335__auto____$1) {
          return or__4335__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IFn.-invoke", this$);
        }
      }
    }().call(null, this$);
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$2 = function(this$, a) {
  if (function() {
    var and__4323__auto__ = this$;
    if (and__4323__auto__) {
      return this$.cljs$core$IFn$_invoke$arity$2;
    } else {
      return and__4323__auto__;
    }
  }()) {
    return this$.cljs$core$IFn$_invoke$arity$2(this$, a);
  } else {
    var x__4971__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4335__auto__ = cljs.core._invoke[function() {
        var G__15818 = x__4971__auto__;
        return goog.typeOf(G__15818);
      }()];
      if (or__4335__auto__) {
        return or__4335__auto__;
      } else {
        var or__4335__auto____$1 = cljs.core._invoke["_"];
        if (or__4335__auto____$1) {
          return or__4335__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IFn.-invoke", this$);
        }
      }
    }().call(null, this$, a);
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$3 = function(this$, a, b) {
  if (function() {
    var and__4323__auto__ = this$;
    if (and__4323__auto__) {
      return this$.cljs$core$IFn$_invoke$arity$3;
    } else {
      return and__4323__auto__;
    }
  }()) {
    return this$.cljs$core$IFn$_invoke$arity$3(this$, a, b);
  } else {
    var x__4971__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4335__auto__ = cljs.core._invoke[function() {
        var G__15820 = x__4971__auto__;
        return goog.typeOf(G__15820);
      }()];
      if (or__4335__auto__) {
        return or__4335__auto__;
      } else {
        var or__4335__auto____$1 = cljs.core._invoke["_"];
        if (or__4335__auto____$1) {
          return or__4335__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IFn.-invoke", this$);
        }
      }
    }().call(null, this$, a, b);
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$4 = function(this$, a, b, c) {
  if (function() {
    var and__4323__auto__ = this$;
    if (and__4323__auto__) {
      return this$.cljs$core$IFn$_invoke$arity$4;
    } else {
      return and__4323__auto__;
    }
  }()) {
    return this$.cljs$core$IFn$_invoke$arity$4(this$, a, b, c);
  } else {
    var x__4971__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4335__auto__ = cljs.core._invoke[function() {
        var G__15822 = x__4971__auto__;
        return goog.typeOf(G__15822);
      }()];
      if (or__4335__auto__) {
        return or__4335__auto__;
      } else {
        var or__4335__auto____$1 = cljs.core._invoke["_"];
        if (or__4335__auto____$1) {
          return or__4335__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IFn.-invoke", this$);
        }
      }
    }().call(null, this$, a, b, c);
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$5 = function(this$, a, b, c, d) {
  if (function() {
    var and__4323__auto__ = this$;
    if (and__4323__auto__) {
      return this$.cljs$core$IFn$_invoke$arity$5;
    } else {
      return and__4323__auto__;
    }
  }()) {
    return this$.cljs$core$IFn$_invoke$arity$5(this$, a, b, c, d);
  } else {
    var x__4971__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4335__auto__ = cljs.core._invoke[function() {
        var G__15824 = x__4971__auto__;
        return goog.typeOf(G__15824);
      }()];
      if (or__4335__auto__) {
        return or__4335__auto__;
      } else {
        var or__4335__auto____$1 = cljs.core._invoke["_"];
        if (or__4335__auto____$1) {
          return or__4335__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IFn.-invoke", this$);
        }
      }
    }().call(null, this$, a, b, c, d);
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$6 = function(this$, a, b, c, d, e) {
  if (function() {
    var and__4323__auto__ = this$;
    if (and__4323__auto__) {
      return this$.cljs$core$IFn$_invoke$arity$6;
    } else {
      return and__4323__auto__;
    }
  }()) {
    return this$.cljs$core$IFn$_invoke$arity$6(this$, a, b, c, d, e);
  } else {
    var x__4971__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4335__auto__ = cljs.core._invoke[function() {
        var G__15826 = x__4971__auto__;
        return goog.typeOf(G__15826);
      }()];
      if (or__4335__auto__) {
        return or__4335__auto__;
      } else {
        var or__4335__auto____$1 = cljs.core._invoke["_"];
        if (or__4335__auto____$1) {
          return or__4335__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IFn.-invoke", this$);
        }
      }
    }().call(null, this$, a, b, c, d, e);
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$7 = function(this$, a, b, c, d, e, f) {
  if (function() {
    var and__4323__auto__ = this$;
    if (and__4323__auto__) {
      return this$.cljs$core$IFn$_invoke$arity$7;
    } else {
      return and__4323__auto__;
    }
  }()) {
    return this$.cljs$core$IFn$_invoke$arity$7(this$, a, b, c, d, e, f);
  } else {
    var x__4971__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4335__auto__ = cljs.core._invoke[function() {
        var G__15828 = x__4971__auto__;
        return goog.typeOf(G__15828);
      }()];
      if (or__4335__auto__) {
        return or__4335__auto__;
      } else {
        var or__4335__auto____$1 = cljs.core._invoke["_"];
        if (or__4335__auto____$1) {
          return or__4335__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IFn.-invoke", this$);
        }
      }
    }().call(null, this$, a, b, c, d, e, f);
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$8 = function(this$, a, b, c, d, e, f, g) {
  if (function() {
    var and__4323__auto__ = this$;
    if (and__4323__auto__) {
      return this$.cljs$core$IFn$_invoke$arity$8;
    } else {
      return and__4323__auto__;
    }
  }()) {
    return this$.cljs$core$IFn$_invoke$arity$8(this$, a, b, c, d, e, f, g);
  } else {
    var x__4971__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4335__auto__ = cljs.core._invoke[function() {
        var G__15830 = x__4971__auto__;
        return goog.typeOf(G__15830);
      }()];
      if (or__4335__auto__) {
        return or__4335__auto__;
      } else {
        var or__4335__auto____$1 = cljs.core._invoke["_"];
        if (or__4335__auto____$1) {
          return or__4335__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IFn.-invoke", this$);
        }
      }
    }().call(null, this$, a, b, c, d, e, f, g);
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$9 = function(this$, a, b, c, d, e, f, g, h) {
  if (function() {
    var and__4323__auto__ = this$;
    if (and__4323__auto__) {
      return this$.cljs$core$IFn$_invoke$arity$9;
    } else {
      return and__4323__auto__;
    }
  }()) {
    return this$.cljs$core$IFn$_invoke$arity$9(this$, a, b, c, d, e, f, g, h);
  } else {
    var x__4971__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4335__auto__ = cljs.core._invoke[function() {
        var G__15832 = x__4971__auto__;
        return goog.typeOf(G__15832);
      }()];
      if (or__4335__auto__) {
        return or__4335__auto__;
      } else {
        var or__4335__auto____$1 = cljs.core._invoke["_"];
        if (or__4335__auto____$1) {
          return or__4335__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IFn.-invoke", this$);
        }
      }
    }().call(null, this$, a, b, c, d, e, f, g, h);
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$10 = function(this$, a, b, c, d, e, f, g, h, i) {
  if (function() {
    var and__4323__auto__ = this$;
    if (and__4323__auto__) {
      return this$.cljs$core$IFn$_invoke$arity$10;
    } else {
      return and__4323__auto__;
    }
  }()) {
    return this$.cljs$core$IFn$_invoke$arity$10(this$, a, b, c, d, e, f, g, h, i);
  } else {
    var x__4971__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4335__auto__ = cljs.core._invoke[function() {
        var G__15834 = x__4971__auto__;
        return goog.typeOf(G__15834);
      }()];
      if (or__4335__auto__) {
        return or__4335__auto__;
      } else {
        var or__4335__auto____$1 = cljs.core._invoke["_"];
        if (or__4335__auto____$1) {
          return or__4335__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IFn.-invoke", this$);
        }
      }
    }().call(null, this$, a, b, c, d, e, f, g, h, i);
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$11 = function(this$, a, b, c, d, e, f, g, h, i, j) {
  if (function() {
    var and__4323__auto__ = this$;
    if (and__4323__auto__) {
      return this$.cljs$core$IFn$_invoke$arity$11;
    } else {
      return and__4323__auto__;
    }
  }()) {
    return this$.cljs$core$IFn$_invoke$arity$11(this$, a, b, c, d, e, f, g, h, i, j);
  } else {
    var x__4971__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4335__auto__ = cljs.core._invoke[function() {
        var G__15836 = x__4971__auto__;
        return goog.typeOf(G__15836);
      }()];
      if (or__4335__auto__) {
        return or__4335__auto__;
      } else {
        var or__4335__auto____$1 = cljs.core._invoke["_"];
        if (or__4335__auto____$1) {
          return or__4335__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IFn.-invoke", this$);
        }
      }
    }().call(null, this$, a, b, c, d, e, f, g, h, i, j);
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$12 = function(this$, a, b, c, d, e, f, g, h, i, j, k) {
  if (function() {
    var and__4323__auto__ = this$;
    if (and__4323__auto__) {
      return this$.cljs$core$IFn$_invoke$arity$12;
    } else {
      return and__4323__auto__;
    }
  }()) {
    return this$.cljs$core$IFn$_invoke$arity$12(this$, a, b, c, d, e, f, g, h, i, j, k);
  } else {
    var x__4971__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4335__auto__ = cljs.core._invoke[function() {
        var G__15838 = x__4971__auto__;
        return goog.typeOf(G__15838);
      }()];
      if (or__4335__auto__) {
        return or__4335__auto__;
      } else {
        var or__4335__auto____$1 = cljs.core._invoke["_"];
        if (or__4335__auto____$1) {
          return or__4335__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IFn.-invoke", this$);
        }
      }
    }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k);
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$13 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l) {
  if (function() {
    var and__4323__auto__ = this$;
    if (and__4323__auto__) {
      return this$.cljs$core$IFn$_invoke$arity$13;
    } else {
      return and__4323__auto__;
    }
  }()) {
    return this$.cljs$core$IFn$_invoke$arity$13(this$, a, b, c, d, e, f, g, h, i, j, k, l);
  } else {
    var x__4971__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4335__auto__ = cljs.core._invoke[function() {
        var G__15840 = x__4971__auto__;
        return goog.typeOf(G__15840);
      }()];
      if (or__4335__auto__) {
        return or__4335__auto__;
      } else {
        var or__4335__auto____$1 = cljs.core._invoke["_"];
        if (or__4335__auto____$1) {
          return or__4335__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IFn.-invoke", this$);
        }
      }
    }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l);
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$14 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m) {
  if (function() {
    var and__4323__auto__ = this$;
    if (and__4323__auto__) {
      return this$.cljs$core$IFn$_invoke$arity$14;
    } else {
      return and__4323__auto__;
    }
  }()) {
    return this$.cljs$core$IFn$_invoke$arity$14(this$, a, b, c, d, e, f, g, h, i, j, k, l, m);
  } else {
    var x__4971__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4335__auto__ = cljs.core._invoke[function() {
        var G__15842 = x__4971__auto__;
        return goog.typeOf(G__15842);
      }()];
      if (or__4335__auto__) {
        return or__4335__auto__;
      } else {
        var or__4335__auto____$1 = cljs.core._invoke["_"];
        if (or__4335__auto____$1) {
          return or__4335__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IFn.-invoke", this$);
        }
      }
    }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m);
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$15 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
  if (function() {
    var and__4323__auto__ = this$;
    if (and__4323__auto__) {
      return this$.cljs$core$IFn$_invoke$arity$15;
    } else {
      return and__4323__auto__;
    }
  }()) {
    return this$.cljs$core$IFn$_invoke$arity$15(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
  } else {
    var x__4971__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4335__auto__ = cljs.core._invoke[function() {
        var G__15844 = x__4971__auto__;
        return goog.typeOf(G__15844);
      }()];
      if (or__4335__auto__) {
        return or__4335__auto__;
      } else {
        var or__4335__auto____$1 = cljs.core._invoke["_"];
        if (or__4335__auto____$1) {
          return or__4335__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IFn.-invoke", this$);
        }
      }
    }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$16 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
  if (function() {
    var and__4323__auto__ = this$;
    if (and__4323__auto__) {
      return this$.cljs$core$IFn$_invoke$arity$16;
    } else {
      return and__4323__auto__;
    }
  }()) {
    return this$.cljs$core$IFn$_invoke$arity$16(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
  } else {
    var x__4971__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4335__auto__ = cljs.core._invoke[function() {
        var G__15846 = x__4971__auto__;
        return goog.typeOf(G__15846);
      }()];
      if (or__4335__auto__) {
        return or__4335__auto__;
      } else {
        var or__4335__auto____$1 = cljs.core._invoke["_"];
        if (or__4335__auto____$1) {
          return or__4335__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IFn.-invoke", this$);
        }
      }
    }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$17 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
  if (function() {
    var and__4323__auto__ = this$;
    if (and__4323__auto__) {
      return this$.cljs$core$IFn$_invoke$arity$17;
    } else {
      return and__4323__auto__;
    }
  }()) {
    return this$.cljs$core$IFn$_invoke$arity$17(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
  } else {
    var x__4971__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4335__auto__ = cljs.core._invoke[function() {
        var G__15848 = x__4971__auto__;
        return goog.typeOf(G__15848);
      }()];
      if (or__4335__auto__) {
        return or__4335__auto__;
      } else {
        var or__4335__auto____$1 = cljs.core._invoke["_"];
        if (or__4335__auto____$1) {
          return or__4335__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IFn.-invoke", this$);
        }
      }
    }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$18 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
  if (function() {
    var and__4323__auto__ = this$;
    if (and__4323__auto__) {
      return this$.cljs$core$IFn$_invoke$arity$18;
    } else {
      return and__4323__auto__;
    }
  }()) {
    return this$.cljs$core$IFn$_invoke$arity$18(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
  } else {
    var x__4971__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4335__auto__ = cljs.core._invoke[function() {
        var G__15850 = x__4971__auto__;
        return goog.typeOf(G__15850);
      }()];
      if (or__4335__auto__) {
        return or__4335__auto__;
      } else {
        var or__4335__auto____$1 = cljs.core._invoke["_"];
        if (or__4335__auto____$1) {
          return or__4335__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IFn.-invoke", this$);
        }
      }
    }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$19 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
  if (function() {
    var and__4323__auto__ = this$;
    if (and__4323__auto__) {
      return this$.cljs$core$IFn$_invoke$arity$19;
    } else {
      return and__4323__auto__;
    }
  }()) {
    return this$.cljs$core$IFn$_invoke$arity$19(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
  } else {
    var x__4971__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4335__auto__ = cljs.core._invoke[function() {
        var G__15852 = x__4971__auto__;
        return goog.typeOf(G__15852);
      }()];
      if (or__4335__auto__) {
        return or__4335__auto__;
      } else {
        var or__4335__auto____$1 = cljs.core._invoke["_"];
        if (or__4335__auto____$1) {
          return or__4335__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IFn.-invoke", this$);
        }
      }
    }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$20 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
  if (function() {
    var and__4323__auto__ = this$;
    if (and__4323__auto__) {
      return this$.cljs$core$IFn$_invoke$arity$20;
    } else {
      return and__4323__auto__;
    }
  }()) {
    return this$.cljs$core$IFn$_invoke$arity$20(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
  } else {
    var x__4971__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4335__auto__ = cljs.core._invoke[function() {
        var G__15854 = x__4971__auto__;
        return goog.typeOf(G__15854);
      }()];
      if (or__4335__auto__) {
        return or__4335__auto__;
      } else {
        var or__4335__auto____$1 = cljs.core._invoke["_"];
        if (or__4335__auto____$1) {
          return or__4335__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IFn.-invoke", this$);
        }
      }
    }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$21 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
  if (function() {
    var and__4323__auto__ = this$;
    if (and__4323__auto__) {
      return this$.cljs$core$IFn$_invoke$arity$21;
    } else {
      return and__4323__auto__;
    }
  }()) {
    return this$.cljs$core$IFn$_invoke$arity$21(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
  } else {
    var x__4971__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4335__auto__ = cljs.core._invoke[function() {
        var G__15856 = x__4971__auto__;
        return goog.typeOf(G__15856);
      }()];
      if (or__4335__auto__) {
        return or__4335__auto__;
      } else {
        var or__4335__auto____$1 = cljs.core._invoke["_"];
        if (or__4335__auto____$1) {
          return or__4335__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IFn.-invoke", this$);
        }
      }
    }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$22 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
  if (function() {
    var and__4323__auto__ = this$;
    if (and__4323__auto__) {
      return this$.cljs$core$IFn$_invoke$arity$22;
    } else {
      return and__4323__auto__;
    }
  }()) {
    return this$.cljs$core$IFn$_invoke$arity$22(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
  } else {
    var x__4971__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4335__auto__ = cljs.core._invoke[function() {
        var G__15858 = x__4971__auto__;
        return goog.typeOf(G__15858);
      }()];
      if (or__4335__auto__) {
        return or__4335__auto__;
      } else {
        var or__4335__auto____$1 = cljs.core._invoke["_"];
        if (or__4335__auto____$1) {
          return or__4335__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IFn.-invoke", this$);
        }
      }
    }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
  }
};
cljs.core._invoke.cljs$lang$maxFixedArity = 22;
cljs.core.ICloneable = function() {
  var obj15861 = {};
  return obj15861;
}();
cljs.core._clone = function cljs$core$_clone(value) {
  if (function() {
    var and__4323__auto__ = value;
    if (and__4323__auto__) {
      return value.cljs$core$ICloneable$_clone$arity$1;
    } else {
      return and__4323__auto__;
    }
  }()) {
    return value.cljs$core$ICloneable$_clone$arity$1(value);
  } else {
    var x__4971__auto__ = value == null ? null : value;
    return function() {
      var or__4335__auto__ = cljs.core._clone[function() {
        var G__15865 = x__4971__auto__;
        return goog.typeOf(G__15865);
      }()];
      if (or__4335__auto__) {
        return or__4335__auto__;
      } else {
        var or__4335__auto____$1 = cljs.core._clone["_"];
        if (or__4335__auto____$1) {
          return or__4335__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ICloneable.-clone", value);
        }
      }
    }().call(null, value);
  }
};
cljs.core.ICounted = function() {
  var obj15867 = {};
  return obj15867;
}();
cljs.core._count = function cljs$core$_count(coll) {
  if (function() {
    var and__4323__auto__ = coll;
    if (and__4323__auto__) {
      return coll.cljs$core$ICounted$_count$arity$1;
    } else {
      return and__4323__auto__;
    }
  }()) {
    return coll.cljs$core$ICounted$_count$arity$1(coll);
  } else {
    var x__4971__auto__ = coll == null ? null : coll;
    return function() {
      var or__4335__auto__ = cljs.core._count[function() {
        var G__15871 = x__4971__auto__;
        return goog.typeOf(G__15871);
      }()];
      if (or__4335__auto__) {
        return or__4335__auto__;
      } else {
        var or__4335__auto____$1 = cljs.core._count["_"];
        if (or__4335__auto____$1) {
          return or__4335__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ICounted.-count", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IEmptyableCollection = function() {
  var obj15873 = {};
  return obj15873;
}();
cljs.core._empty = function cljs$core$_empty(coll) {
  if (function() {
    var and__4323__auto__ = coll;
    if (and__4323__auto__) {
      return coll.cljs$core$IEmptyableCollection$_empty$arity$1;
    } else {
      return and__4323__auto__;
    }
  }()) {
    return coll.cljs$core$IEmptyableCollection$_empty$arity$1(coll);
  } else {
    var x__4971__auto__ = coll == null ? null : coll;
    return function() {
      var or__4335__auto__ = cljs.core._empty[function() {
        var G__15877 = x__4971__auto__;
        return goog.typeOf(G__15877);
      }()];
      if (or__4335__auto__) {
        return or__4335__auto__;
      } else {
        var or__4335__auto____$1 = cljs.core._empty["_"];
        if (or__4335__auto____$1) {
          return or__4335__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IEmptyableCollection.-empty", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ICollection = function() {
  var obj15879 = {};
  return obj15879;
}();
cljs.core._conj = function cljs$core$_conj(coll, o) {
  if (function() {
    var and__4323__auto__ = coll;
    if (and__4323__auto__) {
      return coll.cljs$core$ICollection$_conj$arity$2;
    } else {
      return and__4323__auto__;
    }
  }()) {
    return coll.cljs$core$ICollection$_conj$arity$2(coll, o);
  } else {
    var x__4971__auto__ = coll == null ? null : coll;
    return function() {
      var or__4335__auto__ = cljs.core._conj[function() {
        var G__15883 = x__4971__auto__;
        return goog.typeOf(G__15883);
      }()];
      if (or__4335__auto__) {
        return or__4335__auto__;
      } else {
        var or__4335__auto____$1 = cljs.core._conj["_"];
        if (or__4335__auto____$1) {
          return or__4335__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ICollection.-conj", coll);
        }
      }
    }().call(null, coll, o);
  }
};
cljs.core.IIndexed = function() {
  var obj15885 = {};
  return obj15885;
}();
cljs.core._nth = function cljs$core$_nth() {
  var G__15887 = arguments.length;
  switch(G__15887) {
    case 2:
      return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core._nth.cljs$core$IFn$_invoke$arity$2 = function(coll, n) {
  if (function() {
    var and__4323__auto__ = coll;
    if (and__4323__auto__) {
      return coll.cljs$core$IIndexed$_nth$arity$2;
    } else {
      return and__4323__auto__;
    }
  }()) {
    return coll.cljs$core$IIndexed$_nth$arity$2(coll, n);
  } else {
    var x__4971__auto__ = coll == null ? null : coll;
    return function() {
      var or__4335__auto__ = cljs.core._nth[function() {
        var G__15889 = x__4971__auto__;
        return goog.typeOf(G__15889);
      }()];
      if (or__4335__auto__) {
        return or__4335__auto__;
      } else {
        var or__4335__auto____$1 = cljs.core._nth["_"];
        if (or__4335__auto____$1) {
          return or__4335__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IIndexed.-nth", coll);
        }
      }
    }().call(null, coll, n);
  }
};
cljs.core._nth.cljs$core$IFn$_invoke$arity$3 = function(coll, n, not_found) {
  if (function() {
    var and__4323__auto__ = coll;
    if (and__4323__auto__) {
      return coll.cljs$core$IIndexed$_nth$arity$3;
    } else {
      return and__4323__auto__;
    }
  }()) {
    return coll.cljs$core$IIndexed$_nth$arity$3(coll, n, not_found);
  } else {
    var x__4971__auto__ = coll == null ? null : coll;
    return function() {
      var or__4335__auto__ = cljs.core._nth[function() {
        var G__15891 = x__4971__auto__;
        return goog.typeOf(G__15891);
      }()];
      if (or__4335__auto__) {
        return or__4335__auto__;
      } else {
        var or__4335__auto____$1 = cljs.core._nth["_"];
        if (or__4335__auto____$1) {
          return or__4335__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IIndexed.-nth", coll);
        }
      }
    }().call(null, coll, n, not_found);
  }
};
cljs.core._nth.cljs$lang$maxFixedArity = 3;
cljs.core.ASeq = function() {
  var obj15894 = {};
  return obj15894;
}();
cljs.core.ISeq = function() {
  var obj15896 = {};
  return obj15896;
}();
cljs.core._first = function cljs$core$_first(coll) {
  if (function() {
    var and__4323__auto__ = coll;
    if (and__4323__auto__) {
      return coll.cljs$core$ISeq$_first$arity$1;
    } else {
      return and__4323__auto__;
    }
  }()) {
    return coll.cljs$core$ISeq$_first$arity$1(coll);
  } else {
    var x__4971__auto__ = coll == null ? null : coll;
    return function() {
      var or__4335__auto__ = cljs.core._first[function() {
        var G__15900 = x__4971__auto__;
        return goog.typeOf(G__15900);
      }()];
      if (or__4335__auto__) {
        return or__4335__auto__;
      } else {
        var or__4335__auto____$1 = cljs.core._first["_"];
        if (or__4335__auto____$1) {
          return or__4335__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ISeq.-first", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._rest = function cljs$core$_rest(coll) {
  if (function() {
    var and__4323__auto__ = coll;
    if (and__4323__auto__) {
      return coll.cljs$core$ISeq$_rest$arity$1;
    } else {
      return and__4323__auto__;
    }
  }()) {
    return coll.cljs$core$ISeq$_rest$arity$1(coll);
  } else {
    var x__4971__auto__ = coll == null ? null : coll;
    return function() {
      var or__4335__auto__ = cljs.core._rest[function() {
        var G__15904 = x__4971__auto__;
        return goog.typeOf(G__15904);
      }()];
      if (or__4335__auto__) {
        return or__4335__auto__;
      } else {
        var or__4335__auto____$1 = cljs.core._rest["_"];
        if (or__4335__auto____$1) {
          return or__4335__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ISeq.-rest", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.INext = function() {
  var obj15906 = {};
  return obj15906;
}();
cljs.core._next = function cljs$core$_next(coll) {
  if (function() {
    var and__4323__auto__ = coll;
    if (and__4323__auto__) {
      return coll.cljs$core$INext$_next$arity$1;
    } else {
      return and__4323__auto__;
    }
  }()) {
    return coll.cljs$core$INext$_next$arity$1(coll);
  } else {
    var x__4971__auto__ = coll == null ? null : coll;
    return function() {
      var or__4335__auto__ = cljs.core._next[function() {
        var G__15910 = x__4971__auto__;
        return goog.typeOf(G__15910);
      }()];
      if (or__4335__auto__) {
        return or__4335__auto__;
      } else {
        var or__4335__auto____$1 = cljs.core._next["_"];
        if (or__4335__auto____$1) {
          return or__4335__auto____$1;
        } else {
          throw cljs.core.missing_protocol("INext.-next", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ILookup = function() {
  var obj15912 = {};
  return obj15912;
}();
cljs.core._lookup = function cljs$core$_lookup() {
  var G__15914 = arguments.length;
  switch(G__15914) {
    case 2:
      return cljs.core._lookup.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core._lookup.cljs$core$IFn$_invoke$arity$2 = function(o, k) {
  if (function() {
    var and__4323__auto__ = o;
    if (and__4323__auto__) {
      return o.cljs$core$ILookup$_lookup$arity$2;
    } else {
      return and__4323__auto__;
    }
  }()) {
    return o.cljs$core$ILookup$_lookup$arity$2(o, k);
  } else {
    var x__4971__auto__ = o == null ? null : o;
    return function() {
      var or__4335__auto__ = cljs.core._lookup[function() {
        var G__15916 = x__4971__auto__;
        return goog.typeOf(G__15916);
      }()];
      if (or__4335__auto__) {
        return or__4335__auto__;
      } else {
        var or__4335__auto____$1 = cljs.core._lookup["_"];
        if (or__4335__auto____$1) {
          return or__4335__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ILookup.-lookup", o);
        }
      }
    }().call(null, o, k);
  }
};
cljs.core._lookup.cljs$core$IFn$_invoke$arity$3 = function(o, k, not_found) {
  if (function() {
    var and__4323__auto__ = o;
    if (and__4323__auto__) {
      return o.cljs$core$ILookup$_lookup$arity$3;
    } else {
      return and__4323__auto__;
    }
  }()) {
    return o.cljs$core$ILookup$_lookup$arity$3(o, k, not_found);
  } else {
    var x__4971__auto__ = o == null ? null : o;
    return function() {
      var or__4335__auto__ = cljs.core._lookup[function() {
        var G__15918 = x__4971__auto__;
        return goog.typeOf(G__15918);
      }()];
      if (or__4335__auto__) {
        return or__4335__auto__;
      } else {
        var or__4335__auto____$1 = cljs.core._lookup["_"];
        if (or__4335__auto____$1) {
          return or__4335__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ILookup.-lookup", o);
        }
      }
    }().call(null, o, k, not_found);
  }
};
cljs.core._lookup.cljs$lang$maxFixedArity = 3;
cljs.core.IAssociative = function() {
  var obj15921 = {};
  return obj15921;
}();
cljs.core._contains_key_QMARK_ = function cljs$core$_contains_key_QMARK_(coll, k) {
  if (function() {
    var and__4323__auto__ = coll;
    if (and__4323__auto__) {
      return coll.cljs$core$IAssociative$_contains_key_QMARK_$arity$2;
    } else {
      return and__4323__auto__;
    }
  }()) {
    return coll.cljs$core$IAssociative$_contains_key_QMARK_$arity$2(coll, k);
  } else {
    var x__4971__auto__ = coll == null ? null : coll;
    return function() {
      var or__4335__auto__ = cljs.core._contains_key_QMARK_[function() {
        var G__15925 = x__4971__auto__;
        return goog.typeOf(G__15925);
      }()];
      if (or__4335__auto__) {
        return or__4335__auto__;
      } else {
        var or__4335__auto____$1 = cljs.core._contains_key_QMARK_["_"];
        if (or__4335__auto____$1) {
          return or__4335__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IAssociative.-contains-key?", coll);
        }
      }
    }().call(null, coll, k);
  }
};
cljs.core._assoc = function cljs$core$_assoc(coll, k, v) {
  if (function() {
    var and__4323__auto__ = coll;
    if (and__4323__auto__) {
      return coll.cljs$core$IAssociative$_assoc$arity$3;
    } else {
      return and__4323__auto__;
    }
  }()) {
    return coll.cljs$core$IAssociative$_assoc$arity$3(coll, k, v);
  } else {
    var x__4971__auto__ = coll == null ? null : coll;
    return function() {
      var or__4335__auto__ = cljs.core._assoc[function() {
        var G__15929 = x__4971__auto__;
        return goog.typeOf(G__15929);
      }()];
      if (or__4335__auto__) {
        return or__4335__auto__;
      } else {
        var or__4335__auto____$1 = cljs.core._assoc["_"];
        if (or__4335__auto____$1) {
          return or__4335__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IAssociative.-assoc", coll);
        }
      }
    }().call(null, coll, k, v);
  }
};
cljs.core.IMap = function() {
  var obj15931 = {};
  return obj15931;
}();
cljs.core._dissoc = function cljs$core$_dissoc(coll, k) {
  if (function() {
    var and__4323__auto__ = coll;
    if (and__4323__auto__) {
      return coll.cljs$core$IMap$_dissoc$arity$2;
    } else {
      return and__4323__auto__;
    }
  }()) {
    return coll.cljs$core$IMap$_dissoc$arity$2(coll, k);
  } else {
    var x__4971__auto__ = coll == null ? null : coll;
    return function() {
      var or__4335__auto__ = cljs.core._dissoc[function() {
        var G__15935 = x__4971__auto__;
        return goog.typeOf(G__15935);
      }()];
      if (or__4335__auto__) {
        return or__4335__auto__;
      } else {
        var or__4335__auto____$1 = cljs.core._dissoc["_"];
        if (or__4335__auto____$1) {
          return or__4335__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IMap.-dissoc", coll);
        }
      }
    }().call(null, coll, k);
  }
};
cljs.core.IMapEntry = function() {
  var obj15937 = {};
  return obj15937;
}();
cljs.core._key = function cljs$core$_key(coll) {
  if (function() {
    var and__4323__auto__ = coll;
    if (and__4323__auto__) {
      return coll.cljs$core$IMapEntry$_key$arity$1;
    } else {
      return and__4323__auto__;
    }
  }()) {
    return coll.cljs$core$IMapEntry$_key$arity$1(coll);
  } else {
    var x__4971__auto__ = coll == null ? null : coll;
    return function() {
      var or__4335__auto__ = cljs.core._key[function() {
        var G__15941 = x__4971__auto__;
        return goog.typeOf(G__15941);
      }()];
      if (or__4335__auto__) {
        return or__4335__auto__;
      } else {
        var or__4335__auto____$1 = cljs.core._key["_"];
        if (or__4335__auto____$1) {
          return or__4335__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IMapEntry.-key", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._val = function cljs$core$_val(coll) {
  if (function() {
    var and__4323__auto__ = coll;
    if (and__4323__auto__) {
      return coll.cljs$core$IMapEntry$_val$arity$1;
    } else {
      return and__4323__auto__;
    }
  }()) {
    return coll.cljs$core$IMapEntry$_val$arity$1(coll);
  } else {
    var x__4971__auto__ = coll == null ? null : coll;
    return function() {
      var or__4335__auto__ = cljs.core._val[function() {
        var G__15945 = x__4971__auto__;
        return goog.typeOf(G__15945);
      }()];
      if (or__4335__auto__) {
        return or__4335__auto__;
      } else {
        var or__4335__auto____$1 = cljs.core._val["_"];
        if (or__4335__auto____$1) {
          return or__4335__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IMapEntry.-val", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ISet = function() {
  var obj15947 = {};
  return obj15947;
}();
cljs.core._disjoin = function cljs$core$_disjoin(coll, v) {
  if (function() {
    var and__4323__auto__ = coll;
    if (and__4323__auto__) {
      return coll.cljs$core$ISet$_disjoin$arity$2;
    } else {
      return and__4323__auto__;
    }
  }()) {
    return coll.cljs$core$ISet$_disjoin$arity$2(coll, v);
  } else {
    var x__4971__auto__ = coll == null ? null : coll;
    return function() {
      var or__4335__auto__ = cljs.core._disjoin[function() {
        var G__15951 = x__4971__auto__;
        return goog.typeOf(G__15951);
      }()];
      if (or__4335__auto__) {
        return or__4335__auto__;
      } else {
        var or__4335__auto____$1 = cljs.core._disjoin["_"];
        if (or__4335__auto____$1) {
          return or__4335__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ISet.-disjoin", coll);
        }
      }
    }().call(null, coll, v);
  }
};
cljs.core.IStack = function() {
  var obj15953 = {};
  return obj15953;
}();
cljs.core._peek = function cljs$core$_peek(coll) {
  if (function() {
    var and__4323__auto__ = coll;
    if (and__4323__auto__) {
      return coll.cljs$core$IStack$_peek$arity$1;
    } else {
      return and__4323__auto__;
    }
  }()) {
    return coll.cljs$core$IStack$_peek$arity$1(coll);
  } else {
    var x__4971__auto__ = coll == null ? null : coll;
    return function() {
      var or__4335__auto__ = cljs.core._peek[function() {
        var G__15957 = x__4971__auto__;
        return goog.typeOf(G__15957);
      }()];
      if (or__4335__auto__) {
        return or__4335__auto__;
      } else {
        var or__4335__auto____$1 = cljs.core._peek["_"];
        if (or__4335__auto____$1) {
          return or__4335__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IStack.-peek", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._pop = function cljs$core$_pop(coll) {
  if (function() {
    var and__4323__auto__ = coll;
    if (and__4323__auto__) {
      return coll.cljs$core$IStack$_pop$arity$1;
    } else {
      return and__4323__auto__;
    }
  }()) {
    return coll.cljs$core$IStack$_pop$arity$1(coll);
  } else {
    var x__4971__auto__ = coll == null ? null : coll;
    return function() {
      var or__4335__auto__ = cljs.core._pop[function() {
        var G__15961 = x__4971__auto__;
        return goog.typeOf(G__15961);
      }()];
      if (or__4335__auto__) {
        return or__4335__auto__;
      } else {
        var or__4335__auto____$1 = cljs.core._pop["_"];
        if (or__4335__auto____$1) {
          return or__4335__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IStack.-pop", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IVector = function() {
  var obj15963 = {};
  return obj15963;
}();
cljs.core._assoc_n = function cljs$core$_assoc_n(coll, n, val) {
  if (function() {
    var and__4323__auto__ = coll;
    if (and__4323__auto__) {
      return coll.cljs$core$IVector$_assoc_n$arity$3;
    } else {
      return and__4323__auto__;
    }
  }()) {
    return coll.cljs$core$IVector$_assoc_n$arity$3(coll, n, val);
  } else {
    var x__4971__auto__ = coll == null ? null : coll;
    return function() {
      var or__4335__auto__ = cljs.core._assoc_n[function() {
        var G__15967 = x__4971__auto__;
        return goog.typeOf(G__15967);
      }()];
      if (or__4335__auto__) {
        return or__4335__auto__;
      } else {
        var or__4335__auto____$1 = cljs.core._assoc_n["_"];
        if (or__4335__auto____$1) {
          return or__4335__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IVector.-assoc-n", coll);
        }
      }
    }().call(null, coll, n, val);
  }
};
cljs.core.IDeref = function() {
  var obj15969 = {};
  return obj15969;
}();
cljs.core._deref = function cljs$core$_deref(o) {
  if (function() {
    var and__4323__auto__ = o;
    if (and__4323__auto__) {
      return o.cljs$core$IDeref$_deref$arity$1;
    } else {
      return and__4323__auto__;
    }
  }()) {
    return o.cljs$core$IDeref$_deref$arity$1(o);
  } else {
    var x__4971__auto__ = o == null ? null : o;
    return function() {
      var or__4335__auto__ = cljs.core._deref[function() {
        var G__15973 = x__4971__auto__;
        return goog.typeOf(G__15973);
      }()];
      if (or__4335__auto__) {
        return or__4335__auto__;
      } else {
        var or__4335__auto____$1 = cljs.core._deref["_"];
        if (or__4335__auto____$1) {
          return or__4335__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IDeref.-deref", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.IDerefWithTimeout = function() {
  var obj15975 = {};
  return obj15975;
}();
cljs.core._deref_with_timeout = function cljs$core$_deref_with_timeout(o, msec, timeout_val) {
  if (function() {
    var and__4323__auto__ = o;
    if (and__4323__auto__) {
      return o.cljs$core$IDerefWithTimeout$_deref_with_timeout$arity$3;
    } else {
      return and__4323__auto__;
    }
  }()) {
    return o.cljs$core$IDerefWithTimeout$_deref_with_timeout$arity$3(o, msec, timeout_val);
  } else {
    var x__4971__auto__ = o == null ? null : o;
    return function() {
      var or__4335__auto__ = cljs.core._deref_with_timeout[function() {
        var G__15979 = x__4971__auto__;
        return goog.typeOf(G__15979);
      }()];
      if (or__4335__auto__) {
        return or__4335__auto__;
      } else {
        var or__4335__auto____$1 = cljs.core._deref_with_timeout["_"];
        if (or__4335__auto____$1) {
          return or__4335__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IDerefWithTimeout.-deref-with-timeout", o);
        }
      }
    }().call(null, o, msec, timeout_val);
  }
};
cljs.core.IMeta = function() {
  var obj15981 = {};
  return obj15981;
}();
cljs.core._meta = function cljs$core$_meta(o) {
  if (function() {
    var and__4323__auto__ = o;
    if (and__4323__auto__) {
      return o.cljs$core$IMeta$_meta$arity$1;
    } else {
      return and__4323__auto__;
    }
  }()) {
    return o.cljs$core$IMeta$_meta$arity$1(o);
  } else {
    var x__4971__auto__ = o == null ? null : o;
    return function() {
      var or__4335__auto__ = cljs.core._meta[function() {
        var G__15985 = x__4971__auto__;
        return goog.typeOf(G__15985);
      }()];
      if (or__4335__auto__) {
        return or__4335__auto__;
      } else {
        var or__4335__auto____$1 = cljs.core._meta["_"];
        if (or__4335__auto____$1) {
          return or__4335__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IMeta.-meta", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.IWithMeta = function() {
  var obj15987 = {};
  return obj15987;
}();
cljs.core._with_meta = function cljs$core$_with_meta(o, meta) {
  if (function() {
    var and__4323__auto__ = o;
    if (and__4323__auto__) {
      return o.cljs$core$IWithMeta$_with_meta$arity$2;
    } else {
      return and__4323__auto__;
    }
  }()) {
    return o.cljs$core$IWithMeta$_with_meta$arity$2(o, meta);
  } else {
    var x__4971__auto__ = o == null ? null : o;
    return function() {
      var or__4335__auto__ = cljs.core._with_meta[function() {
        var G__15991 = x__4971__auto__;
        return goog.typeOf(G__15991);
      }()];
      if (or__4335__auto__) {
        return or__4335__auto__;
      } else {
        var or__4335__auto____$1 = cljs.core._with_meta["_"];
        if (or__4335__auto____$1) {
          return or__4335__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IWithMeta.-with-meta", o);
        }
      }
    }().call(null, o, meta);
  }
};
cljs.core.IReduce = function() {
  var obj15993 = {};
  return obj15993;
}();
cljs.core._reduce = function cljs$core$_reduce() {
  var G__15995 = arguments.length;
  switch(G__15995) {
    case 2:
      return cljs.core._reduce.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core._reduce.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core._reduce.cljs$core$IFn$_invoke$arity$2 = function(coll, f) {
  if (function() {
    var and__4323__auto__ = coll;
    if (and__4323__auto__) {
      return coll.cljs$core$IReduce$_reduce$arity$2;
    } else {
      return and__4323__auto__;
    }
  }()) {
    return coll.cljs$core$IReduce$_reduce$arity$2(coll, f);
  } else {
    var x__4971__auto__ = coll == null ? null : coll;
    return function() {
      var or__4335__auto__ = cljs.core._reduce[function() {
        var G__15997 = x__4971__auto__;
        return goog.typeOf(G__15997);
      }()];
      if (or__4335__auto__) {
        return or__4335__auto__;
      } else {
        var or__4335__auto____$1 = cljs.core._reduce["_"];
        if (or__4335__auto____$1) {
          return or__4335__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IReduce.-reduce", coll);
        }
      }
    }().call(null, coll, f);
  }
};
cljs.core._reduce.cljs$core$IFn$_invoke$arity$3 = function(coll, f, start) {
  if (function() {
    var and__4323__auto__ = coll;
    if (and__4323__auto__) {
      return coll.cljs$core$IReduce$_reduce$arity$3;
    } else {
      return and__4323__auto__;
    }
  }()) {
    return coll.cljs$core$IReduce$_reduce$arity$3(coll, f, start);
  } else {
    var x__4971__auto__ = coll == null ? null : coll;
    return function() {
      var or__4335__auto__ = cljs.core._reduce[function() {
        var G__15999 = x__4971__auto__;
        return goog.typeOf(G__15999);
      }()];
      if (or__4335__auto__) {
        return or__4335__auto__;
      } else {
        var or__4335__auto____$1 = cljs.core._reduce["_"];
        if (or__4335__auto____$1) {
          return or__4335__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IReduce.-reduce", coll);
        }
      }
    }().call(null, coll, f, start);
  }
};
cljs.core._reduce.cljs$lang$maxFixedArity = 3;
cljs.core.IKVReduce = function() {
  var obj16002 = {};
  return obj16002;
}();
cljs.core._kv_reduce = function cljs$core$_kv_reduce(coll, f, init) {
  if (function() {
    var and__4323__auto__ = coll;
    if (and__4323__auto__) {
      return coll.cljs$core$IKVReduce$_kv_reduce$arity$3;
    } else {
      return and__4323__auto__;
    }
  }()) {
    return coll.cljs$core$IKVReduce$_kv_reduce$arity$3(coll, f, init);
  } else {
    var x__4971__auto__ = coll == null ? null : coll;
    return function() {
      var or__4335__auto__ = cljs.core._kv_reduce[function() {
        var G__16006 = x__4971__auto__;
        return goog.typeOf(G__16006);
      }()];
      if (or__4335__auto__) {
        return or__4335__auto__;
      } else {
        var or__4335__auto____$1 = cljs.core._kv_reduce["_"];
        if (or__4335__auto____$1) {
          return or__4335__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IKVReduce.-kv-reduce", coll);
        }
      }
    }().call(null, coll, f, init);
  }
};
cljs.core.IEquiv = function() {
  var obj16008 = {};
  return obj16008;
}();
cljs.core._equiv = function cljs$core$_equiv(o, other) {
  if (function() {
    var and__4323__auto__ = o;
    if (and__4323__auto__) {
      return o.cljs$core$IEquiv$_equiv$arity$2;
    } else {
      return and__4323__auto__;
    }
  }()) {
    return o.cljs$core$IEquiv$_equiv$arity$2(o, other);
  } else {
    var x__4971__auto__ = o == null ? null : o;
    return function() {
      var or__4335__auto__ = cljs.core._equiv[function() {
        var G__16012 = x__4971__auto__;
        return goog.typeOf(G__16012);
      }()];
      if (or__4335__auto__) {
        return or__4335__auto__;
      } else {
        var or__4335__auto____$1 = cljs.core._equiv["_"];
        if (or__4335__auto____$1) {
          return or__4335__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IEquiv.-equiv", o);
        }
      }
    }().call(null, o, other);
  }
};
cljs.core.IHash = function() {
  var obj16014 = {};
  return obj16014;
}();
cljs.core._hash = function cljs$core$_hash(o) {
  if (function() {
    var and__4323__auto__ = o;
    if (and__4323__auto__) {
      return o.cljs$core$IHash$_hash$arity$1;
    } else {
      return and__4323__auto__;
    }
  }()) {
    return o.cljs$core$IHash$_hash$arity$1(o);
  } else {
    var x__4971__auto__ = o == null ? null : o;
    return function() {
      var or__4335__auto__ = cljs.core._hash[function() {
        var G__16018 = x__4971__auto__;
        return goog.typeOf(G__16018);
      }()];
      if (or__4335__auto__) {
        return or__4335__auto__;
      } else {
        var or__4335__auto____$1 = cljs.core._hash["_"];
        if (or__4335__auto____$1) {
          return or__4335__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IHash.-hash", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.ISeqable = function() {
  var obj16020 = {};
  return obj16020;
}();
cljs.core._seq = function cljs$core$_seq(o) {
  if (function() {
    var and__4323__auto__ = o;
    if (and__4323__auto__) {
      return o.cljs$core$ISeqable$_seq$arity$1;
    } else {
      return and__4323__auto__;
    }
  }()) {
    return o.cljs$core$ISeqable$_seq$arity$1(o);
  } else {
    var x__4971__auto__ = o == null ? null : o;
    return function() {
      var or__4335__auto__ = cljs.core._seq[function() {
        var G__16024 = x__4971__auto__;
        return goog.typeOf(G__16024);
      }()];
      if (or__4335__auto__) {
        return or__4335__auto__;
      } else {
        var or__4335__auto____$1 = cljs.core._seq["_"];
        if (or__4335__auto____$1) {
          return or__4335__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ISeqable.-seq", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.ISequential = function() {
  var obj16026 = {};
  return obj16026;
}();
cljs.core.IList = function() {
  var obj16028 = {};
  return obj16028;
}();
cljs.core.IRecord = function() {
  var obj16030 = {};
  return obj16030;
}();
cljs.core.IReversible = function() {
  var obj16032 = {};
  return obj16032;
}();
cljs.core._rseq = function cljs$core$_rseq(coll) {
  if (function() {
    var and__4323__auto__ = coll;
    if (and__4323__auto__) {
      return coll.cljs$core$IReversible$_rseq$arity$1;
    } else {
      return and__4323__auto__;
    }
  }()) {
    return coll.cljs$core$IReversible$_rseq$arity$1(coll);
  } else {
    var x__4971__auto__ = coll == null ? null : coll;
    return function() {
      var or__4335__auto__ = cljs.core._rseq[function() {
        var G__16036 = x__4971__auto__;
        return goog.typeOf(G__16036);
      }()];
      if (or__4335__auto__) {
        return or__4335__auto__;
      } else {
        var or__4335__auto____$1 = cljs.core._rseq["_"];
        if (or__4335__auto____$1) {
          return or__4335__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IReversible.-rseq", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ISorted = function() {
  var obj16038 = {};
  return obj16038;
}();
cljs.core._sorted_seq = function cljs$core$_sorted_seq(coll, ascending_QMARK_) {
  if (function() {
    var and__4323__auto__ = coll;
    if (and__4323__auto__) {
      return coll.cljs$core$ISorted$_sorted_seq$arity$2;
    } else {
      return and__4323__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_sorted_seq$arity$2(coll, ascending_QMARK_);
  } else {
    var x__4971__auto__ = coll == null ? null : coll;
    return function() {
      var or__4335__auto__ = cljs.core._sorted_seq[function() {
        var G__16042 = x__4971__auto__;
        return goog.typeOf(G__16042);
      }()];
      if (or__4335__auto__) {
        return or__4335__auto__;
      } else {
        var or__4335__auto____$1 = cljs.core._sorted_seq["_"];
        if (or__4335__auto____$1) {
          return or__4335__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ISorted.-sorted-seq", coll);
        }
      }
    }().call(null, coll, ascending_QMARK_);
  }
};
cljs.core._sorted_seq_from = function cljs$core$_sorted_seq_from(coll, k, ascending_QMARK_) {
  if (function() {
    var and__4323__auto__ = coll;
    if (and__4323__auto__) {
      return coll.cljs$core$ISorted$_sorted_seq_from$arity$3;
    } else {
      return and__4323__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_sorted_seq_from$arity$3(coll, k, ascending_QMARK_);
  } else {
    var x__4971__auto__ = coll == null ? null : coll;
    return function() {
      var or__4335__auto__ = cljs.core._sorted_seq_from[function() {
        var G__16046 = x__4971__auto__;
        return goog.typeOf(G__16046);
      }()];
      if (or__4335__auto__) {
        return or__4335__auto__;
      } else {
        var or__4335__auto____$1 = cljs.core._sorted_seq_from["_"];
        if (or__4335__auto____$1) {
          return or__4335__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ISorted.-sorted-seq-from", coll);
        }
      }
    }().call(null, coll, k, ascending_QMARK_);
  }
};
cljs.core._entry_key = function cljs$core$_entry_key(coll, entry) {
  if (function() {
    var and__4323__auto__ = coll;
    if (and__4323__auto__) {
      return coll.cljs$core$ISorted$_entry_key$arity$2;
    } else {
      return and__4323__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_entry_key$arity$2(coll, entry);
  } else {
    var x__4971__auto__ = coll == null ? null : coll;
    return function() {
      var or__4335__auto__ = cljs.core._entry_key[function() {
        var G__16050 = x__4971__auto__;
        return goog.typeOf(G__16050);
      }()];
      if (or__4335__auto__) {
        return or__4335__auto__;
      } else {
        var or__4335__auto____$1 = cljs.core._entry_key["_"];
        if (or__4335__auto____$1) {
          return or__4335__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ISorted.-entry-key", coll);
        }
      }
    }().call(null, coll, entry);
  }
};
cljs.core._comparator = function cljs$core$_comparator(coll) {
  if (function() {
    var and__4323__auto__ = coll;
    if (and__4323__auto__) {
      return coll.cljs$core$ISorted$_comparator$arity$1;
    } else {
      return and__4323__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_comparator$arity$1(coll);
  } else {
    var x__4971__auto__ = coll == null ? null : coll;
    return function() {
      var or__4335__auto__ = cljs.core._comparator[function() {
        var G__16054 = x__4971__auto__;
        return goog.typeOf(G__16054);
      }()];
      if (or__4335__auto__) {
        return or__4335__auto__;
      } else {
        var or__4335__auto____$1 = cljs.core._comparator["_"];
        if (or__4335__auto____$1) {
          return or__4335__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ISorted.-comparator", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IWriter = function() {
  var obj16056 = {};
  return obj16056;
}();
cljs.core._write = function cljs$core$_write(writer, s) {
  if (function() {
    var and__4323__auto__ = writer;
    if (and__4323__auto__) {
      return writer.cljs$core$IWriter$_write$arity$2;
    } else {
      return and__4323__auto__;
    }
  }()) {
    return writer.cljs$core$IWriter$_write$arity$2(writer, s);
  } else {
    var x__4971__auto__ = writer == null ? null : writer;
    return function() {
      var or__4335__auto__ = cljs.core._write[function() {
        var G__16060 = x__4971__auto__;
        return goog.typeOf(G__16060);
      }()];
      if (or__4335__auto__) {
        return or__4335__auto__;
      } else {
        var or__4335__auto____$1 = cljs.core._write["_"];
        if (or__4335__auto____$1) {
          return or__4335__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IWriter.-write", writer);
        }
      }
    }().call(null, writer, s);
  }
};
cljs.core._flush = function cljs$core$_flush(writer) {
  if (function() {
    var and__4323__auto__ = writer;
    if (and__4323__auto__) {
      return writer.cljs$core$IWriter$_flush$arity$1;
    } else {
      return and__4323__auto__;
    }
  }()) {
    return writer.cljs$core$IWriter$_flush$arity$1(writer);
  } else {
    var x__4971__auto__ = writer == null ? null : writer;
    return function() {
      var or__4335__auto__ = cljs.core._flush[function() {
        var G__16064 = x__4971__auto__;
        return goog.typeOf(G__16064);
      }()];
      if (or__4335__auto__) {
        return or__4335__auto__;
      } else {
        var or__4335__auto____$1 = cljs.core._flush["_"];
        if (or__4335__auto____$1) {
          return or__4335__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IWriter.-flush", writer);
        }
      }
    }().call(null, writer);
  }
};
cljs.core.IPrintWithWriter = function() {
  var obj16066 = {};
  return obj16066;
}();
cljs.core._pr_writer = function cljs$core$_pr_writer(o, writer, opts) {
  if (function() {
    var and__4323__auto__ = o;
    if (and__4323__auto__) {
      return o.cljs$core$IPrintWithWriter$_pr_writer$arity$3;
    } else {
      return and__4323__auto__;
    }
  }()) {
    return o.cljs$core$IPrintWithWriter$_pr_writer$arity$3(o, writer, opts);
  } else {
    var x__4971__auto__ = o == null ? null : o;
    return function() {
      var or__4335__auto__ = cljs.core._pr_writer[function() {
        var G__16070 = x__4971__auto__;
        return goog.typeOf(G__16070);
      }()];
      if (or__4335__auto__) {
        return or__4335__auto__;
      } else {
        var or__4335__auto____$1 = cljs.core._pr_writer["_"];
        if (or__4335__auto____$1) {
          return or__4335__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IPrintWithWriter.-pr-writer", o);
        }
      }
    }().call(null, o, writer, opts);
  }
};
cljs.core.IPending = function() {
  var obj16072 = {};
  return obj16072;
}();
cljs.core._realized_QMARK_ = function cljs$core$_realized_QMARK_(d) {
  if (function() {
    var and__4323__auto__ = d;
    if (and__4323__auto__) {
      return d.cljs$core$IPending$_realized_QMARK_$arity$1;
    } else {
      return and__4323__auto__;
    }
  }()) {
    return d.cljs$core$IPending$_realized_QMARK_$arity$1(d);
  } else {
    var x__4971__auto__ = d == null ? null : d;
    return function() {
      var or__4335__auto__ = cljs.core._realized_QMARK_[function() {
        var G__16076 = x__4971__auto__;
        return goog.typeOf(G__16076);
      }()];
      if (or__4335__auto__) {
        return or__4335__auto__;
      } else {
        var or__4335__auto____$1 = cljs.core._realized_QMARK_["_"];
        if (or__4335__auto____$1) {
          return or__4335__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IPending.-realized?", d);
        }
      }
    }().call(null, d);
  }
};
cljs.core.IWatchable = function() {
  var obj16078 = {};
  return obj16078;
}();
cljs.core._notify_watches = function cljs$core$_notify_watches(this$, oldval, newval) {
  if (function() {
    var and__4323__auto__ = this$;
    if (and__4323__auto__) {
      return this$.cljs$core$IWatchable$_notify_watches$arity$3;
    } else {
      return and__4323__auto__;
    }
  }()) {
    return this$.cljs$core$IWatchable$_notify_watches$arity$3(this$, oldval, newval);
  } else {
    var x__4971__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4335__auto__ = cljs.core._notify_watches[function() {
        var G__16082 = x__4971__auto__;
        return goog.typeOf(G__16082);
      }()];
      if (or__4335__auto__) {
        return or__4335__auto__;
      } else {
        var or__4335__auto____$1 = cljs.core._notify_watches["_"];
        if (or__4335__auto____$1) {
          return or__4335__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IWatchable.-notify-watches", this$);
        }
      }
    }().call(null, this$, oldval, newval);
  }
};
cljs.core._add_watch = function cljs$core$_add_watch(this$, key, f) {
  if (function() {
    var and__4323__auto__ = this$;
    if (and__4323__auto__) {
      return this$.cljs$core$IWatchable$_add_watch$arity$3;
    } else {
      return and__4323__auto__;
    }
  }()) {
    return this$.cljs$core$IWatchable$_add_watch$arity$3(this$, key, f);
  } else {
    var x__4971__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4335__auto__ = cljs.core._add_watch[function() {
        var G__16086 = x__4971__auto__;
        return goog.typeOf(G__16086);
      }()];
      if (or__4335__auto__) {
        return or__4335__auto__;
      } else {
        var or__4335__auto____$1 = cljs.core._add_watch["_"];
        if (or__4335__auto____$1) {
          return or__4335__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IWatchable.-add-watch", this$);
        }
      }
    }().call(null, this$, key, f);
  }
};
cljs.core._remove_watch = function cljs$core$_remove_watch(this$, key) {
  if (function() {
    var and__4323__auto__ = this$;
    if (and__4323__auto__) {
      return this$.cljs$core$IWatchable$_remove_watch$arity$2;
    } else {
      return and__4323__auto__;
    }
  }()) {
    return this$.cljs$core$IWatchable$_remove_watch$arity$2(this$, key);
  } else {
    var x__4971__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4335__auto__ = cljs.core._remove_watch[function() {
        var G__16090 = x__4971__auto__;
        return goog.typeOf(G__16090);
      }()];
      if (or__4335__auto__) {
        return or__4335__auto__;
      } else {
        var or__4335__auto____$1 = cljs.core._remove_watch["_"];
        if (or__4335__auto____$1) {
          return or__4335__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IWatchable.-remove-watch", this$);
        }
      }
    }().call(null, this$, key);
  }
};
cljs.core.IEditableCollection = function() {
  var obj16092 = {};
  return obj16092;
}();
cljs.core._as_transient = function cljs$core$_as_transient(coll) {
  if (function() {
    var and__4323__auto__ = coll;
    if (and__4323__auto__) {
      return coll.cljs$core$IEditableCollection$_as_transient$arity$1;
    } else {
      return and__4323__auto__;
    }
  }()) {
    return coll.cljs$core$IEditableCollection$_as_transient$arity$1(coll);
  } else {
    var x__4971__auto__ = coll == null ? null : coll;
    return function() {
      var or__4335__auto__ = cljs.core._as_transient[function() {
        var G__16096 = x__4971__auto__;
        return goog.typeOf(G__16096);
      }()];
      if (or__4335__auto__) {
        return or__4335__auto__;
      } else {
        var or__4335__auto____$1 = cljs.core._as_transient["_"];
        if (or__4335__auto____$1) {
          return or__4335__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IEditableCollection.-as-transient", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ITransientCollection = function() {
  var obj16098 = {};
  return obj16098;
}();
cljs.core._conj_BANG_ = function cljs$core$_conj_BANG_(tcoll, val) {
  if (function() {
    var and__4323__auto__ = tcoll;
    if (and__4323__auto__) {
      return tcoll.cljs$core$ITransientCollection$_conj_BANG_$arity$2;
    } else {
      return and__4323__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientCollection$_conj_BANG_$arity$2(tcoll, val);
  } else {
    var x__4971__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__4335__auto__ = cljs.core._conj_BANG_[function() {
        var G__16102 = x__4971__auto__;
        return goog.typeOf(G__16102);
      }()];
      if (or__4335__auto__) {
        return or__4335__auto__;
      } else {
        var or__4335__auto____$1 = cljs.core._conj_BANG_["_"];
        if (or__4335__auto____$1) {
          return or__4335__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ITransientCollection.-conj!", tcoll);
        }
      }
    }().call(null, tcoll, val);
  }
};
cljs.core._persistent_BANG_ = function cljs$core$_persistent_BANG_(tcoll) {
  if (function() {
    var and__4323__auto__ = tcoll;
    if (and__4323__auto__) {
      return tcoll.cljs$core$ITransientCollection$_persistent_BANG_$arity$1;
    } else {
      return and__4323__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientCollection$_persistent_BANG_$arity$1(tcoll);
  } else {
    var x__4971__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__4335__auto__ = cljs.core._persistent_BANG_[function() {
        var G__16106 = x__4971__auto__;
        return goog.typeOf(G__16106);
      }()];
      if (or__4335__auto__) {
        return or__4335__auto__;
      } else {
        var or__4335__auto____$1 = cljs.core._persistent_BANG_["_"];
        if (or__4335__auto____$1) {
          return or__4335__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ITransientCollection.-persistent!", tcoll);
        }
      }
    }().call(null, tcoll);
  }
};
cljs.core.ITransientAssociative = function() {
  var obj16108 = {};
  return obj16108;
}();
cljs.core._assoc_BANG_ = function cljs$core$_assoc_BANG_(tcoll, key, val) {
  if (function() {
    var and__4323__auto__ = tcoll;
    if (and__4323__auto__) {
      return tcoll.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3;
    } else {
      return and__4323__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3(tcoll, key, val);
  } else {
    var x__4971__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__4335__auto__ = cljs.core._assoc_BANG_[function() {
        var G__16112 = x__4971__auto__;
        return goog.typeOf(G__16112);
      }()];
      if (or__4335__auto__) {
        return or__4335__auto__;
      } else {
        var or__4335__auto____$1 = cljs.core._assoc_BANG_["_"];
        if (or__4335__auto____$1) {
          return or__4335__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ITransientAssociative.-assoc!", tcoll);
        }
      }
    }().call(null, tcoll, key, val);
  }
};
cljs.core.ITransientMap = function() {
  var obj16114 = {};
  return obj16114;
}();
cljs.core._dissoc_BANG_ = function cljs$core$_dissoc_BANG_(tcoll, key) {
  if (function() {
    var and__4323__auto__ = tcoll;
    if (and__4323__auto__) {
      return tcoll.cljs$core$ITransientMap$_dissoc_BANG_$arity$2;
    } else {
      return and__4323__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientMap$_dissoc_BANG_$arity$2(tcoll, key);
  } else {
    var x__4971__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__4335__auto__ = cljs.core._dissoc_BANG_[function() {
        var G__16118 = x__4971__auto__;
        return goog.typeOf(G__16118);
      }()];
      if (or__4335__auto__) {
        return or__4335__auto__;
      } else {
        var or__4335__auto____$1 = cljs.core._dissoc_BANG_["_"];
        if (or__4335__auto____$1) {
          return or__4335__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ITransientMap.-dissoc!", tcoll);
        }
      }
    }().call(null, tcoll, key);
  }
};
cljs.core.ITransientVector = function() {
  var obj16120 = {};
  return obj16120;
}();
cljs.core._assoc_n_BANG_ = function cljs$core$_assoc_n_BANG_(tcoll, n, val) {
  if (function() {
    var and__4323__auto__ = tcoll;
    if (and__4323__auto__) {
      return tcoll.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3;
    } else {
      return and__4323__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3(tcoll, n, val);
  } else {
    var x__4971__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__4335__auto__ = cljs.core._assoc_n_BANG_[function() {
        var G__16124 = x__4971__auto__;
        return goog.typeOf(G__16124);
      }()];
      if (or__4335__auto__) {
        return or__4335__auto__;
      } else {
        var or__4335__auto____$1 = cljs.core._assoc_n_BANG_["_"];
        if (or__4335__auto____$1) {
          return or__4335__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ITransientVector.-assoc-n!", tcoll);
        }
      }
    }().call(null, tcoll, n, val);
  }
};
cljs.core._pop_BANG_ = function cljs$core$_pop_BANG_(tcoll) {
  if (function() {
    var and__4323__auto__ = tcoll;
    if (and__4323__auto__) {
      return tcoll.cljs$core$ITransientVector$_pop_BANG_$arity$1;
    } else {
      return and__4323__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientVector$_pop_BANG_$arity$1(tcoll);
  } else {
    var x__4971__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__4335__auto__ = cljs.core._pop_BANG_[function() {
        var G__16128 = x__4971__auto__;
        return goog.typeOf(G__16128);
      }()];
      if (or__4335__auto__) {
        return or__4335__auto__;
      } else {
        var or__4335__auto____$1 = cljs.core._pop_BANG_["_"];
        if (or__4335__auto____$1) {
          return or__4335__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ITransientVector.-pop!", tcoll);
        }
      }
    }().call(null, tcoll);
  }
};
cljs.core.ITransientSet = function() {
  var obj16130 = {};
  return obj16130;
}();
cljs.core._disjoin_BANG_ = function cljs$core$_disjoin_BANG_(tcoll, v) {
  if (function() {
    var and__4323__auto__ = tcoll;
    if (and__4323__auto__) {
      return tcoll.cljs$core$ITransientSet$_disjoin_BANG_$arity$2;
    } else {
      return and__4323__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientSet$_disjoin_BANG_$arity$2(tcoll, v);
  } else {
    var x__4971__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__4335__auto__ = cljs.core._disjoin_BANG_[function() {
        var G__16134 = x__4971__auto__;
        return goog.typeOf(G__16134);
      }()];
      if (or__4335__auto__) {
        return or__4335__auto__;
      } else {
        var or__4335__auto____$1 = cljs.core._disjoin_BANG_["_"];
        if (or__4335__auto____$1) {
          return or__4335__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ITransientSet.-disjoin!", tcoll);
        }
      }
    }().call(null, tcoll, v);
  }
};
cljs.core.IComparable = function() {
  var obj16136 = {};
  return obj16136;
}();
cljs.core._compare = function cljs$core$_compare(x, y) {
  if (function() {
    var and__4323__auto__ = x;
    if (and__4323__auto__) {
      return x.cljs$core$IComparable$_compare$arity$2;
    } else {
      return and__4323__auto__;
    }
  }()) {
    return x.cljs$core$IComparable$_compare$arity$2(x, y);
  } else {
    var x__4971__auto__ = x == null ? null : x;
    return function() {
      var or__4335__auto__ = cljs.core._compare[function() {
        var G__16140 = x__4971__auto__;
        return goog.typeOf(G__16140);
      }()];
      if (or__4335__auto__) {
        return or__4335__auto__;
      } else {
        var or__4335__auto____$1 = cljs.core._compare["_"];
        if (or__4335__auto____$1) {
          return or__4335__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IComparable.-compare", x);
        }
      }
    }().call(null, x, y);
  }
};
cljs.core.IChunk = function() {
  var obj16142 = {};
  return obj16142;
}();
cljs.core._drop_first = function cljs$core$_drop_first(coll) {
  if (function() {
    var and__4323__auto__ = coll;
    if (and__4323__auto__) {
      return coll.cljs$core$IChunk$_drop_first$arity$1;
    } else {
      return and__4323__auto__;
    }
  }()) {
    return coll.cljs$core$IChunk$_drop_first$arity$1(coll);
  } else {
    var x__4971__auto__ = coll == null ? null : coll;
    return function() {
      var or__4335__auto__ = cljs.core._drop_first[function() {
        var G__16146 = x__4971__auto__;
        return goog.typeOf(G__16146);
      }()];
      if (or__4335__auto__) {
        return or__4335__auto__;
      } else {
        var or__4335__auto____$1 = cljs.core._drop_first["_"];
        if (or__4335__auto____$1) {
          return or__4335__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IChunk.-drop-first", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IChunkedSeq = function() {
  var obj16148 = {};
  return obj16148;
}();
cljs.core._chunked_first = function cljs$core$_chunked_first(coll) {
  if (function() {
    var and__4323__auto__ = coll;
    if (and__4323__auto__) {
      return coll.cljs$core$IChunkedSeq$_chunked_first$arity$1;
    } else {
      return and__4323__auto__;
    }
  }()) {
    return coll.cljs$core$IChunkedSeq$_chunked_first$arity$1(coll);
  } else {
    var x__4971__auto__ = coll == null ? null : coll;
    return function() {
      var or__4335__auto__ = cljs.core._chunked_first[function() {
        var G__16152 = x__4971__auto__;
        return goog.typeOf(G__16152);
      }()];
      if (or__4335__auto__) {
        return or__4335__auto__;
      } else {
        var or__4335__auto____$1 = cljs.core._chunked_first["_"];
        if (or__4335__auto____$1) {
          return or__4335__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IChunkedSeq.-chunked-first", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._chunked_rest = function cljs$core$_chunked_rest(coll) {
  if (function() {
    var and__4323__auto__ = coll;
    if (and__4323__auto__) {
      return coll.cljs$core$IChunkedSeq$_chunked_rest$arity$1;
    } else {
      return and__4323__auto__;
    }
  }()) {
    return coll.cljs$core$IChunkedSeq$_chunked_rest$arity$1(coll);
  } else {
    var x__4971__auto__ = coll == null ? null : coll;
    return function() {
      var or__4335__auto__ = cljs.core._chunked_rest[function() {
        var G__16156 = x__4971__auto__;
        return goog.typeOf(G__16156);
      }()];
      if (or__4335__auto__) {
        return or__4335__auto__;
      } else {
        var or__4335__auto____$1 = cljs.core._chunked_rest["_"];
        if (or__4335__auto____$1) {
          return or__4335__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IChunkedSeq.-chunked-rest", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IChunkedNext = function() {
  var obj16158 = {};
  return obj16158;
}();
cljs.core._chunked_next = function cljs$core$_chunked_next(coll) {
  if (function() {
    var and__4323__auto__ = coll;
    if (and__4323__auto__) {
      return coll.cljs$core$IChunkedNext$_chunked_next$arity$1;
    } else {
      return and__4323__auto__;
    }
  }()) {
    return coll.cljs$core$IChunkedNext$_chunked_next$arity$1(coll);
  } else {
    var x__4971__auto__ = coll == null ? null : coll;
    return function() {
      var or__4335__auto__ = cljs.core._chunked_next[function() {
        var G__16162 = x__4971__auto__;
        return goog.typeOf(G__16162);
      }()];
      if (or__4335__auto__) {
        return or__4335__auto__;
      } else {
        var or__4335__auto____$1 = cljs.core._chunked_next["_"];
        if (or__4335__auto____$1) {
          return or__4335__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IChunkedNext.-chunked-next", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.INamed = function() {
  var obj16164 = {};
  return obj16164;
}();
cljs.core._name = function cljs$core$_name(x) {
  if (function() {
    var and__4323__auto__ = x;
    if (and__4323__auto__) {
      return x.cljs$core$INamed$_name$arity$1;
    } else {
      return and__4323__auto__;
    }
  }()) {
    return x.cljs$core$INamed$_name$arity$1(x);
  } else {
    var x__4971__auto__ = x == null ? null : x;
    return function() {
      var or__4335__auto__ = cljs.core._name[function() {
        var G__16168 = x__4971__auto__;
        return goog.typeOf(G__16168);
      }()];
      if (or__4335__auto__) {
        return or__4335__auto__;
      } else {
        var or__4335__auto____$1 = cljs.core._name["_"];
        if (or__4335__auto____$1) {
          return or__4335__auto____$1;
        } else {
          throw cljs.core.missing_protocol("INamed.-name", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core._namespace = function cljs$core$_namespace(x) {
  if (function() {
    var and__4323__auto__ = x;
    if (and__4323__auto__) {
      return x.cljs$core$INamed$_namespace$arity$1;
    } else {
      return and__4323__auto__;
    }
  }()) {
    return x.cljs$core$INamed$_namespace$arity$1(x);
  } else {
    var x__4971__auto__ = x == null ? null : x;
    return function() {
      var or__4335__auto__ = cljs.core._namespace[function() {
        var G__16172 = x__4971__auto__;
        return goog.typeOf(G__16172);
      }()];
      if (or__4335__auto__) {
        return or__4335__auto__;
      } else {
        var or__4335__auto____$1 = cljs.core._namespace["_"];
        if (or__4335__auto____$1) {
          return or__4335__auto____$1;
        } else {
          throw cljs.core.missing_protocol("INamed.-namespace", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core.IAtom = function() {
  var obj16174 = {};
  return obj16174;
}();
cljs.core.IReset = function() {
  var obj16176 = {};
  return obj16176;
}();
cljs.core._reset_BANG_ = function cljs$core$_reset_BANG_(o, new_value) {
  if (function() {
    var and__4323__auto__ = o;
    if (and__4323__auto__) {
      return o.cljs$core$IReset$_reset_BANG_$arity$2;
    } else {
      return and__4323__auto__;
    }
  }()) {
    return o.cljs$core$IReset$_reset_BANG_$arity$2(o, new_value);
  } else {
    var x__4971__auto__ = o == null ? null : o;
    return function() {
      var or__4335__auto__ = cljs.core._reset_BANG_[function() {
        var G__16180 = x__4971__auto__;
        return goog.typeOf(G__16180);
      }()];
      if (or__4335__auto__) {
        return or__4335__auto__;
      } else {
        var or__4335__auto____$1 = cljs.core._reset_BANG_["_"];
        if (or__4335__auto____$1) {
          return or__4335__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IReset.-reset!", o);
        }
      }
    }().call(null, o, new_value);
  }
};
cljs.core.ISwap = function() {
  var obj16182 = {};
  return obj16182;
}();
cljs.core._swap_BANG_ = function cljs$core$_swap_BANG_() {
  var G__16184 = arguments.length;
  switch(G__16184) {
    case 2:
      return cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    case 5:
      return cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$2 = function(o, f) {
  if (function() {
    var and__4323__auto__ = o;
    if (and__4323__auto__) {
      return o.cljs$core$ISwap$_swap_BANG_$arity$2;
    } else {
      return and__4323__auto__;
    }
  }()) {
    return o.cljs$core$ISwap$_swap_BANG_$arity$2(o, f);
  } else {
    var x__4971__auto__ = o == null ? null : o;
    return function() {
      var or__4335__auto__ = cljs.core._swap_BANG_[function() {
        var G__16186 = x__4971__auto__;
        return goog.typeOf(G__16186);
      }()];
      if (or__4335__auto__) {
        return or__4335__auto__;
      } else {
        var or__4335__auto____$1 = cljs.core._swap_BANG_["_"];
        if (or__4335__auto____$1) {
          return or__4335__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ISwap.-swap!", o);
        }
      }
    }().call(null, o, f);
  }
};
cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$3 = function(o, f, a) {
  if (function() {
    var and__4323__auto__ = o;
    if (and__4323__auto__) {
      return o.cljs$core$ISwap$_swap_BANG_$arity$3;
    } else {
      return and__4323__auto__;
    }
  }()) {
    return o.cljs$core$ISwap$_swap_BANG_$arity$3(o, f, a);
  } else {
    var x__4971__auto__ = o == null ? null : o;
    return function() {
      var or__4335__auto__ = cljs.core._swap_BANG_[function() {
        var G__16188 = x__4971__auto__;
        return goog.typeOf(G__16188);
      }()];
      if (or__4335__auto__) {
        return or__4335__auto__;
      } else {
        var or__4335__auto____$1 = cljs.core._swap_BANG_["_"];
        if (or__4335__auto____$1) {
          return or__4335__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ISwap.-swap!", o);
        }
      }
    }().call(null, o, f, a);
  }
};
cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$4 = function(o, f, a, b) {
  if (function() {
    var and__4323__auto__ = o;
    if (and__4323__auto__) {
      return o.cljs$core$ISwap$_swap_BANG_$arity$4;
    } else {
      return and__4323__auto__;
    }
  }()) {
    return o.cljs$core$ISwap$_swap_BANG_$arity$4(o, f, a, b);
  } else {
    var x__4971__auto__ = o == null ? null : o;
    return function() {
      var or__4335__auto__ = cljs.core._swap_BANG_[function() {
        var G__16190 = x__4971__auto__;
        return goog.typeOf(G__16190);
      }()];
      if (or__4335__auto__) {
        return or__4335__auto__;
      } else {
        var or__4335__auto____$1 = cljs.core._swap_BANG_["_"];
        if (or__4335__auto____$1) {
          return or__4335__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ISwap.-swap!", o);
        }
      }
    }().call(null, o, f, a, b);
  }
};
cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$5 = function(o, f, a, b, xs) {
  if (function() {
    var and__4323__auto__ = o;
    if (and__4323__auto__) {
      return o.cljs$core$ISwap$_swap_BANG_$arity$5;
    } else {
      return and__4323__auto__;
    }
  }()) {
    return o.cljs$core$ISwap$_swap_BANG_$arity$5(o, f, a, b, xs);
  } else {
    var x__4971__auto__ = o == null ? null : o;
    return function() {
      var or__4335__auto__ = cljs.core._swap_BANG_[function() {
        var G__16192 = x__4971__auto__;
        return goog.typeOf(G__16192);
      }()];
      if (or__4335__auto__) {
        return or__4335__auto__;
      } else {
        var or__4335__auto____$1 = cljs.core._swap_BANG_["_"];
        if (or__4335__auto____$1) {
          return or__4335__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ISwap.-swap!", o);
        }
      }
    }().call(null, o, f, a, b, xs);
  }
};
cljs.core._swap_BANG_.cljs$lang$maxFixedArity = 5;
cljs.core.IVolatile = function() {
  var obj16195 = {};
  return obj16195;
}();
cljs.core._vreset_BANG_ = function cljs$core$_vreset_BANG_(o, new_value) {
  if (function() {
    var and__4323__auto__ = o;
    if (and__4323__auto__) {
      return o.cljs$core$IVolatile$_vreset_BANG_$arity$2;
    } else {
      return and__4323__auto__;
    }
  }()) {
    return o.cljs$core$IVolatile$_vreset_BANG_$arity$2(o, new_value);
  } else {
    var x__4971__auto__ = o == null ? null : o;
    return function() {
      var or__4335__auto__ = cljs.core._vreset_BANG_[function() {
        var G__16199 = x__4971__auto__;
        return goog.typeOf(G__16199);
      }()];
      if (or__4335__auto__) {
        return or__4335__auto__;
      } else {
        var or__4335__auto____$1 = cljs.core._vreset_BANG_["_"];
        if (or__4335__auto____$1) {
          return or__4335__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IVolatile.-vreset!", o);
        }
      }
    }().call(null, o, new_value);
  }
};
cljs.core.IIterable = function() {
  var obj16201 = {};
  return obj16201;
}();
cljs.core._iterator = function cljs$core$_iterator(coll) {
  if (function() {
    var and__4323__auto__ = coll;
    if (and__4323__auto__) {
      return coll.cljs$core$IIterable$_iterator$arity$1;
    } else {
      return and__4323__auto__;
    }
  }()) {
    return coll.cljs$core$IIterable$_iterator$arity$1(coll);
  } else {
    var x__4971__auto__ = coll == null ? null : coll;
    return function() {
      var or__4335__auto__ = cljs.core._iterator[function() {
        var G__16205 = x__4971__auto__;
        return goog.typeOf(G__16205);
      }()];
      if (or__4335__auto__) {
        return or__4335__auto__;
      } else {
        var or__4335__auto____$1 = cljs.core._iterator["_"];
        if (or__4335__auto____$1) {
          return or__4335__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IIterable.-iterator", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.StringBufferWriter = function(sb) {
  this.sb = sb;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 1073741824;
};
cljs.core.StringBufferWriter.prototype.cljs$core$IWriter$_write$arity$2 = function(_, s) {
  var self__ = this;
  var ___$1 = this;
  return self__.sb.append(s);
};
cljs.core.StringBufferWriter.prototype.cljs$core$IWriter$_flush$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return null;
};
cljs.core.StringBufferWriter.cljs$lang$type = true;
cljs.core.StringBufferWriter.cljs$lang$ctorStr = "cljs.core/StringBufferWriter";
cljs.core.StringBufferWriter.cljs$lang$ctorPrWriter = function(this__4914__auto__, writer__4915__auto__, opt__4916__auto__) {
  return cljs.core._write(writer__4915__auto__, "cljs.core/StringBufferWriter");
};
cljs.core.__GT_StringBufferWriter = function cljs$core$__GT_StringBufferWriter(sb) {
  return new cljs.core.StringBufferWriter(sb);
};
cljs.core.pr_str_STAR_ = function cljs$core$pr_str_STAR_(obj) {
  var sb = new goog.string.StringBuffer;
  var writer = new cljs.core.StringBufferWriter(sb);
  obj.cljs$core$IPrintWithWriter$_pr_writer$arity$3(null, writer, cljs.core.pr_opts());
  writer.cljs$core$IWriter$_flush$arity$1(null);
  return[cljs.core.str(sb)].join("");
};
cljs.core.int_rotate_left = function cljs$core$int_rotate_left(x, n) {
  return x << n | x >>> -n;
};
if (typeof Math.imul !== "undefined" && !(function() {
  var G__16208 = 4294967295;
  var G__16209 = 5;
  return Math.imul.cljs$core$IFn$_invoke$arity$2 ? Math.imul.cljs$core$IFn$_invoke$arity$2(G__16208, G__16209) : Math.imul.call(null, G__16208, G__16209);
}() === 0)) {
  cljs.core.imul = function cljs$core$imul(a, b) {
    var G__16212 = a;
    var G__16213 = b;
    return Math.imul.cljs$core$IFn$_invoke$arity$2 ? Math.imul.cljs$core$IFn$_invoke$arity$2(G__16212, G__16213) : Math.imul.call(null, G__16212, G__16213);
  };
} else {
  cljs.core.imul = function cljs$core$imul(a, b) {
    var ah = a >>> 16 & 65535;
    var al = a & 65535;
    var bh = b >>> 16 & 65535;
    var bl = b & 65535;
    return al * bl + (ah * bl + al * bh << 16 >>> 0) | 0;
  };
}
cljs.core.m3_seed = 0;
cljs.core.m3_C1 = 3432918353 | 0;
cljs.core.m3_C2 = 461845907 | 0;
cljs.core.m3_mix_K1 = function cljs$core$m3_mix_K1(k1) {
  return cljs.core.imul(cljs.core.int_rotate_left(cljs.core.imul(k1 | 0, cljs.core.m3_C1), 15), cljs.core.m3_C2);
};
cljs.core.m3_mix_H1 = function cljs$core$m3_mix_H1(h1, k1) {
  return cljs.core.imul(cljs.core.int_rotate_left((h1 | 0) ^ (k1 | 0), 13), 5) + (3864292196 | 0) | 0;
};
cljs.core.m3_fmix = function cljs$core$m3_fmix(h1, len) {
  var h1__$1 = h1 | 0;
  var h1__$2 = h1__$1 ^ len;
  var h1__$3 = h1__$2 ^ h1__$2 >>> 16;
  var h1__$4 = cljs.core.imul(h1__$3, 2246822507 | 0);
  var h1__$5 = h1__$4 ^ h1__$4 >>> 13;
  var h1__$6 = cljs.core.imul(h1__$5, 3266489909 | 0);
  var h1__$7 = h1__$6 ^ h1__$6 >>> 16;
  return h1__$7;
};
cljs.core.m3_hash_int = function cljs$core$m3_hash_int(in$) {
  if (in$ === 0) {
    return in$;
  } else {
    var k1 = cljs.core.m3_mix_K1(in$);
    var h1 = cljs.core.m3_mix_H1(cljs.core.m3_seed, k1);
    return cljs.core.m3_fmix(h1, 4);
  }
};
cljs.core.m3_hash_unencoded_chars = function cljs$core$m3_hash_unencoded_chars(in$) {
  var h1 = function() {
    var i = 1;
    var h1 = cljs.core.m3_seed;
    while (true) {
      if (i < in$.length) {
        var G__16214 = i + 2;
        var G__16215 = cljs.core.m3_mix_H1(h1, cljs.core.m3_mix_K1(in$.charCodeAt(i - 1) | in$.charCodeAt(i) << 16));
        i = G__16214;
        h1 = G__16215;
        continue;
      } else {
        return h1;
      }
      break;
    }
  }();
  var h1__$1 = (in$.length & 1) === 1 ? h1 ^ cljs.core.m3_mix_K1(in$.charCodeAt(in$.length - 1)) : h1;
  return cljs.core.m3_fmix(h1__$1, cljs.core.imul(2, in$.length));
};
cljs.core.string_hash_cache = function() {
  var obj16217 = {};
  return obj16217;
}();
cljs.core.string_hash_cache_count = 0;
cljs.core.hash_string_STAR_ = function cljs$core$hash_string_STAR_(s) {
  if (!(s == null)) {
    var len = s.length;
    if (len > 0) {
      var i = 0;
      var hash = 0;
      while (true) {
        if (i < len) {
          var G__16218 = i + 1;
          var G__16219 = cljs.core.imul(31, hash) + s.charCodeAt(i);
          i = G__16218;
          hash = G__16219;
          continue;
        } else {
          return hash;
        }
        break;
      }
    } else {
      return 0;
    }
  } else {
    return 0;
  }
};
cljs.core.add_to_string_hash_cache = function cljs$core$add_to_string_hash_cache(k) {
  var h = cljs.core.hash_string_STAR_(k);
  cljs.core.string_hash_cache[k] = h;
  cljs.core.string_hash_cache_count = cljs.core.string_hash_cache_count + 1;
  return h;
};
cljs.core.hash_string = function cljs$core$hash_string(k) {
  if (cljs.core.string_hash_cache_count > 255) {
    cljs.core.string_hash_cache = function() {
      var obj16223 = {};
      return obj16223;
    }();
    cljs.core.string_hash_cache_count = 0;
  } else {
  }
  var h = cljs.core.string_hash_cache[k];
  if (typeof h === "number") {
    return h;
  } else {
    return cljs.core.add_to_string_hash_cache(k);
  }
};
cljs.core.hash = function cljs$core$hash(o) {
  if (function() {
    var G__16226 = o;
    if (G__16226) {
      var bit__5002__auto__ = G__16226.cljs$lang$protocol_mask$partition0$ & 4194304;
      if (bit__5002__auto__ || G__16226.cljs$core$IHash$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return o.cljs$core$IHash$_hash$arity$1(null);
  } else {
    if (typeof o === "number") {
      return function() {
        var G__16227 = o;
        return Math.floor.cljs$core$IFn$_invoke$arity$1 ? Math.floor.cljs$core$IFn$_invoke$arity$1(G__16227) : Math.floor.call(null, G__16227);
      }() % 2147483647;
    } else {
      if (o === true) {
        return 1;
      } else {
        if (o === false) {
          return 0;
        } else {
          if (typeof o === "string") {
            return cljs.core.m3_hash_int(cljs.core.hash_string(o));
          } else {
            if (o instanceof Date) {
              return o.valueOf();
            } else {
              if (o == null) {
                return 0;
              } else {
                return cljs.core._hash(o);
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.hash_combine = function cljs$core$hash_combine(seed, hash) {
  return seed ^ hash + 2654435769 + (seed << 6) + (seed >> 2);
};
cljs.core.instance_QMARK_ = function cljs$core$instance_QMARK_(t, o) {
  return o instanceof t;
};
cljs.core.symbol_QMARK_ = function cljs$core$symbol_QMARK_(x) {
  return x instanceof cljs.core.Symbol;
};
cljs.core.hash_symbol = function cljs$core$hash_symbol(sym) {
  return cljs.core.hash_combine(cljs.core.m3_hash_unencoded_chars(sym.name), cljs.core.hash_string(sym.ns));
};
cljs.core.compare_symbols = function cljs$core$compare_symbols(a, b) {
  if (a.str === b.str) {
    return 0;
  } else {
    if (cljs.core.truth_(function() {
      var and__4323__auto__ = cljs.core.not(a.ns);
      if (and__4323__auto__) {
        return b.ns;
      } else {
        return and__4323__auto__;
      }
    }())) {
      return-1;
    } else {
      if (cljs.core.truth_(a.ns)) {
        if (cljs.core.not(b.ns)) {
          return 1;
        } else {
          var nsc = function() {
            var G__16234 = a.ns;
            var G__16235 = b.ns;
            return goog.array.defaultCompare(G__16234, G__16235);
          }();
          if (0 === nsc) {
            var G__16236 = a.name;
            var G__16237 = b.name;
            return goog.array.defaultCompare(G__16236, G__16237);
          } else {
            return nsc;
          }
        }
      } else {
        var G__16238 = a.name;
        var G__16239 = b.name;
        return goog.array.defaultCompare(G__16238, G__16239);
      }
    }
  }
};
cljs.core.Symbol = function(ns, name, str, _hash, _meta) {
  this.ns = ns;
  this.name = name;
  this.str = str;
  this._hash = _hash;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition0$ = 2154168321;
  this.cljs$lang$protocol_mask$partition1$ = 4096;
};
cljs.core.Symbol.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(o, writer, _) {
  var self__ = this;
  var o__$1 = this;
  return cljs.core._write(writer, self__.str);
};
cljs.core.Symbol.prototype.cljs$core$INamed$_name$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.name;
};
cljs.core.Symbol.prototype.cljs$core$INamed$_namespace$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.ns;
};
cljs.core.Symbol.prototype.cljs$core$IHash$_hash$arity$1 = function(sym) {
  var self__ = this;
  var sym__$1 = this;
  var h__4751__auto__ = self__._hash;
  if (!(h__4751__auto__ == null)) {
    return h__4751__auto__;
  } else {
    var h__4751__auto____$1 = cljs.core.hash_symbol(sym__$1);
    self__._hash = h__4751__auto____$1;
    return h__4751__auto____$1;
  }
};
cljs.core.Symbol.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_, new_meta) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Symbol(self__.ns, self__.name, self__.str, self__._hash, new_meta);
};
cljs.core.Symbol.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__._meta;
};
cljs.core.Symbol.prototype.call = function() {
  var G__16241 = null;
  var G__16241__2 = function(self__, coll) {
    var self__ = this;
    var self____$1 = this;
    var sym = self____$1;
    return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll, sym, null);
  };
  var G__16241__3 = function(self__, coll, not_found) {
    var self__ = this;
    var self____$1 = this;
    var sym = self____$1;
    return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll, sym, not_found);
  };
  G__16241 = function(self__, coll, not_found) {
    switch(arguments.length) {
      case 2:
        return G__16241__2.call(this, self__, coll);
      case 3:
        return G__16241__3.call(this, self__, coll, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__16241.cljs$core$IFn$_invoke$arity$2 = G__16241__2;
  G__16241.cljs$core$IFn$_invoke$arity$3 = G__16241__3;
  return G__16241;
}();
cljs.core.Symbol.prototype.apply = function(self__, args16240) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args16240)));
};
cljs.core.Symbol.prototype.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  var self__ = this;
  var sym = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll, sym, null);
};
cljs.core.Symbol.prototype.cljs$core$IFn$_invoke$arity$2 = function(coll, not_found) {
  var self__ = this;
  var sym = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll, sym, not_found);
};
cljs.core.Symbol.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  if (other instanceof cljs.core.Symbol) {
    return self__.str === other.str;
  } else {
    return false;
  }
};
cljs.core.Symbol.prototype.toString = function() {
  var self__ = this;
  var _ = this;
  return self__.str;
};
cljs.core.Symbol.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.Symbol.cljs$lang$type = true;
cljs.core.Symbol.cljs$lang$ctorStr = "cljs.core/Symbol";
cljs.core.Symbol.cljs$lang$ctorPrWriter = function(this__4914__auto__, writer__4915__auto__, opt__4916__auto__) {
  return cljs.core._write(writer__4915__auto__, "cljs.core/Symbol");
};
cljs.core.__GT_Symbol = function cljs$core$__GT_Symbol(ns, name, str, _hash, _meta) {
  return new cljs.core.Symbol(ns, name, str, _hash, _meta);
};
cljs.core.symbol = function cljs$core$symbol() {
  var G__16243 = arguments.length;
  switch(G__16243) {
    case 1:
      return cljs.core.symbol.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.symbol.cljs$core$IFn$_invoke$arity$1 = function(name) {
  if (name instanceof cljs.core.Symbol) {
    return name;
  } else {
    return cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(null, name);
  }
};
cljs.core.symbol.cljs$core$IFn$_invoke$arity$2 = function(ns, name) {
  var sym_str = !(ns == null) ? [cljs.core.str(ns), cljs.core.str("/"), cljs.core.str(name)].join("") : name;
  return new cljs.core.Symbol(ns, name, sym_str, null, null);
};
cljs.core.symbol.cljs$lang$maxFixedArity = 2;
cljs.core.Var = function(val, sym, _meta) {
  this.val = val;
  this.sym = sym;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 163841;
};
cljs.core.Var.prototype.call = function() {
  var G__16290 = null;
  var G__16290__1 = function(self__) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null);
  };
  var G__16290__2 = function(self__, a) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a);
  };
  var G__16290__3 = function(self__, a, b) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b);
  };
  var G__16290__4 = function(self__, a, b, c) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c);
  };
  var G__16290__5 = function(self__, a, b, c, d) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d);
  };
  var G__16290__6 = function(self__, a, b, c, d, e) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e);
  };
  var G__16290__7 = function(self__, a, b, c, d, e, f) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f);
  };
  var G__16290__8 = function(self__, a, b, c, d, e, f, g) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g);
  };
  var G__16290__9 = function(self__, a, b, c, d, e, f, g, h) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h);
  };
  var G__16290__10 = function(self__, a, b, c, d, e, f, g, h, i) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h, i);
  };
  var G__16290__11 = function(self__, a, b, c, d, e, f, g, h, i, j) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h, i, j);
  };
  var G__16290__12 = function(self__, a, b, c, d, e, f, g, h, i, j, k) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h, i, j, k);
  };
  var G__16290__13 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h, i, j, k, l);
  };
  var G__16290__14 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
  };
  var G__16290__15 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
  };
  var G__16290__16 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
  };
  var G__16290__17 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
  };
  var G__16290__18 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
  };
  var G__16290__19 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
  };
  var G__16290__20 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
  };
  var G__16290__21 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
  };
  var G__16290__22 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__16246 = function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }();
    var G__16247 = a;
    var G__16248 = b;
    var G__16249 = c;
    var G__16250 = d;
    var G__16251 = e;
    var G__16252 = f;
    var G__16253 = g;
    var G__16254 = h;
    var G__16255 = i;
    var G__16256 = j;
    var G__16257 = k;
    var G__16258 = l;
    var G__16259 = m;
    var G__16260 = n;
    var G__16261 = o;
    var G__16262 = p;
    var G__16263 = q;
    var G__16264 = r;
    var G__16265 = s;
    var G__16266 = t;
    var G__16267 = rest;
    return cljs.core.apply.cljs$core$IFn$_invoke$arity$22 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$22(G__16246, G__16247, G__16248, G__16249, G__16250, G__16251, G__16252, G__16253, G__16254, G__16255, G__16256, G__16257, G__16258, G__16259, G__16260, G__16261, G__16262, G__16263, G__16264, G__16265, G__16266, G__16267) : cljs.core.apply.call(null, G__16246, G__16247, G__16248, G__16249, G__16250, G__16251, G__16252, G__16253, G__16254, G__16255, G__16256, G__16257, G__16258, G__16259, G__16260, 
    G__16261, G__16262, G__16263, G__16264, G__16265, G__16266, G__16267);
  };
  G__16290 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    switch(arguments.length) {
      case 1:
        return G__16290__1.call(this, self__);
      case 2:
        return G__16290__2.call(this, self__, a);
      case 3:
        return G__16290__3.call(this, self__, a, b);
      case 4:
        return G__16290__4.call(this, self__, a, b, c);
      case 5:
        return G__16290__5.call(this, self__, a, b, c, d);
      case 6:
        return G__16290__6.call(this, self__, a, b, c, d, e);
      case 7:
        return G__16290__7.call(this, self__, a, b, c, d, e, f);
      case 8:
        return G__16290__8.call(this, self__, a, b, c, d, e, f, g);
      case 9:
        return G__16290__9.call(this, self__, a, b, c, d, e, f, g, h);
      case 10:
        return G__16290__10.call(this, self__, a, b, c, d, e, f, g, h, i);
      case 11:
        return G__16290__11.call(this, self__, a, b, c, d, e, f, g, h, i, j);
      case 12:
        return G__16290__12.call(this, self__, a, b, c, d, e, f, g, h, i, j, k);
      case 13:
        return G__16290__13.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l);
      case 14:
        return G__16290__14.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m);
      case 15:
        return G__16290__15.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
      case 16:
        return G__16290__16.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
      case 17:
        return G__16290__17.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
      case 18:
        return G__16290__18.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
      case 19:
        return G__16290__19.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
      case 20:
        return G__16290__20.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
      case 21:
        return G__16290__21.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
      case 22:
        return G__16290__22.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__16290.cljs$core$IFn$_invoke$arity$1 = G__16290__1;
  G__16290.cljs$core$IFn$_invoke$arity$2 = G__16290__2;
  G__16290.cljs$core$IFn$_invoke$arity$3 = G__16290__3;
  G__16290.cljs$core$IFn$_invoke$arity$4 = G__16290__4;
  G__16290.cljs$core$IFn$_invoke$arity$5 = G__16290__5;
  G__16290.cljs$core$IFn$_invoke$arity$6 = G__16290__6;
  G__16290.cljs$core$IFn$_invoke$arity$7 = G__16290__7;
  G__16290.cljs$core$IFn$_invoke$arity$8 = G__16290__8;
  G__16290.cljs$core$IFn$_invoke$arity$9 = G__16290__9;
  G__16290.cljs$core$IFn$_invoke$arity$10 = G__16290__10;
  G__16290.cljs$core$IFn$_invoke$arity$11 = G__16290__11;
  G__16290.cljs$core$IFn$_invoke$arity$12 = G__16290__12;
  G__16290.cljs$core$IFn$_invoke$arity$13 = G__16290__13;
  G__16290.cljs$core$IFn$_invoke$arity$14 = G__16290__14;
  G__16290.cljs$core$IFn$_invoke$arity$15 = G__16290__15;
  G__16290.cljs$core$IFn$_invoke$arity$16 = G__16290__16;
  G__16290.cljs$core$IFn$_invoke$arity$17 = G__16290__17;
  G__16290.cljs$core$IFn$_invoke$arity$18 = G__16290__18;
  G__16290.cljs$core$IFn$_invoke$arity$19 = G__16290__19;
  G__16290.cljs$core$IFn$_invoke$arity$20 = G__16290__20;
  G__16290.cljs$core$IFn$_invoke$arity$21 = G__16290__21;
  G__16290.cljs$core$IFn$_invoke$arity$22 = G__16290__22;
  return G__16290;
}();
cljs.core.Var.prototype.apply = function(self__, args16245) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args16245)));
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$0 = function() {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$1 = function(a) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$2 = function(a, b) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$3 = function(a, b, c) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$4 = function(a, b, c, d) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$5 = function(a, b, c, d, e) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$6 = function(a, b, c, d, e, f) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$7 = function(a, b, c, d, e, f, g) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$8 = function(a, b, c, d, e, f, g, h) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$9 = function(a, b, c, d, e, f, g, h, i) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h, i);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$10 = function(a, b, c, d, e, f, g, h, i, j) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h, i, j);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$11 = function(a, b, c, d, e, f, g, h, i, j, k) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h, i, j, k);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$12 = function(a, b, c, d, e, f, g, h, i, j, k, l) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h, i, j, k, l);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$13 = function(a, b, c, d, e, f, g, h, i, j, k, l, m) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$14 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$15 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$16 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$17 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$18 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$19 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$20 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$21 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
  var self__ = this;
  var _ = this;
  var G__16268 = function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }();
  var G__16269 = a;
  var G__16270 = b;
  var G__16271 = c;
  var G__16272 = d;
  var G__16273 = e;
  var G__16274 = f;
  var G__16275 = g;
  var G__16276 = h;
  var G__16277 = i;
  var G__16278 = j;
  var G__16279 = k;
  var G__16280 = l;
  var G__16281 = m;
  var G__16282 = n;
  var G__16283 = o;
  var G__16284 = p;
  var G__16285 = q;
  var G__16286 = r;
  var G__16287 = s;
  var G__16288 = t;
  var G__16289 = rest;
  return cljs.core.apply.cljs$core$IFn$_invoke$arity$22 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$22(G__16268, G__16269, G__16270, G__16271, G__16272, G__16273, G__16274, G__16275, G__16276, G__16277, G__16278, G__16279, G__16280, G__16281, G__16282, G__16283, G__16284, G__16285, G__16286, G__16287, G__16288, G__16289) : cljs.core.apply.call(null, G__16268, G__16269, G__16270, G__16271, G__16272, G__16273, G__16274, G__16275, G__16276, G__16277, G__16278, G__16279, G__16280, G__16281, G__16282, 
  G__16283, G__16284, G__16285, G__16286, G__16287, G__16288, G__16289);
};
cljs.core.Var.prototype.cljs$core$Fn$ = true;
cljs.core.Var.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__._meta;
};
cljs.core.Var.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
};
cljs.core.Var.cljs$lang$type = true;
cljs.core.Var.cljs$lang$ctorStr = "cljs.core/Var";
cljs.core.Var.cljs$lang$ctorPrWriter = function(this__4914__auto__, writer__4915__auto__, opt__4916__auto__) {
  return cljs.core._write(writer__4915__auto__, "cljs.core/Var");
};
cljs.core.__GT_Var = function cljs$core$__GT_Var(val, sym, _meta) {
  return new cljs.core.Var(val, sym, _meta);
};
cljs.core.iterable_QMARK_ = function cljs$core$iterable_QMARK_(x) {
  var G__16292 = x;
  if (G__16292) {
    var bit__5009__auto__ = null;
    if (cljs.core.truth_(function() {
      var or__4335__auto__ = bit__5009__auto__;
      if (cljs.core.truth_(or__4335__auto__)) {
        return or__4335__auto__;
      } else {
        return G__16292.cljs$core$IIterable$;
      }
    }())) {
      return true;
    } else {
      if (!G__16292.cljs$lang$protocol_mask$partition$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IIterable, G__16292);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IIterable, G__16292);
  }
};
cljs.core.clone = function cljs$core$clone(value) {
  return cljs.core._clone(value);
};
cljs.core.cloneable_QMARK_ = function cljs$core$cloneable_QMARK_(value) {
  var G__16294 = value;
  if (G__16294) {
    var bit__5009__auto__ = G__16294.cljs$lang$protocol_mask$partition1$ & 8192;
    if (bit__5009__auto__ || G__16294.cljs$core$ICloneable$) {
      return true;
    } else {
      if (!G__16294.cljs$lang$protocol_mask$partition1$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.ICloneable, G__16294);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.ICloneable, G__16294);
  }
};
cljs.core.seq = function cljs$core$seq(coll) {
  if (coll == null) {
    return null;
  } else {
    if (function() {
      var G__16296 = coll;
      if (G__16296) {
        var bit__5002__auto__ = G__16296.cljs$lang$protocol_mask$partition0$ & 8388608;
        if (bit__5002__auto__ || G__16296.cljs$core$ISeqable$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return coll.cljs$core$ISeqable$_seq$arity$1(null);
    } else {
      if (cljs.core.array_QMARK_(coll)) {
        if (coll.length === 0) {
          return null;
        } else {
          return new cljs.core.IndexedSeq(coll, 0);
        }
      } else {
        if (typeof coll === "string") {
          if (coll.length === 0) {
            return null;
          } else {
            return new cljs.core.IndexedSeq(coll, 0);
          }
        } else {
          if (cljs.core.native_satisfies_QMARK_(cljs.core.ISeqable, coll)) {
            return cljs.core._seq(coll);
          } else {
            throw new Error([cljs.core.str(coll), cljs.core.str(" is not ISeqable")].join(""));
          }
        }
      }
    }
  }
};
cljs.core.first = function cljs$core$first(coll) {
  if (coll == null) {
    return null;
  } else {
    if (function() {
      var G__16298 = coll;
      if (G__16298) {
        var bit__5002__auto__ = G__16298.cljs$lang$protocol_mask$partition0$ & 64;
        if (bit__5002__auto__ || G__16298.cljs$core$ISeq$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return coll.cljs$core$ISeq$_first$arity$1(null);
    } else {
      var s = cljs.core.seq(coll);
      if (s == null) {
        return null;
      } else {
        return cljs.core._first(s);
      }
    }
  }
};
cljs.core.rest = function cljs$core$rest(coll) {
  if (!(coll == null)) {
    if (function() {
      var G__16300 = coll;
      if (G__16300) {
        var bit__5002__auto__ = G__16300.cljs$lang$protocol_mask$partition0$ & 64;
        if (bit__5002__auto__ || G__16300.cljs$core$ISeq$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return coll.cljs$core$ISeq$_rest$arity$1(null);
    } else {
      var s = cljs.core.seq(coll);
      if (s) {
        return cljs.core._rest(s);
      } else {
        return cljs.core.List.EMPTY;
      }
    }
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.next = function cljs$core$next(coll) {
  if (coll == null) {
    return null;
  } else {
    if (function() {
      var G__16302 = coll;
      if (G__16302) {
        var bit__5002__auto__ = G__16302.cljs$lang$protocol_mask$partition0$ & 128;
        if (bit__5002__auto__ || G__16302.cljs$core$INext$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return coll.cljs$core$INext$_next$arity$1(null);
    } else {
      return cljs.core.seq(cljs.core.rest(coll));
    }
  }
};
cljs.core._EQ_ = function cljs$core$_EQ_() {
  var G__16307 = arguments.length;
  switch(G__16307) {
    case 1:
      return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5386__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5386__auto__);
  }
};
cljs.core._EQ_.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return true;
};
cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  if (x == null) {
    return y == null;
  } else {
    return x === y || cljs.core._equiv(x, y);
  }
};
cljs.core._EQ_.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  while (true) {
    if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(x, y)) {
      if (cljs.core.next(more)) {
        var G__16309 = y;
        var G__16310 = cljs.core.first(more);
        var G__16311 = cljs.core.next(more);
        x = G__16309;
        y = G__16310;
        more = G__16311;
        continue;
      } else {
        return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(y, cljs.core.first(more));
      }
    } else {
      return false;
    }
    break;
  }
};
cljs.core._EQ_.cljs$lang$applyTo = function(seq16303) {
  var G__16304 = cljs.core.first(seq16303);
  var seq16303__$1 = cljs.core.next(seq16303);
  var G__16305 = cljs.core.first(seq16303__$1);
  var seq16303__$2 = cljs.core.next(seq16303__$1);
  return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$variadic(G__16304, G__16305, seq16303__$2);
};
cljs.core._EQ_.cljs$lang$maxFixedArity = 2;
cljs.core.ES6Iterator = function(s) {
  this.s = s;
};
cljs.core.ES6Iterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  if (!(self__.s == null)) {
    var x = cljs.core.first(self__.s);
    self__.s = cljs.core.next(self__.s);
    return{"done":false, "value":x};
  } else {
    return{"done":true, "value":null};
  }
};
cljs.core.ES6Iterator.cljs$lang$type = true;
cljs.core.ES6Iterator.cljs$lang$ctorStr = "cljs.core/ES6Iterator";
cljs.core.ES6Iterator.cljs$lang$ctorPrWriter = function(this__4914__auto__, writer__4915__auto__, opt__4916__auto__) {
  return cljs.core._write(writer__4915__auto__, "cljs.core/ES6Iterator");
};
cljs.core.__GT_ES6Iterator = function cljs$core$__GT_ES6Iterator(s) {
  return new cljs.core.ES6Iterator(s);
};
cljs.core.es6_iterator = function cljs$core$es6_iterator(coll) {
  return new cljs.core.ES6Iterator(cljs.core.seq(coll));
};
cljs.core.ES6IteratorSeq = function(value, iter, _rest) {
  this.value = value;
  this.iter = iter;
  this._rest = _rest;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 8388672;
};
cljs.core.ES6IteratorSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.value;
};
cljs.core.ES6IteratorSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (self__._rest == null) {
    self__._rest = function() {
      var G__16312 = self__.iter;
      return cljs.core.es6_iterator_seq.cljs$core$IFn$_invoke$arity$1 ? cljs.core.es6_iterator_seq.cljs$core$IFn$_invoke$arity$1(G__16312) : cljs.core.es6_iterator_seq.call(null, G__16312);
    }();
  } else {
  }
  return self__._rest;
};
cljs.core.ES6IteratorSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.ES6IteratorSeq.cljs$lang$type = true;
cljs.core.ES6IteratorSeq.cljs$lang$ctorStr = "cljs.core/ES6IteratorSeq";
cljs.core.ES6IteratorSeq.cljs$lang$ctorPrWriter = function(this__4914__auto__, writer__4915__auto__, opt__4916__auto__) {
  return cljs.core._write(writer__4915__auto__, "cljs.core/ES6IteratorSeq");
};
cljs.core.__GT_ES6IteratorSeq = function cljs$core$__GT_ES6IteratorSeq(value, iter, _rest) {
  return new cljs.core.ES6IteratorSeq(value, iter, _rest);
};
cljs.core.es6_iterator_seq = function cljs$core$es6_iterator_seq(iter) {
  var v = iter.next();
  if (cljs.core.truth_(v.done)) {
    return cljs.core.List.EMPTY;
  } else {
    return new cljs.core.ES6IteratorSeq(v.value, iter, null);
  }
};
cljs.core.mix_collection_hash = function cljs$core$mix_collection_hash(hash_basis, count) {
  var h1 = cljs.core.m3_seed;
  var k1 = cljs.core.m3_mix_K1(hash_basis);
  var h1__$1 = cljs.core.m3_mix_H1(h1, k1);
  return cljs.core.m3_fmix(h1__$1, count);
};
cljs.core.hash_ordered_coll = function cljs$core$hash_ordered_coll(coll) {
  var n = 0;
  var hash_code = 1;
  var coll__$1 = cljs.core.seq(coll);
  while (true) {
    if (!(coll__$1 == null)) {
      var G__16313 = n + 1;
      var G__16314 = cljs.core.imul(31, hash_code) + cljs.core.hash(cljs.core.first(coll__$1)) | 0;
      var G__16315 = cljs.core.next(coll__$1);
      n = G__16313;
      hash_code = G__16314;
      coll__$1 = G__16315;
      continue;
    } else {
      return cljs.core.mix_collection_hash(hash_code, n);
    }
    break;
  }
};
cljs.core.empty_ordered_hash = cljs.core.mix_collection_hash(1, 0);
cljs.core.hash_unordered_coll = function cljs$core$hash_unordered_coll(coll) {
  var n = 0;
  var hash_code = 0;
  var coll__$1 = cljs.core.seq(coll);
  while (true) {
    if (!(coll__$1 == null)) {
      var G__16316 = n + 1;
      var G__16317 = hash_code + cljs.core.hash(cljs.core.first(coll__$1)) | 0;
      var G__16318 = cljs.core.next(coll__$1);
      n = G__16316;
      hash_code = G__16317;
      coll__$1 = G__16318;
      continue;
    } else {
      return cljs.core.mix_collection_hash(hash_code, n);
    }
    break;
  }
};
cljs.core.empty_unordered_hash = cljs.core.mix_collection_hash(0, 0);
cljs.core.ICounted["null"] = true;
cljs.core._count["null"] = function(_) {
  return 0;
};
Date.prototype.cljs$core$IComparable$ = true;
Date.prototype.cljs$core$IComparable$_compare$arity$2 = function(this$, other) {
  var this$__$1 = this;
  var G__16319 = this$__$1.valueOf();
  var G__16320 = other.valueOf();
  return goog.array.defaultCompare(G__16319, G__16320);
};
Date.prototype.cljs$core$IEquiv$ = true;
Date.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var o__$1 = this;
  return other instanceof Date && o__$1.valueOf() === other.valueOf();
};
cljs.core.IEquiv["number"] = true;
cljs.core._equiv["number"] = function(x, o) {
  return x === o;
};
cljs.core.IMeta["function"] = true;
cljs.core._meta["function"] = function(_) {
  return null;
};
cljs.core.Fn["function"] = true;
cljs.core.IHash["_"] = true;
cljs.core._hash["_"] = function(o) {
  var G__16321 = o;
  return goog.getUid(G__16321);
};
cljs.core.inc = function cljs$core$inc(x) {
  return x + 1;
};
cljs.core.Reduced = function(val) {
  this.val = val;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32768;
};
cljs.core.Reduced.prototype.cljs$core$IDeref$_deref$arity$1 = function(o) {
  var self__ = this;
  var o__$1 = this;
  return self__.val;
};
cljs.core.Reduced.cljs$lang$type = true;
cljs.core.Reduced.cljs$lang$ctorStr = "cljs.core/Reduced";
cljs.core.Reduced.cljs$lang$ctorPrWriter = function(this__4914__auto__, writer__4915__auto__, opt__4916__auto__) {
  return cljs.core._write(writer__4915__auto__, "cljs.core/Reduced");
};
cljs.core.__GT_Reduced = function cljs$core$__GT_Reduced(val) {
  return new cljs.core.Reduced(val);
};
cljs.core.reduced = function cljs$core$reduced(x) {
  return new cljs.core.Reduced(x);
};
cljs.core.reduced_QMARK_ = function cljs$core$reduced_QMARK_(r) {
  return r instanceof cljs.core.Reduced;
};
cljs.core.ensure_reduced = function cljs$core$ensure_reduced(x) {
  if (cljs.core.reduced_QMARK_(x)) {
    return x;
  } else {
    return cljs.core.reduced(x);
  }
};
cljs.core.unreduced = function cljs$core$unreduced(x) {
  if (cljs.core.reduced_QMARK_(x)) {
    var G__16323 = x;
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__16323) : cljs.core.deref.call(null, G__16323);
  } else {
    return x;
  }
};
cljs.core.deref = function cljs$core$deref(o) {
  return cljs.core._deref(o);
};
cljs.core.ci_reduce = function cljs$core$ci_reduce() {
  var G__16325 = arguments.length;
  switch(G__16325) {
    case 2:
      return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2 = function(cicoll, f) {
  var cnt = cljs.core._count(cicoll);
  if (cnt === 0) {
    return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
  } else {
    var val = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(cicoll, 0);
    var n = 1;
    while (true) {
      if (n < cnt) {
        var nval = function() {
          var G__16326 = val;
          var G__16327 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(cicoll, n);
          return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__16326, G__16327) : f.call(null, G__16326, G__16327);
        }();
        if (cljs.core.reduced_QMARK_(nval)) {
          return cljs.core.deref(nval);
        } else {
          var G__16333 = nval;
          var G__16334 = n + 1;
          val = G__16333;
          n = G__16334;
          continue;
        }
      } else {
        return val;
      }
      break;
    }
  }
};
cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$3 = function(cicoll, f, val) {
  var cnt = cljs.core._count(cicoll);
  var val__$1 = val;
  var n = 0;
  while (true) {
    if (n < cnt) {
      var nval = function() {
        var G__16328 = val__$1;
        var G__16329 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(cicoll, n);
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__16328, G__16329) : f.call(null, G__16328, G__16329);
      }();
      if (cljs.core.reduced_QMARK_(nval)) {
        return cljs.core.deref(nval);
      } else {
        var G__16335 = nval;
        var G__16336 = n + 1;
        val__$1 = G__16335;
        n = G__16336;
        continue;
      }
    } else {
      return val__$1;
    }
    break;
  }
};
cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$4 = function(cicoll, f, val, idx) {
  var cnt = cljs.core._count(cicoll);
  var val__$1 = val;
  var n = idx;
  while (true) {
    if (n < cnt) {
      var nval = function() {
        var G__16330 = val__$1;
        var G__16331 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(cicoll, n);
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__16330, G__16331) : f.call(null, G__16330, G__16331);
      }();
      if (cljs.core.reduced_QMARK_(nval)) {
        return cljs.core.deref(nval);
      } else {
        var G__16337 = nval;
        var G__16338 = n + 1;
        val__$1 = G__16337;
        n = G__16338;
        continue;
      }
    } else {
      return val__$1;
    }
    break;
  }
};
cljs.core.ci_reduce.cljs$lang$maxFixedArity = 4;
cljs.core.array_reduce = function cljs$core$array_reduce() {
  var G__16340 = arguments.length;
  switch(G__16340) {
    case 2:
      return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$2 = function(arr, f) {
  var cnt = arr.length;
  if (arr.length === 0) {
    return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
  } else {
    var val = arr[0];
    var n = 1;
    while (true) {
      if (n < cnt) {
        var nval = function() {
          var G__16341 = val;
          var G__16342 = arr[n];
          return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__16341, G__16342) : f.call(null, G__16341, G__16342);
        }();
        if (cljs.core.reduced_QMARK_(nval)) {
          return cljs.core.deref(nval);
        } else {
          var G__16348 = nval;
          var G__16349 = n + 1;
          val = G__16348;
          n = G__16349;
          continue;
        }
      } else {
        return val;
      }
      break;
    }
  }
};
cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$3 = function(arr, f, val) {
  var cnt = arr.length;
  var val__$1 = val;
  var n = 0;
  while (true) {
    if (n < cnt) {
      var nval = function() {
        var G__16343 = val__$1;
        var G__16344 = arr[n];
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__16343, G__16344) : f.call(null, G__16343, G__16344);
      }();
      if (cljs.core.reduced_QMARK_(nval)) {
        return cljs.core.deref(nval);
      } else {
        var G__16350 = nval;
        var G__16351 = n + 1;
        val__$1 = G__16350;
        n = G__16351;
        continue;
      }
    } else {
      return val__$1;
    }
    break;
  }
};
cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$4 = function(arr, f, val, idx) {
  var cnt = arr.length;
  var val__$1 = val;
  var n = idx;
  while (true) {
    if (n < cnt) {
      var nval = function() {
        var G__16345 = val__$1;
        var G__16346 = arr[n];
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__16345, G__16346) : f.call(null, G__16345, G__16346);
      }();
      if (cljs.core.reduced_QMARK_(nval)) {
        return cljs.core.deref(nval);
      } else {
        var G__16352 = nval;
        var G__16353 = n + 1;
        val__$1 = G__16352;
        n = G__16353;
        continue;
      }
    } else {
      return val__$1;
    }
    break;
  }
};
cljs.core.array_reduce.cljs$lang$maxFixedArity = 4;
cljs.core.counted_QMARK_ = function cljs$core$counted_QMARK_(x) {
  var G__16355 = x;
  if (G__16355) {
    var bit__5009__auto__ = G__16355.cljs$lang$protocol_mask$partition0$ & 2;
    if (bit__5009__auto__ || G__16355.cljs$core$ICounted$) {
      return true;
    } else {
      if (!G__16355.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.ICounted, G__16355);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.ICounted, G__16355);
  }
};
cljs.core.indexed_QMARK_ = function cljs$core$indexed_QMARK_(x) {
  var G__16357 = x;
  if (G__16357) {
    var bit__5009__auto__ = G__16357.cljs$lang$protocol_mask$partition0$ & 16;
    if (bit__5009__auto__ || G__16357.cljs$core$IIndexed$) {
      return true;
    } else {
      if (!G__16357.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IIndexed, G__16357);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IIndexed, G__16357);
  }
};
cljs.core.IndexedSeqIterator = function(arr, i) {
  this.arr = arr;
  this.i = i;
};
cljs.core.IndexedSeqIterator.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  return self__.i < self__.arr.length;
};
cljs.core.IndexedSeqIterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var ret = self__.arr[self__.i];
  self__.i = self__.i + 1;
  return ret;
};
cljs.core.IndexedSeqIterator.cljs$lang$type = true;
cljs.core.IndexedSeqIterator.cljs$lang$ctorStr = "cljs.core/IndexedSeqIterator";
cljs.core.IndexedSeqIterator.cljs$lang$ctorPrWriter = function(this__4914__auto__, writer__4915__auto__, opt__4916__auto__) {
  return cljs.core._write(writer__4915__auto__, "cljs.core/IndexedSeqIterator");
};
cljs.core.__GT_IndexedSeqIterator = function cljs$core$__GT_IndexedSeqIterator(arr, i) {
  return new cljs.core.IndexedSeqIterator(arr, i);
};
cljs.core.IndexedSeq = function(arr, i) {
  this.arr = arr;
  this.i = i;
  this.cljs$lang$protocol_mask$partition0$ = 166199550;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.IndexedSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.IndexedSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.IndexedSeq.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  var i__$1 = n + self__.i;
  if (i__$1 < self__.arr.length) {
    return self__.arr[i__$1];
  } else {
    return null;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var i__$1 = n + self__.i;
  if (i__$1 < self__.arr.length) {
    return self__.arr[i__$1];
  } else {
    return not_found;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IIterable$ = true;
cljs.core.IndexedSeq.prototype.cljs$core$IIterable$_iterator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.IndexedSeqIterator(self__.arr, self__.i);
};
cljs.core.IndexedSeq.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.IndexedSeq(self__.arr, self__.i);
};
cljs.core.IndexedSeq.prototype.cljs$core$INext$_next$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (self__.i + 1 < self__.arr.length) {
    return new cljs.core.IndexedSeq(self__.arr, self__.i + 1);
  } else {
    return null;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.arr.length - self__.i;
};
cljs.core.IndexedSeq.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var c = cljs.core._count(coll__$1);
  if (c > 0) {
    return new cljs.core.RSeq(coll__$1, c - 1, null);
  } else {
    return null;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll(coll__$1);
};
cljs.core.IndexedSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  var G__16358 = coll__$1;
  var G__16359 = other;
  return cljs.core.equiv_sequential.cljs$core$IFn$_invoke$arity$2 ? cljs.core.equiv_sequential.cljs$core$IFn$_invoke$arity$2(G__16358, G__16359) : cljs.core.equiv_sequential.call(null, G__16358, G__16359);
};
cljs.core.IndexedSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.IndexedSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$4(self__.arr, f, self__.arr[self__.i], self__.i + 1);
};
cljs.core.IndexedSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$4(self__.arr, f, start, self__.i);
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.arr[self__.i];
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (self__.i + 1 < self__.arr.length) {
    return new cljs.core.IndexedSeq(self__.arr, self__.i + 1);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.IndexedSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  var G__16360 = o;
  var G__16361 = coll__$1;
  return cljs.core.cons.cljs$core$IFn$_invoke$arity$2 ? cljs.core.cons.cljs$core$IFn$_invoke$arity$2(G__16360, G__16361) : cljs.core.cons.call(null, G__16360, G__16361);
};
cljs.core.IndexedSeq.cljs$lang$type = true;
cljs.core.IndexedSeq.cljs$lang$ctorStr = "cljs.core/IndexedSeq";
cljs.core.IndexedSeq.cljs$lang$ctorPrWriter = function(this__4914__auto__, writer__4915__auto__, opt__4916__auto__) {
  return cljs.core._write(writer__4915__auto__, "cljs.core/IndexedSeq");
};
cljs.core.__GT_IndexedSeq = function cljs$core$__GT_IndexedSeq(arr, i) {
  return new cljs.core.IndexedSeq(arr, i);
};
cljs.core.IndexedSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5311__auto__ = this;
  return cljs.core.es6_iterator(this__5311__auto__);
};
cljs.core.prim_seq = function cljs$core$prim_seq() {
  var G__16363 = arguments.length;
  switch(G__16363) {
    case 1:
      return cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$1 = function(prim) {
  return cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(prim, 0);
};
cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2 = function(prim, i) {
  if (i < prim.length) {
    return new cljs.core.IndexedSeq(prim, i);
  } else {
    return null;
  }
};
cljs.core.prim_seq.cljs$lang$maxFixedArity = 2;
cljs.core.array_seq = function cljs$core$array_seq() {
  var G__16366 = arguments.length;
  switch(G__16366) {
    case 1:
      return cljs.core.array_seq.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.array_seq.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.array_seq.cljs$core$IFn$_invoke$arity$1 = function(array) {
  return cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(array, 0);
};
cljs.core.array_seq.cljs$core$IFn$_invoke$arity$2 = function(array, i) {
  return cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(array, i);
};
cljs.core.array_seq.cljs$lang$maxFixedArity = 2;
cljs.core.RSeq = function(ci, i, meta) {
  this.ci = ci;
  this.i = i;
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition0$ = 32374990;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.RSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.RSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.RSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.RSeq.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.RSeq(self__.ci, self__.i, self__.meta);
};
cljs.core.RSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i > 0) {
    return new cljs.core.RSeq(self__.ci, self__.i - 1, null);
  } else {
    return null;
  }
};
cljs.core.RSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.i + 1;
};
cljs.core.RSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll(coll__$1);
};
cljs.core.RSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  var G__16368 = coll__$1;
  var G__16369 = other;
  return cljs.core.equiv_sequential.cljs$core$IFn$_invoke$arity$2 ? cljs.core.equiv_sequential.cljs$core$IFn$_invoke$arity$2(G__16368, G__16369) : cljs.core.equiv_sequential.call(null, G__16368, G__16369);
};
cljs.core.RSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var G__16370 = cljs.core.List.EMPTY;
  var G__16371 = self__.meta;
  return cljs.core.with_meta.cljs$core$IFn$_invoke$arity$2 ? cljs.core.with_meta.cljs$core$IFn$_invoke$arity$2(G__16370, G__16371) : cljs.core.with_meta.call(null, G__16370, G__16371);
};
cljs.core.RSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(col, f) {
  var self__ = this;
  var col__$1 = this;
  var G__16372 = f;
  var G__16373 = col__$1;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2 ? cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(G__16372, G__16373) : cljs.core.seq_reduce.call(null, G__16372, G__16373);
};
cljs.core.RSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(col, f, start) {
  var self__ = this;
  var col__$1 = this;
  var G__16374 = f;
  var G__16375 = start;
  var G__16376 = col__$1;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3 ? cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(G__16374, G__16375, G__16376) : cljs.core.seq_reduce.call(null, G__16374, G__16375, G__16376);
};
cljs.core.RSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(self__.ci, self__.i);
};
cljs.core.RSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i > 0) {
    return new cljs.core.RSeq(self__.ci, self__.i - 1, null);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.RSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.RSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.RSeq(self__.ci, self__.i, new_meta);
};
cljs.core.RSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  var G__16377 = o;
  var G__16378 = coll__$1;
  return cljs.core.cons.cljs$core$IFn$_invoke$arity$2 ? cljs.core.cons.cljs$core$IFn$_invoke$arity$2(G__16377, G__16378) : cljs.core.cons.call(null, G__16377, G__16378);
};
cljs.core.RSeq.cljs$lang$type = true;
cljs.core.RSeq.cljs$lang$ctorStr = "cljs.core/RSeq";
cljs.core.RSeq.cljs$lang$ctorPrWriter = function(this__4914__auto__, writer__4915__auto__, opt__4916__auto__) {
  return cljs.core._write(writer__4915__auto__, "cljs.core/RSeq");
};
cljs.core.__GT_RSeq = function cljs$core$__GT_RSeq(ci, i, meta) {
  return new cljs.core.RSeq(ci, i, meta);
};
cljs.core.RSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5311__auto__ = this;
  return cljs.core.es6_iterator(this__5311__auto__);
};
cljs.core.second = function cljs$core$second(coll) {
  return cljs.core.first(cljs.core.next(coll));
};
cljs.core.ffirst = function cljs$core$ffirst(coll) {
  return cljs.core.first(cljs.core.first(coll));
};
cljs.core.nfirst = function cljs$core$nfirst(coll) {
  return cljs.core.next(cljs.core.first(coll));
};
cljs.core.fnext = function cljs$core$fnext(coll) {
  return cljs.core.first(cljs.core.next(coll));
};
cljs.core.nnext = function cljs$core$nnext(coll) {
  return cljs.core.next(cljs.core.next(coll));
};
cljs.core.last = function cljs$core$last(s) {
  while (true) {
    var sn = cljs.core.next(s);
    if (!(sn == null)) {
      var G__16379 = sn;
      s = G__16379;
      continue;
    } else {
      return cljs.core.first(s);
    }
    break;
  }
};
cljs.core.IEquiv["_"] = true;
cljs.core._equiv["_"] = function(x, o) {
  return x === o;
};
cljs.core.conj = function cljs$core$conj() {
  var G__16384 = arguments.length;
  switch(G__16384) {
    case 0:
      return cljs.core.conj.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.conj.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5386__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core.conj.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5386__auto__);
  }
};
cljs.core.conj.cljs$core$IFn$_invoke$arity$0 = function() {
  return cljs.core.PersistentVector.EMPTY;
};
cljs.core.conj.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  return coll;
};
cljs.core.conj.cljs$core$IFn$_invoke$arity$2 = function(coll, x) {
  if (!(coll == null)) {
    return cljs.core._conj(coll, x);
  } else {
    return cljs.core._conj(cljs.core.List.EMPTY, x);
  }
};
cljs.core.conj.cljs$core$IFn$_invoke$arity$variadic = function(coll, x, xs) {
  while (true) {
    if (cljs.core.truth_(xs)) {
      var G__16386 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(coll, x);
      var G__16387 = cljs.core.first(xs);
      var G__16388 = cljs.core.next(xs);
      coll = G__16386;
      x = G__16387;
      xs = G__16388;
      continue;
    } else {
      return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(coll, x);
    }
    break;
  }
};
cljs.core.conj.cljs$lang$applyTo = function(seq16380) {
  var G__16381 = cljs.core.first(seq16380);
  var seq16380__$1 = cljs.core.next(seq16380);
  var G__16382 = cljs.core.first(seq16380__$1);
  var seq16380__$2 = cljs.core.next(seq16380__$1);
  return cljs.core.conj.cljs$core$IFn$_invoke$arity$variadic(G__16381, G__16382, seq16380__$2);
};
cljs.core.conj.cljs$lang$maxFixedArity = 2;
cljs.core.empty = function cljs$core$empty(coll) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._empty(coll);
  }
};
cljs.core.accumulating_seq_count = function cljs$core$accumulating_seq_count(coll) {
  var s = cljs.core.seq(coll);
  var acc = 0;
  while (true) {
    if (cljs.core.counted_QMARK_(s)) {
      return acc + cljs.core._count(s);
    } else {
      var G__16389 = cljs.core.next(s);
      var G__16390 = acc + 1;
      s = G__16389;
      acc = G__16390;
      continue;
    }
    break;
  }
};
cljs.core.count = function cljs$core$count(coll) {
  if (!(coll == null)) {
    if (function() {
      var G__16392 = coll;
      if (G__16392) {
        var bit__5002__auto__ = G__16392.cljs$lang$protocol_mask$partition0$ & 2;
        if (bit__5002__auto__ || G__16392.cljs$core$ICounted$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return coll.cljs$core$ICounted$_count$arity$1(null);
    } else {
      if (cljs.core.array_QMARK_(coll)) {
        return coll.length;
      } else {
        if (typeof coll === "string") {
          return coll.length;
        } else {
          if (cljs.core.native_satisfies_QMARK_(cljs.core.ICounted, coll)) {
            return cljs.core._count(coll);
          } else {
            return cljs.core.accumulating_seq_count(coll);
          }
        }
      }
    }
  } else {
    return 0;
  }
};
cljs.core.linear_traversal_nth = function cljs$core$linear_traversal_nth() {
  var G__16394 = arguments.length;
  switch(G__16394) {
    case 2:
      return cljs.core.linear_traversal_nth.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.linear_traversal_nth.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.linear_traversal_nth.cljs$core$IFn$_invoke$arity$2 = function(coll, n) {
  while (true) {
    if (coll == null) {
      throw new Error("Index out of bounds");
    } else {
      if (n === 0) {
        if (cljs.core.seq(coll)) {
          return cljs.core.first(coll);
        } else {
          throw new Error("Index out of bounds");
        }
      } else {
        if (cljs.core.indexed_QMARK_(coll)) {
          return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(coll, n);
        } else {
          if (cljs.core.seq(coll)) {
            var G__16396 = cljs.core.next(coll);
            var G__16397 = n - 1;
            coll = G__16396;
            n = G__16397;
            continue;
          } else {
            throw new Error("Index out of bounds");
          }
        }
      }
    }
    break;
  }
};
cljs.core.linear_traversal_nth.cljs$core$IFn$_invoke$arity$3 = function(coll, n, not_found) {
  while (true) {
    if (coll == null) {
      return not_found;
    } else {
      if (n === 0) {
        if (cljs.core.seq(coll)) {
          return cljs.core.first(coll);
        } else {
          return not_found;
        }
      } else {
        if (cljs.core.indexed_QMARK_(coll)) {
          return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(coll, n, not_found);
        } else {
          if (cljs.core.seq(coll)) {
            var G__16398 = cljs.core.next(coll);
            var G__16399 = n - 1;
            var G__16400 = not_found;
            coll = G__16398;
            n = G__16399;
            not_found = G__16400;
            continue;
          } else {
            return not_found;
          }
        }
      }
    }
    break;
  }
};
cljs.core.linear_traversal_nth.cljs$lang$maxFixedArity = 3;
cljs.core.nth = function cljs$core$nth() {
  var G__16402 = arguments.length;
  switch(G__16402) {
    case 2:
      return cljs.core.nth.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.nth.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.nth.cljs$core$IFn$_invoke$arity$2 = function(coll, n) {
  if (!(typeof n === "number")) {
    throw new Error("index argument to nth must be a number");
  } else {
    if (coll == null) {
      return coll;
    } else {
      if (function() {
        var G__16403 = coll;
        if (G__16403) {
          var bit__5002__auto__ = G__16403.cljs$lang$protocol_mask$partition0$ & 16;
          if (bit__5002__auto__ || G__16403.cljs$core$IIndexed$) {
            return true;
          } else {
            return false;
          }
        } else {
          return false;
        }
      }()) {
        return coll.cljs$core$IIndexed$_nth$arity$2(null, n);
      } else {
        if (cljs.core.array_QMARK_(coll)) {
          if (n < coll.length) {
            return coll[n];
          } else {
            return null;
          }
        } else {
          if (typeof coll === "string") {
            if (n < coll.length) {
              return coll[n];
            } else {
              return null;
            }
          } else {
            if (cljs.core.native_satisfies_QMARK_(cljs.core.IIndexed, coll)) {
              return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(coll, n);
            } else {
              if (function() {
                var G__16404 = coll;
                if (G__16404) {
                  var bit__5009__auto__ = G__16404.cljs$lang$protocol_mask$partition0$ & 64;
                  if (bit__5009__auto__ || G__16404.cljs$core$ISeq$) {
                    return true;
                  } else {
                    if (!G__16404.cljs$lang$protocol_mask$partition0$) {
                      return cljs.core.native_satisfies_QMARK_(cljs.core.ISeq, G__16404);
                    } else {
                      return false;
                    }
                  }
                } else {
                  return cljs.core.native_satisfies_QMARK_(cljs.core.ISeq, G__16404);
                }
              }()) {
                return cljs.core.linear_traversal_nth.cljs$core$IFn$_invoke$arity$2(coll, n);
              } else {
                throw new Error([cljs.core.str("nth not supported on this type "), cljs.core.str(cljs.core.type__GT_str(cljs.core.type(coll)))].join(""));
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.nth.cljs$core$IFn$_invoke$arity$3 = function(coll, n, not_found) {
  if (!(typeof n === "number")) {
    throw new Error("index argument to nth must be a number.");
  } else {
    if (coll == null) {
      return not_found;
    } else {
      if (function() {
        var G__16405 = coll;
        if (G__16405) {
          var bit__5002__auto__ = G__16405.cljs$lang$protocol_mask$partition0$ & 16;
          if (bit__5002__auto__ || G__16405.cljs$core$IIndexed$) {
            return true;
          } else {
            return false;
          }
        } else {
          return false;
        }
      }()) {
        return coll.cljs$core$IIndexed$_nth$arity$3(null, n, not_found);
      } else {
        if (cljs.core.array_QMARK_(coll)) {
          if (n < coll.length) {
            return coll[n];
          } else {
            return not_found;
          }
        } else {
          if (typeof coll === "string") {
            if (n < coll.length) {
              return coll[n];
            } else {
              return not_found;
            }
          } else {
            if (cljs.core.native_satisfies_QMARK_(cljs.core.IIndexed, coll)) {
              return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(coll, n);
            } else {
              if (function() {
                var G__16406 = coll;
                if (G__16406) {
                  var bit__5009__auto__ = G__16406.cljs$lang$protocol_mask$partition0$ & 64;
                  if (bit__5009__auto__ || G__16406.cljs$core$ISeq$) {
                    return true;
                  } else {
                    if (!G__16406.cljs$lang$protocol_mask$partition0$) {
                      return cljs.core.native_satisfies_QMARK_(cljs.core.ISeq, G__16406);
                    } else {
                      return false;
                    }
                  }
                } else {
                  return cljs.core.native_satisfies_QMARK_(cljs.core.ISeq, G__16406);
                }
              }()) {
                return cljs.core.linear_traversal_nth.cljs$core$IFn$_invoke$arity$3(coll, n, not_found);
              } else {
                throw new Error([cljs.core.str("nth not supported on this type "), cljs.core.str(cljs.core.type__GT_str(cljs.core.type(coll)))].join(""));
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.nth.cljs$lang$maxFixedArity = 3;
cljs.core.nthrest = function cljs$core$nthrest(coll, n) {
  var n__$1 = n;
  var xs = coll;
  while (true) {
    if (n__$1 > 0 && cljs.core.seq(xs)) {
      var G__16408 = n__$1 - 1;
      var G__16409 = cljs.core.rest(xs);
      n__$1 = G__16408;
      xs = G__16409;
      continue;
    } else {
      return xs;
    }
    break;
  }
};
cljs.core.get = function cljs$core$get() {
  var G__16411 = arguments.length;
  switch(G__16411) {
    case 2:
      return cljs.core.get.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.get.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.get.cljs$core$IFn$_invoke$arity$2 = function(o, k) {
  if (o == null) {
    return null;
  } else {
    if (function() {
      var G__16412 = o;
      if (G__16412) {
        var bit__5002__auto__ = G__16412.cljs$lang$protocol_mask$partition0$ & 256;
        if (bit__5002__auto__ || G__16412.cljs$core$ILookup$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return o.cljs$core$ILookup$_lookup$arity$2(null, k);
    } else {
      if (cljs.core.array_QMARK_(o)) {
        if (k < o.length) {
          return o[k];
        } else {
          return null;
        }
      } else {
        if (typeof o === "string") {
          if (k < o.length) {
            return o[k];
          } else {
            return null;
          }
        } else {
          if (cljs.core.native_satisfies_QMARK_(cljs.core.ILookup, o)) {
            return cljs.core._lookup.cljs$core$IFn$_invoke$arity$2(o, k);
          } else {
            return null;
          }
        }
      }
    }
  }
};
cljs.core.get.cljs$core$IFn$_invoke$arity$3 = function(o, k, not_found) {
  if (!(o == null)) {
    if (function() {
      var G__16413 = o;
      if (G__16413) {
        var bit__5002__auto__ = G__16413.cljs$lang$protocol_mask$partition0$ & 256;
        if (bit__5002__auto__ || G__16413.cljs$core$ILookup$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return o.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
    } else {
      if (cljs.core.array_QMARK_(o)) {
        if (k < o.length) {
          return o[k];
        } else {
          return not_found;
        }
      } else {
        if (typeof o === "string") {
          if (k < o.length) {
            return o[k];
          } else {
            return not_found;
          }
        } else {
          if (cljs.core.native_satisfies_QMARK_(cljs.core.ILookup, o)) {
            return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(o, k, not_found);
          } else {
            return not_found;
          }
        }
      }
    }
  } else {
    return not_found;
  }
};
cljs.core.get.cljs$lang$maxFixedArity = 3;
cljs.core.assoc = function cljs$core$assoc() {
  var G__16420 = arguments.length;
  switch(G__16420) {
    case 3:
      return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      var argseq__5386__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 3), 0);
      return cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__5386__auto__);
  }
};
cljs.core.assoc.cljs$core$IFn$_invoke$arity$3 = function(coll, k, v) {
  if (!(coll == null)) {
    return cljs.core._assoc(coll, k, v);
  } else {
    return cljs.core.PersistentHashMap.fromArrays([k], [v]);
  }
};
cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic = function(coll, k, v, kvs) {
  while (true) {
    var ret = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(coll, k, v);
    if (cljs.core.truth_(kvs)) {
      var G__16422 = ret;
      var G__16423 = cljs.core.first(kvs);
      var G__16424 = cljs.core.second(kvs);
      var G__16425 = cljs.core.nnext(kvs);
      coll = G__16422;
      k = G__16423;
      v = G__16424;
      kvs = G__16425;
      continue;
    } else {
      return ret;
    }
    break;
  }
};
cljs.core.assoc.cljs$lang$applyTo = function(seq16415) {
  var G__16416 = cljs.core.first(seq16415);
  var seq16415__$1 = cljs.core.next(seq16415);
  var G__16417 = cljs.core.first(seq16415__$1);
  var seq16415__$2 = cljs.core.next(seq16415__$1);
  var G__16418 = cljs.core.first(seq16415__$2);
  var seq16415__$3 = cljs.core.next(seq16415__$2);
  return cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(G__16416, G__16417, G__16418, seq16415__$3);
};
cljs.core.assoc.cljs$lang$maxFixedArity = 3;
cljs.core.dissoc = function cljs$core$dissoc() {
  var G__16430 = arguments.length;
  switch(G__16430) {
    case 1:
      return cljs.core.dissoc.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5386__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core.dissoc.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5386__auto__);
  }
};
cljs.core.dissoc.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  return coll;
};
cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2 = function(coll, k) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._dissoc(coll, k);
  }
};
cljs.core.dissoc.cljs$core$IFn$_invoke$arity$variadic = function(coll, k, ks) {
  while (true) {
    if (coll == null) {
      return null;
    } else {
      var ret = cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(coll, k);
      if (cljs.core.truth_(ks)) {
        var G__16432 = ret;
        var G__16433 = cljs.core.first(ks);
        var G__16434 = cljs.core.next(ks);
        coll = G__16432;
        k = G__16433;
        ks = G__16434;
        continue;
      } else {
        return ret;
      }
    }
    break;
  }
};
cljs.core.dissoc.cljs$lang$applyTo = function(seq16426) {
  var G__16427 = cljs.core.first(seq16426);
  var seq16426__$1 = cljs.core.next(seq16426);
  var G__16428 = cljs.core.first(seq16426__$1);
  var seq16426__$2 = cljs.core.next(seq16426__$1);
  return cljs.core.dissoc.cljs$core$IFn$_invoke$arity$variadic(G__16427, G__16428, seq16426__$2);
};
cljs.core.dissoc.cljs$lang$maxFixedArity = 2;
cljs.core.fn_QMARK_ = function cljs$core$fn_QMARK_(f) {
  var or__4335__auto__ = function() {
    var G__16439 = f;
    return goog.isFunction(G__16439);
  }();
  if (cljs.core.truth_(or__4335__auto__)) {
    return or__4335__auto__;
  } else {
    var G__16440 = f;
    if (G__16440) {
      var bit__5009__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__4335__auto____$1 = bit__5009__auto__;
        if (cljs.core.truth_(or__4335__auto____$1)) {
          return or__4335__auto____$1;
        } else {
          return G__16440.cljs$core$Fn$;
        }
      }())) {
        return true;
      } else {
        if (!G__16440.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.Fn, G__16440);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.Fn, G__16440);
    }
  }
};
cljs.core.MetaFn = function(afn, meta) {
  this.afn = afn;
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 393217;
};
cljs.core.MetaFn.prototype.call = function() {
  var G__16906 = null;
  var G__16906__1 = function(self__) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$0 ? self__.afn.cljs$core$IFn$_invoke$arity$0() : self__.afn.call(null);
  };
  var G__16906__2 = function(self__, a) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__16442 = a;
    return self__.afn.cljs$core$IFn$_invoke$arity$1 ? self__.afn.cljs$core$IFn$_invoke$arity$1(G__16442) : self__.afn.call(null, G__16442);
  };
  var G__16906__3 = function(self__, a, b) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__16443 = a;
    var G__16444 = b;
    return self__.afn.cljs$core$IFn$_invoke$arity$2 ? self__.afn.cljs$core$IFn$_invoke$arity$2(G__16443, G__16444) : self__.afn.call(null, G__16443, G__16444);
  };
  var G__16906__4 = function(self__, a, b, c) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__16445 = a;
    var G__16446 = b;
    var G__16447 = c;
    return self__.afn.cljs$core$IFn$_invoke$arity$3 ? self__.afn.cljs$core$IFn$_invoke$arity$3(G__16445, G__16446, G__16447) : self__.afn.call(null, G__16445, G__16446, G__16447);
  };
  var G__16906__5 = function(self__, a, b, c, d) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__16448 = a;
    var G__16449 = b;
    var G__16450 = c;
    var G__16451 = d;
    return self__.afn.cljs$core$IFn$_invoke$arity$4 ? self__.afn.cljs$core$IFn$_invoke$arity$4(G__16448, G__16449, G__16450, G__16451) : self__.afn.call(null, G__16448, G__16449, G__16450, G__16451);
  };
  var G__16906__6 = function(self__, a, b, c, d, e) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__16452 = a;
    var G__16453 = b;
    var G__16454 = c;
    var G__16455 = d;
    var G__16456 = e;
    return self__.afn.cljs$core$IFn$_invoke$arity$5 ? self__.afn.cljs$core$IFn$_invoke$arity$5(G__16452, G__16453, G__16454, G__16455, G__16456) : self__.afn.call(null, G__16452, G__16453, G__16454, G__16455, G__16456);
  };
  var G__16906__7 = function(self__, a, b, c, d, e, f) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__16457 = a;
    var G__16458 = b;
    var G__16459 = c;
    var G__16460 = d;
    var G__16461 = e;
    var G__16462 = f;
    return self__.afn.cljs$core$IFn$_invoke$arity$6 ? self__.afn.cljs$core$IFn$_invoke$arity$6(G__16457, G__16458, G__16459, G__16460, G__16461, G__16462) : self__.afn.call(null, G__16457, G__16458, G__16459, G__16460, G__16461, G__16462);
  };
  var G__16906__8 = function(self__, a, b, c, d, e, f, g) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__16463 = a;
    var G__16464 = b;
    var G__16465 = c;
    var G__16466 = d;
    var G__16467 = e;
    var G__16468 = f;
    var G__16469 = g;
    return self__.afn.cljs$core$IFn$_invoke$arity$7 ? self__.afn.cljs$core$IFn$_invoke$arity$7(G__16463, G__16464, G__16465, G__16466, G__16467, G__16468, G__16469) : self__.afn.call(null, G__16463, G__16464, G__16465, G__16466, G__16467, G__16468, G__16469);
  };
  var G__16906__9 = function(self__, a, b, c, d, e, f, g, h) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__16470 = a;
    var G__16471 = b;
    var G__16472 = c;
    var G__16473 = d;
    var G__16474 = e;
    var G__16475 = f;
    var G__16476 = g;
    var G__16477 = h;
    return self__.afn.cljs$core$IFn$_invoke$arity$8 ? self__.afn.cljs$core$IFn$_invoke$arity$8(G__16470, G__16471, G__16472, G__16473, G__16474, G__16475, G__16476, G__16477) : self__.afn.call(null, G__16470, G__16471, G__16472, G__16473, G__16474, G__16475, G__16476, G__16477);
  };
  var G__16906__10 = function(self__, a, b, c, d, e, f, g, h, i) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__16478 = a;
    var G__16479 = b;
    var G__16480 = c;
    var G__16481 = d;
    var G__16482 = e;
    var G__16483 = f;
    var G__16484 = g;
    var G__16485 = h;
    var G__16486 = i;
    return self__.afn.cljs$core$IFn$_invoke$arity$9 ? self__.afn.cljs$core$IFn$_invoke$arity$9(G__16478, G__16479, G__16480, G__16481, G__16482, G__16483, G__16484, G__16485, G__16486) : self__.afn.call(null, G__16478, G__16479, G__16480, G__16481, G__16482, G__16483, G__16484, G__16485, G__16486);
  };
  var G__16906__11 = function(self__, a, b, c, d, e, f, g, h, i, j) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__16487 = a;
    var G__16488 = b;
    var G__16489 = c;
    var G__16490 = d;
    var G__16491 = e;
    var G__16492 = f;
    var G__16493 = g;
    var G__16494 = h;
    var G__16495 = i;
    var G__16496 = j;
    return self__.afn.cljs$core$IFn$_invoke$arity$10 ? self__.afn.cljs$core$IFn$_invoke$arity$10(G__16487, G__16488, G__16489, G__16490, G__16491, G__16492, G__16493, G__16494, G__16495, G__16496) : self__.afn.call(null, G__16487, G__16488, G__16489, G__16490, G__16491, G__16492, G__16493, G__16494, G__16495, G__16496);
  };
  var G__16906__12 = function(self__, a, b, c, d, e, f, g, h, i, j, k) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__16497 = a;
    var G__16498 = b;
    var G__16499 = c;
    var G__16500 = d;
    var G__16501 = e;
    var G__16502 = f;
    var G__16503 = g;
    var G__16504 = h;
    var G__16505 = i;
    var G__16506 = j;
    var G__16507 = k;
    return self__.afn.cljs$core$IFn$_invoke$arity$11 ? self__.afn.cljs$core$IFn$_invoke$arity$11(G__16497, G__16498, G__16499, G__16500, G__16501, G__16502, G__16503, G__16504, G__16505, G__16506, G__16507) : self__.afn.call(null, G__16497, G__16498, G__16499, G__16500, G__16501, G__16502, G__16503, G__16504, G__16505, G__16506, G__16507);
  };
  var G__16906__13 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__16508 = a;
    var G__16509 = b;
    var G__16510 = c;
    var G__16511 = d;
    var G__16512 = e;
    var G__16513 = f;
    var G__16514 = g;
    var G__16515 = h;
    var G__16516 = i;
    var G__16517 = j;
    var G__16518 = k;
    var G__16519 = l;
    return self__.afn.cljs$core$IFn$_invoke$arity$12 ? self__.afn.cljs$core$IFn$_invoke$arity$12(G__16508, G__16509, G__16510, G__16511, G__16512, G__16513, G__16514, G__16515, G__16516, G__16517, G__16518, G__16519) : self__.afn.call(null, G__16508, G__16509, G__16510, G__16511, G__16512, G__16513, G__16514, G__16515, G__16516, G__16517, G__16518, G__16519);
  };
  var G__16906__14 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__16520 = a;
    var G__16521 = b;
    var G__16522 = c;
    var G__16523 = d;
    var G__16524 = e;
    var G__16525 = f;
    var G__16526 = g;
    var G__16527 = h;
    var G__16528 = i;
    var G__16529 = j;
    var G__16530 = k;
    var G__16531 = l;
    var G__16532 = m;
    return self__.afn.cljs$core$IFn$_invoke$arity$13 ? self__.afn.cljs$core$IFn$_invoke$arity$13(G__16520, G__16521, G__16522, G__16523, G__16524, G__16525, G__16526, G__16527, G__16528, G__16529, G__16530, G__16531, G__16532) : self__.afn.call(null, G__16520, G__16521, G__16522, G__16523, G__16524, G__16525, G__16526, G__16527, G__16528, G__16529, G__16530, G__16531, G__16532);
  };
  var G__16906__15 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__16533 = a;
    var G__16534 = b;
    var G__16535 = c;
    var G__16536 = d;
    var G__16537 = e;
    var G__16538 = f;
    var G__16539 = g;
    var G__16540 = h;
    var G__16541 = i;
    var G__16542 = j;
    var G__16543 = k;
    var G__16544 = l;
    var G__16545 = m;
    var G__16546 = n;
    return self__.afn.cljs$core$IFn$_invoke$arity$14 ? self__.afn.cljs$core$IFn$_invoke$arity$14(G__16533, G__16534, G__16535, G__16536, G__16537, G__16538, G__16539, G__16540, G__16541, G__16542, G__16543, G__16544, G__16545, G__16546) : self__.afn.call(null, G__16533, G__16534, G__16535, G__16536, G__16537, G__16538, G__16539, G__16540, G__16541, G__16542, G__16543, G__16544, G__16545, G__16546);
  };
  var G__16906__16 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__16547 = a;
    var G__16548 = b;
    var G__16549 = c;
    var G__16550 = d;
    var G__16551 = e;
    var G__16552 = f;
    var G__16553 = g;
    var G__16554 = h;
    var G__16555 = i;
    var G__16556 = j;
    var G__16557 = k;
    var G__16558 = l;
    var G__16559 = m;
    var G__16560 = n;
    var G__16561 = o;
    return self__.afn.cljs$core$IFn$_invoke$arity$15 ? self__.afn.cljs$core$IFn$_invoke$arity$15(G__16547, G__16548, G__16549, G__16550, G__16551, G__16552, G__16553, G__16554, G__16555, G__16556, G__16557, G__16558, G__16559, G__16560, G__16561) : self__.afn.call(null, G__16547, G__16548, G__16549, G__16550, G__16551, G__16552, G__16553, G__16554, G__16555, G__16556, G__16557, G__16558, G__16559, G__16560, G__16561);
  };
  var G__16906__17 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__16562 = a;
    var G__16563 = b;
    var G__16564 = c;
    var G__16565 = d;
    var G__16566 = e;
    var G__16567 = f;
    var G__16568 = g;
    var G__16569 = h;
    var G__16570 = i;
    var G__16571 = j;
    var G__16572 = k;
    var G__16573 = l;
    var G__16574 = m;
    var G__16575 = n;
    var G__16576 = o;
    var G__16577 = p;
    return self__.afn.cljs$core$IFn$_invoke$arity$16 ? self__.afn.cljs$core$IFn$_invoke$arity$16(G__16562, G__16563, G__16564, G__16565, G__16566, G__16567, G__16568, G__16569, G__16570, G__16571, G__16572, G__16573, G__16574, G__16575, G__16576, G__16577) : self__.afn.call(null, G__16562, G__16563, G__16564, G__16565, G__16566, G__16567, G__16568, G__16569, G__16570, G__16571, G__16572, G__16573, G__16574, G__16575, G__16576, G__16577);
  };
  var G__16906__18 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__16578 = a;
    var G__16579 = b;
    var G__16580 = c;
    var G__16581 = d;
    var G__16582 = e;
    var G__16583 = f;
    var G__16584 = g;
    var G__16585 = h;
    var G__16586 = i;
    var G__16587 = j;
    var G__16588 = k;
    var G__16589 = l;
    var G__16590 = m;
    var G__16591 = n;
    var G__16592 = o;
    var G__16593 = p;
    var G__16594 = q;
    return self__.afn.cljs$core$IFn$_invoke$arity$17 ? self__.afn.cljs$core$IFn$_invoke$arity$17(G__16578, G__16579, G__16580, G__16581, G__16582, G__16583, G__16584, G__16585, G__16586, G__16587, G__16588, G__16589, G__16590, G__16591, G__16592, G__16593, G__16594) : self__.afn.call(null, G__16578, G__16579, G__16580, G__16581, G__16582, G__16583, G__16584, G__16585, G__16586, G__16587, G__16588, G__16589, G__16590, G__16591, G__16592, G__16593, G__16594);
  };
  var G__16906__19 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__16595 = a;
    var G__16596 = b;
    var G__16597 = c;
    var G__16598 = d;
    var G__16599 = e;
    var G__16600 = f;
    var G__16601 = g;
    var G__16602 = h;
    var G__16603 = i;
    var G__16604 = j;
    var G__16605 = k;
    var G__16606 = l;
    var G__16607 = m;
    var G__16608 = n;
    var G__16609 = o;
    var G__16610 = p;
    var G__16611 = q;
    var G__16612 = r;
    return self__.afn.cljs$core$IFn$_invoke$arity$18 ? self__.afn.cljs$core$IFn$_invoke$arity$18(G__16595, G__16596, G__16597, G__16598, G__16599, G__16600, G__16601, G__16602, G__16603, G__16604, G__16605, G__16606, G__16607, G__16608, G__16609, G__16610, G__16611, G__16612) : self__.afn.call(null, G__16595, G__16596, G__16597, G__16598, G__16599, G__16600, G__16601, G__16602, G__16603, G__16604, G__16605, G__16606, G__16607, G__16608, G__16609, G__16610, G__16611, G__16612);
  };
  var G__16906__20 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__16613 = a;
    var G__16614 = b;
    var G__16615 = c;
    var G__16616 = d;
    var G__16617 = e;
    var G__16618 = f;
    var G__16619 = g;
    var G__16620 = h;
    var G__16621 = i;
    var G__16622 = j;
    var G__16623 = k;
    var G__16624 = l;
    var G__16625 = m;
    var G__16626 = n;
    var G__16627 = o;
    var G__16628 = p;
    var G__16629 = q;
    var G__16630 = r;
    var G__16631 = s;
    return self__.afn.cljs$core$IFn$_invoke$arity$19 ? self__.afn.cljs$core$IFn$_invoke$arity$19(G__16613, G__16614, G__16615, G__16616, G__16617, G__16618, G__16619, G__16620, G__16621, G__16622, G__16623, G__16624, G__16625, G__16626, G__16627, G__16628, G__16629, G__16630, G__16631) : self__.afn.call(null, G__16613, G__16614, G__16615, G__16616, G__16617, G__16618, G__16619, G__16620, G__16621, G__16622, G__16623, G__16624, G__16625, G__16626, G__16627, G__16628, G__16629, G__16630, G__16631);
  };
  var G__16906__21 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__16632 = a;
    var G__16633 = b;
    var G__16634 = c;
    var G__16635 = d;
    var G__16636 = e;
    var G__16637 = f;
    var G__16638 = g;
    var G__16639 = h;
    var G__16640 = i;
    var G__16641 = j;
    var G__16642 = k;
    var G__16643 = l;
    var G__16644 = m;
    var G__16645 = n;
    var G__16646 = o;
    var G__16647 = p;
    var G__16648 = q;
    var G__16649 = r;
    var G__16650 = s;
    var G__16651 = t;
    return self__.afn.cljs$core$IFn$_invoke$arity$20 ? self__.afn.cljs$core$IFn$_invoke$arity$20(G__16632, G__16633, G__16634, G__16635, G__16636, G__16637, G__16638, G__16639, G__16640, G__16641, G__16642, G__16643, G__16644, G__16645, G__16646, G__16647, G__16648, G__16649, G__16650, G__16651) : self__.afn.call(null, G__16632, G__16633, G__16634, G__16635, G__16636, G__16637, G__16638, G__16639, G__16640, G__16641, G__16642, G__16643, G__16644, G__16645, G__16646, G__16647, G__16648, G__16649, 
    G__16650, G__16651);
  };
  var G__16906__22 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__16652 = self__.afn;
    var G__16653 = a;
    var G__16654 = b;
    var G__16655 = c;
    var G__16656 = d;
    var G__16657 = e;
    var G__16658 = f;
    var G__16659 = g;
    var G__16660 = h;
    var G__16661 = i;
    var G__16662 = j;
    var G__16663 = k;
    var G__16664 = l;
    var G__16665 = m;
    var G__16666 = n;
    var G__16667 = o;
    var G__16668 = p;
    var G__16669 = q;
    var G__16670 = r;
    var G__16671 = s;
    var G__16672 = t;
    var G__16673 = rest;
    return cljs.core.apply.cljs$core$IFn$_invoke$arity$22 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$22(G__16652, G__16653, G__16654, G__16655, G__16656, G__16657, G__16658, G__16659, G__16660, G__16661, G__16662, G__16663, G__16664, G__16665, G__16666, G__16667, G__16668, G__16669, G__16670, G__16671, G__16672, G__16673) : cljs.core.apply.call(null, G__16652, G__16653, G__16654, G__16655, G__16656, G__16657, G__16658, G__16659, G__16660, G__16661, G__16662, G__16663, G__16664, G__16665, G__16666, 
    G__16667, G__16668, G__16669, G__16670, G__16671, G__16672, G__16673);
  };
  G__16906 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    switch(arguments.length) {
      case 1:
        return G__16906__1.call(this, self__);
      case 2:
        return G__16906__2.call(this, self__, a);
      case 3:
        return G__16906__3.call(this, self__, a, b);
      case 4:
        return G__16906__4.call(this, self__, a, b, c);
      case 5:
        return G__16906__5.call(this, self__, a, b, c, d);
      case 6:
        return G__16906__6.call(this, self__, a, b, c, d, e);
      case 7:
        return G__16906__7.call(this, self__, a, b, c, d, e, f);
      case 8:
        return G__16906__8.call(this, self__, a, b, c, d, e, f, g);
      case 9:
        return G__16906__9.call(this, self__, a, b, c, d, e, f, g, h);
      case 10:
        return G__16906__10.call(this, self__, a, b, c, d, e, f, g, h, i);
      case 11:
        return G__16906__11.call(this, self__, a, b, c, d, e, f, g, h, i, j);
      case 12:
        return G__16906__12.call(this, self__, a, b, c, d, e, f, g, h, i, j, k);
      case 13:
        return G__16906__13.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l);
      case 14:
        return G__16906__14.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m);
      case 15:
        return G__16906__15.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
      case 16:
        return G__16906__16.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
      case 17:
        return G__16906__17.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
      case 18:
        return G__16906__18.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
      case 19:
        return G__16906__19.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
      case 20:
        return G__16906__20.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
      case 21:
        return G__16906__21.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
      case 22:
        return G__16906__22.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__16906.cljs$core$IFn$_invoke$arity$1 = G__16906__1;
  G__16906.cljs$core$IFn$_invoke$arity$2 = G__16906__2;
  G__16906.cljs$core$IFn$_invoke$arity$3 = G__16906__3;
  G__16906.cljs$core$IFn$_invoke$arity$4 = G__16906__4;
  G__16906.cljs$core$IFn$_invoke$arity$5 = G__16906__5;
  G__16906.cljs$core$IFn$_invoke$arity$6 = G__16906__6;
  G__16906.cljs$core$IFn$_invoke$arity$7 = G__16906__7;
  G__16906.cljs$core$IFn$_invoke$arity$8 = G__16906__8;
  G__16906.cljs$core$IFn$_invoke$arity$9 = G__16906__9;
  G__16906.cljs$core$IFn$_invoke$arity$10 = G__16906__10;
  G__16906.cljs$core$IFn$_invoke$arity$11 = G__16906__11;
  G__16906.cljs$core$IFn$_invoke$arity$12 = G__16906__12;
  G__16906.cljs$core$IFn$_invoke$arity$13 = G__16906__13;
  G__16906.cljs$core$IFn$_invoke$arity$14 = G__16906__14;
  G__16906.cljs$core$IFn$_invoke$arity$15 = G__16906__15;
  G__16906.cljs$core$IFn$_invoke$arity$16 = G__16906__16;
  G__16906.cljs$core$IFn$_invoke$arity$17 = G__16906__17;
  G__16906.cljs$core$IFn$_invoke$arity$18 = G__16906__18;
  G__16906.cljs$core$IFn$_invoke$arity$19 = G__16906__19;
  G__16906.cljs$core$IFn$_invoke$arity$20 = G__16906__20;
  G__16906.cljs$core$IFn$_invoke$arity$21 = G__16906__21;
  G__16906.cljs$core$IFn$_invoke$arity$22 = G__16906__22;
  return G__16906;
}();
cljs.core.MetaFn.prototype.apply = function(self__, args16441) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args16441)));
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$0 = function() {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$0 ? self__.afn.cljs$core$IFn$_invoke$arity$0() : self__.afn.call(null);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$1 = function(a) {
  var self__ = this;
  var _ = this;
  var G__16674 = a;
  return self__.afn.cljs$core$IFn$_invoke$arity$1 ? self__.afn.cljs$core$IFn$_invoke$arity$1(G__16674) : self__.afn.call(null, G__16674);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$2 = function(a, b) {
  var self__ = this;
  var _ = this;
  var G__16675 = a;
  var G__16676 = b;
  return self__.afn.cljs$core$IFn$_invoke$arity$2 ? self__.afn.cljs$core$IFn$_invoke$arity$2(G__16675, G__16676) : self__.afn.call(null, G__16675, G__16676);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$3 = function(a, b, c) {
  var self__ = this;
  var _ = this;
  var G__16677 = a;
  var G__16678 = b;
  var G__16679 = c;
  return self__.afn.cljs$core$IFn$_invoke$arity$3 ? self__.afn.cljs$core$IFn$_invoke$arity$3(G__16677, G__16678, G__16679) : self__.afn.call(null, G__16677, G__16678, G__16679);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$4 = function(a, b, c, d) {
  var self__ = this;
  var _ = this;
  var G__16680 = a;
  var G__16681 = b;
  var G__16682 = c;
  var G__16683 = d;
  return self__.afn.cljs$core$IFn$_invoke$arity$4 ? self__.afn.cljs$core$IFn$_invoke$arity$4(G__16680, G__16681, G__16682, G__16683) : self__.afn.call(null, G__16680, G__16681, G__16682, G__16683);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$5 = function(a, b, c, d, e) {
  var self__ = this;
  var _ = this;
  var G__16684 = a;
  var G__16685 = b;
  var G__16686 = c;
  var G__16687 = d;
  var G__16688 = e;
  return self__.afn.cljs$core$IFn$_invoke$arity$5 ? self__.afn.cljs$core$IFn$_invoke$arity$5(G__16684, G__16685, G__16686, G__16687, G__16688) : self__.afn.call(null, G__16684, G__16685, G__16686, G__16687, G__16688);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$6 = function(a, b, c, d, e, f) {
  var self__ = this;
  var _ = this;
  var G__16689 = a;
  var G__16690 = b;
  var G__16691 = c;
  var G__16692 = d;
  var G__16693 = e;
  var G__16694 = f;
  return self__.afn.cljs$core$IFn$_invoke$arity$6 ? self__.afn.cljs$core$IFn$_invoke$arity$6(G__16689, G__16690, G__16691, G__16692, G__16693, G__16694) : self__.afn.call(null, G__16689, G__16690, G__16691, G__16692, G__16693, G__16694);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$7 = function(a, b, c, d, e, f, g) {
  var self__ = this;
  var _ = this;
  var G__16695 = a;
  var G__16696 = b;
  var G__16697 = c;
  var G__16698 = d;
  var G__16699 = e;
  var G__16700 = f;
  var G__16701 = g;
  return self__.afn.cljs$core$IFn$_invoke$arity$7 ? self__.afn.cljs$core$IFn$_invoke$arity$7(G__16695, G__16696, G__16697, G__16698, G__16699, G__16700, G__16701) : self__.afn.call(null, G__16695, G__16696, G__16697, G__16698, G__16699, G__16700, G__16701);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$8 = function(a, b, c, d, e, f, g, h) {
  var self__ = this;
  var _ = this;
  var G__16702 = a;
  var G__16703 = b;
  var G__16704 = c;
  var G__16705 = d;
  var G__16706 = e;
  var G__16707 = f;
  var G__16708 = g;
  var G__16709 = h;
  return self__.afn.cljs$core$IFn$_invoke$arity$8 ? self__.afn.cljs$core$IFn$_invoke$arity$8(G__16702, G__16703, G__16704, G__16705, G__16706, G__16707, G__16708, G__16709) : self__.afn.call(null, G__16702, G__16703, G__16704, G__16705, G__16706, G__16707, G__16708, G__16709);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$9 = function(a, b, c, d, e, f, g, h, i) {
  var self__ = this;
  var _ = this;
  var G__16710 = a;
  var G__16711 = b;
  var G__16712 = c;
  var G__16713 = d;
  var G__16714 = e;
  var G__16715 = f;
  var G__16716 = g;
  var G__16717 = h;
  var G__16718 = i;
  return self__.afn.cljs$core$IFn$_invoke$arity$9 ? self__.afn.cljs$core$IFn$_invoke$arity$9(G__16710, G__16711, G__16712, G__16713, G__16714, G__16715, G__16716, G__16717, G__16718) : self__.afn.call(null, G__16710, G__16711, G__16712, G__16713, G__16714, G__16715, G__16716, G__16717, G__16718);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$10 = function(a, b, c, d, e, f, g, h, i, j) {
  var self__ = this;
  var _ = this;
  var G__16719 = a;
  var G__16720 = b;
  var G__16721 = c;
  var G__16722 = d;
  var G__16723 = e;
  var G__16724 = f;
  var G__16725 = g;
  var G__16726 = h;
  var G__16727 = i;
  var G__16728 = j;
  return self__.afn.cljs$core$IFn$_invoke$arity$10 ? self__.afn.cljs$core$IFn$_invoke$arity$10(G__16719, G__16720, G__16721, G__16722, G__16723, G__16724, G__16725, G__16726, G__16727, G__16728) : self__.afn.call(null, G__16719, G__16720, G__16721, G__16722, G__16723, G__16724, G__16725, G__16726, G__16727, G__16728);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$11 = function(a, b, c, d, e, f, g, h, i, j, k) {
  var self__ = this;
  var _ = this;
  var G__16729 = a;
  var G__16730 = b;
  var G__16731 = c;
  var G__16732 = d;
  var G__16733 = e;
  var G__16734 = f;
  var G__16735 = g;
  var G__16736 = h;
  var G__16737 = i;
  var G__16738 = j;
  var G__16739 = k;
  return self__.afn.cljs$core$IFn$_invoke$arity$11 ? self__.afn.cljs$core$IFn$_invoke$arity$11(G__16729, G__16730, G__16731, G__16732, G__16733, G__16734, G__16735, G__16736, G__16737, G__16738, G__16739) : self__.afn.call(null, G__16729, G__16730, G__16731, G__16732, G__16733, G__16734, G__16735, G__16736, G__16737, G__16738, G__16739);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$12 = function(a, b, c, d, e, f, g, h, i, j, k, l) {
  var self__ = this;
  var _ = this;
  var G__16740 = a;
  var G__16741 = b;
  var G__16742 = c;
  var G__16743 = d;
  var G__16744 = e;
  var G__16745 = f;
  var G__16746 = g;
  var G__16747 = h;
  var G__16748 = i;
  var G__16749 = j;
  var G__16750 = k;
  var G__16751 = l;
  return self__.afn.cljs$core$IFn$_invoke$arity$12 ? self__.afn.cljs$core$IFn$_invoke$arity$12(G__16740, G__16741, G__16742, G__16743, G__16744, G__16745, G__16746, G__16747, G__16748, G__16749, G__16750, G__16751) : self__.afn.call(null, G__16740, G__16741, G__16742, G__16743, G__16744, G__16745, G__16746, G__16747, G__16748, G__16749, G__16750, G__16751);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$13 = function(a, b, c, d, e, f, g, h, i, j, k, l, m) {
  var self__ = this;
  var _ = this;
  var G__16752 = a;
  var G__16753 = b;
  var G__16754 = c;
  var G__16755 = d;
  var G__16756 = e;
  var G__16757 = f;
  var G__16758 = g;
  var G__16759 = h;
  var G__16760 = i;
  var G__16761 = j;
  var G__16762 = k;
  var G__16763 = l;
  var G__16764 = m;
  return self__.afn.cljs$core$IFn$_invoke$arity$13 ? self__.afn.cljs$core$IFn$_invoke$arity$13(G__16752, G__16753, G__16754, G__16755, G__16756, G__16757, G__16758, G__16759, G__16760, G__16761, G__16762, G__16763, G__16764) : self__.afn.call(null, G__16752, G__16753, G__16754, G__16755, G__16756, G__16757, G__16758, G__16759, G__16760, G__16761, G__16762, G__16763, G__16764);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$14 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
  var self__ = this;
  var _ = this;
  var G__16765 = a;
  var G__16766 = b;
  var G__16767 = c;
  var G__16768 = d;
  var G__16769 = e;
  var G__16770 = f;
  var G__16771 = g;
  var G__16772 = h;
  var G__16773 = i;
  var G__16774 = j;
  var G__16775 = k;
  var G__16776 = l;
  var G__16777 = m;
  var G__16778 = n;
  return self__.afn.cljs$core$IFn$_invoke$arity$14 ? self__.afn.cljs$core$IFn$_invoke$arity$14(G__16765, G__16766, G__16767, G__16768, G__16769, G__16770, G__16771, G__16772, G__16773, G__16774, G__16775, G__16776, G__16777, G__16778) : self__.afn.call(null, G__16765, G__16766, G__16767, G__16768, G__16769, G__16770, G__16771, G__16772, G__16773, G__16774, G__16775, G__16776, G__16777, G__16778);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$15 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
  var self__ = this;
  var _ = this;
  var G__16779 = a;
  var G__16780 = b;
  var G__16781 = c;
  var G__16782 = d;
  var G__16783 = e;
  var G__16784 = f;
  var G__16785 = g;
  var G__16786 = h;
  var G__16787 = i;
  var G__16788 = j;
  var G__16789 = k;
  var G__16790 = l;
  var G__16791 = m;
  var G__16792 = n;
  var G__16793 = o;
  return self__.afn.cljs$core$IFn$_invoke$arity$15 ? self__.afn.cljs$core$IFn$_invoke$arity$15(G__16779, G__16780, G__16781, G__16782, G__16783, G__16784, G__16785, G__16786, G__16787, G__16788, G__16789, G__16790, G__16791, G__16792, G__16793) : self__.afn.call(null, G__16779, G__16780, G__16781, G__16782, G__16783, G__16784, G__16785, G__16786, G__16787, G__16788, G__16789, G__16790, G__16791, G__16792, G__16793);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$16 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
  var self__ = this;
  var _ = this;
  var G__16794 = a;
  var G__16795 = b;
  var G__16796 = c;
  var G__16797 = d;
  var G__16798 = e;
  var G__16799 = f;
  var G__16800 = g;
  var G__16801 = h;
  var G__16802 = i;
  var G__16803 = j;
  var G__16804 = k;
  var G__16805 = l;
  var G__16806 = m;
  var G__16807 = n;
  var G__16808 = o;
  var G__16809 = p;
  return self__.afn.cljs$core$IFn$_invoke$arity$16 ? self__.afn.cljs$core$IFn$_invoke$arity$16(G__16794, G__16795, G__16796, G__16797, G__16798, G__16799, G__16800, G__16801, G__16802, G__16803, G__16804, G__16805, G__16806, G__16807, G__16808, G__16809) : self__.afn.call(null, G__16794, G__16795, G__16796, G__16797, G__16798, G__16799, G__16800, G__16801, G__16802, G__16803, G__16804, G__16805, G__16806, G__16807, G__16808, G__16809);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$17 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
  var self__ = this;
  var _ = this;
  var G__16810 = a;
  var G__16811 = b;
  var G__16812 = c;
  var G__16813 = d;
  var G__16814 = e;
  var G__16815 = f;
  var G__16816 = g;
  var G__16817 = h;
  var G__16818 = i;
  var G__16819 = j;
  var G__16820 = k;
  var G__16821 = l;
  var G__16822 = m;
  var G__16823 = n;
  var G__16824 = o;
  var G__16825 = p;
  var G__16826 = q;
  return self__.afn.cljs$core$IFn$_invoke$arity$17 ? self__.afn.cljs$core$IFn$_invoke$arity$17(G__16810, G__16811, G__16812, G__16813, G__16814, G__16815, G__16816, G__16817, G__16818, G__16819, G__16820, G__16821, G__16822, G__16823, G__16824, G__16825, G__16826) : self__.afn.call(null, G__16810, G__16811, G__16812, G__16813, G__16814, G__16815, G__16816, G__16817, G__16818, G__16819, G__16820, G__16821, G__16822, G__16823, G__16824, G__16825, G__16826);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$18 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
  var self__ = this;
  var _ = this;
  var G__16827 = a;
  var G__16828 = b;
  var G__16829 = c;
  var G__16830 = d;
  var G__16831 = e;
  var G__16832 = f;
  var G__16833 = g;
  var G__16834 = h;
  var G__16835 = i;
  var G__16836 = j;
  var G__16837 = k;
  var G__16838 = l;
  var G__16839 = m;
  var G__16840 = n;
  var G__16841 = o;
  var G__16842 = p;
  var G__16843 = q;
  var G__16844 = r;
  return self__.afn.cljs$core$IFn$_invoke$arity$18 ? self__.afn.cljs$core$IFn$_invoke$arity$18(G__16827, G__16828, G__16829, G__16830, G__16831, G__16832, G__16833, G__16834, G__16835, G__16836, G__16837, G__16838, G__16839, G__16840, G__16841, G__16842, G__16843, G__16844) : self__.afn.call(null, G__16827, G__16828, G__16829, G__16830, G__16831, G__16832, G__16833, G__16834, G__16835, G__16836, G__16837, G__16838, G__16839, G__16840, G__16841, G__16842, G__16843, G__16844);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$19 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
  var self__ = this;
  var _ = this;
  var G__16845 = a;
  var G__16846 = b;
  var G__16847 = c;
  var G__16848 = d;
  var G__16849 = e;
  var G__16850 = f;
  var G__16851 = g;
  var G__16852 = h;
  var G__16853 = i;
  var G__16854 = j;
  var G__16855 = k;
  var G__16856 = l;
  var G__16857 = m;
  var G__16858 = n;
  var G__16859 = o;
  var G__16860 = p;
  var G__16861 = q;
  var G__16862 = r;
  var G__16863 = s;
  return self__.afn.cljs$core$IFn$_invoke$arity$19 ? self__.afn.cljs$core$IFn$_invoke$arity$19(G__16845, G__16846, G__16847, G__16848, G__16849, G__16850, G__16851, G__16852, G__16853, G__16854, G__16855, G__16856, G__16857, G__16858, G__16859, G__16860, G__16861, G__16862, G__16863) : self__.afn.call(null, G__16845, G__16846, G__16847, G__16848, G__16849, G__16850, G__16851, G__16852, G__16853, G__16854, G__16855, G__16856, G__16857, G__16858, G__16859, G__16860, G__16861, G__16862, G__16863);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$20 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
  var self__ = this;
  var _ = this;
  var G__16864 = a;
  var G__16865 = b;
  var G__16866 = c;
  var G__16867 = d;
  var G__16868 = e;
  var G__16869 = f;
  var G__16870 = g;
  var G__16871 = h;
  var G__16872 = i;
  var G__16873 = j;
  var G__16874 = k;
  var G__16875 = l;
  var G__16876 = m;
  var G__16877 = n;
  var G__16878 = o;
  var G__16879 = p;
  var G__16880 = q;
  var G__16881 = r;
  var G__16882 = s;
  var G__16883 = t;
  return self__.afn.cljs$core$IFn$_invoke$arity$20 ? self__.afn.cljs$core$IFn$_invoke$arity$20(G__16864, G__16865, G__16866, G__16867, G__16868, G__16869, G__16870, G__16871, G__16872, G__16873, G__16874, G__16875, G__16876, G__16877, G__16878, G__16879, G__16880, G__16881, G__16882, G__16883) : self__.afn.call(null, G__16864, G__16865, G__16866, G__16867, G__16868, G__16869, G__16870, G__16871, G__16872, G__16873, G__16874, G__16875, G__16876, G__16877, G__16878, G__16879, G__16880, G__16881, G__16882, 
  G__16883);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$21 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
  var self__ = this;
  var _ = this;
  var G__16884 = self__.afn;
  var G__16885 = a;
  var G__16886 = b;
  var G__16887 = c;
  var G__16888 = d;
  var G__16889 = e;
  var G__16890 = f;
  var G__16891 = g;
  var G__16892 = h;
  var G__16893 = i;
  var G__16894 = j;
  var G__16895 = k;
  var G__16896 = l;
  var G__16897 = m;
  var G__16898 = n;
  var G__16899 = o;
  var G__16900 = p;
  var G__16901 = q;
  var G__16902 = r;
  var G__16903 = s;
  var G__16904 = t;
  var G__16905 = rest;
  return cljs.core.apply.cljs$core$IFn$_invoke$arity$22 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$22(G__16884, G__16885, G__16886, G__16887, G__16888, G__16889, G__16890, G__16891, G__16892, G__16893, G__16894, G__16895, G__16896, G__16897, G__16898, G__16899, G__16900, G__16901, G__16902, G__16903, G__16904, G__16905) : cljs.core.apply.call(null, G__16884, G__16885, G__16886, G__16887, G__16888, G__16889, G__16890, G__16891, G__16892, G__16893, G__16894, G__16895, G__16896, G__16897, G__16898, 
  G__16899, G__16900, G__16901, G__16902, G__16903, G__16904, G__16905);
};
cljs.core.MetaFn.prototype.cljs$core$Fn$ = true;
cljs.core.MetaFn.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_, new_meta) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.MetaFn(self__.afn, new_meta);
};
cljs.core.MetaFn.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.meta;
};
cljs.core.MetaFn.cljs$lang$type = true;
cljs.core.MetaFn.cljs$lang$ctorStr = "cljs.core/MetaFn";
cljs.core.MetaFn.cljs$lang$ctorPrWriter = function(this__4914__auto__, writer__4915__auto__, opt__4916__auto__) {
  return cljs.core._write(writer__4915__auto__, "cljs.core/MetaFn");
};
cljs.core.__GT_MetaFn = function cljs$core$__GT_MetaFn(afn, meta) {
  return new cljs.core.MetaFn(afn, meta);
};
cljs.core.with_meta = function cljs$core$with_meta(o, meta) {
  if (cljs.core.fn_QMARK_(o) && !function() {
    var G__16910 = o;
    if (G__16910) {
      var bit__5009__auto__ = G__16910.cljs$lang$protocol_mask$partition0$ & 262144;
      if (bit__5009__auto__ || G__16910.cljs$core$IWithMeta$) {
        return true;
      } else {
        if (!G__16910.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.IWithMeta, G__16910);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.IWithMeta, G__16910);
    }
  }()) {
    return new cljs.core.MetaFn(o, meta);
  } else {
    if (o == null) {
      return null;
    } else {
      return cljs.core._with_meta(o, meta);
    }
  }
};
cljs.core.meta = function cljs$core$meta(o) {
  if (function() {
    var and__4323__auto__ = !(o == null);
    if (and__4323__auto__) {
      var G__16914 = o;
      if (G__16914) {
        var bit__5009__auto__ = G__16914.cljs$lang$protocol_mask$partition0$ & 131072;
        if (bit__5009__auto__ || G__16914.cljs$core$IMeta$) {
          return true;
        } else {
          if (!G__16914.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_(cljs.core.IMeta, G__16914);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IMeta, G__16914);
      }
    } else {
      return and__4323__auto__;
    }
  }()) {
    return cljs.core._meta(o);
  } else {
    return null;
  }
};
cljs.core.peek = function cljs$core$peek(coll) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._peek(coll);
  }
};
cljs.core.pop = function cljs$core$pop(coll) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._pop(coll);
  }
};
cljs.core.disj = function cljs$core$disj() {
  var G__16919 = arguments.length;
  switch(G__16919) {
    case 1:
      return cljs.core.disj.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.disj.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5386__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core.disj.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5386__auto__);
  }
};
cljs.core.disj.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  return coll;
};
cljs.core.disj.cljs$core$IFn$_invoke$arity$2 = function(coll, k) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._disjoin(coll, k);
  }
};
cljs.core.disj.cljs$core$IFn$_invoke$arity$variadic = function(coll, k, ks) {
  while (true) {
    if (coll == null) {
      return null;
    } else {
      var ret = cljs.core.disj.cljs$core$IFn$_invoke$arity$2(coll, k);
      if (cljs.core.truth_(ks)) {
        var G__16921 = ret;
        var G__16922 = cljs.core.first(ks);
        var G__16923 = cljs.core.next(ks);
        coll = G__16921;
        k = G__16922;
        ks = G__16923;
        continue;
      } else {
        return ret;
      }
    }
    break;
  }
};
cljs.core.disj.cljs$lang$applyTo = function(seq16915) {
  var G__16916 = cljs.core.first(seq16915);
  var seq16915__$1 = cljs.core.next(seq16915);
  var G__16917 = cljs.core.first(seq16915__$1);
  var seq16915__$2 = cljs.core.next(seq16915__$1);
  return cljs.core.disj.cljs$core$IFn$_invoke$arity$variadic(G__16916, G__16917, seq16915__$2);
};
cljs.core.disj.cljs$lang$maxFixedArity = 2;
cljs.core.empty_QMARK_ = function cljs$core$empty_QMARK_(coll) {
  return coll == null || cljs.core.not(cljs.core.seq(coll));
};
cljs.core.coll_QMARK_ = function cljs$core$coll_QMARK_(x) {
  if (x == null) {
    return false;
  } else {
    var G__16925 = x;
    if (G__16925) {
      var bit__5009__auto__ = G__16925.cljs$lang$protocol_mask$partition0$ & 8;
      if (bit__5009__auto__ || G__16925.cljs$core$ICollection$) {
        return true;
      } else {
        if (!G__16925.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.ICollection, G__16925);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.ICollection, G__16925);
    }
  }
};
cljs.core.set_QMARK_ = function cljs$core$set_QMARK_(x) {
  if (x == null) {
    return false;
  } else {
    var G__16927 = x;
    if (G__16927) {
      var bit__5009__auto__ = G__16927.cljs$lang$protocol_mask$partition0$ & 4096;
      if (bit__5009__auto__ || G__16927.cljs$core$ISet$) {
        return true;
      } else {
        if (!G__16927.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.ISet, G__16927);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.ISet, G__16927);
    }
  }
};
cljs.core.associative_QMARK_ = function cljs$core$associative_QMARK_(x) {
  var G__16929 = x;
  if (G__16929) {
    var bit__5009__auto__ = G__16929.cljs$lang$protocol_mask$partition0$ & 512;
    if (bit__5009__auto__ || G__16929.cljs$core$IAssociative$) {
      return true;
    } else {
      if (!G__16929.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IAssociative, G__16929);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IAssociative, G__16929);
  }
};
cljs.core.sequential_QMARK_ = function cljs$core$sequential_QMARK_(x) {
  var G__16931 = x;
  if (G__16931) {
    var bit__5009__auto__ = G__16931.cljs$lang$protocol_mask$partition0$ & 16777216;
    if (bit__5009__auto__ || G__16931.cljs$core$ISequential$) {
      return true;
    } else {
      if (!G__16931.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.ISequential, G__16931);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.ISequential, G__16931);
  }
};
cljs.core.sorted_QMARK_ = function cljs$core$sorted_QMARK_(x) {
  var G__16933 = x;
  if (G__16933) {
    var bit__5009__auto__ = G__16933.cljs$lang$protocol_mask$partition0$ & 268435456;
    if (bit__5009__auto__ || G__16933.cljs$core$ISorted$) {
      return true;
    } else {
      if (!G__16933.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.ISorted, G__16933);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.ISorted, G__16933);
  }
};
cljs.core.reduceable_QMARK_ = function cljs$core$reduceable_QMARK_(x) {
  var G__16935 = x;
  if (G__16935) {
    var bit__5009__auto__ = G__16935.cljs$lang$protocol_mask$partition0$ & 524288;
    if (bit__5009__auto__ || G__16935.cljs$core$IReduce$) {
      return true;
    } else {
      if (!G__16935.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IReduce, G__16935);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IReduce, G__16935);
  }
};
cljs.core.map_QMARK_ = function cljs$core$map_QMARK_(x) {
  if (x == null) {
    return false;
  } else {
    var G__16937 = x;
    if (G__16937) {
      var bit__5009__auto__ = G__16937.cljs$lang$protocol_mask$partition0$ & 1024;
      if (bit__5009__auto__ || G__16937.cljs$core$IMap$) {
        return true;
      } else {
        if (!G__16937.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.IMap, G__16937);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.IMap, G__16937);
    }
  }
};
cljs.core.vector_QMARK_ = function cljs$core$vector_QMARK_(x) {
  var G__16939 = x;
  if (G__16939) {
    var bit__5009__auto__ = G__16939.cljs$lang$protocol_mask$partition0$ & 16384;
    if (bit__5009__auto__ || G__16939.cljs$core$IVector$) {
      return true;
    } else {
      if (!G__16939.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IVector, G__16939);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IVector, G__16939);
  }
};
cljs.core.chunked_seq_QMARK_ = function cljs$core$chunked_seq_QMARK_(x) {
  var G__16941 = x;
  if (G__16941) {
    var bit__5002__auto__ = G__16941.cljs$lang$protocol_mask$partition1$ & 512;
    if (bit__5002__auto__ || G__16941.cljs$core$IChunkedSeq$) {
      return true;
    } else {
      return false;
    }
  } else {
    return false;
  }
};
cljs.core.js_obj = function cljs$core$js_obj() {
  var G__16944 = arguments.length;
  switch(G__16944) {
    case 0:
      return cljs.core.js_obj.cljs$core$IFn$_invoke$arity$0();
      break;
    default:
      var argseq__5386__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 0), 0);
      return cljs.core.js_obj.cljs$core$IFn$_invoke$arity$variadic(argseq__5386__auto__);
  }
};
cljs.core.js_obj.cljs$core$IFn$_invoke$arity$0 = function() {
  var obj16946 = {};
  return obj16946;
};
cljs.core.js_obj.cljs$core$IFn$_invoke$arity$variadic = function(keyvals) {
  var G__16947 = goog.object.create;
  var G__16948 = keyvals;
  return cljs.core.apply.cljs$core$IFn$_invoke$arity$2 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$2(G__16947, G__16948) : cljs.core.apply.call(null, G__16947, G__16948);
};
cljs.core.js_obj.cljs$lang$applyTo = function(seq16942) {
  return cljs.core.js_obj.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq16942));
};
cljs.core.js_obj.cljs$lang$maxFixedArity = 0;
cljs.core.js_keys = function cljs$core$js_keys(obj) {
  var keys = [];
  var G__16952_16954 = obj;
  var G__16953_16955 = function(G__16952_16954, keys) {
    return function(val, key, obj__$1) {
      return keys.push(key);
    };
  }(G__16952_16954, keys);
  goog.object.forEach(G__16952_16954, G__16953_16955);
  return keys;
};
cljs.core.js_delete = function cljs$core$js_delete(obj, key) {
  return delete obj[key];
};
cljs.core.array_copy = function cljs$core$array_copy(from, i, to, j, len) {
  var i__$1 = i;
  var j__$1 = j;
  var len__$1 = len;
  while (true) {
    if (len__$1 === 0) {
      return to;
    } else {
      to[j__$1] = from[i__$1];
      var G__16956 = i__$1 + 1;
      var G__16957 = j__$1 + 1;
      var G__16958 = len__$1 - 1;
      i__$1 = G__16956;
      j__$1 = G__16957;
      len__$1 = G__16958;
      continue;
    }
    break;
  }
};
cljs.core.array_copy_downward = function cljs$core$array_copy_downward(from, i, to, j, len) {
  var i__$1 = i + (len - 1);
  var j__$1 = j + (len - 1);
  var len__$1 = len;
  while (true) {
    if (len__$1 === 0) {
      return to;
    } else {
      to[j__$1] = from[i__$1];
      var G__16959 = i__$1 - 1;
      var G__16960 = j__$1 - 1;
      var G__16961 = len__$1 - 1;
      i__$1 = G__16959;
      j__$1 = G__16960;
      len__$1 = G__16961;
      continue;
    }
    break;
  }
};
cljs.core.lookup_sentinel = function() {
  var obj16963 = {};
  return obj16963;
}();
cljs.core.false_QMARK_ = function cljs$core$false_QMARK_(x) {
  return x === false;
};
cljs.core.true_QMARK_ = function cljs$core$true_QMARK_(x) {
  return x === true;
};
cljs.core.undefined_QMARK_ = function cljs$core$undefined_QMARK_(x) {
  return void 0 === x;
};
cljs.core.seq_QMARK_ = function cljs$core$seq_QMARK_(s) {
  if (s == null) {
    return false;
  } else {
    var G__16965 = s;
    if (G__16965) {
      var bit__5009__auto__ = G__16965.cljs$lang$protocol_mask$partition0$ & 64;
      if (bit__5009__auto__ || G__16965.cljs$core$ISeq$) {
        return true;
      } else {
        if (!G__16965.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.ISeq, G__16965);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.ISeq, G__16965);
    }
  }
};
cljs.core.seqable_QMARK_ = function cljs$core$seqable_QMARK_(s) {
  var G__16967 = s;
  if (G__16967) {
    var bit__5009__auto__ = G__16967.cljs$lang$protocol_mask$partition0$ & 8388608;
    if (bit__5009__auto__ || G__16967.cljs$core$ISeqable$) {
      return true;
    } else {
      if (!G__16967.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.ISeqable, G__16967);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.ISeqable, G__16967);
  }
};
cljs.core.boolean$ = function cljs$core$boolean(x) {
  if (cljs.core.truth_(x)) {
    return true;
  } else {
    return false;
  }
};
cljs.core.ifn_QMARK_ = function cljs$core$ifn_QMARK_(f) {
  var or__4335__auto__ = cljs.core.fn_QMARK_(f);
  if (or__4335__auto__) {
    return or__4335__auto__;
  } else {
    var G__16971 = f;
    if (G__16971) {
      var bit__5009__auto__ = G__16971.cljs$lang$protocol_mask$partition0$ & 1;
      if (bit__5009__auto__ || G__16971.cljs$core$IFn$) {
        return true;
      } else {
        if (!G__16971.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.IFn, G__16971);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.IFn, G__16971);
    }
  }
};
cljs.core.integer_QMARK_ = function cljs$core$integer_QMARK_(n) {
  return typeof n === "number" && cljs.core.not(function() {
    var G__16984 = n;
    return isNaN(G__16984);
  }()) && !(n === Infinity) && function() {
    var G__16985 = n;
    return parseFloat(G__16985);
  }() === function() {
    var G__16986 = n;
    var G__16987 = 10;
    return parseInt(G__16986, G__16987);
  }();
};
cljs.core.contains_QMARK_ = function cljs$core$contains_QMARK_(coll, v) {
  if (cljs.core.get.cljs$core$IFn$_invoke$arity$3(coll, v, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return false;
  } else {
    return true;
  }
};
cljs.core.find = function cljs$core$find(coll, k) {
  if (!(coll == null) && cljs.core.associative_QMARK_(coll) && cljs.core.contains_QMARK_(coll, k)) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, cljs.core.get.cljs$core$IFn$_invoke$arity$2(coll, k)], null);
  } else {
    return null;
  }
};
cljs.core.distinct_QMARK_ = function cljs$core$distinct_QMARK_() {
  var G__16992 = arguments.length;
  switch(G__16992) {
    case 1:
      return cljs.core.distinct_QMARK_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.distinct_QMARK_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5386__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core.distinct_QMARK_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5386__auto__);
  }
};
cljs.core.distinct_QMARK_.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return true;
};
cljs.core.distinct_QMARK_.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return!cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(x, y);
};
cljs.core.distinct_QMARK_.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  if (!cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(x, y)) {
    var s = cljs.core.PersistentHashSet.fromArray([x, y], true);
    var xs = more;
    while (true) {
      var x__$1 = cljs.core.first(xs);
      var etc = cljs.core.next(xs);
      if (cljs.core.truth_(xs)) {
        if (cljs.core.contains_QMARK_(s, x__$1)) {
          return false;
        } else {
          var G__16994 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(s, x__$1);
          var G__16995 = etc;
          s = G__16994;
          xs = G__16995;
          continue;
        }
      } else {
        return true;
      }
      break;
    }
  } else {
    return false;
  }
};
cljs.core.distinct_QMARK_.cljs$lang$applyTo = function(seq16988) {
  var G__16989 = cljs.core.first(seq16988);
  var seq16988__$1 = cljs.core.next(seq16988);
  var G__16990 = cljs.core.first(seq16988__$1);
  var seq16988__$2 = cljs.core.next(seq16988__$1);
  return cljs.core.distinct_QMARK_.cljs$core$IFn$_invoke$arity$variadic(G__16989, G__16990, seq16988__$2);
};
cljs.core.distinct_QMARK_.cljs$lang$maxFixedArity = 2;
cljs.core.compare = function cljs$core$compare(x, y) {
  if (x === y) {
    return 0;
  } else {
    if (x == null) {
      return-1;
    } else {
      if (y == null) {
        return 1;
      } else {
        if (cljs.core.type(x) === cljs.core.type(y)) {
          if (function() {
            var G__16999 = x;
            if (G__16999) {
              var bit__5002__auto__ = G__16999.cljs$lang$protocol_mask$partition1$ & 2048;
              if (bit__5002__auto__ || G__16999.cljs$core$IComparable$) {
                return true;
              } else {
                return false;
              }
            } else {
              return false;
            }
          }()) {
            return x.cljs$core$IComparable$_compare$arity$2(null, y);
          } else {
            var G__17000 = x;
            var G__17001 = y;
            return goog.array.defaultCompare(G__17000, G__17001);
          }
        } else {
          throw new Error("compare on non-nil objects of different types");
        }
      }
    }
  }
};
cljs.core.compare_indexed = function cljs$core$compare_indexed() {
  var G__17003 = arguments.length;
  switch(G__17003) {
    case 2:
      return cljs.core.compare_indexed.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 4:
      return cljs.core.compare_indexed.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.compare_indexed.cljs$core$IFn$_invoke$arity$2 = function(xs, ys) {
  var xl = cljs.core.count(xs);
  var yl = cljs.core.count(ys);
  if (xl < yl) {
    return-1;
  } else {
    if (xl > yl) {
      return 1;
    } else {
      if (xl === 0) {
        return 0;
      } else {
        return cljs.core.compare_indexed.cljs$core$IFn$_invoke$arity$4(xs, ys, xl, 0);
      }
    }
  }
};
cljs.core.compare_indexed.cljs$core$IFn$_invoke$arity$4 = function(xs, ys, len, n) {
  while (true) {
    var d = cljs.core.compare(cljs.core.nth.cljs$core$IFn$_invoke$arity$2(xs, n), cljs.core.nth.cljs$core$IFn$_invoke$arity$2(ys, n));
    if (d === 0 && n + 1 < len) {
      var G__17005 = xs;
      var G__17006 = ys;
      var G__17007 = len;
      var G__17008 = n + 1;
      xs = G__17005;
      ys = G__17006;
      len = G__17007;
      n = G__17008;
      continue;
    } else {
      return d;
    }
    break;
  }
};
cljs.core.compare_indexed.cljs$lang$maxFixedArity = 4;
cljs.core.fn__GT_comparator = function cljs$core$fn__GT_comparator(f) {
  if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(f, cljs.core.compare)) {
    return cljs.core.compare;
  } else {
    return function(x, y) {
      var r = function() {
        var G__17013 = x;
        var G__17014 = y;
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__17013, G__17014) : f.call(null, G__17013, G__17014);
      }();
      if (typeof r === "number") {
        return r;
      } else {
        if (cljs.core.truth_(r)) {
          return-1;
        } else {
          if (cljs.core.truth_(function() {
            var G__17015 = y;
            var G__17016 = x;
            return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__17015, G__17016) : f.call(null, G__17015, G__17016);
          }())) {
            return 1;
          } else {
            return 0;
          }
        }
      }
    };
  }
};
cljs.core.sort = function cljs$core$sort() {
  var G__17018 = arguments.length;
  switch(G__17018) {
    case 1:
      return cljs.core.sort.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.sort.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.sort.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  return cljs.core.sort.cljs$core$IFn$_invoke$arity$2(cljs.core.compare, coll);
};
cljs.core.sort.cljs$core$IFn$_invoke$arity$2 = function(comp, coll) {
  if (cljs.core.seq(coll)) {
    var a = function() {
      var G__17019 = coll;
      return cljs.core.to_array.cljs$core$IFn$_invoke$arity$1 ? cljs.core.to_array.cljs$core$IFn$_invoke$arity$1(G__17019) : cljs.core.to_array.call(null, G__17019);
    }();
    var G__17020_17023 = a;
    var G__17021_17024 = cljs.core.fn__GT_comparator(comp);
    goog.array.stableSort(G__17020_17023, G__17021_17024);
    return cljs.core.seq(a);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.sort.cljs$lang$maxFixedArity = 2;
cljs.core.sort_by = function cljs$core$sort_by() {
  var G__17026 = arguments.length;
  switch(G__17026) {
    case 2:
      return cljs.core.sort_by.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.sort_by.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.sort_by.cljs$core$IFn$_invoke$arity$2 = function(keyfn, coll) {
  return cljs.core.sort_by.cljs$core$IFn$_invoke$arity$3(keyfn, cljs.core.compare, coll);
};
cljs.core.sort_by.cljs$core$IFn$_invoke$arity$3 = function(keyfn, comp, coll) {
  return cljs.core.sort.cljs$core$IFn$_invoke$arity$2(function(x, y) {
    return cljs.core.fn__GT_comparator(comp).call(null, function() {
      var G__17027 = x;
      return keyfn.cljs$core$IFn$_invoke$arity$1 ? keyfn.cljs$core$IFn$_invoke$arity$1(G__17027) : keyfn.call(null, G__17027);
    }(), function() {
      var G__17028 = y;
      return keyfn.cljs$core$IFn$_invoke$arity$1 ? keyfn.cljs$core$IFn$_invoke$arity$1(G__17028) : keyfn.call(null, G__17028);
    }());
  }, coll);
};
cljs.core.sort_by.cljs$lang$maxFixedArity = 3;
cljs.core.seq_reduce = function cljs$core$seq_reduce() {
  var G__17031 = arguments.length;
  switch(G__17031) {
    case 2:
      return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2 = function(f, coll) {
  var temp__4124__auto__ = cljs.core.seq(coll);
  if (temp__4124__auto__) {
    var s = temp__4124__auto__;
    var G__17032 = f;
    var G__17033 = cljs.core.first(s);
    var G__17034 = cljs.core.next(s);
    return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3 ? cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(G__17032, G__17033, G__17034) : cljs.core.reduce.call(null, G__17032, G__17033, G__17034);
  } else {
    return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
  }
};
cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3 = function(f, val, coll) {
  var val__$1 = val;
  var coll__$1 = cljs.core.seq(coll);
  while (true) {
    if (coll__$1) {
      var nval = function() {
        var G__17035 = val__$1;
        var G__17036 = cljs.core.first(coll__$1);
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__17035, G__17036) : f.call(null, G__17035, G__17036);
      }();
      if (cljs.core.reduced_QMARK_(nval)) {
        return cljs.core.deref(nval);
      } else {
        var G__17038 = nval;
        var G__17039 = cljs.core.next(coll__$1);
        val__$1 = G__17038;
        coll__$1 = G__17039;
        continue;
      }
    } else {
      return val__$1;
    }
    break;
  }
};
cljs.core.seq_reduce.cljs$lang$maxFixedArity = 3;
cljs.core.shuffle = function cljs$core$shuffle(coll) {
  var a = function() {
    var G__17043 = coll;
    return cljs.core.to_array.cljs$core$IFn$_invoke$arity$1 ? cljs.core.to_array.cljs$core$IFn$_invoke$arity$1(G__17043) : cljs.core.to_array.call(null, G__17043);
  }();
  var G__17044_17046 = a;
  goog.array.shuffle(G__17044_17046);
  var G__17045 = a;
  return cljs.core.vec.cljs$core$IFn$_invoke$arity$1 ? cljs.core.vec.cljs$core$IFn$_invoke$arity$1(G__17045) : cljs.core.vec.call(null, G__17045);
};
cljs.core.reduce = function cljs$core$reduce() {
  var G__17048 = arguments.length;
  switch(G__17048) {
    case 2:
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.reduce.cljs$core$IFn$_invoke$arity$2 = function(f, coll) {
  if (function() {
    var G__17049 = coll;
    if (G__17049) {
      var bit__5002__auto__ = G__17049.cljs$lang$protocol_mask$partition0$ & 524288;
      if (bit__5002__auto__ || G__17049.cljs$core$IReduce$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return coll.cljs$core$IReduce$_reduce$arity$2(null, f);
  } else {
    if (cljs.core.array_QMARK_(coll)) {
      return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$2(coll, f);
    } else {
      if (typeof coll === "string") {
        return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$2(coll, f);
      } else {
        if (cljs.core.native_satisfies_QMARK_(cljs.core.IReduce, coll)) {
          return cljs.core._reduce.cljs$core$IFn$_invoke$arity$2(coll, f);
        } else {
          return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll);
        }
      }
    }
  }
};
cljs.core.reduce.cljs$core$IFn$_invoke$arity$3 = function(f, val, coll) {
  if (function() {
    var G__17050 = coll;
    if (G__17050) {
      var bit__5002__auto__ = G__17050.cljs$lang$protocol_mask$partition0$ & 524288;
      if (bit__5002__auto__ || G__17050.cljs$core$IReduce$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return coll.cljs$core$IReduce$_reduce$arity$3(null, f, val);
  } else {
    if (cljs.core.array_QMARK_(coll)) {
      return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$3(coll, f, val);
    } else {
      if (typeof coll === "string") {
        return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$3(coll, f, val);
      } else {
        if (cljs.core.native_satisfies_QMARK_(cljs.core.IReduce, coll)) {
          return cljs.core._reduce.cljs$core$IFn$_invoke$arity$3(coll, f, val);
        } else {
          return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, val, coll);
        }
      }
    }
  }
};
cljs.core.reduce.cljs$lang$maxFixedArity = 3;
cljs.core.reduce_kv = function cljs$core$reduce_kv(f, init, coll) {
  if (!(coll == null)) {
    return cljs.core._kv_reduce(coll, f, init);
  } else {
    return init;
  }
};
cljs.core.identity = function cljs$core$identity(x) {
  return x;
};
cljs.core.completing = function cljs$core$completing() {
  var G__17053 = arguments.length;
  switch(G__17053) {
    case 1:
      return cljs.core.completing.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.completing.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.completing.cljs$core$IFn$_invoke$arity$1 = function(f) {
  return cljs.core.completing.cljs$core$IFn$_invoke$arity$2(f, cljs.core.identity);
};
cljs.core.completing.cljs$core$IFn$_invoke$arity$2 = function(f, cf) {
  return function() {
    var G__17058 = null;
    var G__17058__0 = function() {
      return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
    };
    var G__17058__1 = function(x) {
      var G__17054 = x;
      return cf.cljs$core$IFn$_invoke$arity$1 ? cf.cljs$core$IFn$_invoke$arity$1(G__17054) : cf.call(null, G__17054);
    };
    var G__17058__2 = function(x, y) {
      var G__17055 = x;
      var G__17056 = y;
      return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__17055, G__17056) : f.call(null, G__17055, G__17056);
    };
    G__17058 = function(x, y) {
      switch(arguments.length) {
        case 0:
          return G__17058__0.call(this);
        case 1:
          return G__17058__1.call(this, x);
        case 2:
          return G__17058__2.call(this, x, y);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__17058.cljs$core$IFn$_invoke$arity$0 = G__17058__0;
    G__17058.cljs$core$IFn$_invoke$arity$1 = G__17058__1;
    G__17058.cljs$core$IFn$_invoke$arity$2 = G__17058__2;
    return G__17058;
  }();
};
cljs.core.completing.cljs$lang$maxFixedArity = 2;
cljs.core.transduce = function cljs$core$transduce() {
  var G__17060 = arguments.length;
  switch(G__17060) {
    case 3:
      return cljs.core.transduce.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.transduce.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.transduce.cljs$core$IFn$_invoke$arity$3 = function(xform, f, coll) {
  return cljs.core.transduce.cljs$core$IFn$_invoke$arity$4(xform, f, function() {
    return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
  }(), coll);
};
cljs.core.transduce.cljs$core$IFn$_invoke$arity$4 = function(xform, f, init, coll) {
  var f__$1 = function() {
    var G__17061 = f;
    return xform.cljs$core$IFn$_invoke$arity$1 ? xform.cljs$core$IFn$_invoke$arity$1(G__17061) : xform.call(null, G__17061);
  }();
  var ret = cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(f__$1, init, coll);
  var G__17062 = ret;
  return f__$1.cljs$core$IFn$_invoke$arity$1 ? f__$1.cljs$core$IFn$_invoke$arity$1(G__17062) : f__$1.call(null, G__17062);
};
cljs.core.transduce.cljs$lang$maxFixedArity = 4;
cljs.core._PLUS_ = function cljs$core$_PLUS_() {
  var G__17068 = arguments.length;
  switch(G__17068) {
    case 0:
      return cljs.core._PLUS_.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core._PLUS_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core._PLUS_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5386__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core._PLUS_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5386__auto__);
  }
};
cljs.core._PLUS_.cljs$core$IFn$_invoke$arity$0 = function() {
  return 0;
};
cljs.core._PLUS_.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return x;
};
cljs.core._PLUS_.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x + y;
};
cljs.core._PLUS_.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._PLUS_, x + y, more);
};
cljs.core._PLUS_.cljs$lang$applyTo = function(seq17064) {
  var G__17065 = cljs.core.first(seq17064);
  var seq17064__$1 = cljs.core.next(seq17064);
  var G__17066 = cljs.core.first(seq17064__$1);
  var seq17064__$2 = cljs.core.next(seq17064__$1);
  return cljs.core._PLUS_.cljs$core$IFn$_invoke$arity$variadic(G__17065, G__17066, seq17064__$2);
};
cljs.core._PLUS_.cljs$lang$maxFixedArity = 2;
cljs.core._ = function cljs$core$_() {
  var G__17074 = arguments.length;
  switch(G__17074) {
    case 1:
      return cljs.core._.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core._.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5386__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core._.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5386__auto__);
  }
};
cljs.core._.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return-x;
};
cljs.core._.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x - y;
};
cljs.core._.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._, x - y, more);
};
cljs.core._.cljs$lang$applyTo = function(seq17070) {
  var G__17071 = cljs.core.first(seq17070);
  var seq17070__$1 = cljs.core.next(seq17070);
  var G__17072 = cljs.core.first(seq17070__$1);
  var seq17070__$2 = cljs.core.next(seq17070__$1);
  return cljs.core._.cljs$core$IFn$_invoke$arity$variadic(G__17071, G__17072, seq17070__$2);
};
cljs.core._.cljs$lang$maxFixedArity = 2;
cljs.core._STAR_ = function cljs$core$_STAR_() {
  var G__17080 = arguments.length;
  switch(G__17080) {
    case 0:
      return cljs.core._STAR_.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core._STAR_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core._STAR_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5386__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core._STAR_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5386__auto__);
  }
};
cljs.core._STAR_.cljs$core$IFn$_invoke$arity$0 = function() {
  return 1;
};
cljs.core._STAR_.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return x;
};
cljs.core._STAR_.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x * y;
};
cljs.core._STAR_.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._STAR_, x * y, more);
};
cljs.core._STAR_.cljs$lang$applyTo = function(seq17076) {
  var G__17077 = cljs.core.first(seq17076);
  var seq17076__$1 = cljs.core.next(seq17076);
  var G__17078 = cljs.core.first(seq17076__$1);
  var seq17076__$2 = cljs.core.next(seq17076__$1);
  return cljs.core._STAR_.cljs$core$IFn$_invoke$arity$variadic(G__17077, G__17078, seq17076__$2);
};
cljs.core._STAR_.cljs$lang$maxFixedArity = 2;
cljs.core._SLASH_ = function cljs$core$_SLASH_() {
  var G__17086 = arguments.length;
  switch(G__17086) {
    case 1:
      return cljs.core._SLASH_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core._SLASH_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5386__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core._SLASH_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5386__auto__);
  }
};
cljs.core._SLASH_.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return 1 / x;
};
cljs.core._SLASH_.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x / y;
};
cljs.core._SLASH_.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._SLASH_, x / y, more);
};
cljs.core._SLASH_.cljs$lang$applyTo = function(seq17082) {
  var G__17083 = cljs.core.first(seq17082);
  var seq17082__$1 = cljs.core.next(seq17082);
  var G__17084 = cljs.core.first(seq17082__$1);
  var seq17082__$2 = cljs.core.next(seq17082__$1);
  return cljs.core._SLASH_.cljs$core$IFn$_invoke$arity$variadic(G__17083, G__17084, seq17082__$2);
};
cljs.core._SLASH_.cljs$lang$maxFixedArity = 2;
cljs.core._LT_ = function cljs$core$_LT_() {
  var G__17092 = arguments.length;
  switch(G__17092) {
    case 1:
      return cljs.core._LT_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core._LT_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5386__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core._LT_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5386__auto__);
  }
};
cljs.core._LT_.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return true;
};
cljs.core._LT_.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x < y;
};
cljs.core._LT_.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  while (true) {
    if (x < y) {
      if (cljs.core.next(more)) {
        var G__17094 = y;
        var G__17095 = cljs.core.first(more);
        var G__17096 = cljs.core.next(more);
        x = G__17094;
        y = G__17095;
        more = G__17096;
        continue;
      } else {
        return y < cljs.core.first(more);
      }
    } else {
      return false;
    }
    break;
  }
};
cljs.core._LT_.cljs$lang$applyTo = function(seq17088) {
  var G__17089 = cljs.core.first(seq17088);
  var seq17088__$1 = cljs.core.next(seq17088);
  var G__17090 = cljs.core.first(seq17088__$1);
  var seq17088__$2 = cljs.core.next(seq17088__$1);
  return cljs.core._LT_.cljs$core$IFn$_invoke$arity$variadic(G__17089, G__17090, seq17088__$2);
};
cljs.core._LT_.cljs$lang$maxFixedArity = 2;
cljs.core._LT__EQ_ = function cljs$core$_LT__EQ_() {
  var G__17101 = arguments.length;
  switch(G__17101) {
    case 1:
      return cljs.core._LT__EQ_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core._LT__EQ_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5386__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core._LT__EQ_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5386__auto__);
  }
};
cljs.core._LT__EQ_.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return true;
};
cljs.core._LT__EQ_.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x <= y;
};
cljs.core._LT__EQ_.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  while (true) {
    if (x <= y) {
      if (cljs.core.next(more)) {
        var G__17103 = y;
        var G__17104 = cljs.core.first(more);
        var G__17105 = cljs.core.next(more);
        x = G__17103;
        y = G__17104;
        more = G__17105;
        continue;
      } else {
        return y <= cljs.core.first(more);
      }
    } else {
      return false;
    }
    break;
  }
};
cljs.core._LT__EQ_.cljs$lang$applyTo = function(seq17097) {
  var G__17098 = cljs.core.first(seq17097);
  var seq17097__$1 = cljs.core.next(seq17097);
  var G__17099 = cljs.core.first(seq17097__$1);
  var seq17097__$2 = cljs.core.next(seq17097__$1);
  return cljs.core._LT__EQ_.cljs$core$IFn$_invoke$arity$variadic(G__17098, G__17099, seq17097__$2);
};
cljs.core._LT__EQ_.cljs$lang$maxFixedArity = 2;
cljs.core._GT_ = function cljs$core$_GT_() {
  var G__17110 = arguments.length;
  switch(G__17110) {
    case 1:
      return cljs.core._GT_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core._GT_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5386__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core._GT_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5386__auto__);
  }
};
cljs.core._GT_.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return true;
};
cljs.core._GT_.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x > y;
};
cljs.core._GT_.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  while (true) {
    if (x > y) {
      if (cljs.core.next(more)) {
        var G__17112 = y;
        var G__17113 = cljs.core.first(more);
        var G__17114 = cljs.core.next(more);
        x = G__17112;
        y = G__17113;
        more = G__17114;
        continue;
      } else {
        return y > cljs.core.first(more);
      }
    } else {
      return false;
    }
    break;
  }
};
cljs.core._GT_.cljs$lang$applyTo = function(seq17106) {
  var G__17107 = cljs.core.first(seq17106);
  var seq17106__$1 = cljs.core.next(seq17106);
  var G__17108 = cljs.core.first(seq17106__$1);
  var seq17106__$2 = cljs.core.next(seq17106__$1);
  return cljs.core._GT_.cljs$core$IFn$_invoke$arity$variadic(G__17107, G__17108, seq17106__$2);
};
cljs.core._GT_.cljs$lang$maxFixedArity = 2;
cljs.core._GT__EQ_ = function cljs$core$_GT__EQ_() {
  var G__17119 = arguments.length;
  switch(G__17119) {
    case 1:
      return cljs.core._GT__EQ_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core._GT__EQ_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5386__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core._GT__EQ_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5386__auto__);
  }
};
cljs.core._GT__EQ_.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return true;
};
cljs.core._GT__EQ_.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x >= y;
};
cljs.core._GT__EQ_.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  while (true) {
    if (x >= y) {
      if (cljs.core.next(more)) {
        var G__17121 = y;
        var G__17122 = cljs.core.first(more);
        var G__17123 = cljs.core.next(more);
        x = G__17121;
        y = G__17122;
        more = G__17123;
        continue;
      } else {
        return y >= cljs.core.first(more);
      }
    } else {
      return false;
    }
    break;
  }
};
cljs.core._GT__EQ_.cljs$lang$applyTo = function(seq17115) {
  var G__17116 = cljs.core.first(seq17115);
  var seq17115__$1 = cljs.core.next(seq17115);
  var G__17117 = cljs.core.first(seq17115__$1);
  var seq17115__$2 = cljs.core.next(seq17115__$1);
  return cljs.core._GT__EQ_.cljs$core$IFn$_invoke$arity$variadic(G__17116, G__17117, seq17115__$2);
};
cljs.core._GT__EQ_.cljs$lang$maxFixedArity = 2;
cljs.core.dec = function cljs$core$dec(x) {
  return x - 1;
};
cljs.core.max = function cljs$core$max() {
  var G__17128 = arguments.length;
  switch(G__17128) {
    case 1:
      return cljs.core.max.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.max.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5386__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core.max.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5386__auto__);
  }
};
cljs.core.max.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return x;
};
cljs.core.max.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  var x__4647__auto__ = x;
  var y__4648__auto__ = y;
  return x__4647__auto__ > y__4648__auto__ ? x__4647__auto__ : y__4648__auto__;
};
cljs.core.max.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.max, function() {
    var x__4647__auto__ = x;
    var y__4648__auto__ = y;
    return x__4647__auto__ > y__4648__auto__ ? x__4647__auto__ : y__4648__auto__;
  }(), more);
};
cljs.core.max.cljs$lang$applyTo = function(seq17124) {
  var G__17125 = cljs.core.first(seq17124);
  var seq17124__$1 = cljs.core.next(seq17124);
  var G__17126 = cljs.core.first(seq17124__$1);
  var seq17124__$2 = cljs.core.next(seq17124__$1);
  return cljs.core.max.cljs$core$IFn$_invoke$arity$variadic(G__17125, G__17126, seq17124__$2);
};
cljs.core.max.cljs$lang$maxFixedArity = 2;
cljs.core.min = function cljs$core$min() {
  var G__17134 = arguments.length;
  switch(G__17134) {
    case 1:
      return cljs.core.min.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.min.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5386__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core.min.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5386__auto__);
  }
};
cljs.core.min.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return x;
};
cljs.core.min.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  var x__4654__auto__ = x;
  var y__4655__auto__ = y;
  return x__4654__auto__ < y__4655__auto__ ? x__4654__auto__ : y__4655__auto__;
};
cljs.core.min.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.min, function() {
    var x__4654__auto__ = x;
    var y__4655__auto__ = y;
    return x__4654__auto__ < y__4655__auto__ ? x__4654__auto__ : y__4655__auto__;
  }(), more);
};
cljs.core.min.cljs$lang$applyTo = function(seq17130) {
  var G__17131 = cljs.core.first(seq17130);
  var seq17130__$1 = cljs.core.next(seq17130);
  var G__17132 = cljs.core.first(seq17130__$1);
  var seq17130__$2 = cljs.core.next(seq17130__$1);
  return cljs.core.min.cljs$core$IFn$_invoke$arity$variadic(G__17131, G__17132, seq17130__$2);
};
cljs.core.min.cljs$lang$maxFixedArity = 2;
cljs.core.byte$ = function cljs$core$byte(x) {
  return x;
};
cljs.core.char$ = function cljs$core$char(x) {
  if (typeof x === "number") {
    return String.fromCharCode(x);
  } else {
    if (typeof x === "string" && x.length === 1) {
      return x;
    } else {
      throw new Error("Argument to char must be a character or number");
    }
  }
};
cljs.core.short$ = function cljs$core$short(x) {
  return x;
};
cljs.core.float$ = function cljs$core$float(x) {
  return x;
};
cljs.core.double$ = function cljs$core$double(x) {
  return x;
};
cljs.core.unchecked_byte = function cljs$core$unchecked_byte(x) {
  return x;
};
cljs.core.unchecked_char = function cljs$core$unchecked_char(x) {
  return x;
};
cljs.core.unchecked_short = function cljs$core$unchecked_short(x) {
  return x;
};
cljs.core.unchecked_float = function cljs$core$unchecked_float(x) {
  return x;
};
cljs.core.unchecked_double = function cljs$core$unchecked_double(x) {
  return x;
};
cljs.core.unchecked_add = function cljs$core$unchecked_add() {
  var G__17140 = arguments.length;
  switch(G__17140) {
    case 0:
      return cljs.core.unchecked_add.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.unchecked_add.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.unchecked_add.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5386__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core.unchecked_add.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5386__auto__);
  }
};
cljs.core.unchecked_add.cljs$core$IFn$_invoke$arity$0 = function() {
  return 0;
};
cljs.core.unchecked_add.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return x;
};
cljs.core.unchecked_add.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x + y;
};
cljs.core.unchecked_add.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.unchecked_add, x + y, more);
};
cljs.core.unchecked_add.cljs$lang$applyTo = function(seq17136) {
  var G__17137 = cljs.core.first(seq17136);
  var seq17136__$1 = cljs.core.next(seq17136);
  var G__17138 = cljs.core.first(seq17136__$1);
  var seq17136__$2 = cljs.core.next(seq17136__$1);
  return cljs.core.unchecked_add.cljs$core$IFn$_invoke$arity$variadic(G__17137, G__17138, seq17136__$2);
};
cljs.core.unchecked_add.cljs$lang$maxFixedArity = 2;
cljs.core.unchecked_add_int = function cljs$core$unchecked_add_int() {
  var G__17146 = arguments.length;
  switch(G__17146) {
    case 0:
      return cljs.core.unchecked_add_int.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.unchecked_add_int.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.unchecked_add_int.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5386__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core.unchecked_add_int.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5386__auto__);
  }
};
cljs.core.unchecked_add_int.cljs$core$IFn$_invoke$arity$0 = function() {
  return 0;
};
cljs.core.unchecked_add_int.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return x;
};
cljs.core.unchecked_add_int.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x + y;
};
cljs.core.unchecked_add_int.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.unchecked_add_int, x + y, more);
};
cljs.core.unchecked_add_int.cljs$lang$applyTo = function(seq17142) {
  var G__17143 = cljs.core.first(seq17142);
  var seq17142__$1 = cljs.core.next(seq17142);
  var G__17144 = cljs.core.first(seq17142__$1);
  var seq17142__$2 = cljs.core.next(seq17142__$1);
  return cljs.core.unchecked_add_int.cljs$core$IFn$_invoke$arity$variadic(G__17143, G__17144, seq17142__$2);
};
cljs.core.unchecked_add_int.cljs$lang$maxFixedArity = 2;
cljs.core.unchecked_dec = function cljs$core$unchecked_dec(x) {
  return x - 1;
};
cljs.core.unchecked_dec_int = function cljs$core$unchecked_dec_int(x) {
  return x - 1;
};
cljs.core.unchecked_divide_int = function cljs$core$unchecked_divide_int() {
  var G__17152 = arguments.length;
  switch(G__17152) {
    case 1:
      return cljs.core.unchecked_divide_int.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.unchecked_divide_int.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5386__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core.unchecked_divide_int.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5386__auto__);
  }
};
cljs.core.unchecked_divide_int.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return 1 / x;
};
cljs.core.unchecked_divide_int.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x / y;
};
cljs.core.unchecked_divide_int.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.unchecked_divide_int, x / y, more);
};
cljs.core.unchecked_divide_int.cljs$lang$applyTo = function(seq17148) {
  var G__17149 = cljs.core.first(seq17148);
  var seq17148__$1 = cljs.core.next(seq17148);
  var G__17150 = cljs.core.first(seq17148__$1);
  var seq17148__$2 = cljs.core.next(seq17148__$1);
  return cljs.core.unchecked_divide_int.cljs$core$IFn$_invoke$arity$variadic(G__17149, G__17150, seq17148__$2);
};
cljs.core.unchecked_divide_int.cljs$lang$maxFixedArity = 2;
cljs.core.unchecked_inc = function cljs$core$unchecked_inc(x) {
  return x + 1;
};
cljs.core.unchecked_inc_int = function cljs$core$unchecked_inc_int(x) {
  return x + 1;
};
cljs.core.unchecked_multiply = function cljs$core$unchecked_multiply() {
  var G__17158 = arguments.length;
  switch(G__17158) {
    case 0:
      return cljs.core.unchecked_multiply.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.unchecked_multiply.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.unchecked_multiply.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5386__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core.unchecked_multiply.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5386__auto__);
  }
};
cljs.core.unchecked_multiply.cljs$core$IFn$_invoke$arity$0 = function() {
  return 1;
};
cljs.core.unchecked_multiply.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return x;
};
cljs.core.unchecked_multiply.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x * y;
};
cljs.core.unchecked_multiply.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.unchecked_multiply, x * y, more);
};
cljs.core.unchecked_multiply.cljs$lang$applyTo = function(seq17154) {
  var G__17155 = cljs.core.first(seq17154);
  var seq17154__$1 = cljs.core.next(seq17154);
  var G__17156 = cljs.core.first(seq17154__$1);
  var seq17154__$2 = cljs.core.next(seq17154__$1);
  return cljs.core.unchecked_multiply.cljs$core$IFn$_invoke$arity$variadic(G__17155, G__17156, seq17154__$2);
};
cljs.core.unchecked_multiply.cljs$lang$maxFixedArity = 2;
cljs.core.unchecked_multiply_int = function cljs$core$unchecked_multiply_int() {
  var G__17164 = arguments.length;
  switch(G__17164) {
    case 0:
      return cljs.core.unchecked_multiply_int.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.unchecked_multiply_int.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.unchecked_multiply_int.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5386__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core.unchecked_multiply_int.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5386__auto__);
  }
};
cljs.core.unchecked_multiply_int.cljs$core$IFn$_invoke$arity$0 = function() {
  return 1;
};
cljs.core.unchecked_multiply_int.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return x;
};
cljs.core.unchecked_multiply_int.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x * y;
};
cljs.core.unchecked_multiply_int.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.unchecked_multiply_int, x * y, more);
};
cljs.core.unchecked_multiply_int.cljs$lang$applyTo = function(seq17160) {
  var G__17161 = cljs.core.first(seq17160);
  var seq17160__$1 = cljs.core.next(seq17160);
  var G__17162 = cljs.core.first(seq17160__$1);
  var seq17160__$2 = cljs.core.next(seq17160__$1);
  return cljs.core.unchecked_multiply_int.cljs$core$IFn$_invoke$arity$variadic(G__17161, G__17162, seq17160__$2);
};
cljs.core.unchecked_multiply_int.cljs$lang$maxFixedArity = 2;
cljs.core.unchecked_negate = function cljs$core$unchecked_negate(x) {
  return-x;
};
cljs.core.unchecked_negate_int = function cljs$core$unchecked_negate_int(x) {
  return-x;
};
cljs.core.unchecked_remainder_int = function cljs$core$unchecked_remainder_int(x, n) {
  var G__17168 = x;
  var G__17169 = n;
  return cljs.core.mod.cljs$core$IFn$_invoke$arity$2 ? cljs.core.mod.cljs$core$IFn$_invoke$arity$2(G__17168, G__17169) : cljs.core.mod.call(null, G__17168, G__17169);
};
cljs.core.unchecked_subtract = function cljs$core$unchecked_subtract() {
  var G__17174 = arguments.length;
  switch(G__17174) {
    case 1:
      return cljs.core.unchecked_subtract.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.unchecked_subtract.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5386__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core.unchecked_subtract.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5386__auto__);
  }
};
cljs.core.unchecked_subtract.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return-x;
};
cljs.core.unchecked_subtract.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x - y;
};
cljs.core.unchecked_subtract.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.unchecked_subtract, x - y, more);
};
cljs.core.unchecked_subtract.cljs$lang$applyTo = function(seq17170) {
  var G__17171 = cljs.core.first(seq17170);
  var seq17170__$1 = cljs.core.next(seq17170);
  var G__17172 = cljs.core.first(seq17170__$1);
  var seq17170__$2 = cljs.core.next(seq17170__$1);
  return cljs.core.unchecked_subtract.cljs$core$IFn$_invoke$arity$variadic(G__17171, G__17172, seq17170__$2);
};
cljs.core.unchecked_subtract.cljs$lang$maxFixedArity = 2;
cljs.core.unchecked_subtract_int = function cljs$core$unchecked_subtract_int() {
  var G__17180 = arguments.length;
  switch(G__17180) {
    case 1:
      return cljs.core.unchecked_subtract_int.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.unchecked_subtract_int.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5386__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core.unchecked_subtract_int.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5386__auto__);
  }
};
cljs.core.unchecked_subtract_int.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return-x;
};
cljs.core.unchecked_subtract_int.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x - y;
};
cljs.core.unchecked_subtract_int.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.unchecked_subtract_int, x - y, more);
};
cljs.core.unchecked_subtract_int.cljs$lang$applyTo = function(seq17176) {
  var G__17177 = cljs.core.first(seq17176);
  var seq17176__$1 = cljs.core.next(seq17176);
  var G__17178 = cljs.core.first(seq17176__$1);
  var seq17176__$2 = cljs.core.next(seq17176__$1);
  return cljs.core.unchecked_subtract_int.cljs$core$IFn$_invoke$arity$variadic(G__17177, G__17178, seq17176__$2);
};
cljs.core.unchecked_subtract_int.cljs$lang$maxFixedArity = 2;
cljs.core.fix = function cljs$core$fix(q) {
  if (q >= 0) {
    var G__17184 = q;
    return Math.floor.cljs$core$IFn$_invoke$arity$1 ? Math.floor.cljs$core$IFn$_invoke$arity$1(G__17184) : Math.floor.call(null, G__17184);
  } else {
    var G__17185 = q;
    return Math.ceil.cljs$core$IFn$_invoke$arity$1 ? Math.ceil.cljs$core$IFn$_invoke$arity$1(G__17185) : Math.ceil.call(null, G__17185);
  }
};
cljs.core.int$ = function cljs$core$int(x) {
  return x | 0;
};
cljs.core.unchecked_int = function cljs$core$unchecked_int(x) {
  return cljs.core.fix(x);
};
cljs.core.long$ = function cljs$core$long(x) {
  return cljs.core.fix(x);
};
cljs.core.unchecked_long = function cljs$core$unchecked_long(x) {
  return cljs.core.fix(x);
};
cljs.core.booleans = function cljs$core$booleans(x) {
  return x;
};
cljs.core.bytes = function cljs$core$bytes(x) {
  return x;
};
cljs.core.chars = function cljs$core$chars(x) {
  return x;
};
cljs.core.shorts = function cljs$core$shorts(x) {
  return x;
};
cljs.core.ints = function cljs$core$ints(x) {
  return x;
};
cljs.core.floats = function cljs$core$floats(x) {
  return x;
};
cljs.core.doubles = function cljs$core$doubles(x) {
  return x;
};
cljs.core.longs = function cljs$core$longs(x) {
  return x;
};
cljs.core.js_mod = function cljs$core$js_mod(n, d) {
  return n % d;
};
cljs.core.mod = function cljs$core$mod(n, d) {
  return(n % d + d) % d;
};
cljs.core.quot = function cljs$core$quot(n, d) {
  var rem = n % d;
  return cljs.core.fix((n - rem) / d);
};
cljs.core.rem = function cljs$core$rem(n, d) {
  var q = cljs.core.quot(n, d);
  return n - d * q;
};
cljs.core.bit_xor = function cljs$core$bit_xor() {
  var G__17190 = arguments.length;
  switch(G__17190) {
    case 2:
      return cljs.core.bit_xor.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5386__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core.bit_xor.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5386__auto__);
  }
};
cljs.core.bit_xor.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x ^ y;
};
cljs.core.bit_xor.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.bit_xor, x ^ y, more);
};
cljs.core.bit_xor.cljs$lang$applyTo = function(seq17186) {
  var G__17187 = cljs.core.first(seq17186);
  var seq17186__$1 = cljs.core.next(seq17186);
  var G__17188 = cljs.core.first(seq17186__$1);
  var seq17186__$2 = cljs.core.next(seq17186__$1);
  return cljs.core.bit_xor.cljs$core$IFn$_invoke$arity$variadic(G__17187, G__17188, seq17186__$2);
};
cljs.core.bit_xor.cljs$lang$maxFixedArity = 2;
cljs.core.bit_and = function cljs$core$bit_and() {
  var G__17196 = arguments.length;
  switch(G__17196) {
    case 2:
      return cljs.core.bit_and.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5386__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core.bit_and.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5386__auto__);
  }
};
cljs.core.bit_and.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x & y;
};
cljs.core.bit_and.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.bit_and, x & y, more);
};
cljs.core.bit_and.cljs$lang$applyTo = function(seq17192) {
  var G__17193 = cljs.core.first(seq17192);
  var seq17192__$1 = cljs.core.next(seq17192);
  var G__17194 = cljs.core.first(seq17192__$1);
  var seq17192__$2 = cljs.core.next(seq17192__$1);
  return cljs.core.bit_and.cljs$core$IFn$_invoke$arity$variadic(G__17193, G__17194, seq17192__$2);
};
cljs.core.bit_and.cljs$lang$maxFixedArity = 2;
cljs.core.bit_or = function cljs$core$bit_or() {
  var G__17202 = arguments.length;
  switch(G__17202) {
    case 2:
      return cljs.core.bit_or.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5386__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core.bit_or.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5386__auto__);
  }
};
cljs.core.bit_or.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x | y;
};
cljs.core.bit_or.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.bit_or, x | y, more);
};
cljs.core.bit_or.cljs$lang$applyTo = function(seq17198) {
  var G__17199 = cljs.core.first(seq17198);
  var seq17198__$1 = cljs.core.next(seq17198);
  var G__17200 = cljs.core.first(seq17198__$1);
  var seq17198__$2 = cljs.core.next(seq17198__$1);
  return cljs.core.bit_or.cljs$core$IFn$_invoke$arity$variadic(G__17199, G__17200, seq17198__$2);
};
cljs.core.bit_or.cljs$lang$maxFixedArity = 2;
cljs.core.bit_and_not = function cljs$core$bit_and_not() {
  var G__17208 = arguments.length;
  switch(G__17208) {
    case 2:
      return cljs.core.bit_and_not.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5386__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core.bit_and_not.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5386__auto__);
  }
};
cljs.core.bit_and_not.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x & ~y;
};
cljs.core.bit_and_not.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.bit_and_not, x & ~y, more);
};
cljs.core.bit_and_not.cljs$lang$applyTo = function(seq17204) {
  var G__17205 = cljs.core.first(seq17204);
  var seq17204__$1 = cljs.core.next(seq17204);
  var G__17206 = cljs.core.first(seq17204__$1);
  var seq17204__$2 = cljs.core.next(seq17204__$1);
  return cljs.core.bit_and_not.cljs$core$IFn$_invoke$arity$variadic(G__17205, G__17206, seq17204__$2);
};
cljs.core.bit_and_not.cljs$lang$maxFixedArity = 2;
cljs.core.bit_clear = function cljs$core$bit_clear(x, n) {
  return x & ~(1 << n);
};
cljs.core.bit_flip = function cljs$core$bit_flip(x, n) {
  return x ^ 1 << n;
};
cljs.core.bit_not = function cljs$core$bit_not(x) {
  return~x;
};
cljs.core.bit_set = function cljs$core$bit_set(x, n) {
  return x | 1 << n;
};
cljs.core.bit_test = function cljs$core$bit_test(x, n) {
  return(x & 1 << n) != 0;
};
cljs.core.bit_shift_left = function cljs$core$bit_shift_left(x, n) {
  return x << n;
};
cljs.core.bit_shift_right = function cljs$core$bit_shift_right(x, n) {
  return x >> n;
};
cljs.core.bit_shift_right_zero_fill = function cljs$core$bit_shift_right_zero_fill(x, n) {
  return x >>> n;
};
cljs.core.unsigned_bit_shift_right = function cljs$core$unsigned_bit_shift_right(x, n) {
  return x >>> n;
};
cljs.core.bit_count = function cljs$core$bit_count(v) {
  var v__$1 = v - (v >> 1 & 1431655765);
  var v__$2 = (v__$1 & 858993459) + (v__$1 >> 2 & 858993459);
  return(v__$2 + (v__$2 >> 4) & 252645135) * 16843009 >> 24;
};
cljs.core._EQ__EQ_ = function cljs$core$_EQ__EQ_() {
  var G__17214 = arguments.length;
  switch(G__17214) {
    case 1:
      return cljs.core._EQ__EQ_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core._EQ__EQ_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5386__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core._EQ__EQ_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5386__auto__);
  }
};
cljs.core._EQ__EQ_.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return true;
};
cljs.core._EQ__EQ_.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return cljs.core._equiv(x, y);
};
cljs.core._EQ__EQ_.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  while (true) {
    if (x === y) {
      if (cljs.core.next(more)) {
        var G__17216 = y;
        var G__17217 = cljs.core.first(more);
        var G__17218 = cljs.core.next(more);
        x = G__17216;
        y = G__17217;
        more = G__17218;
        continue;
      } else {
        return y === cljs.core.first(more);
      }
    } else {
      return false;
    }
    break;
  }
};
cljs.core._EQ__EQ_.cljs$lang$applyTo = function(seq17210) {
  var G__17211 = cljs.core.first(seq17210);
  var seq17210__$1 = cljs.core.next(seq17210);
  var G__17212 = cljs.core.first(seq17210__$1);
  var seq17210__$2 = cljs.core.next(seq17210__$1);
  return cljs.core._EQ__EQ_.cljs$core$IFn$_invoke$arity$variadic(G__17211, G__17212, seq17210__$2);
};
cljs.core._EQ__EQ_.cljs$lang$maxFixedArity = 2;
cljs.core.pos_QMARK_ = function cljs$core$pos_QMARK_(n) {
  return n > 0;
};
cljs.core.zero_QMARK_ = function cljs$core$zero_QMARK_(n) {
  return n === 0;
};
cljs.core.neg_QMARK_ = function cljs$core$neg_QMARK_(x) {
  return x < 0;
};
cljs.core.nthnext = function cljs$core$nthnext(coll, n) {
  var n__$1 = n;
  var xs = cljs.core.seq(coll);
  while (true) {
    if (xs && n__$1 > 0) {
      var G__17219 = n__$1 - 1;
      var G__17220 = cljs.core.next(xs);
      n__$1 = G__17219;
      xs = G__17220;
      continue;
    } else {
      return xs;
    }
    break;
  }
};
cljs.core.str = function cljs$core$str() {
  var G__17224 = arguments.length;
  switch(G__17224) {
    case 0:
      return cljs.core.str.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      var argseq__5386__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0);
      return cljs.core.str.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5386__auto__);
  }
};
cljs.core.str.cljs$core$IFn$_invoke$arity$0 = function() {
  return "";
};
cljs.core.str.cljs$core$IFn$_invoke$arity$1 = function(x) {
  if (x == null) {
    return "";
  } else {
    var G__17225 = x;
    return goog.string.buildString(G__17225);
  }
};
cljs.core.str.cljs$core$IFn$_invoke$arity$variadic = function(x, ys) {
  var sb = new goog.string.StringBuffer([cljs.core.str(x)].join(""));
  var more = ys;
  while (true) {
    if (cljs.core.truth_(more)) {
      var G__17227 = sb.append([cljs.core.str(cljs.core.first(more))].join(""));
      var G__17228 = cljs.core.next(more);
      sb = G__17227;
      more = G__17228;
      continue;
    } else {
      return sb.toString();
    }
    break;
  }
};
cljs.core.str.cljs$lang$applyTo = function(seq17221) {
  var G__17222 = cljs.core.first(seq17221);
  var seq17221__$1 = cljs.core.next(seq17221);
  return cljs.core.str.cljs$core$IFn$_invoke$arity$variadic(G__17222, seq17221__$1);
};
cljs.core.str.cljs$lang$maxFixedArity = 1;
cljs.core.subs = function cljs$core$subs() {
  var G__17230 = arguments.length;
  switch(G__17230) {
    case 2:
      return cljs.core.subs.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.subs.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.subs.cljs$core$IFn$_invoke$arity$2 = function(s, start) {
  return s.substring(start);
};
cljs.core.subs.cljs$core$IFn$_invoke$arity$3 = function(s, start, end) {
  return s.substring(start, end);
};
cljs.core.subs.cljs$lang$maxFixedArity = 3;
cljs.core.equiv_sequential = function cljs$core$equiv_sequential(x, y) {
  return cljs.core.boolean$(cljs.core.sequential_QMARK_(y) ? cljs.core.counted_QMARK_(x) && cljs.core.counted_QMARK_(y) && !(cljs.core.count(x) === cljs.core.count(y)) ? false : function() {
    var xs = cljs.core.seq(x);
    var ys = cljs.core.seq(y);
    while (true) {
      if (xs == null) {
        return ys == null;
      } else {
        if (ys == null) {
          return false;
        } else {
          if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.first(xs), cljs.core.first(ys))) {
            var G__17232 = cljs.core.next(xs);
            var G__17233 = cljs.core.next(ys);
            xs = G__17232;
            ys = G__17233;
            continue;
          } else {
            return false;
          }
        }
      }
      break;
    }
  }() : null);
};
cljs.core.hash_coll = function cljs$core$hash_coll(coll) {
  if (cljs.core.seq(coll)) {
    var res = cljs.core.hash(cljs.core.first(coll));
    var s = cljs.core.next(coll);
    while (true) {
      if (s == null) {
        return res;
      } else {
        var G__17234 = cljs.core.hash_combine(res, cljs.core.hash(cljs.core.first(s)));
        var G__17235 = cljs.core.next(s);
        res = G__17234;
        s = G__17235;
        continue;
      }
      break;
    }
  } else {
    return 0;
  }
};
cljs.core.hash_imap = function cljs$core$hash_imap(m) {
  var h = 0;
  var s = cljs.core.seq(m);
  while (true) {
    if (s) {
      var e = cljs.core.first(s);
      var G__17240 = (h + (cljs.core.hash(function() {
        var G__17238 = e;
        return cljs.core.key.cljs$core$IFn$_invoke$arity$1 ? cljs.core.key.cljs$core$IFn$_invoke$arity$1(G__17238) : cljs.core.key.call(null, G__17238);
      }()) ^ cljs.core.hash(function() {
        var G__17239 = e;
        return cljs.core.val.cljs$core$IFn$_invoke$arity$1 ? cljs.core.val.cljs$core$IFn$_invoke$arity$1(G__17239) : cljs.core.val.call(null, G__17239);
      }()))) % 4503599627370496;
      var G__17241 = cljs.core.next(s);
      h = G__17240;
      s = G__17241;
      continue;
    } else {
      return h;
    }
    break;
  }
};
cljs.core.hash_iset = function cljs$core$hash_iset(s) {
  var h = 0;
  var s__$1 = cljs.core.seq(s);
  while (true) {
    if (s__$1) {
      var e = cljs.core.first(s__$1);
      var G__17242 = (h + cljs.core.hash(e)) % 4503599627370496;
      var G__17243 = cljs.core.next(s__$1);
      h = G__17242;
      s__$1 = G__17243;
      continue;
    } else {
      return h;
    }
    break;
  }
};
cljs.core.extend_object_BANG_ = function cljs$core$extend_object_BANG_(obj, fn_map) {
  var seq__17254_17264 = cljs.core.seq(fn_map);
  var chunk__17255_17265 = null;
  var count__17256_17266 = 0;
  var i__17257_17267 = 0;
  while (true) {
    if (i__17257_17267 < count__17256_17266) {
      var vec__17258_17268 = chunk__17255_17265.cljs$core$IIndexed$_nth$arity$2(null, i__17257_17267);
      var key_name_17269 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__17258_17268, 0, null);
      var f_17270 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__17258_17268, 1, null);
      var str_name_17271 = function() {
        var G__17259 = key_name_17269;
        return cljs.core.name.cljs$core$IFn$_invoke$arity$1 ? cljs.core.name.cljs$core$IFn$_invoke$arity$1(G__17259) : cljs.core.name.call(null, G__17259);
      }();
      obj[str_name_17271] = f_17270;
      var G__17272 = seq__17254_17264;
      var G__17273 = chunk__17255_17265;
      var G__17274 = count__17256_17266;
      var G__17275 = i__17257_17267 + 1;
      seq__17254_17264 = G__17272;
      chunk__17255_17265 = G__17273;
      count__17256_17266 = G__17274;
      i__17257_17267 = G__17275;
      continue;
    } else {
      var temp__4126__auto___17276 = cljs.core.seq(seq__17254_17264);
      if (temp__4126__auto___17276) {
        var seq__17254_17277__$1 = temp__4126__auto___17276;
        if (cljs.core.chunked_seq_QMARK_(seq__17254_17277__$1)) {
          var c__5120__auto___17278 = function() {
            var G__17260 = seq__17254_17277__$1;
            return cljs.core.chunk_first.cljs$core$IFn$_invoke$arity$1 ? cljs.core.chunk_first.cljs$core$IFn$_invoke$arity$1(G__17260) : cljs.core.chunk_first.call(null, G__17260);
          }();
          var G__17279 = function() {
            var G__17261 = seq__17254_17277__$1;
            return cljs.core.chunk_rest.cljs$core$IFn$_invoke$arity$1 ? cljs.core.chunk_rest.cljs$core$IFn$_invoke$arity$1(G__17261) : cljs.core.chunk_rest.call(null, G__17261);
          }();
          var G__17280 = c__5120__auto___17278;
          var G__17281 = cljs.core.count(c__5120__auto___17278);
          var G__17282 = 0;
          seq__17254_17264 = G__17279;
          chunk__17255_17265 = G__17280;
          count__17256_17266 = G__17281;
          i__17257_17267 = G__17282;
          continue;
        } else {
          var vec__17262_17283 = cljs.core.first(seq__17254_17277__$1);
          var key_name_17284 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__17262_17283, 0, null);
          var f_17285 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__17262_17283, 1, null);
          var str_name_17286 = function() {
            var G__17263 = key_name_17284;
            return cljs.core.name.cljs$core$IFn$_invoke$arity$1 ? cljs.core.name.cljs$core$IFn$_invoke$arity$1(G__17263) : cljs.core.name.call(null, G__17263);
          }();
          obj[str_name_17286] = f_17285;
          var G__17287 = cljs.core.next(seq__17254_17277__$1);
          var G__17288 = null;
          var G__17289 = 0;
          var G__17290 = 0;
          seq__17254_17264 = G__17287;
          chunk__17255_17265 = G__17288;
          count__17256_17266 = G__17289;
          i__17257_17267 = G__17290;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return obj;
};
cljs.core.List = function(meta, first, rest, count, __hash) {
  this.meta = meta;
  this.first = first;
  this.rest = rest;
  this.count = count;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 65937646;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.List.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.List.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.List.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.List.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.List(self__.meta, self__.first, self__.rest, self__.count, self__.__hash);
};
cljs.core.List.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.count === 1) {
    return null;
  } else {
    return self__.rest;
  }
};
cljs.core.List.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.count;
};
cljs.core.List.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.first;
};
cljs.core.List.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._rest(coll__$1);
};
cljs.core.List.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4751__auto__ = self__.__hash;
  if (!(h__4751__auto__ == null)) {
    return h__4751__auto__;
  } else {
    var h__4751__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4751__auto____$1;
    return h__4751__auto____$1;
  }
};
cljs.core.List.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.List.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.List.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.List.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.List.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.first;
};
cljs.core.List.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.count === 1) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.rest;
  }
};
cljs.core.List.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.List.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.List(meta__$1, self__.first, self__.rest, self__.count, self__.__hash);
};
cljs.core.List.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.List(self__.meta, o, coll__$1, self__.count + 1, null);
};
cljs.core.List.cljs$lang$type = true;
cljs.core.List.cljs$lang$ctorStr = "cljs.core/List";
cljs.core.List.cljs$lang$ctorPrWriter = function(this__4914__auto__, writer__4915__auto__, opt__4916__auto__) {
  return cljs.core._write(writer__4915__auto__, "cljs.core/List");
};
cljs.core.__GT_List = function cljs$core$__GT_List(meta, first, rest, count, __hash) {
  return new cljs.core.List(meta, first, rest, count, __hash);
};
cljs.core.List.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5311__auto__ = this;
  return cljs.core.es6_iterator(this__5311__auto__);
};
cljs.core.EmptyList = function(meta) {
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition0$ = 65937614;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.EmptyList.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.EmptyList.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.EmptyList.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.EmptyList.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.EmptyList(self__.meta);
};
cljs.core.EmptyList.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return 0;
};
cljs.core.EmptyList.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  throw new Error("Can't pop empty list");
};
cljs.core.EmptyList.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.empty_ordered_hash;
};
cljs.core.EmptyList.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.EmptyList.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.EmptyList.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.EmptyList.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.EmptyList.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.EmptyList.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.EmptyList(meta__$1);
};
cljs.core.EmptyList.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.List(self__.meta, o, null, 1, null);
};
cljs.core.EmptyList.cljs$lang$type = true;
cljs.core.EmptyList.cljs$lang$ctorStr = "cljs.core/EmptyList";
cljs.core.EmptyList.cljs$lang$ctorPrWriter = function(this__4914__auto__, writer__4915__auto__, opt__4916__auto__) {
  return cljs.core._write(writer__4915__auto__, "cljs.core/EmptyList");
};
cljs.core.__GT_EmptyList = function cljs$core$__GT_EmptyList(meta) {
  return new cljs.core.EmptyList(meta);
};
cljs.core.List.EMPTY = new cljs.core.EmptyList(null);
cljs.core.EmptyList.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5311__auto__ = this;
  return cljs.core.es6_iterator(this__5311__auto__);
};
cljs.core.reversible_QMARK_ = function cljs$core$reversible_QMARK_(coll) {
  var G__17292 = coll;
  if (G__17292) {
    var bit__5009__auto__ = G__17292.cljs$lang$protocol_mask$partition0$ & 134217728;
    if (bit__5009__auto__ || G__17292.cljs$core$IReversible$) {
      return true;
    } else {
      if (!G__17292.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IReversible, G__17292);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IReversible, G__17292);
  }
};
cljs.core.rseq = function cljs$core$rseq(coll) {
  return cljs.core._rseq(coll);
};
cljs.core.reverse = function cljs$core$reverse(coll) {
  if (cljs.core.reversible_QMARK_(coll)) {
    return cljs.core.rseq(coll);
  } else {
    return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.conj, cljs.core.List.EMPTY, coll);
  }
};
cljs.core.list = function cljs$core$list() {
  var argseq__5375__auto__ = 0 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 0), 0) : null;
  return cljs.core.list.cljs$core$IFn$_invoke$arity$variadic(argseq__5375__auto__);
};
cljs.core.list.cljs$core$IFn$_invoke$arity$variadic = function(xs) {
  var arr = xs instanceof cljs.core.IndexedSeq && xs.i === 0 ? xs.arr : function() {
    var arr = [];
    var xs__$1 = xs;
    while (true) {
      if (!(xs__$1 == null)) {
        arr.push(xs__$1.cljs$core$ISeq$_first$arity$1(null));
        var G__17294 = xs__$1.cljs$core$INext$_next$arity$1(null);
        xs__$1 = G__17294;
        continue;
      } else {
        return arr;
      }
      break;
    }
  }();
  var i = arr.length;
  var r = cljs.core.List.EMPTY;
  while (true) {
    if (i > 0) {
      var G__17295 = i - 1;
      var G__17296 = r.cljs$core$ICollection$_conj$arity$2(null, arr[i - 1]);
      i = G__17295;
      r = G__17296;
      continue;
    } else {
      return r;
    }
    break;
  }
};
cljs.core.list.cljs$lang$maxFixedArity = 0;
cljs.core.list.cljs$lang$applyTo = function(seq17293) {
  return cljs.core.list.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq17293));
};
cljs.core.Cons = function(meta, first, rest, __hash) {
  this.meta = meta;
  this.first = first;
  this.rest = rest;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 65929452;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.Cons.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.Cons.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.Cons.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.Cons.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Cons(self__.meta, self__.first, self__.rest, self__.__hash);
};
cljs.core.Cons.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.rest == null) {
    return null;
  } else {
    return cljs.core.seq(self__.rest);
  }
};
cljs.core.Cons.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4751__auto__ = self__.__hash;
  if (!(h__4751__auto__ == null)) {
    return h__4751__auto__;
  } else {
    var h__4751__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4751__auto____$1;
    return h__4751__auto____$1;
  }
};
cljs.core.Cons.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.Cons.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.Cons.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.Cons.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.Cons.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.first;
};
cljs.core.Cons.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.rest == null) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.rest;
  }
};
cljs.core.Cons.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.Cons.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.Cons(meta__$1, self__.first, self__.rest, self__.__hash);
};
cljs.core.Cons.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.Cons(null, o, coll__$1, self__.__hash);
};
cljs.core.Cons.cljs$lang$type = true;
cljs.core.Cons.cljs$lang$ctorStr = "cljs.core/Cons";
cljs.core.Cons.cljs$lang$ctorPrWriter = function(this__4914__auto__, writer__4915__auto__, opt__4916__auto__) {
  return cljs.core._write(writer__4915__auto__, "cljs.core/Cons");
};
cljs.core.__GT_Cons = function cljs$core$__GT_Cons(meta, first, rest, __hash) {
  return new cljs.core.Cons(meta, first, rest, __hash);
};
cljs.core.Cons.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5311__auto__ = this;
  return cljs.core.es6_iterator(this__5311__auto__);
};
cljs.core.cons = function cljs$core$cons(x, coll) {
  if (function() {
    var or__4335__auto__ = coll == null;
    if (or__4335__auto__) {
      return or__4335__auto__;
    } else {
      var G__17300 = coll;
      if (G__17300) {
        var bit__5002__auto__ = G__17300.cljs$lang$protocol_mask$partition0$ & 64;
        if (bit__5002__auto__ || G__17300.cljs$core$ISeq$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }
  }()) {
    return new cljs.core.Cons(null, x, coll, null);
  } else {
    return new cljs.core.Cons(null, x, cljs.core.seq(coll), null);
  }
};
cljs.core.list_QMARK_ = function cljs$core$list_QMARK_(x) {
  var G__17302 = x;
  if (G__17302) {
    var bit__5009__auto__ = G__17302.cljs$lang$protocol_mask$partition0$ & 33554432;
    if (bit__5009__auto__ || G__17302.cljs$core$IList$) {
      return true;
    } else {
      if (!G__17302.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IList, G__17302);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IList, G__17302);
  }
};
cljs.core.hash_keyword = function cljs$core$hash_keyword(k) {
  return cljs.core.hash_symbol(k) + 2654435769 | 0;
};
cljs.core.compare_keywords = function cljs$core$compare_keywords(a, b) {
  if (a.fqn === b.fqn) {
    return 0;
  } else {
    if (cljs.core.truth_(function() {
      var and__4323__auto__ = cljs.core.not(a.ns);
      if (and__4323__auto__) {
        return b.ns;
      } else {
        return and__4323__auto__;
      }
    }())) {
      return-1;
    } else {
      if (cljs.core.truth_(a.ns)) {
        if (cljs.core.not(b.ns)) {
          return 1;
        } else {
          var nsc = function() {
            var G__17309 = a.ns;
            var G__17310 = b.ns;
            return goog.array.defaultCompare(G__17309, G__17310);
          }();
          if (0 === nsc) {
            var G__17311 = a.name;
            var G__17312 = b.name;
            return goog.array.defaultCompare(G__17311, G__17312);
          } else {
            return nsc;
          }
        }
      } else {
        var G__17313 = a.name;
        var G__17314 = b.name;
        return goog.array.defaultCompare(G__17313, G__17314);
      }
    }
  }
};
cljs.core.Keyword = function(ns, name, fqn, _hash) {
  this.ns = ns;
  this.name = name;
  this.fqn = fqn;
  this._hash = _hash;
  this.cljs$lang$protocol_mask$partition0$ = 2153775105;
  this.cljs$lang$protocol_mask$partition1$ = 4096;
};
cljs.core.Keyword.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(o, writer, _) {
  var self__ = this;
  var o__$1 = this;
  return cljs.core._write(writer, [cljs.core.str(":"), cljs.core.str(self__.fqn)].join(""));
};
cljs.core.Keyword.prototype.cljs$core$INamed$_name$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.name;
};
cljs.core.Keyword.prototype.cljs$core$INamed$_namespace$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.ns;
};
cljs.core.Keyword.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var h__4751__auto__ = self__._hash;
  if (!(h__4751__auto__ == null)) {
    return h__4751__auto__;
  } else {
    var h__4751__auto____$1 = cljs.core.hash_keyword(this$__$1);
    self__._hash = h__4751__auto____$1;
    return h__4751__auto____$1;
  }
};
cljs.core.Keyword.prototype.call = function() {
  var G__17316 = null;
  var G__17316__2 = function(self__, coll) {
    var self__ = this;
    var self____$1 = this;
    var kw = self____$1;
    return cljs.core.get.cljs$core$IFn$_invoke$arity$2(coll, kw);
  };
  var G__17316__3 = function(self__, coll, not_found) {
    var self__ = this;
    var self____$1 = this;
    var kw = self____$1;
    return cljs.core.get.cljs$core$IFn$_invoke$arity$3(coll, kw, not_found);
  };
  G__17316 = function(self__, coll, not_found) {
    switch(arguments.length) {
      case 2:
        return G__17316__2.call(this, self__, coll);
      case 3:
        return G__17316__3.call(this, self__, coll, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__17316.cljs$core$IFn$_invoke$arity$2 = G__17316__2;
  G__17316.cljs$core$IFn$_invoke$arity$3 = G__17316__3;
  return G__17316;
}();
cljs.core.Keyword.prototype.apply = function(self__, args17315) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args17315)));
};
cljs.core.Keyword.prototype.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  var self__ = this;
  var kw = this;
  return cljs.core.get.cljs$core$IFn$_invoke$arity$2(coll, kw);
};
cljs.core.Keyword.prototype.cljs$core$IFn$_invoke$arity$2 = function(coll, not_found) {
  var self__ = this;
  var kw = this;
  return cljs.core.get.cljs$core$IFn$_invoke$arity$3(coll, kw, not_found);
};
cljs.core.Keyword.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  if (other instanceof cljs.core.Keyword) {
    return self__.fqn === other.fqn;
  } else {
    return false;
  }
};
cljs.core.Keyword.prototype.toString = function() {
  var self__ = this;
  var _ = this;
  return[cljs.core.str(":"), cljs.core.str(self__.fqn)].join("");
};
cljs.core.Keyword.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.Keyword.cljs$lang$type = true;
cljs.core.Keyword.cljs$lang$ctorStr = "cljs.core/Keyword";
cljs.core.Keyword.cljs$lang$ctorPrWriter = function(this__4914__auto__, writer__4915__auto__, opt__4916__auto__) {
  return cljs.core._write(writer__4915__auto__, "cljs.core/Keyword");
};
cljs.core.__GT_Keyword = function cljs$core$__GT_Keyword(ns, name, fqn, _hash) {
  return new cljs.core.Keyword(ns, name, fqn, _hash);
};
cljs.core.keyword_QMARK_ = function cljs$core$keyword_QMARK_(x) {
  return x instanceof cljs.core.Keyword;
};
cljs.core.keyword_identical_QMARK_ = function cljs$core$keyword_identical_QMARK_(x, y) {
  if (x === y) {
    return true;
  } else {
    if (x instanceof cljs.core.Keyword && y instanceof cljs.core.Keyword) {
      return x.fqn === y.fqn;
    } else {
      return false;
    }
  }
};
cljs.core.namespace = function cljs$core$namespace(x) {
  if (function() {
    var G__17318 = x;
    if (G__17318) {
      var bit__5002__auto__ = G__17318.cljs$lang$protocol_mask$partition1$ & 4096;
      if (bit__5002__auto__ || G__17318.cljs$core$INamed$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return x.cljs$core$INamed$_namespace$arity$1(null);
  } else {
    throw new Error([cljs.core.str("Doesn't support namespace: "), cljs.core.str(x)].join(""));
  }
};
cljs.core.keyword = function cljs$core$keyword() {
  var G__17320 = arguments.length;
  switch(G__17320) {
    case 1:
      return cljs.core.keyword.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.keyword.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.keyword.cljs$core$IFn$_invoke$arity$1 = function(name) {
  if (name instanceof cljs.core.Keyword) {
    return name;
  } else {
    if (name instanceof cljs.core.Symbol) {
      return new cljs.core.Keyword(cljs.core.namespace(name), function() {
        var G__17321 = name;
        return cljs.core.name.cljs$core$IFn$_invoke$arity$1 ? cljs.core.name.cljs$core$IFn$_invoke$arity$1(G__17321) : cljs.core.name.call(null, G__17321);
      }(), name.str, null);
    } else {
      if (typeof name === "string") {
        var parts = name.split("/");
        if (parts.length === 2) {
          return new cljs.core.Keyword(parts[0], parts[1], name, null);
        } else {
          return new cljs.core.Keyword(null, parts[0], name, null);
        }
      } else {
        return null;
      }
    }
  }
};
cljs.core.keyword.cljs$core$IFn$_invoke$arity$2 = function(ns, name) {
  return new cljs.core.Keyword(ns, name, [cljs.core.str(cljs.core.truth_(ns) ? [cljs.core.str(ns), cljs.core.str("/")].join("") : null), cljs.core.str(name)].join(""), null);
};
cljs.core.keyword.cljs$lang$maxFixedArity = 2;
cljs.core.LazySeq = function(meta, fn, s, __hash) {
  this.meta = meta;
  this.fn = fn;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374988;
};
cljs.core.LazySeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.LazySeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.LazySeq.prototype.sval = function() {
  var self__ = this;
  var coll = this;
  if (self__.fn == null) {
    return self__.s;
  } else {
    self__.s = function() {
      return self__.fn.cljs$core$IFn$_invoke$arity$0 ? self__.fn.cljs$core$IFn$_invoke$arity$0() : self__.fn.call(null);
    }();
    self__.fn = null;
    return self__.s;
  }
};
cljs.core.LazySeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.LazySeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  cljs.core._seq(coll__$1);
  if (self__.s == null) {
    return null;
  } else {
    return cljs.core.next(self__.s);
  }
};
cljs.core.LazySeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4751__auto__ = self__.__hash;
  if (!(h__4751__auto__ == null)) {
    return h__4751__auto__;
  } else {
    var h__4751__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4751__auto____$1;
    return h__4751__auto____$1;
  }
};
cljs.core.LazySeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.LazySeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.LazySeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.LazySeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.LazySeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  cljs.core._seq(coll__$1);
  if (self__.s == null) {
    return null;
  } else {
    return cljs.core.first(self__.s);
  }
};
cljs.core.LazySeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  cljs.core._seq(coll__$1);
  if (!(self__.s == null)) {
    return cljs.core.rest(self__.s);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.LazySeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  coll__$1.sval();
  if (self__.s == null) {
    return null;
  } else {
    var ls = self__.s;
    while (true) {
      if (ls instanceof cljs.core.LazySeq) {
        var G__17323 = ls.sval();
        ls = G__17323;
        continue;
      } else {
        self__.s = ls;
        return cljs.core.seq(self__.s);
      }
      break;
    }
  }
};
cljs.core.LazySeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.LazySeq(meta__$1, self__.fn, self__.s, self__.__hash);
};
cljs.core.LazySeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.LazySeq.cljs$lang$type = true;
cljs.core.LazySeq.cljs$lang$ctorStr = "cljs.core/LazySeq";
cljs.core.LazySeq.cljs$lang$ctorPrWriter = function(this__4914__auto__, writer__4915__auto__, opt__4916__auto__) {
  return cljs.core._write(writer__4915__auto__, "cljs.core/LazySeq");
};
cljs.core.__GT_LazySeq = function cljs$core$__GT_LazySeq(meta, fn, s, __hash) {
  return new cljs.core.LazySeq(meta, fn, s, __hash);
};
cljs.core.LazySeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5311__auto__ = this;
  return cljs.core.es6_iterator(this__5311__auto__);
};
cljs.core.ChunkBuffer = function(buf, end) {
  this.buf = buf;
  this.end = end;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2;
};
cljs.core.ChunkBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.end;
};
cljs.core.ChunkBuffer.prototype.add = function(o) {
  var self__ = this;
  var _ = this;
  self__.buf[self__.end] = o;
  return self__.end = self__.end + 1;
};
cljs.core.ChunkBuffer.prototype.chunk = function(o) {
  var self__ = this;
  var _ = this;
  var ret = new cljs.core.ArrayChunk(self__.buf, 0, self__.end);
  self__.buf = null;
  return ret;
};
cljs.core.ChunkBuffer.cljs$lang$type = true;
cljs.core.ChunkBuffer.cljs$lang$ctorStr = "cljs.core/ChunkBuffer";
cljs.core.ChunkBuffer.cljs$lang$ctorPrWriter = function(this__4914__auto__, writer__4915__auto__, opt__4916__auto__) {
  return cljs.core._write(writer__4915__auto__, "cljs.core/ChunkBuffer");
};
cljs.core.__GT_ChunkBuffer = function cljs$core$__GT_ChunkBuffer(buf, end) {
  return new cljs.core.ChunkBuffer(buf, end);
};
cljs.core.chunk_buffer = function cljs$core$chunk_buffer(capacity) {
  return new cljs.core.ChunkBuffer(new Array(capacity), 0);
};
cljs.core.ArrayChunk = function(arr, off, end) {
  this.arr = arr;
  this.off = off;
  this.end = end;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 524306;
};
cljs.core.ArrayChunk.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$4(self__.arr, f, self__.arr[self__.off], self__.off + 1);
};
cljs.core.ArrayChunk.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$4(self__.arr, f, start, self__.off);
};
cljs.core.ArrayChunk.prototype.cljs$core$IChunk$ = true;
cljs.core.ArrayChunk.prototype.cljs$core$IChunk$_drop_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.off === self__.end) {
    throw new Error("-drop-first of empty chunk");
  } else {
    return new cljs.core.ArrayChunk(self__.arr, self__.off + 1, self__.end);
  }
};
cljs.core.ArrayChunk.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, i) {
  var self__ = this;
  var coll__$1 = this;
  return self__.arr[self__.off + i];
};
cljs.core.ArrayChunk.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, i, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (i >= 0 && i < self__.end - self__.off) {
    return self__.arr[self__.off + i];
  } else {
    return not_found;
  }
};
cljs.core.ArrayChunk.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.end - self__.off;
};
cljs.core.ArrayChunk.cljs$lang$type = true;
cljs.core.ArrayChunk.cljs$lang$ctorStr = "cljs.core/ArrayChunk";
cljs.core.ArrayChunk.cljs$lang$ctorPrWriter = function(this__4914__auto__, writer__4915__auto__, opt__4916__auto__) {
  return cljs.core._write(writer__4915__auto__, "cljs.core/ArrayChunk");
};
cljs.core.__GT_ArrayChunk = function cljs$core$__GT_ArrayChunk(arr, off, end) {
  return new cljs.core.ArrayChunk(arr, off, end);
};
cljs.core.array_chunk = function cljs$core$array_chunk() {
  var G__17325 = arguments.length;
  switch(G__17325) {
    case 1:
      return cljs.core.array_chunk.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.array_chunk.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.array_chunk.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.array_chunk.cljs$core$IFn$_invoke$arity$1 = function(arr) {
  return new cljs.core.ArrayChunk(arr, 0, arr.length);
};
cljs.core.array_chunk.cljs$core$IFn$_invoke$arity$2 = function(arr, off) {
  return new cljs.core.ArrayChunk(arr, off, arr.length);
};
cljs.core.array_chunk.cljs$core$IFn$_invoke$arity$3 = function(arr, off, end) {
  return new cljs.core.ArrayChunk(arr, off, end);
};
cljs.core.array_chunk.cljs$lang$maxFixedArity = 3;
cljs.core.ChunkedCons = function(chunk, more, meta, __hash) {
  this.chunk = chunk;
  this.more = more;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 31850732;
  this.cljs$lang$protocol_mask$partition1$ = 1536;
};
cljs.core.ChunkedCons.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.ChunkedCons.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.ChunkedCons.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ChunkedCons.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core._count(self__.chunk) > 1) {
    return new cljs.core.ChunkedCons(cljs.core._drop_first(self__.chunk), self__.more, self__.meta, null);
  } else {
    var more__$1 = cljs.core._seq(self__.more);
    if (more__$1 == null) {
      return null;
    } else {
      return more__$1;
    }
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4751__auto__ = self__.__hash;
  if (!(h__4751__auto__ == null)) {
    return h__4751__auto__;
  } else {
    var h__4751__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4751__auto____$1;
    return h__4751__auto____$1;
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.ChunkedCons.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(self__.chunk, 0);
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core._count(self__.chunk) > 1) {
    return new cljs.core.ChunkedCons(cljs.core._drop_first(self__.chunk), self__.more, self__.meta, null);
  } else {
    if (self__.more == null) {
      return cljs.core.List.EMPTY;
    } else {
      return self__.more;
    }
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedSeq$_chunked_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.chunk;
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedSeq$_chunked_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.more == null) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.more;
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, m) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ChunkedCons(self__.chunk, self__.more, m, self__.__hash);
};
cljs.core.ChunkedCons.prototype.cljs$core$ICollection$_conj$arity$2 = function(this$, o) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.cons(o, this$__$1);
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedNext$_chunked_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.more == null) {
    return null;
  } else {
    return self__.more;
  }
};
cljs.core.ChunkedCons.cljs$lang$type = true;
cljs.core.ChunkedCons.cljs$lang$ctorStr = "cljs.core/ChunkedCons";
cljs.core.ChunkedCons.cljs$lang$ctorPrWriter = function(this__4914__auto__, writer__4915__auto__, opt__4916__auto__) {
  return cljs.core._write(writer__4915__auto__, "cljs.core/ChunkedCons");
};
cljs.core.__GT_ChunkedCons = function cljs$core$__GT_ChunkedCons(chunk, more, meta, __hash) {
  return new cljs.core.ChunkedCons(chunk, more, meta, __hash);
};
cljs.core.ChunkedCons.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5311__auto__ = this;
  return cljs.core.es6_iterator(this__5311__auto__);
};
cljs.core.chunk_cons = function cljs$core$chunk_cons(chunk, rest) {
  if (cljs.core._count(chunk) === 0) {
    return rest;
  } else {
    return new cljs.core.ChunkedCons(chunk, rest, null, null);
  }
};
cljs.core.chunk_append = function cljs$core$chunk_append(b, x) {
  return b.add(x);
};
cljs.core.chunk = function cljs$core$chunk(b) {
  return b.chunk();
};
cljs.core.chunk_first = function cljs$core$chunk_first(s) {
  return cljs.core._chunked_first(s);
};
cljs.core.chunk_rest = function cljs$core$chunk_rest(s) {
  return cljs.core._chunked_rest(s);
};
cljs.core.chunk_next = function cljs$core$chunk_next(s) {
  if (function() {
    var G__17328 = s;
    if (G__17328) {
      var bit__5002__auto__ = G__17328.cljs$lang$protocol_mask$partition1$ & 1024;
      if (bit__5002__auto__ || G__17328.cljs$core$IChunkedNext$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return cljs.core._chunked_next(s);
  } else {
    return cljs.core.seq(cljs.core._chunked_rest(s));
  }
};
cljs.core.to_array = function cljs$core$to_array(s) {
  var ary = [];
  var s__$1 = s;
  while (true) {
    if (cljs.core.seq(s__$1)) {
      ary.push(cljs.core.first(s__$1));
      var G__17329 = cljs.core.next(s__$1);
      s__$1 = G__17329;
      continue;
    } else {
      return ary;
    }
    break;
  }
};
cljs.core.to_array_2d = function cljs$core$to_array_2d(coll) {
  var ret = new Array(cljs.core.count(coll));
  var i_17330 = 0;
  var xs_17331 = cljs.core.seq(coll);
  while (true) {
    if (xs_17331) {
      ret[i_17330] = cljs.core.to_array(cljs.core.first(xs_17331));
      var G__17332 = i_17330 + 1;
      var G__17333 = cljs.core.next(xs_17331);
      i_17330 = G__17332;
      xs_17331 = G__17333;
      continue;
    } else {
    }
    break;
  }
  return ret;
};
cljs.core.int_array = function cljs$core$int_array() {
  var G__17335 = arguments.length;
  switch(G__17335) {
    case 1:
      return cljs.core.int_array.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.int_array.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.int_array.cljs$core$IFn$_invoke$arity$1 = function(size_or_seq) {
  if (typeof size_or_seq === "number") {
    return cljs.core.int_array.cljs$core$IFn$_invoke$arity$2(size_or_seq, null);
  } else {
    return cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(size_or_seq);
  }
};
cljs.core.int_array.cljs$core$IFn$_invoke$arity$2 = function(size, init_val_or_seq) {
  var a = new Array(size);
  if (cljs.core.seq_QMARK_(init_val_or_seq)) {
    var s = cljs.core.seq(init_val_or_seq);
    var i = 0;
    var s__$1 = s;
    while (true) {
      if (s__$1 && i < size) {
        a[i] = cljs.core.first(s__$1);
        var G__17337 = i + 1;
        var G__17338 = cljs.core.next(s__$1);
        i = G__17337;
        s__$1 = G__17338;
        continue;
      } else {
        return a;
      }
      break;
    }
  } else {
    var n__5220__auto___17339 = size;
    var i_17340 = 0;
    while (true) {
      if (i_17340 < n__5220__auto___17339) {
        a[i_17340] = init_val_or_seq;
        var G__17341 = i_17340 + 1;
        i_17340 = G__17341;
        continue;
      } else {
      }
      break;
    }
    return a;
  }
};
cljs.core.int_array.cljs$lang$maxFixedArity = 2;
cljs.core.long_array = function cljs$core$long_array() {
  var G__17343 = arguments.length;
  switch(G__17343) {
    case 1:
      return cljs.core.long_array.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.long_array.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.long_array.cljs$core$IFn$_invoke$arity$1 = function(size_or_seq) {
  if (typeof size_or_seq === "number") {
    return cljs.core.long_array.cljs$core$IFn$_invoke$arity$2(size_or_seq, null);
  } else {
    return cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(size_or_seq);
  }
};
cljs.core.long_array.cljs$core$IFn$_invoke$arity$2 = function(size, init_val_or_seq) {
  var a = new Array(size);
  if (cljs.core.seq_QMARK_(init_val_or_seq)) {
    var s = cljs.core.seq(init_val_or_seq);
    var i = 0;
    var s__$1 = s;
    while (true) {
      if (s__$1 && i < size) {
        a[i] = cljs.core.first(s__$1);
        var G__17345 = i + 1;
        var G__17346 = cljs.core.next(s__$1);
        i = G__17345;
        s__$1 = G__17346;
        continue;
      } else {
        return a;
      }
      break;
    }
  } else {
    var n__5220__auto___17347 = size;
    var i_17348 = 0;
    while (true) {
      if (i_17348 < n__5220__auto___17347) {
        a[i_17348] = init_val_or_seq;
        var G__17349 = i_17348 + 1;
        i_17348 = G__17349;
        continue;
      } else {
      }
      break;
    }
    return a;
  }
};
cljs.core.long_array.cljs$lang$maxFixedArity = 2;
cljs.core.double_array = function cljs$core$double_array() {
  var G__17351 = arguments.length;
  switch(G__17351) {
    case 1:
      return cljs.core.double_array.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.double_array.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.double_array.cljs$core$IFn$_invoke$arity$1 = function(size_or_seq) {
  if (typeof size_or_seq === "number") {
    return cljs.core.double_array.cljs$core$IFn$_invoke$arity$2(size_or_seq, null);
  } else {
    return cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(size_or_seq);
  }
};
cljs.core.double_array.cljs$core$IFn$_invoke$arity$2 = function(size, init_val_or_seq) {
  var a = new Array(size);
  if (cljs.core.seq_QMARK_(init_val_or_seq)) {
    var s = cljs.core.seq(init_val_or_seq);
    var i = 0;
    var s__$1 = s;
    while (true) {
      if (s__$1 && i < size) {
        a[i] = cljs.core.first(s__$1);
        var G__17353 = i + 1;
        var G__17354 = cljs.core.next(s__$1);
        i = G__17353;
        s__$1 = G__17354;
        continue;
      } else {
        return a;
      }
      break;
    }
  } else {
    var n__5220__auto___17355 = size;
    var i_17356 = 0;
    while (true) {
      if (i_17356 < n__5220__auto___17355) {
        a[i_17356] = init_val_or_seq;
        var G__17357 = i_17356 + 1;
        i_17356 = G__17357;
        continue;
      } else {
      }
      break;
    }
    return a;
  }
};
cljs.core.double_array.cljs$lang$maxFixedArity = 2;
cljs.core.object_array = function cljs$core$object_array() {
  var G__17359 = arguments.length;
  switch(G__17359) {
    case 1:
      return cljs.core.object_array.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.object_array.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.object_array.cljs$core$IFn$_invoke$arity$1 = function(size_or_seq) {
  if (typeof size_or_seq === "number") {
    return cljs.core.object_array.cljs$core$IFn$_invoke$arity$2(size_or_seq, null);
  } else {
    return cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(size_or_seq);
  }
};
cljs.core.object_array.cljs$core$IFn$_invoke$arity$2 = function(size, init_val_or_seq) {
  var a = new Array(size);
  if (cljs.core.seq_QMARK_(init_val_or_seq)) {
    var s = cljs.core.seq(init_val_or_seq);
    var i = 0;
    var s__$1 = s;
    while (true) {
      if (s__$1 && i < size) {
        a[i] = cljs.core.first(s__$1);
        var G__17361 = i + 1;
        var G__17362 = cljs.core.next(s__$1);
        i = G__17361;
        s__$1 = G__17362;
        continue;
      } else {
        return a;
      }
      break;
    }
  } else {
    var n__5220__auto___17363 = size;
    var i_17364 = 0;
    while (true) {
      if (i_17364 < n__5220__auto___17363) {
        a[i_17364] = init_val_or_seq;
        var G__17365 = i_17364 + 1;
        i_17364 = G__17365;
        continue;
      } else {
      }
      break;
    }
    return a;
  }
};
cljs.core.object_array.cljs$lang$maxFixedArity = 2;
cljs.core.bounded_count = function cljs$core$bounded_count(s, n) {
  if (cljs.core.counted_QMARK_(s)) {
    return cljs.core.count(s);
  } else {
    var s__$1 = s;
    var i = n;
    var sum = 0;
    while (true) {
      if (i > 0 && cljs.core.seq(s__$1)) {
        var G__17366 = cljs.core.next(s__$1);
        var G__17367 = i - 1;
        var G__17368 = sum + 1;
        s__$1 = G__17366;
        i = G__17367;
        sum = G__17368;
        continue;
      } else {
        return sum;
      }
      break;
    }
  }
};
cljs.core.spread = function cljs$core$spread(arglist) {
  if (arglist == null) {
    return null;
  } else {
    if (cljs.core.next(arglist) == null) {
      return cljs.core.seq(cljs.core.first(arglist));
    } else {
      return cljs.core.cons(cljs.core.first(arglist), cljs$core$spread(cljs.core.next(arglist)));
    }
  }
};
cljs.core.concat = function cljs$core$concat() {
  var G__17374 = arguments.length;
  switch(G__17374) {
    case 0:
      return cljs.core.concat.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.concat.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.concat.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5386__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5386__auto__);
  }
};
cljs.core.concat.cljs$core$IFn$_invoke$arity$0 = function() {
  return new cljs.core.LazySeq(null, function() {
    return null;
  }, null, null);
};
cljs.core.concat.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return new cljs.core.LazySeq(null, function() {
    return x;
  }, null, null);
};
cljs.core.concat.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return new cljs.core.LazySeq(null, function() {
    var s = cljs.core.seq(x);
    if (s) {
      if (cljs.core.chunked_seq_QMARK_(s)) {
        return cljs.core.chunk_cons(cljs.core.chunk_first(s), cljs.core.concat.cljs$core$IFn$_invoke$arity$2(cljs.core.chunk_rest(s), y));
      } else {
        return cljs.core.cons(cljs.core.first(s), cljs.core.concat.cljs$core$IFn$_invoke$arity$2(cljs.core.rest(s), y));
      }
    } else {
      return y;
    }
  }, null, null);
};
cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic = function(x, y, zs) {
  var cat = function cljs$core$cat(xys, zs__$1) {
    return new cljs.core.LazySeq(null, function() {
      var xys__$1 = cljs.core.seq(xys);
      if (xys__$1) {
        if (cljs.core.chunked_seq_QMARK_(xys__$1)) {
          return cljs.core.chunk_cons(cljs.core.chunk_first(xys__$1), cljs$core$cat(cljs.core.chunk_rest(xys__$1), zs__$1));
        } else {
          return cljs.core.cons(cljs.core.first(xys__$1), cljs$core$cat(cljs.core.rest(xys__$1), zs__$1));
        }
      } else {
        if (cljs.core.truth_(zs__$1)) {
          return cljs$core$cat(cljs.core.first(zs__$1), cljs.core.next(zs__$1));
        } else {
          return null;
        }
      }
    }, null, null);
  };
  return cat(cljs.core.concat.cljs$core$IFn$_invoke$arity$2(x, y), zs);
};
cljs.core.concat.cljs$lang$applyTo = function(seq17370) {
  var G__17371 = cljs.core.first(seq17370);
  var seq17370__$1 = cljs.core.next(seq17370);
  var G__17372 = cljs.core.first(seq17370__$1);
  var seq17370__$2 = cljs.core.next(seq17370__$1);
  return cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic(G__17371, G__17372, seq17370__$2);
};
cljs.core.concat.cljs$lang$maxFixedArity = 2;
cljs.core.list_STAR_ = function cljs$core$list_STAR_() {
  var G__17388 = arguments.length;
  switch(G__17388) {
    case 1:
      return cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      var argseq__5386__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 4), 0);
      return cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], arguments[3], argseq__5386__auto__);
  }
};
cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$1 = function(args) {
  return cljs.core.seq(args);
};
cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$2 = function(a, args) {
  return cljs.core.cons(a, args);
};
cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$3 = function(a, b, args) {
  return cljs.core.cons(a, cljs.core.cons(b, args));
};
cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$4 = function(a, b, c, args) {
  return cljs.core.cons(a, cljs.core.cons(b, cljs.core.cons(c, args)));
};
cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$variadic = function(a, b, c, d, more) {
  return cljs.core.cons(a, cljs.core.cons(b, cljs.core.cons(c, cljs.core.cons(d, cljs.core.spread(more)))));
};
cljs.core.list_STAR_.cljs$lang$applyTo = function(seq17382) {
  var G__17383 = cljs.core.first(seq17382);
  var seq17382__$1 = cljs.core.next(seq17382);
  var G__17384 = cljs.core.first(seq17382__$1);
  var seq17382__$2 = cljs.core.next(seq17382__$1);
  var G__17385 = cljs.core.first(seq17382__$2);
  var seq17382__$3 = cljs.core.next(seq17382__$2);
  var G__17386 = cljs.core.first(seq17382__$3);
  var seq17382__$4 = cljs.core.next(seq17382__$3);
  return cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$variadic(G__17383, G__17384, G__17385, G__17386, seq17382__$4);
};
cljs.core.list_STAR_.cljs$lang$maxFixedArity = 4;
cljs.core.transient$ = function cljs$core$transient(coll) {
  return cljs.core._as_transient(coll);
};
cljs.core.persistent_BANG_ = function cljs$core$persistent_BANG_(tcoll) {
  return cljs.core._persistent_BANG_(tcoll);
};
cljs.core.conj_BANG_ = function cljs$core$conj_BANG_() {
  var G__17394 = arguments.length;
  switch(G__17394) {
    case 0:
      return cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5386__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5386__auto__);
  }
};
cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$0 = function() {
  return cljs.core.transient$(cljs.core.PersistentVector.EMPTY);
};
cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  return coll;
};
cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2 = function(tcoll, val) {
  return cljs.core._conj_BANG_(tcoll, val);
};
cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(tcoll, val, vals) {
  while (true) {
    var ntcoll = cljs.core._conj_BANG_(tcoll, val);
    if (cljs.core.truth_(vals)) {
      var G__17396 = ntcoll;
      var G__17397 = cljs.core.first(vals);
      var G__17398 = cljs.core.next(vals);
      tcoll = G__17396;
      val = G__17397;
      vals = G__17398;
      continue;
    } else {
      return ntcoll;
    }
    break;
  }
};
cljs.core.conj_BANG_.cljs$lang$applyTo = function(seq17390) {
  var G__17391 = cljs.core.first(seq17390);
  var seq17390__$1 = cljs.core.next(seq17390);
  var G__17392 = cljs.core.first(seq17390__$1);
  var seq17390__$2 = cljs.core.next(seq17390__$1);
  return cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$variadic(G__17391, G__17392, seq17390__$2);
};
cljs.core.conj_BANG_.cljs$lang$maxFixedArity = 2;
cljs.core.assoc_BANG_ = function cljs$core$assoc_BANG_() {
  var G__17404 = arguments.length;
  switch(G__17404) {
    case 3:
      return cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      var argseq__5386__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 3), 0);
      return cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__5386__auto__);
  }
};
cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3 = function(tcoll, key, val) {
  return cljs.core._assoc_BANG_(tcoll, key, val);
};
cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(tcoll, key, val, kvs) {
  while (true) {
    var ntcoll = cljs.core._assoc_BANG_(tcoll, key, val);
    if (cljs.core.truth_(kvs)) {
      var G__17406 = ntcoll;
      var G__17407 = cljs.core.first(kvs);
      var G__17408 = cljs.core.second(kvs);
      var G__17409 = cljs.core.nnext(kvs);
      tcoll = G__17406;
      key = G__17407;
      val = G__17408;
      kvs = G__17409;
      continue;
    } else {
      return ntcoll;
    }
    break;
  }
};
cljs.core.assoc_BANG_.cljs$lang$applyTo = function(seq17399) {
  var G__17400 = cljs.core.first(seq17399);
  var seq17399__$1 = cljs.core.next(seq17399);
  var G__17401 = cljs.core.first(seq17399__$1);
  var seq17399__$2 = cljs.core.next(seq17399__$1);
  var G__17402 = cljs.core.first(seq17399__$2);
  var seq17399__$3 = cljs.core.next(seq17399__$2);
  return cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$variadic(G__17400, G__17401, G__17402, seq17399__$3);
};
cljs.core.assoc_BANG_.cljs$lang$maxFixedArity = 3;
cljs.core.dissoc_BANG_ = function cljs$core$dissoc_BANG_() {
  var G__17414 = arguments.length;
  switch(G__17414) {
    case 2:
      return cljs.core.dissoc_BANG_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5386__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core.dissoc_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5386__auto__);
  }
};
cljs.core.dissoc_BANG_.cljs$core$IFn$_invoke$arity$2 = function(tcoll, key) {
  return cljs.core._dissoc_BANG_(tcoll, key);
};
cljs.core.dissoc_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(tcoll, key, ks) {
  while (true) {
    var ntcoll = cljs.core._dissoc_BANG_(tcoll, key);
    if (cljs.core.truth_(ks)) {
      var G__17416 = ntcoll;
      var G__17417 = cljs.core.first(ks);
      var G__17418 = cljs.core.next(ks);
      tcoll = G__17416;
      key = G__17417;
      ks = G__17418;
      continue;
    } else {
      return ntcoll;
    }
    break;
  }
};
cljs.core.dissoc_BANG_.cljs$lang$applyTo = function(seq17410) {
  var G__17411 = cljs.core.first(seq17410);
  var seq17410__$1 = cljs.core.next(seq17410);
  var G__17412 = cljs.core.first(seq17410__$1);
  var seq17410__$2 = cljs.core.next(seq17410__$1);
  return cljs.core.dissoc_BANG_.cljs$core$IFn$_invoke$arity$variadic(G__17411, G__17412, seq17410__$2);
};
cljs.core.dissoc_BANG_.cljs$lang$maxFixedArity = 2;
cljs.core.pop_BANG_ = function cljs$core$pop_BANG_(tcoll) {
  return cljs.core._pop_BANG_(tcoll);
};
cljs.core.disj_BANG_ = function cljs$core$disj_BANG_() {
  var G__17423 = arguments.length;
  switch(G__17423) {
    case 2:
      return cljs.core.disj_BANG_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5386__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core.disj_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5386__auto__);
  }
};
cljs.core.disj_BANG_.cljs$core$IFn$_invoke$arity$2 = function(tcoll, val) {
  return cljs.core._disjoin_BANG_(tcoll, val);
};
cljs.core.disj_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(tcoll, val, vals) {
  while (true) {
    var ntcoll = cljs.core._disjoin_BANG_(tcoll, val);
    if (cljs.core.truth_(vals)) {
      var G__17425 = ntcoll;
      var G__17426 = cljs.core.first(vals);
      var G__17427 = cljs.core.next(vals);
      tcoll = G__17425;
      val = G__17426;
      vals = G__17427;
      continue;
    } else {
      return ntcoll;
    }
    break;
  }
};
cljs.core.disj_BANG_.cljs$lang$applyTo = function(seq17419) {
  var G__17420 = cljs.core.first(seq17419);
  var seq17419__$1 = cljs.core.next(seq17419);
  var G__17421 = cljs.core.first(seq17419__$1);
  var seq17419__$2 = cljs.core.next(seq17419__$1);
  return cljs.core.disj_BANG_.cljs$core$IFn$_invoke$arity$variadic(G__17420, G__17421, seq17419__$2);
};
cljs.core.disj_BANG_.cljs$lang$maxFixedArity = 2;
cljs.core.apply_to = function cljs$core$apply_to(f, argc, args) {
  var args__$1 = cljs.core.seq(args);
  if (argc === 0) {
    return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
  } else {
    var a5264 = cljs.core._first(args__$1);
    var args__$2 = cljs.core._rest(args__$1);
    if (argc === 1) {
      if (f.cljs$core$IFn$_invoke$arity$1) {
        return f.cljs$core$IFn$_invoke$arity$1(a5264);
      } else {
        var G__17638 = a5264;
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__17638) : f.call(null, G__17638);
      }
    } else {
      var b5265 = cljs.core._first(args__$2);
      var args__$3 = cljs.core._rest(args__$2);
      if (argc === 2) {
        if (f.cljs$core$IFn$_invoke$arity$2) {
          return f.cljs$core$IFn$_invoke$arity$2(a5264, b5265);
        } else {
          var G__17639 = a5264;
          var G__17640 = b5265;
          return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__17639, G__17640) : f.call(null, G__17639, G__17640);
        }
      } else {
        var c5266 = cljs.core._first(args__$3);
        var args__$4 = cljs.core._rest(args__$3);
        if (argc === 3) {
          if (f.cljs$core$IFn$_invoke$arity$3) {
            return f.cljs$core$IFn$_invoke$arity$3(a5264, b5265, c5266);
          } else {
            var G__17641 = a5264;
            var G__17642 = b5265;
            var G__17643 = c5266;
            return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__17641, G__17642, G__17643) : f.call(null, G__17641, G__17642, G__17643);
          }
        } else {
          var d5267 = cljs.core._first(args__$4);
          var args__$5 = cljs.core._rest(args__$4);
          if (argc === 4) {
            if (f.cljs$core$IFn$_invoke$arity$4) {
              return f.cljs$core$IFn$_invoke$arity$4(a5264, b5265, c5266, d5267);
            } else {
              var G__17644 = a5264;
              var G__17645 = b5265;
              var G__17646 = c5266;
              var G__17647 = d5267;
              return f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(G__17644, G__17645, G__17646, G__17647) : f.call(null, G__17644, G__17645, G__17646, G__17647);
            }
          } else {
            var e5268 = cljs.core._first(args__$5);
            var args__$6 = cljs.core._rest(args__$5);
            if (argc === 5) {
              if (f.cljs$core$IFn$_invoke$arity$5) {
                return f.cljs$core$IFn$_invoke$arity$5(a5264, b5265, c5266, d5267, e5268);
              } else {
                var G__17648 = a5264;
                var G__17649 = b5265;
                var G__17650 = c5266;
                var G__17651 = d5267;
                var G__17652 = e5268;
                return f.cljs$core$IFn$_invoke$arity$5 ? f.cljs$core$IFn$_invoke$arity$5(G__17648, G__17649, G__17650, G__17651, G__17652) : f.call(null, G__17648, G__17649, G__17650, G__17651, G__17652);
              }
            } else {
              var f5269 = cljs.core._first(args__$6);
              var args__$7 = cljs.core._rest(args__$6);
              if (argc === 6) {
                if (f.cljs$core$IFn$_invoke$arity$6) {
                  return f.cljs$core$IFn$_invoke$arity$6(a5264, b5265, c5266, d5267, e5268, f5269);
                } else {
                  var G__17653 = a5264;
                  var G__17654 = b5265;
                  var G__17655 = c5266;
                  var G__17656 = d5267;
                  var G__17657 = e5268;
                  var G__17658 = f5269;
                  return f.cljs$core$IFn$_invoke$arity$6 ? f.cljs$core$IFn$_invoke$arity$6(G__17653, G__17654, G__17655, G__17656, G__17657, G__17658) : f.call(null, G__17653, G__17654, G__17655, G__17656, G__17657, G__17658);
                }
              } else {
                var g5270 = cljs.core._first(args__$7);
                var args__$8 = cljs.core._rest(args__$7);
                if (argc === 7) {
                  if (f.cljs$core$IFn$_invoke$arity$7) {
                    return f.cljs$core$IFn$_invoke$arity$7(a5264, b5265, c5266, d5267, e5268, f5269, g5270);
                  } else {
                    var G__17659 = a5264;
                    var G__17660 = b5265;
                    var G__17661 = c5266;
                    var G__17662 = d5267;
                    var G__17663 = e5268;
                    var G__17664 = f5269;
                    var G__17665 = g5270;
                    return f.cljs$core$IFn$_invoke$arity$7 ? f.cljs$core$IFn$_invoke$arity$7(G__17659, G__17660, G__17661, G__17662, G__17663, G__17664, G__17665) : f.call(null, G__17659, G__17660, G__17661, G__17662, G__17663, G__17664, G__17665);
                  }
                } else {
                  var h5271 = cljs.core._first(args__$8);
                  var args__$9 = cljs.core._rest(args__$8);
                  if (argc === 8) {
                    if (f.cljs$core$IFn$_invoke$arity$8) {
                      return f.cljs$core$IFn$_invoke$arity$8(a5264, b5265, c5266, d5267, e5268, f5269, g5270, h5271);
                    } else {
                      var G__17666 = a5264;
                      var G__17667 = b5265;
                      var G__17668 = c5266;
                      var G__17669 = d5267;
                      var G__17670 = e5268;
                      var G__17671 = f5269;
                      var G__17672 = g5270;
                      var G__17673 = h5271;
                      return f.cljs$core$IFn$_invoke$arity$8 ? f.cljs$core$IFn$_invoke$arity$8(G__17666, G__17667, G__17668, G__17669, G__17670, G__17671, G__17672, G__17673) : f.call(null, G__17666, G__17667, G__17668, G__17669, G__17670, G__17671, G__17672, G__17673);
                    }
                  } else {
                    var i5272 = cljs.core._first(args__$9);
                    var args__$10 = cljs.core._rest(args__$9);
                    if (argc === 9) {
                      if (f.cljs$core$IFn$_invoke$arity$9) {
                        return f.cljs$core$IFn$_invoke$arity$9(a5264, b5265, c5266, d5267, e5268, f5269, g5270, h5271, i5272);
                      } else {
                        var G__17674 = a5264;
                        var G__17675 = b5265;
                        var G__17676 = c5266;
                        var G__17677 = d5267;
                        var G__17678 = e5268;
                        var G__17679 = f5269;
                        var G__17680 = g5270;
                        var G__17681 = h5271;
                        var G__17682 = i5272;
                        return f.cljs$core$IFn$_invoke$arity$9 ? f.cljs$core$IFn$_invoke$arity$9(G__17674, G__17675, G__17676, G__17677, G__17678, G__17679, G__17680, G__17681, G__17682) : f.call(null, G__17674, G__17675, G__17676, G__17677, G__17678, G__17679, G__17680, G__17681, G__17682);
                      }
                    } else {
                      var j5273 = cljs.core._first(args__$10);
                      var args__$11 = cljs.core._rest(args__$10);
                      if (argc === 10) {
                        if (f.cljs$core$IFn$_invoke$arity$10) {
                          return f.cljs$core$IFn$_invoke$arity$10(a5264, b5265, c5266, d5267, e5268, f5269, g5270, h5271, i5272, j5273);
                        } else {
                          var G__17683 = a5264;
                          var G__17684 = b5265;
                          var G__17685 = c5266;
                          var G__17686 = d5267;
                          var G__17687 = e5268;
                          var G__17688 = f5269;
                          var G__17689 = g5270;
                          var G__17690 = h5271;
                          var G__17691 = i5272;
                          var G__17692 = j5273;
                          return f.cljs$core$IFn$_invoke$arity$10 ? f.cljs$core$IFn$_invoke$arity$10(G__17683, G__17684, G__17685, G__17686, G__17687, G__17688, G__17689, G__17690, G__17691, G__17692) : f.call(null, G__17683, G__17684, G__17685, G__17686, G__17687, G__17688, G__17689, G__17690, G__17691, G__17692);
                        }
                      } else {
                        var k5274 = cljs.core._first(args__$11);
                        var args__$12 = cljs.core._rest(args__$11);
                        if (argc === 11) {
                          if (f.cljs$core$IFn$_invoke$arity$11) {
                            return f.cljs$core$IFn$_invoke$arity$11(a5264, b5265, c5266, d5267, e5268, f5269, g5270, h5271, i5272, j5273, k5274);
                          } else {
                            var G__17693 = a5264;
                            var G__17694 = b5265;
                            var G__17695 = c5266;
                            var G__17696 = d5267;
                            var G__17697 = e5268;
                            var G__17698 = f5269;
                            var G__17699 = g5270;
                            var G__17700 = h5271;
                            var G__17701 = i5272;
                            var G__17702 = j5273;
                            var G__17703 = k5274;
                            return f.cljs$core$IFn$_invoke$arity$11 ? f.cljs$core$IFn$_invoke$arity$11(G__17693, G__17694, G__17695, G__17696, G__17697, G__17698, G__17699, G__17700, G__17701, G__17702, G__17703) : f.call(null, G__17693, G__17694, G__17695, G__17696, G__17697, G__17698, G__17699, G__17700, G__17701, G__17702, G__17703);
                          }
                        } else {
                          var l5275 = cljs.core._first(args__$12);
                          var args__$13 = cljs.core._rest(args__$12);
                          if (argc === 12) {
                            if (f.cljs$core$IFn$_invoke$arity$12) {
                              return f.cljs$core$IFn$_invoke$arity$12(a5264, b5265, c5266, d5267, e5268, f5269, g5270, h5271, i5272, j5273, k5274, l5275);
                            } else {
                              var G__17704 = a5264;
                              var G__17705 = b5265;
                              var G__17706 = c5266;
                              var G__17707 = d5267;
                              var G__17708 = e5268;
                              var G__17709 = f5269;
                              var G__17710 = g5270;
                              var G__17711 = h5271;
                              var G__17712 = i5272;
                              var G__17713 = j5273;
                              var G__17714 = k5274;
                              var G__17715 = l5275;
                              return f.cljs$core$IFn$_invoke$arity$12 ? f.cljs$core$IFn$_invoke$arity$12(G__17704, G__17705, G__17706, G__17707, G__17708, G__17709, G__17710, G__17711, G__17712, G__17713, G__17714, G__17715) : f.call(null, G__17704, G__17705, G__17706, G__17707, G__17708, G__17709, G__17710, G__17711, G__17712, G__17713, G__17714, G__17715);
                            }
                          } else {
                            var m5276 = cljs.core._first(args__$13);
                            var args__$14 = cljs.core._rest(args__$13);
                            if (argc === 13) {
                              if (f.cljs$core$IFn$_invoke$arity$13) {
                                return f.cljs$core$IFn$_invoke$arity$13(a5264, b5265, c5266, d5267, e5268, f5269, g5270, h5271, i5272, j5273, k5274, l5275, m5276);
                              } else {
                                var G__17716 = a5264;
                                var G__17717 = b5265;
                                var G__17718 = c5266;
                                var G__17719 = d5267;
                                var G__17720 = e5268;
                                var G__17721 = f5269;
                                var G__17722 = g5270;
                                var G__17723 = h5271;
                                var G__17724 = i5272;
                                var G__17725 = j5273;
                                var G__17726 = k5274;
                                var G__17727 = l5275;
                                var G__17728 = m5276;
                                return f.cljs$core$IFn$_invoke$arity$13 ? f.cljs$core$IFn$_invoke$arity$13(G__17716, G__17717, G__17718, G__17719, G__17720, G__17721, G__17722, G__17723, G__17724, G__17725, G__17726, G__17727, G__17728) : f.call(null, G__17716, G__17717, G__17718, G__17719, G__17720, G__17721, G__17722, G__17723, G__17724, G__17725, G__17726, G__17727, G__17728);
                              }
                            } else {
                              var n5277 = cljs.core._first(args__$14);
                              var args__$15 = cljs.core._rest(args__$14);
                              if (argc === 14) {
                                if (f.cljs$core$IFn$_invoke$arity$14) {
                                  return f.cljs$core$IFn$_invoke$arity$14(a5264, b5265, c5266, d5267, e5268, f5269, g5270, h5271, i5272, j5273, k5274, l5275, m5276, n5277);
                                } else {
                                  var G__17729 = a5264;
                                  var G__17730 = b5265;
                                  var G__17731 = c5266;
                                  var G__17732 = d5267;
                                  var G__17733 = e5268;
                                  var G__17734 = f5269;
                                  var G__17735 = g5270;
                                  var G__17736 = h5271;
                                  var G__17737 = i5272;
                                  var G__17738 = j5273;
                                  var G__17739 = k5274;
                                  var G__17740 = l5275;
                                  var G__17741 = m5276;
                                  var G__17742 = n5277;
                                  return f.cljs$core$IFn$_invoke$arity$14 ? f.cljs$core$IFn$_invoke$arity$14(G__17729, G__17730, G__17731, G__17732, G__17733, G__17734, G__17735, G__17736, G__17737, G__17738, G__17739, G__17740, G__17741, G__17742) : f.call(null, G__17729, G__17730, G__17731, G__17732, G__17733, G__17734, G__17735, G__17736, G__17737, G__17738, G__17739, G__17740, G__17741, G__17742);
                                }
                              } else {
                                var o5278 = cljs.core._first(args__$15);
                                var args__$16 = cljs.core._rest(args__$15);
                                if (argc === 15) {
                                  if (f.cljs$core$IFn$_invoke$arity$15) {
                                    return f.cljs$core$IFn$_invoke$arity$15(a5264, b5265, c5266, d5267, e5268, f5269, g5270, h5271, i5272, j5273, k5274, l5275, m5276, n5277, o5278);
                                  } else {
                                    var G__17743 = a5264;
                                    var G__17744 = b5265;
                                    var G__17745 = c5266;
                                    var G__17746 = d5267;
                                    var G__17747 = e5268;
                                    var G__17748 = f5269;
                                    var G__17749 = g5270;
                                    var G__17750 = h5271;
                                    var G__17751 = i5272;
                                    var G__17752 = j5273;
                                    var G__17753 = k5274;
                                    var G__17754 = l5275;
                                    var G__17755 = m5276;
                                    var G__17756 = n5277;
                                    var G__17757 = o5278;
                                    return f.cljs$core$IFn$_invoke$arity$15 ? f.cljs$core$IFn$_invoke$arity$15(G__17743, G__17744, G__17745, G__17746, G__17747, G__17748, G__17749, G__17750, G__17751, G__17752, G__17753, G__17754, G__17755, G__17756, G__17757) : f.call(null, G__17743, G__17744, G__17745, G__17746, G__17747, G__17748, G__17749, G__17750, G__17751, G__17752, G__17753, G__17754, G__17755, G__17756, G__17757);
                                  }
                                } else {
                                  var p5279 = cljs.core._first(args__$16);
                                  var args__$17 = cljs.core._rest(args__$16);
                                  if (argc === 16) {
                                    if (f.cljs$core$IFn$_invoke$arity$16) {
                                      return f.cljs$core$IFn$_invoke$arity$16(a5264, b5265, c5266, d5267, e5268, f5269, g5270, h5271, i5272, j5273, k5274, l5275, m5276, n5277, o5278, p5279);
                                    } else {
                                      var G__17758 = a5264;
                                      var G__17759 = b5265;
                                      var G__17760 = c5266;
                                      var G__17761 = d5267;
                                      var G__17762 = e5268;
                                      var G__17763 = f5269;
                                      var G__17764 = g5270;
                                      var G__17765 = h5271;
                                      var G__17766 = i5272;
                                      var G__17767 = j5273;
                                      var G__17768 = k5274;
                                      var G__17769 = l5275;
                                      var G__17770 = m5276;
                                      var G__17771 = n5277;
                                      var G__17772 = o5278;
                                      var G__17773 = p5279;
                                      return f.cljs$core$IFn$_invoke$arity$16 ? f.cljs$core$IFn$_invoke$arity$16(G__17758, G__17759, G__17760, G__17761, G__17762, G__17763, G__17764, G__17765, G__17766, G__17767, G__17768, G__17769, G__17770, G__17771, G__17772, G__17773) : f.call(null, G__17758, G__17759, G__17760, G__17761, G__17762, G__17763, G__17764, G__17765, G__17766, G__17767, G__17768, G__17769, G__17770, G__17771, G__17772, G__17773);
                                    }
                                  } else {
                                    var q5280 = cljs.core._first(args__$17);
                                    var args__$18 = cljs.core._rest(args__$17);
                                    if (argc === 17) {
                                      if (f.cljs$core$IFn$_invoke$arity$17) {
                                        return f.cljs$core$IFn$_invoke$arity$17(a5264, b5265, c5266, d5267, e5268, f5269, g5270, h5271, i5272, j5273, k5274, l5275, m5276, n5277, o5278, p5279, q5280);
                                      } else {
                                        var G__17774 = a5264;
                                        var G__17775 = b5265;
                                        var G__17776 = c5266;
                                        var G__17777 = d5267;
                                        var G__17778 = e5268;
                                        var G__17779 = f5269;
                                        var G__17780 = g5270;
                                        var G__17781 = h5271;
                                        var G__17782 = i5272;
                                        var G__17783 = j5273;
                                        var G__17784 = k5274;
                                        var G__17785 = l5275;
                                        var G__17786 = m5276;
                                        var G__17787 = n5277;
                                        var G__17788 = o5278;
                                        var G__17789 = p5279;
                                        var G__17790 = q5280;
                                        return f.cljs$core$IFn$_invoke$arity$17 ? f.cljs$core$IFn$_invoke$arity$17(G__17774, G__17775, G__17776, G__17777, G__17778, G__17779, G__17780, G__17781, G__17782, G__17783, G__17784, G__17785, G__17786, G__17787, G__17788, G__17789, G__17790) : f.call(null, G__17774, G__17775, G__17776, G__17777, G__17778, G__17779, G__17780, G__17781, G__17782, G__17783, G__17784, G__17785, G__17786, G__17787, G__17788, G__17789, G__17790);
                                      }
                                    } else {
                                      var r5281 = cljs.core._first(args__$18);
                                      var args__$19 = cljs.core._rest(args__$18);
                                      if (argc === 18) {
                                        if (f.cljs$core$IFn$_invoke$arity$18) {
                                          return f.cljs$core$IFn$_invoke$arity$18(a5264, b5265, c5266, d5267, e5268, f5269, g5270, h5271, i5272, j5273, k5274, l5275, m5276, n5277, o5278, p5279, q5280, r5281);
                                        } else {
                                          var G__17791 = a5264;
                                          var G__17792 = b5265;
                                          var G__17793 = c5266;
                                          var G__17794 = d5267;
                                          var G__17795 = e5268;
                                          var G__17796 = f5269;
                                          var G__17797 = g5270;
                                          var G__17798 = h5271;
                                          var G__17799 = i5272;
                                          var G__17800 = j5273;
                                          var G__17801 = k5274;
                                          var G__17802 = l5275;
                                          var G__17803 = m5276;
                                          var G__17804 = n5277;
                                          var G__17805 = o5278;
                                          var G__17806 = p5279;
                                          var G__17807 = q5280;
                                          var G__17808 = r5281;
                                          return f.cljs$core$IFn$_invoke$arity$18 ? f.cljs$core$IFn$_invoke$arity$18(G__17791, G__17792, G__17793, G__17794, G__17795, G__17796, G__17797, G__17798, G__17799, G__17800, G__17801, G__17802, G__17803, G__17804, G__17805, G__17806, G__17807, G__17808) : f.call(null, G__17791, G__17792, G__17793, G__17794, G__17795, G__17796, G__17797, G__17798, G__17799, G__17800, G__17801, G__17802, G__17803, G__17804, G__17805, G__17806, G__17807, G__17808);
                                        }
                                      } else {
                                        var s5282 = cljs.core._first(args__$19);
                                        var args__$20 = cljs.core._rest(args__$19);
                                        if (argc === 19) {
                                          if (f.cljs$core$IFn$_invoke$arity$19) {
                                            return f.cljs$core$IFn$_invoke$arity$19(a5264, b5265, c5266, d5267, e5268, f5269, g5270, h5271, i5272, j5273, k5274, l5275, m5276, n5277, o5278, p5279, q5280, r5281, s5282);
                                          } else {
                                            var G__17809 = a5264;
                                            var G__17810 = b5265;
                                            var G__17811 = c5266;
                                            var G__17812 = d5267;
                                            var G__17813 = e5268;
                                            var G__17814 = f5269;
                                            var G__17815 = g5270;
                                            var G__17816 = h5271;
                                            var G__17817 = i5272;
                                            var G__17818 = j5273;
                                            var G__17819 = k5274;
                                            var G__17820 = l5275;
                                            var G__17821 = m5276;
                                            var G__17822 = n5277;
                                            var G__17823 = o5278;
                                            var G__17824 = p5279;
                                            var G__17825 = q5280;
                                            var G__17826 = r5281;
                                            var G__17827 = s5282;
                                            return f.cljs$core$IFn$_invoke$arity$19 ? f.cljs$core$IFn$_invoke$arity$19(G__17809, G__17810, G__17811, G__17812, G__17813, G__17814, G__17815, G__17816, G__17817, G__17818, G__17819, G__17820, G__17821, G__17822, G__17823, G__17824, G__17825, G__17826, G__17827) : f.call(null, G__17809, G__17810, G__17811, G__17812, G__17813, G__17814, G__17815, G__17816, G__17817, G__17818, G__17819, G__17820, G__17821, G__17822, G__17823, G__17824, G__17825, G__17826, 
                                            G__17827);
                                          }
                                        } else {
                                          var t5283 = cljs.core._first(args__$20);
                                          var args__$21 = cljs.core._rest(args__$20);
                                          if (argc === 20) {
                                            if (f.cljs$core$IFn$_invoke$arity$20) {
                                              return f.cljs$core$IFn$_invoke$arity$20(a5264, b5265, c5266, d5267, e5268, f5269, g5270, h5271, i5272, j5273, k5274, l5275, m5276, n5277, o5278, p5279, q5280, r5281, s5282, t5283);
                                            } else {
                                              var G__17828 = a5264;
                                              var G__17829 = b5265;
                                              var G__17830 = c5266;
                                              var G__17831 = d5267;
                                              var G__17832 = e5268;
                                              var G__17833 = f5269;
                                              var G__17834 = g5270;
                                              var G__17835 = h5271;
                                              var G__17836 = i5272;
                                              var G__17837 = j5273;
                                              var G__17838 = k5274;
                                              var G__17839 = l5275;
                                              var G__17840 = m5276;
                                              var G__17841 = n5277;
                                              var G__17842 = o5278;
                                              var G__17843 = p5279;
                                              var G__17844 = q5280;
                                              var G__17845 = r5281;
                                              var G__17846 = s5282;
                                              var G__17847 = t5283;
                                              return f.cljs$core$IFn$_invoke$arity$20 ? f.cljs$core$IFn$_invoke$arity$20(G__17828, G__17829, G__17830, G__17831, G__17832, G__17833, G__17834, G__17835, G__17836, G__17837, G__17838, G__17839, G__17840, G__17841, G__17842, G__17843, G__17844, G__17845, G__17846, G__17847) : f.call(null, G__17828, G__17829, G__17830, G__17831, G__17832, G__17833, G__17834, G__17835, G__17836, G__17837, G__17838, G__17839, G__17840, G__17841, G__17842, G__17843, G__17844, 
                                              G__17845, G__17846, G__17847);
                                            }
                                          } else {
                                            throw new Error("Only up to 20 arguments supported on functions");
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.apply = function cljs$core$apply() {
  var G__17855 = arguments.length;
  switch(G__17855) {
    case 2:
      return cljs.core.apply.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.apply.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.apply.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    case 5:
      return cljs.core.apply.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    default:
      var argseq__5386__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 5), 0);
      return cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], argseq__5386__auto__);
  }
};
cljs.core.apply.cljs$core$IFn$_invoke$arity$2 = function(f, args) {
  var fixed_arity = f.cljs$lang$maxFixedArity;
  if (f.cljs$lang$applyTo) {
    var bc = cljs.core.bounded_count(args, fixed_arity + 1);
    if (bc <= fixed_arity) {
      return cljs.core.apply_to(f, bc, args);
    } else {
      return f.cljs$lang$applyTo(args);
    }
  } else {
    return f.apply(f, cljs.core.to_array(args));
  }
};
cljs.core.apply.cljs$core$IFn$_invoke$arity$3 = function(f, x, args) {
  var arglist = cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$2(x, args);
  var fixed_arity = f.cljs$lang$maxFixedArity;
  if (f.cljs$lang$applyTo) {
    var bc = cljs.core.bounded_count(arglist, fixed_arity + 1);
    if (bc <= fixed_arity) {
      return cljs.core.apply_to(f, bc, arglist);
    } else {
      return f.cljs$lang$applyTo(arglist);
    }
  } else {
    return f.apply(f, cljs.core.to_array(arglist));
  }
};
cljs.core.apply.cljs$core$IFn$_invoke$arity$4 = function(f, x, y, args) {
  var arglist = cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$3(x, y, args);
  var fixed_arity = f.cljs$lang$maxFixedArity;
  if (f.cljs$lang$applyTo) {
    var bc = cljs.core.bounded_count(arglist, fixed_arity + 1);
    if (bc <= fixed_arity) {
      return cljs.core.apply_to(f, bc, arglist);
    } else {
      return f.cljs$lang$applyTo(arglist);
    }
  } else {
    return f.apply(f, cljs.core.to_array(arglist));
  }
};
cljs.core.apply.cljs$core$IFn$_invoke$arity$5 = function(f, x, y, z, args) {
  var arglist = cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$4(x, y, z, args);
  var fixed_arity = f.cljs$lang$maxFixedArity;
  if (f.cljs$lang$applyTo) {
    var bc = cljs.core.bounded_count(arglist, fixed_arity + 1);
    if (bc <= fixed_arity) {
      return cljs.core.apply_to(f, bc, arglist);
    } else {
      return f.cljs$lang$applyTo(arglist);
    }
  } else {
    return f.apply(f, cljs.core.to_array(arglist));
  }
};
cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic = function(f, a, b, c, d, args) {
  var arglist = cljs.core.cons(a, cljs.core.cons(b, cljs.core.cons(c, cljs.core.cons(d, cljs.core.spread(args)))));
  var fixed_arity = f.cljs$lang$maxFixedArity;
  if (f.cljs$lang$applyTo) {
    var bc = cljs.core.bounded_count(arglist, fixed_arity + 1);
    if (bc <= fixed_arity) {
      return cljs.core.apply_to(f, bc, arglist);
    } else {
      return f.cljs$lang$applyTo(arglist);
    }
  } else {
    return f.apply(f, cljs.core.to_array(arglist));
  }
};
cljs.core.apply.cljs$lang$applyTo = function(seq17848) {
  var G__17849 = cljs.core.first(seq17848);
  var seq17848__$1 = cljs.core.next(seq17848);
  var G__17850 = cljs.core.first(seq17848__$1);
  var seq17848__$2 = cljs.core.next(seq17848__$1);
  var G__17851 = cljs.core.first(seq17848__$2);
  var seq17848__$3 = cljs.core.next(seq17848__$2);
  var G__17852 = cljs.core.first(seq17848__$3);
  var seq17848__$4 = cljs.core.next(seq17848__$3);
  var G__17853 = cljs.core.first(seq17848__$4);
  var seq17848__$5 = cljs.core.next(seq17848__$4);
  return cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(G__17849, G__17850, G__17851, G__17852, G__17853, seq17848__$5);
};
cljs.core.apply.cljs$lang$maxFixedArity = 5;
cljs.core.vary_meta = function cljs$core$vary_meta() {
  var G__17865 = arguments.length;
  switch(G__17865) {
    case 2:
      return cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    case 5:
      return cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    case 6:
      return cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$6(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]);
      break;
    default:
      var argseq__5386__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 6), 0);
      return cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], argseq__5386__auto__);
  }
};
cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$2 = function(obj, f) {
  return cljs.core.with_meta(obj, function() {
    var G__17866 = cljs.core.meta(obj);
    return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__17866) : f.call(null, G__17866);
  }());
};
cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$3 = function(obj, f, a) {
  return cljs.core.with_meta(obj, function() {
    var G__17867 = cljs.core.meta(obj);
    var G__17868 = a;
    return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__17867, G__17868) : f.call(null, G__17867, G__17868);
  }());
};
cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$4 = function(obj, f, a, b) {
  return cljs.core.with_meta(obj, function() {
    var G__17869 = cljs.core.meta(obj);
    var G__17870 = a;
    var G__17871 = b;
    return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__17869, G__17870, G__17871) : f.call(null, G__17869, G__17870, G__17871);
  }());
};
cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$5 = function(obj, f, a, b, c) {
  return cljs.core.with_meta(obj, function() {
    var G__17872 = cljs.core.meta(obj);
    var G__17873 = a;
    var G__17874 = b;
    var G__17875 = c;
    return f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(G__17872, G__17873, G__17874, G__17875) : f.call(null, G__17872, G__17873, G__17874, G__17875);
  }());
};
cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$6 = function(obj, f, a, b, c, d) {
  return cljs.core.with_meta(obj, function() {
    var G__17876 = cljs.core.meta(obj);
    var G__17877 = a;
    var G__17878 = b;
    var G__17879 = c;
    var G__17880 = d;
    return f.cljs$core$IFn$_invoke$arity$5 ? f.cljs$core$IFn$_invoke$arity$5(G__17876, G__17877, G__17878, G__17879, G__17880) : f.call(null, G__17876, G__17877, G__17878, G__17879, G__17880);
  }());
};
cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$variadic = function(obj, f, a, b, c, d, args) {
  return cljs.core.with_meta(obj, cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(f, cljs.core.meta(obj), a, b, c, cljs.core.array_seq([d, args], 0)));
};
cljs.core.vary_meta.cljs$lang$applyTo = function(seq17857) {
  var G__17858 = cljs.core.first(seq17857);
  var seq17857__$1 = cljs.core.next(seq17857);
  var G__17859 = cljs.core.first(seq17857__$1);
  var seq17857__$2 = cljs.core.next(seq17857__$1);
  var G__17860 = cljs.core.first(seq17857__$2);
  var seq17857__$3 = cljs.core.next(seq17857__$2);
  var G__17861 = cljs.core.first(seq17857__$3);
  var seq17857__$4 = cljs.core.next(seq17857__$3);
  var G__17862 = cljs.core.first(seq17857__$4);
  var seq17857__$5 = cljs.core.next(seq17857__$4);
  var G__17863 = cljs.core.first(seq17857__$5);
  var seq17857__$6 = cljs.core.next(seq17857__$5);
  return cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$variadic(G__17858, G__17859, G__17860, G__17861, G__17862, G__17863, seq17857__$6);
};
cljs.core.vary_meta.cljs$lang$maxFixedArity = 6;
cljs.core.not_EQ_ = function cljs$core$not_EQ_() {
  var G__17886 = arguments.length;
  switch(G__17886) {
    case 1:
      return cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5386__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5386__auto__);
  }
};
cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return false;
};
cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return!cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(x, y);
};
cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.not(cljs.core.apply.cljs$core$IFn$_invoke$arity$4(cljs.core._EQ_, x, y, more));
};
cljs.core.not_EQ_.cljs$lang$applyTo = function(seq17882) {
  var G__17883 = cljs.core.first(seq17882);
  var seq17882__$1 = cljs.core.next(seq17882);
  var G__17884 = cljs.core.first(seq17882__$1);
  var seq17882__$2 = cljs.core.next(seq17882__$1);
  return cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$variadic(G__17883, G__17884, seq17882__$2);
};
cljs.core.not_EQ_.cljs$lang$maxFixedArity = 2;
cljs.core.not_empty = function cljs$core$not_empty(coll) {
  if (cljs.core.seq(coll)) {
    return coll;
  } else {
    return null;
  }
};
cljs.core.nil_iter = function cljs$core$nil_iter() {
  if (typeof cljs.core.t17891 !== "undefined") {
  } else {
    cljs.core.t17891 = function(nil_iter, meta17892) {
      this.nil_iter = nil_iter;
      this.meta17892 = meta17892;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.t17891.prototype.hasNext = function() {
      var self__ = this;
      var _ = this;
      return false;
    };
    cljs.core.t17891.prototype.next = function() {
      var self__ = this;
      var _ = this;
      return new Error("No such element");
    };
    cljs.core.t17891.prototype.remove = function() {
      var self__ = this;
      var _ = this;
      return new Error("Unsupported operation");
    };
    cljs.core.t17891.prototype.cljs$core$IMeta$_meta$arity$1 = function(_17893) {
      var self__ = this;
      var _17893__$1 = this;
      return self__.meta17892;
    };
    cljs.core.t17891.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_17893, meta17892__$1) {
      var self__ = this;
      var _17893__$1 = this;
      return new cljs.core.t17891(self__.nil_iter, meta17892__$1);
    };
    cljs.core.t17891.cljs$lang$type = true;
    cljs.core.t17891.cljs$lang$ctorStr = "cljs.core/t17891";
    cljs.core.t17891.cljs$lang$ctorPrWriter = function(this__4914__auto__, writer__4915__auto__, opt__4916__auto__) {
      return cljs.core._write(writer__4915__auto__, "cljs.core/t17891");
    };
    cljs.core.__GT_t17891 = function cljs$core$nil_iter_$___GT_t17891(nil_iter__$1, meta17892) {
      return new cljs.core.t17891(nil_iter__$1, meta17892);
    };
  }
  return new cljs.core.t17891(cljs$core$nil_iter, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.core.StringIter = function(s, i) {
  this.s = s;
  this.i = i;
};
cljs.core.StringIter.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  return self__.i < self__.s.length;
};
cljs.core.StringIter.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var ret = self__.s.charAt(self__.i);
  self__.i = self__.i + 1;
  return ret;
};
cljs.core.StringIter.prototype.remove = function() {
  var self__ = this;
  var _ = this;
  return new Error("Unsupported operation");
};
cljs.core.StringIter.cljs$lang$type = true;
cljs.core.StringIter.cljs$lang$ctorStr = "cljs.core/StringIter";
cljs.core.StringIter.cljs$lang$ctorPrWriter = function(this__4914__auto__, writer__4915__auto__, opt__4916__auto__) {
  return cljs.core._write(writer__4915__auto__, "cljs.core/StringIter");
};
cljs.core.__GT_StringIter = function cljs$core$__GT_StringIter(s, i) {
  return new cljs.core.StringIter(s, i);
};
cljs.core.string_iter = function cljs$core$string_iter(x) {
  return new cljs.core.StringIter(x, 0);
};
cljs.core.ArrayIter = function(arr, i) {
  this.arr = arr;
  this.i = i;
};
cljs.core.ArrayIter.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  return self__.i < self__.arr.length;
};
cljs.core.ArrayIter.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var ret = self__.arr[self__.i];
  self__.i = self__.i + 1;
  return ret;
};
cljs.core.ArrayIter.prototype.remove = function() {
  var self__ = this;
  var _ = this;
  return new Error("Unsupported operation");
};
cljs.core.ArrayIter.cljs$lang$type = true;
cljs.core.ArrayIter.cljs$lang$ctorStr = "cljs.core/ArrayIter";
cljs.core.ArrayIter.cljs$lang$ctorPrWriter = function(this__4914__auto__, writer__4915__auto__, opt__4916__auto__) {
  return cljs.core._write(writer__4915__auto__, "cljs.core/ArrayIter");
};
cljs.core.__GT_ArrayIter = function cljs$core$__GT_ArrayIter(arr, i) {
  return new cljs.core.ArrayIter(arr, i);
};
cljs.core.array_iter = function cljs$core$array_iter(x) {
  return new cljs.core.ArrayIter(x, 0);
};
cljs.core.INIT = {};
cljs.core.START = {};
cljs.core.SeqIter = function(_seq, _next) {
  this._seq = _seq;
  this._next = _next;
};
cljs.core.SeqIter.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  if (self__._seq === cljs.core.INIT) {
    self__._seq = cljs.core.START;
    self__._next = cljs.core.seq(self__._next);
  } else {
    if (self__._seq === self__._next) {
      self__._next = cljs.core.next(self__._seq);
    } else {
    }
  }
  return!(self__._next == null);
};
cljs.core.SeqIter.prototype.next = function() {
  var self__ = this;
  var this$ = this;
  if (cljs.core.not(this$.hasNext())) {
    throw new Error("No such element");
  } else {
    self__._seq = self__._next;
    return cljs.core.first(self__._next);
  }
};
cljs.core.SeqIter.prototype.remove = function() {
  var self__ = this;
  var _ = this;
  return new Error("Unsupported operation");
};
cljs.core.SeqIter.cljs$lang$type = true;
cljs.core.SeqIter.cljs$lang$ctorStr = "cljs.core/SeqIter";
cljs.core.SeqIter.cljs$lang$ctorPrWriter = function(this__4914__auto__, writer__4915__auto__, opt__4916__auto__) {
  return cljs.core._write(writer__4915__auto__, "cljs.core/SeqIter");
};
cljs.core.__GT_SeqIter = function cljs$core$__GT_SeqIter(_seq, _next) {
  return new cljs.core.SeqIter(_seq, _next);
};
cljs.core.seq_iter = function cljs$core$seq_iter(coll) {
  return new cljs.core.SeqIter(cljs.core.INIT, coll);
};
cljs.core.iter = function cljs$core$iter(coll) {
  if (coll == null) {
    return cljs.core.nil_iter();
  } else {
    if (typeof coll === "string") {
      return cljs.core.string_iter(coll);
    } else {
      if (cljs.core.array_QMARK_(coll)) {
        return cljs.core.array_iter(coll);
      } else {
        if (cljs.core.truth_(cljs.core.iterable_QMARK_(coll))) {
          return cljs.core._iterator(coll);
        } else {
          if (cljs.core.seqable_QMARK_(coll)) {
            return cljs.core.seq_iter(coll);
          } else {
            throw new Error([cljs.core.str("Cannot create iterator from "), cljs.core.str(coll)].join(""));
          }
        }
      }
    }
  }
};
cljs.core.lazy_transformer = function cljs$core$lazy_transformer(stepper) {
  return new cljs.core.LazyTransformer(stepper, null, null, null);
};
cljs.core.Stepper = function(xform, iter) {
  this.xform = xform;
  this.iter = iter;
};
cljs.core.Stepper.prototype.step = function(lt) {
  var self__ = this;
  var this$ = this;
  while (true) {
    if (cljs.core.truth_(function() {
      var and__4323__auto__ = !(lt.stepper == null);
      if (and__4323__auto__) {
        return self__.iter.hasNext();
      } else {
        return and__4323__auto__;
      }
    }())) {
      if (cljs.core.reduced_QMARK_(function() {
        var G__17894 = lt;
        var G__17895 = self__.iter.next();
        return self__.xform.cljs$core$IFn$_invoke$arity$2 ? self__.xform.cljs$core$IFn$_invoke$arity$2(G__17894, G__17895) : self__.xform.call(null, G__17894, G__17895);
      }())) {
        if (lt.rest == null) {
        } else {
          lt.rest.stepper = null;
        }
      } else {
        continue;
      }
    } else {
    }
    break;
  }
  if (lt.stepper == null) {
    return null;
  } else {
    var G__17896 = lt;
    return self__.xform.cljs$core$IFn$_invoke$arity$1 ? self__.xform.cljs$core$IFn$_invoke$arity$1(G__17896) : self__.xform.call(null, G__17896);
  }
};
cljs.core.Stepper.cljs$lang$type = true;
cljs.core.Stepper.cljs$lang$ctorStr = "cljs.core/Stepper";
cljs.core.Stepper.cljs$lang$ctorPrWriter = function(this__4914__auto__, writer__4915__auto__, opt__4916__auto__) {
  return cljs.core._write(writer__4915__auto__, "cljs.core/Stepper");
};
cljs.core.__GT_Stepper = function cljs$core$__GT_Stepper(xform, iter) {
  return new cljs.core.Stepper(xform, iter);
};
cljs.core.stepper = function cljs$core$stepper(xform, iter) {
  var stepfn = function() {
    var cljs$core$stepper_$_stepfn = null;
    var cljs$core$stepper_$_stepfn__1 = function(result) {
      var lt = cljs.core.reduced_QMARK_(result) ? cljs.core.deref(result) : result;
      lt.stepper = null;
      return result;
    };
    var cljs$core$stepper_$_stepfn__2 = function(result, input) {
      var lt = result;
      lt.first = input;
      lt.rest = cljs.core.lazy_transformer(lt.stepper);
      lt.stepper = null;
      return lt.rest;
    };
    cljs$core$stepper_$_stepfn = function(result, input) {
      switch(arguments.length) {
        case 1:
          return cljs$core$stepper_$_stepfn__1.call(this, result);
        case 2:
          return cljs$core$stepper_$_stepfn__2.call(this, result, input);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    cljs$core$stepper_$_stepfn.cljs$core$IFn$_invoke$arity$1 = cljs$core$stepper_$_stepfn__1;
    cljs$core$stepper_$_stepfn.cljs$core$IFn$_invoke$arity$2 = cljs$core$stepper_$_stepfn__2;
    return cljs$core$stepper_$_stepfn;
  }();
  return new cljs.core.Stepper(function() {
    var G__17898 = stepfn;
    return xform.cljs$core$IFn$_invoke$arity$1 ? xform.cljs$core$IFn$_invoke$arity$1(G__17898) : xform.call(null, G__17898);
  }(), iter);
};
cljs.core.MultiStepper = function(xform, iters, nexts) {
  this.xform = xform;
  this.iters = iters;
  this.nexts = nexts;
};
cljs.core.MultiStepper.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  var iters__$1 = cljs.core.seq(self__.iters);
  while (true) {
    if (!(iters__$1 == null)) {
      var iter = cljs.core.first(iters__$1);
      if (cljs.core.not(iter.hasNext())) {
        return false;
      } else {
        var G__17900 = cljs.core.next(iters__$1);
        iters__$1 = G__17900;
        continue;
      }
    } else {
      return true;
    }
    break;
  }
};
cljs.core.MultiStepper.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var n__5220__auto___17901 = self__.iters.length;
  var i_17902 = 0;
  while (true) {
    if (i_17902 < n__5220__auto___17901) {
      self__.nexts[i_17902] = self__.iters[i_17902].next();
      var G__17903 = i_17902 + 1;
      i_17902 = G__17903;
      continue;
    } else {
    }
    break;
  }
  return cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(self__.nexts, 0);
};
cljs.core.MultiStepper.prototype.step = function(lt) {
  var self__ = this;
  var this$ = this;
  while (true) {
    if (cljs.core.truth_(function() {
      var and__4323__auto__ = !(lt.stepper == null);
      if (and__4323__auto__) {
        return this$.hasNext();
      } else {
        return and__4323__auto__;
      }
    }())) {
      if (cljs.core.reduced_QMARK_(cljs.core.apply.cljs$core$IFn$_invoke$arity$2(self__.xform, cljs.core.cons(lt, this$.next())))) {
        if (lt.rest == null) {
        } else {
          lt.rest.stepper = null;
        }
      } else {
        continue;
      }
    } else {
    }
    break;
  }
  if (lt.stepper == null) {
    return null;
  } else {
    var G__17899 = lt;
    return self__.xform.cljs$core$IFn$_invoke$arity$1 ? self__.xform.cljs$core$IFn$_invoke$arity$1(G__17899) : self__.xform.call(null, G__17899);
  }
};
cljs.core.MultiStepper.cljs$lang$type = true;
cljs.core.MultiStepper.cljs$lang$ctorStr = "cljs.core/MultiStepper";
cljs.core.MultiStepper.cljs$lang$ctorPrWriter = function(this__4914__auto__, writer__4915__auto__, opt__4916__auto__) {
  return cljs.core._write(writer__4915__auto__, "cljs.core/MultiStepper");
};
cljs.core.__GT_MultiStepper = function cljs$core$__GT_MultiStepper(xform, iters, nexts) {
  return new cljs.core.MultiStepper(xform, iters, nexts);
};
cljs.core.multi_stepper = function cljs$core$multi_stepper() {
  var G__17905 = arguments.length;
  switch(G__17905) {
    case 2:
      return cljs.core.multi_stepper.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.multi_stepper.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.multi_stepper.cljs$core$IFn$_invoke$arity$2 = function(xform, iters) {
  return cljs.core.multi_stepper.cljs$core$IFn$_invoke$arity$3(xform, iters, new Array(iters.length));
};
cljs.core.multi_stepper.cljs$core$IFn$_invoke$arity$3 = function(xform, iters, nexts) {
  var stepfn = function() {
    var cljs$core$stepfn = null;
    var cljs$core$stepfn__1 = function(result) {
      var lt = cljs.core.reduced_QMARK_(result) ? cljs.core.deref(result) : result;
      lt.stepper = null;
      return lt;
    };
    var cljs$core$stepfn__2 = function(result, input) {
      var lt = result;
      lt.first = input;
      lt.rest = cljs.core.lazy_transformer(lt.stepper);
      lt.stepper = null;
      return lt.rest;
    };
    cljs$core$stepfn = function(result, input) {
      switch(arguments.length) {
        case 1:
          return cljs$core$stepfn__1.call(this, result);
        case 2:
          return cljs$core$stepfn__2.call(this, result, input);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    cljs$core$stepfn.cljs$core$IFn$_invoke$arity$1 = cljs$core$stepfn__1;
    cljs$core$stepfn.cljs$core$IFn$_invoke$arity$2 = cljs$core$stepfn__2;
    return cljs$core$stepfn;
  }();
  return new cljs.core.MultiStepper(function() {
    var G__17906 = stepfn;
    return xform.cljs$core$IFn$_invoke$arity$1 ? xform.cljs$core$IFn$_invoke$arity$1(G__17906) : xform.call(null, G__17906);
  }(), iters, nexts);
};
cljs.core.multi_stepper.cljs$lang$maxFixedArity = 3;
cljs.core.LazyTransformer = function(stepper, first, rest, meta) {
  this.stepper = stepper;
  this.first = first;
  this.rest = rest;
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 31719628;
};
cljs.core.LazyTransformer.prototype.cljs$core$INext$_next$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.stepper == null) {
  } else {
    cljs.core._seq(this$__$1);
  }
  if (self__.rest == null) {
    return null;
  } else {
    return cljs.core._seq(self__.rest);
  }
};
cljs.core.LazyTransformer.prototype.cljs$core$ISeq$_first$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.stepper == null) {
  } else {
    cljs.core._seq(this$__$1);
  }
  if (self__.rest == null) {
    return null;
  } else {
    return self__.first;
  }
};
cljs.core.LazyTransformer.prototype.cljs$core$ISeq$_rest$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.stepper == null) {
  } else {
    cljs.core._seq(this$__$1);
  }
  if (self__.rest == null) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.rest;
  }
};
cljs.core.LazyTransformer.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.stepper == null) {
  } else {
    self__.stepper.step(this$__$1);
  }
  if (self__.rest == null) {
    return null;
  } else {
    return this$__$1;
  }
};
cljs.core.LazyTransformer.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.hash_ordered_coll(this$__$1);
};
cljs.core.LazyTransformer.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this$, other) {
  var self__ = this;
  var this$__$1 = this;
  var s = cljs.core._seq(this$__$1);
  if (!(s == null)) {
    return cljs.core.equiv_sequential(this$__$1, other);
  } else {
    return cljs.core.sequential_QMARK_(other) && cljs.core.seq(other) == null;
  }
};
cljs.core.LazyTransformer.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.LazyTransformer.prototype.cljs$core$ICollection$_conj$arity$2 = function(this$, o) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.cons(o, cljs.core._seq(this$__$1));
};
cljs.core.LazyTransformer.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this$, new_meta) {
  var self__ = this;
  var this$__$1 = this;
  return new cljs.core.LazyTransformer(self__.stepper, self__.first, self__.rest, new_meta);
};
cljs.core.LazyTransformer.cljs$lang$type = true;
cljs.core.LazyTransformer.cljs$lang$ctorStr = "cljs.core/LazyTransformer";
cljs.core.LazyTransformer.cljs$lang$ctorPrWriter = function(this__4914__auto__, writer__4915__auto__, opt__4916__auto__) {
  return cljs.core._write(writer__4915__auto__, "cljs.core/LazyTransformer");
};
cljs.core.__GT_LazyTransformer = function cljs$core$__GT_LazyTransformer(stepper, first, rest, meta) {
  return new cljs.core.LazyTransformer(stepper, first, rest, meta);
};
cljs.core.LazyTransformer.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5311__auto__ = this;
  return cljs.core.es6_iterator(this__5311__auto__);
};
cljs.core.LazyTransformer.create = function(xform, coll) {
  return new cljs.core.LazyTransformer(cljs.core.stepper(xform, cljs.core.iter(coll)), null, null, null);
};
cljs.core.LazyTransformer.createMulti = function(xform, colls) {
  var iters = [];
  var seq__17908_17912 = cljs.core.seq(colls);
  var chunk__17909_17913 = null;
  var count__17910_17914 = 0;
  var i__17911_17915 = 0;
  while (true) {
    if (i__17911_17915 < count__17910_17914) {
      var coll_17916 = chunk__17909_17913.cljs$core$IIndexed$_nth$arity$2(null, i__17911_17915);
      iters.push(cljs.core.iter(coll_17916));
      var G__17917 = seq__17908_17912;
      var G__17918 = chunk__17909_17913;
      var G__17919 = count__17910_17914;
      var G__17920 = i__17911_17915 + 1;
      seq__17908_17912 = G__17917;
      chunk__17909_17913 = G__17918;
      count__17910_17914 = G__17919;
      i__17911_17915 = G__17920;
      continue;
    } else {
      var temp__4126__auto___17921 = cljs.core.seq(seq__17908_17912);
      if (temp__4126__auto___17921) {
        var seq__17908_17922__$1 = temp__4126__auto___17921;
        if (cljs.core.chunked_seq_QMARK_(seq__17908_17922__$1)) {
          var c__5120__auto___17923 = cljs.core.chunk_first(seq__17908_17922__$1);
          var G__17924 = cljs.core.chunk_rest(seq__17908_17922__$1);
          var G__17925 = c__5120__auto___17923;
          var G__17926 = cljs.core.count(c__5120__auto___17923);
          var G__17927 = 0;
          seq__17908_17912 = G__17924;
          chunk__17909_17913 = G__17925;
          count__17910_17914 = G__17926;
          i__17911_17915 = G__17927;
          continue;
        } else {
          var coll_17928 = cljs.core.first(seq__17908_17922__$1);
          iters.push(cljs.core.iter(coll_17928));
          var G__17929 = cljs.core.next(seq__17908_17922__$1);
          var G__17930 = null;
          var G__17931 = 0;
          var G__17932 = 0;
          seq__17908_17912 = G__17929;
          chunk__17909_17913 = G__17930;
          count__17910_17914 = G__17931;
          i__17911_17915 = G__17932;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return new cljs.core.LazyTransformer(cljs.core.multi_stepper.cljs$core$IFn$_invoke$arity$3(xform, iters, new Array(iters.length)), null, null, null);
};
cljs.core.sequence = function cljs$core$sequence() {
  var G__17937 = arguments.length;
  switch(G__17937) {
    case 1:
      return cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.sequence.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5386__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core.sequence.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5386__auto__);
  }
};
cljs.core.sequence.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  if (cljs.core.seq_QMARK_(coll)) {
    return coll;
  } else {
    var or__4335__auto__ = cljs.core.seq(coll);
    if (or__4335__auto__) {
      return or__4335__auto__;
    } else {
      return cljs.core.List.EMPTY;
    }
  }
};
cljs.core.sequence.cljs$core$IFn$_invoke$arity$2 = function(xform, coll) {
  return cljs.core.LazyTransformer.create(xform, coll);
};
cljs.core.sequence.cljs$core$IFn$_invoke$arity$variadic = function(xform, coll, colls) {
  return cljs.core.LazyTransformer.createMulti(xform, cljs.core.to_array(cljs.core.cons(coll, colls)));
};
cljs.core.sequence.cljs$lang$applyTo = function(seq17933) {
  var G__17934 = cljs.core.first(seq17933);
  var seq17933__$1 = cljs.core.next(seq17933);
  var G__17935 = cljs.core.first(seq17933__$1);
  var seq17933__$2 = cljs.core.next(seq17933__$1);
  return cljs.core.sequence.cljs$core$IFn$_invoke$arity$variadic(G__17934, G__17935, seq17933__$2);
};
cljs.core.sequence.cljs$lang$maxFixedArity = 2;
cljs.core.every_QMARK_ = function cljs$core$every_QMARK_(pred, coll) {
  while (true) {
    if (cljs.core.seq(coll) == null) {
      return true;
    } else {
      if (cljs.core.truth_(function() {
        var G__17940 = cljs.core.first(coll);
        return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(G__17940) : pred.call(null, G__17940);
      }())) {
        var G__17941 = pred;
        var G__17942 = cljs.core.next(coll);
        pred = G__17941;
        coll = G__17942;
        continue;
      } else {
        return false;
      }
    }
    break;
  }
};
cljs.core.not_every_QMARK_ = function cljs$core$not_every_QMARK_(pred, coll) {
  return!cljs.core.every_QMARK_(pred, coll);
};
cljs.core.some = function cljs$core$some(pred, coll) {
  while (true) {
    if (cljs.core.seq(coll)) {
      var or__4335__auto__ = function() {
        var G__17946 = cljs.core.first(coll);
        return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(G__17946) : pred.call(null, G__17946);
      }();
      if (cljs.core.truth_(or__4335__auto__)) {
        return or__4335__auto__;
      } else {
        var G__17947 = pred;
        var G__17948 = cljs.core.next(coll);
        pred = G__17947;
        coll = G__17948;
        continue;
      }
    } else {
      return null;
    }
    break;
  }
};
cljs.core.not_any_QMARK_ = function cljs$core$not_any_QMARK_(pred, coll) {
  return cljs.core.not(cljs.core.some(pred, coll));
};
cljs.core.even_QMARK_ = function cljs$core$even_QMARK_(n) {
  if (cljs.core.integer_QMARK_(n)) {
    return(n & 1) === 0;
  } else {
    throw new Error([cljs.core.str("Argument must be an integer: "), cljs.core.str(n)].join(""));
  }
};
cljs.core.odd_QMARK_ = function cljs$core$odd_QMARK_(n) {
  return!cljs.core.even_QMARK_(n);
};
cljs.core.complement = function cljs$core$complement(f) {
  return function() {
    var G__17955 = null;
    var G__17955__0 = function() {
      return cljs.core.not(function() {
        return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
      }());
    };
    var G__17955__1 = function(x) {
      return cljs.core.not(function() {
        var G__17952 = x;
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__17952) : f.call(null, G__17952);
      }());
    };
    var G__17955__2 = function(x, y) {
      return cljs.core.not(function() {
        var G__17953 = x;
        var G__17954 = y;
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__17953, G__17954) : f.call(null, G__17953, G__17954);
      }());
    };
    var G__17955__3 = function() {
      var G__17956__delegate = function(x, y, zs) {
        return cljs.core.not(cljs.core.apply.cljs$core$IFn$_invoke$arity$4(f, x, y, zs));
      };
      var G__17956 = function(x, y, var_args) {
        var zs = null;
        if (arguments.length > 2) {
          var G__17957__i = 0, G__17957__a = new Array(arguments.length - 2);
          while (G__17957__i < G__17957__a.length) {
            G__17957__a[G__17957__i] = arguments[G__17957__i + 2];
            ++G__17957__i;
          }
          zs = new cljs.core.IndexedSeq(G__17957__a, 0);
        }
        return G__17956__delegate.call(this, x, y, zs);
      };
      G__17956.cljs$lang$maxFixedArity = 2;
      G__17956.cljs$lang$applyTo = function(arglist__17958) {
        var x = cljs.core.first(arglist__17958);
        arglist__17958 = cljs.core.next(arglist__17958);
        var y = cljs.core.first(arglist__17958);
        var zs = cljs.core.rest(arglist__17958);
        return G__17956__delegate(x, y, zs);
      };
      G__17956.cljs$core$IFn$_invoke$arity$variadic = G__17956__delegate;
      return G__17956;
    }();
    G__17955 = function(x, y, var_args) {
      var zs = var_args;
      switch(arguments.length) {
        case 0:
          return G__17955__0.call(this);
        case 1:
          return G__17955__1.call(this, x);
        case 2:
          return G__17955__2.call(this, x, y);
        default:
          var G__17959 = null;
          if (arguments.length > 2) {
            var G__17960__i = 0, G__17960__a = new Array(arguments.length - 2);
            while (G__17960__i < G__17960__a.length) {
              G__17960__a[G__17960__i] = arguments[G__17960__i + 2];
              ++G__17960__i;
            }
            G__17959 = new cljs.core.IndexedSeq(G__17960__a, 0);
          }
          return G__17955__3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__17959);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__17955.cljs$lang$maxFixedArity = 2;
    G__17955.cljs$lang$applyTo = G__17955__3.cljs$lang$applyTo;
    G__17955.cljs$core$IFn$_invoke$arity$0 = G__17955__0;
    G__17955.cljs$core$IFn$_invoke$arity$1 = G__17955__1;
    G__17955.cljs$core$IFn$_invoke$arity$2 = G__17955__2;
    G__17955.cljs$core$IFn$_invoke$arity$variadic = G__17955__3.cljs$core$IFn$_invoke$arity$variadic;
    return G__17955;
  }();
};
cljs.core.constantly = function cljs$core$constantly(x) {
  return function() {
    var G__17961__delegate = function(args) {
      return x;
    };
    var G__17961 = function(var_args) {
      var args = null;
      if (arguments.length > 0) {
        var G__17962__i = 0, G__17962__a = new Array(arguments.length - 0);
        while (G__17962__i < G__17962__a.length) {
          G__17962__a[G__17962__i] = arguments[G__17962__i + 0];
          ++G__17962__i;
        }
        args = new cljs.core.IndexedSeq(G__17962__a, 0);
      }
      return G__17961__delegate.call(this, args);
    };
    G__17961.cljs$lang$maxFixedArity = 0;
    G__17961.cljs$lang$applyTo = function(arglist__17963) {
      var args = cljs.core.seq(arglist__17963);
      return G__17961__delegate(args);
    };
    G__17961.cljs$core$IFn$_invoke$arity$variadic = G__17961__delegate;
    return G__17961;
  }();
};
cljs.core.comp = function cljs$core$comp() {
  var G__17969 = arguments.length;
  switch(G__17969) {
    case 0:
      return cljs.core.comp.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.comp.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.comp.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.comp.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      var argseq__5386__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 3), 0);
      return cljs.core.comp.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__5386__auto__);
  }
};
cljs.core.comp.cljs$core$IFn$_invoke$arity$0 = function() {
  return cljs.core.identity;
};
cljs.core.comp.cljs$core$IFn$_invoke$arity$1 = function(f) {
  return f;
};
cljs.core.comp.cljs$core$IFn$_invoke$arity$2 = function(f, g) {
  return function() {
    var G__17998 = null;
    var G__17998__0 = function() {
      var G__17970 = function() {
        return g.cljs$core$IFn$_invoke$arity$0 ? g.cljs$core$IFn$_invoke$arity$0() : g.call(null);
      }();
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__17970) : f.call(null, G__17970);
    };
    var G__17998__1 = function(x) {
      var G__17971 = function() {
        var G__17972 = x;
        return g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(G__17972) : g.call(null, G__17972);
      }();
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__17971) : f.call(null, G__17971);
    };
    var G__17998__2 = function(x, y) {
      var G__17973 = function() {
        var G__17974 = x;
        var G__17975 = y;
        return g.cljs$core$IFn$_invoke$arity$2 ? g.cljs$core$IFn$_invoke$arity$2(G__17974, G__17975) : g.call(null, G__17974, G__17975);
      }();
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__17973) : f.call(null, G__17973);
    };
    var G__17998__3 = function(x, y, z) {
      var G__17976 = function() {
        var G__17977 = x;
        var G__17978 = y;
        var G__17979 = z;
        return g.cljs$core$IFn$_invoke$arity$3 ? g.cljs$core$IFn$_invoke$arity$3(G__17977, G__17978, G__17979) : g.call(null, G__17977, G__17978, G__17979);
      }();
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__17976) : f.call(null, G__17976);
    };
    var G__17998__4 = function() {
      var G__17999__delegate = function(x, y, z, args) {
        var G__17980 = cljs.core.apply.cljs$core$IFn$_invoke$arity$5(g, x, y, z, args);
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__17980) : f.call(null, G__17980);
      };
      var G__17999 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__18000__i = 0, G__18000__a = new Array(arguments.length - 3);
          while (G__18000__i < G__18000__a.length) {
            G__18000__a[G__18000__i] = arguments[G__18000__i + 3];
            ++G__18000__i;
          }
          args = new cljs.core.IndexedSeq(G__18000__a, 0);
        }
        return G__17999__delegate.call(this, x, y, z, args);
      };
      G__17999.cljs$lang$maxFixedArity = 3;
      G__17999.cljs$lang$applyTo = function(arglist__18001) {
        var x = cljs.core.first(arglist__18001);
        arglist__18001 = cljs.core.next(arglist__18001);
        var y = cljs.core.first(arglist__18001);
        arglist__18001 = cljs.core.next(arglist__18001);
        var z = cljs.core.first(arglist__18001);
        var args = cljs.core.rest(arglist__18001);
        return G__17999__delegate(x, y, z, args);
      };
      G__17999.cljs$core$IFn$_invoke$arity$variadic = G__17999__delegate;
      return G__17999;
    }();
    G__17998 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return G__17998__0.call(this);
        case 1:
          return G__17998__1.call(this, x);
        case 2:
          return G__17998__2.call(this, x, y);
        case 3:
          return G__17998__3.call(this, x, y, z);
        default:
          var G__18002 = null;
          if (arguments.length > 3) {
            var G__18003__i = 0, G__18003__a = new Array(arguments.length - 3);
            while (G__18003__i < G__18003__a.length) {
              G__18003__a[G__18003__i] = arguments[G__18003__i + 3];
              ++G__18003__i;
            }
            G__18002 = new cljs.core.IndexedSeq(G__18003__a, 0);
          }
          return G__17998__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__18002);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__17998.cljs$lang$maxFixedArity = 3;
    G__17998.cljs$lang$applyTo = G__17998__4.cljs$lang$applyTo;
    G__17998.cljs$core$IFn$_invoke$arity$0 = G__17998__0;
    G__17998.cljs$core$IFn$_invoke$arity$1 = G__17998__1;
    G__17998.cljs$core$IFn$_invoke$arity$2 = G__17998__2;
    G__17998.cljs$core$IFn$_invoke$arity$3 = G__17998__3;
    G__17998.cljs$core$IFn$_invoke$arity$variadic = G__17998__4.cljs$core$IFn$_invoke$arity$variadic;
    return G__17998;
  }();
};
cljs.core.comp.cljs$core$IFn$_invoke$arity$3 = function(f, g, h) {
  return function() {
    var G__18004 = null;
    var G__18004__0 = function() {
      var G__17981 = function() {
        var G__17982 = function() {
          return h.cljs$core$IFn$_invoke$arity$0 ? h.cljs$core$IFn$_invoke$arity$0() : h.call(null);
        }();
        return g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(G__17982) : g.call(null, G__17982);
      }();
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__17981) : f.call(null, G__17981);
    };
    var G__18004__1 = function(x) {
      var G__17983 = function() {
        var G__17984 = function() {
          var G__17985 = x;
          return h.cljs$core$IFn$_invoke$arity$1 ? h.cljs$core$IFn$_invoke$arity$1(G__17985) : h.call(null, G__17985);
        }();
        return g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(G__17984) : g.call(null, G__17984);
      }();
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__17983) : f.call(null, G__17983);
    };
    var G__18004__2 = function(x, y) {
      var G__17986 = function() {
        var G__17987 = function() {
          var G__17988 = x;
          var G__17989 = y;
          return h.cljs$core$IFn$_invoke$arity$2 ? h.cljs$core$IFn$_invoke$arity$2(G__17988, G__17989) : h.call(null, G__17988, G__17989);
        }();
        return g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(G__17987) : g.call(null, G__17987);
      }();
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__17986) : f.call(null, G__17986);
    };
    var G__18004__3 = function(x, y, z) {
      var G__17990 = function() {
        var G__17991 = function() {
          var G__17992 = x;
          var G__17993 = y;
          var G__17994 = z;
          return h.cljs$core$IFn$_invoke$arity$3 ? h.cljs$core$IFn$_invoke$arity$3(G__17992, G__17993, G__17994) : h.call(null, G__17992, G__17993, G__17994);
        }();
        return g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(G__17991) : g.call(null, G__17991);
      }();
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__17990) : f.call(null, G__17990);
    };
    var G__18004__4 = function() {
      var G__18005__delegate = function(x, y, z, args) {
        var G__17995 = function() {
          var G__17996 = cljs.core.apply.cljs$core$IFn$_invoke$arity$5(h, x, y, z, args);
          return g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(G__17996) : g.call(null, G__17996);
        }();
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__17995) : f.call(null, G__17995);
      };
      var G__18005 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__18006__i = 0, G__18006__a = new Array(arguments.length - 3);
          while (G__18006__i < G__18006__a.length) {
            G__18006__a[G__18006__i] = arguments[G__18006__i + 3];
            ++G__18006__i;
          }
          args = new cljs.core.IndexedSeq(G__18006__a, 0);
        }
        return G__18005__delegate.call(this, x, y, z, args);
      };
      G__18005.cljs$lang$maxFixedArity = 3;
      G__18005.cljs$lang$applyTo = function(arglist__18007) {
        var x = cljs.core.first(arglist__18007);
        arglist__18007 = cljs.core.next(arglist__18007);
        var y = cljs.core.first(arglist__18007);
        arglist__18007 = cljs.core.next(arglist__18007);
        var z = cljs.core.first(arglist__18007);
        var args = cljs.core.rest(arglist__18007);
        return G__18005__delegate(x, y, z, args);
      };
      G__18005.cljs$core$IFn$_invoke$arity$variadic = G__18005__delegate;
      return G__18005;
    }();
    G__18004 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return G__18004__0.call(this);
        case 1:
          return G__18004__1.call(this, x);
        case 2:
          return G__18004__2.call(this, x, y);
        case 3:
          return G__18004__3.call(this, x, y, z);
        default:
          var G__18008 = null;
          if (arguments.length > 3) {
            var G__18009__i = 0, G__18009__a = new Array(arguments.length - 3);
            while (G__18009__i < G__18009__a.length) {
              G__18009__a[G__18009__i] = arguments[G__18009__i + 3];
              ++G__18009__i;
            }
            G__18008 = new cljs.core.IndexedSeq(G__18009__a, 0);
          }
          return G__18004__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__18008);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__18004.cljs$lang$maxFixedArity = 3;
    G__18004.cljs$lang$applyTo = G__18004__4.cljs$lang$applyTo;
    G__18004.cljs$core$IFn$_invoke$arity$0 = G__18004__0;
    G__18004.cljs$core$IFn$_invoke$arity$1 = G__18004__1;
    G__18004.cljs$core$IFn$_invoke$arity$2 = G__18004__2;
    G__18004.cljs$core$IFn$_invoke$arity$3 = G__18004__3;
    G__18004.cljs$core$IFn$_invoke$arity$variadic = G__18004__4.cljs$core$IFn$_invoke$arity$variadic;
    return G__18004;
  }();
};
cljs.core.comp.cljs$core$IFn$_invoke$arity$variadic = function(f1, f2, f3, fs) {
  var fs__$1 = cljs.core.reverse(cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$4(f1, f2, f3, fs));
  return function(fs__$1) {
    return function() {
      var G__18010__delegate = function(args) {
        var ret = cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.first(fs__$1), args);
        var fs__$2 = cljs.core.next(fs__$1);
        while (true) {
          if (fs__$2) {
            var G__18011 = cljs.core.first(fs__$2).call(null, ret);
            var G__18012 = cljs.core.next(fs__$2);
            ret = G__18011;
            fs__$2 = G__18012;
            continue;
          } else {
            return ret;
          }
          break;
        }
      };
      var G__18010 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          var G__18013__i = 0, G__18013__a = new Array(arguments.length - 0);
          while (G__18013__i < G__18013__a.length) {
            G__18013__a[G__18013__i] = arguments[G__18013__i + 0];
            ++G__18013__i;
          }
          args = new cljs.core.IndexedSeq(G__18013__a, 0);
        }
        return G__18010__delegate.call(this, args);
      };
      G__18010.cljs$lang$maxFixedArity = 0;
      G__18010.cljs$lang$applyTo = function(arglist__18014) {
        var args = cljs.core.seq(arglist__18014);
        return G__18010__delegate(args);
      };
      G__18010.cljs$core$IFn$_invoke$arity$variadic = G__18010__delegate;
      return G__18010;
    }();
  }(fs__$1);
};
cljs.core.comp.cljs$lang$applyTo = function(seq17964) {
  var G__17965 = cljs.core.first(seq17964);
  var seq17964__$1 = cljs.core.next(seq17964);
  var G__17966 = cljs.core.first(seq17964__$1);
  var seq17964__$2 = cljs.core.next(seq17964__$1);
  var G__17967 = cljs.core.first(seq17964__$2);
  var seq17964__$3 = cljs.core.next(seq17964__$2);
  return cljs.core.comp.cljs$core$IFn$_invoke$arity$variadic(G__17965, G__17966, G__17967, seq17964__$3);
};
cljs.core.comp.cljs$lang$maxFixedArity = 3;
cljs.core.partial = function cljs$core$partial() {
  var G__18021 = arguments.length;
  switch(G__18021) {
    case 1:
      return cljs.core.partial.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.partial.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.partial.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.partial.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      var argseq__5386__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 4), 0);
      return cljs.core.partial.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], arguments[3], argseq__5386__auto__);
  }
};
cljs.core.partial.cljs$core$IFn$_invoke$arity$1 = function(f) {
  return f;
};
cljs.core.partial.cljs$core$IFn$_invoke$arity$2 = function(f, arg1) {
  return function() {
    var G__18065 = null;
    var G__18065__0 = function() {
      var G__18022 = arg1;
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__18022) : f.call(null, G__18022);
    };
    var G__18065__1 = function(x) {
      var G__18023 = arg1;
      var G__18024 = x;
      return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__18023, G__18024) : f.call(null, G__18023, G__18024);
    };
    var G__18065__2 = function(x, y) {
      var G__18025 = arg1;
      var G__18026 = x;
      var G__18027 = y;
      return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__18025, G__18026, G__18027) : f.call(null, G__18025, G__18026, G__18027);
    };
    var G__18065__3 = function(x, y, z) {
      var G__18028 = arg1;
      var G__18029 = x;
      var G__18030 = y;
      var G__18031 = z;
      return f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(G__18028, G__18029, G__18030, G__18031) : f.call(null, G__18028, G__18029, G__18030, G__18031);
    };
    var G__18065__4 = function() {
      var G__18066__delegate = function(x, y, z, args) {
        return cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(f, arg1, x, y, z, cljs.core.array_seq([args], 0));
      };
      var G__18066 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__18067__i = 0, G__18067__a = new Array(arguments.length - 3);
          while (G__18067__i < G__18067__a.length) {
            G__18067__a[G__18067__i] = arguments[G__18067__i + 3];
            ++G__18067__i;
          }
          args = new cljs.core.IndexedSeq(G__18067__a, 0);
        }
        return G__18066__delegate.call(this, x, y, z, args);
      };
      G__18066.cljs$lang$maxFixedArity = 3;
      G__18066.cljs$lang$applyTo = function(arglist__18068) {
        var x = cljs.core.first(arglist__18068);
        arglist__18068 = cljs.core.next(arglist__18068);
        var y = cljs.core.first(arglist__18068);
        arglist__18068 = cljs.core.next(arglist__18068);
        var z = cljs.core.first(arglist__18068);
        var args = cljs.core.rest(arglist__18068);
        return G__18066__delegate(x, y, z, args);
      };
      G__18066.cljs$core$IFn$_invoke$arity$variadic = G__18066__delegate;
      return G__18066;
    }();
    G__18065 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return G__18065__0.call(this);
        case 1:
          return G__18065__1.call(this, x);
        case 2:
          return G__18065__2.call(this, x, y);
        case 3:
          return G__18065__3.call(this, x, y, z);
        default:
          var G__18069 = null;
          if (arguments.length > 3) {
            var G__18070__i = 0, G__18070__a = new Array(arguments.length - 3);
            while (G__18070__i < G__18070__a.length) {
              G__18070__a[G__18070__i] = arguments[G__18070__i + 3];
              ++G__18070__i;
            }
            G__18069 = new cljs.core.IndexedSeq(G__18070__a, 0);
          }
          return G__18065__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__18069);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__18065.cljs$lang$maxFixedArity = 3;
    G__18065.cljs$lang$applyTo = G__18065__4.cljs$lang$applyTo;
    G__18065.cljs$core$IFn$_invoke$arity$0 = G__18065__0;
    G__18065.cljs$core$IFn$_invoke$arity$1 = G__18065__1;
    G__18065.cljs$core$IFn$_invoke$arity$2 = G__18065__2;
    G__18065.cljs$core$IFn$_invoke$arity$3 = G__18065__3;
    G__18065.cljs$core$IFn$_invoke$arity$variadic = G__18065__4.cljs$core$IFn$_invoke$arity$variadic;
    return G__18065;
  }();
};
cljs.core.partial.cljs$core$IFn$_invoke$arity$3 = function(f, arg1, arg2) {
  return function() {
    var G__18071 = null;
    var G__18071__0 = function() {
      var G__18032 = arg1;
      var G__18033 = arg2;
      return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__18032, G__18033) : f.call(null, G__18032, G__18033);
    };
    var G__18071__1 = function(x) {
      var G__18034 = arg1;
      var G__18035 = arg2;
      var G__18036 = x;
      return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__18034, G__18035, G__18036) : f.call(null, G__18034, G__18035, G__18036);
    };
    var G__18071__2 = function(x, y) {
      var G__18037 = arg1;
      var G__18038 = arg2;
      var G__18039 = x;
      var G__18040 = y;
      return f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(G__18037, G__18038, G__18039, G__18040) : f.call(null, G__18037, G__18038, G__18039, G__18040);
    };
    var G__18071__3 = function(x, y, z) {
      var G__18041 = arg1;
      var G__18042 = arg2;
      var G__18043 = x;
      var G__18044 = y;
      var G__18045 = z;
      return f.cljs$core$IFn$_invoke$arity$5 ? f.cljs$core$IFn$_invoke$arity$5(G__18041, G__18042, G__18043, G__18044, G__18045) : f.call(null, G__18041, G__18042, G__18043, G__18044, G__18045);
    };
    var G__18071__4 = function() {
      var G__18072__delegate = function(x, y, z, args) {
        return cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(f, arg1, arg2, x, y, cljs.core.array_seq([z, args], 0));
      };
      var G__18072 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__18073__i = 0, G__18073__a = new Array(arguments.length - 3);
          while (G__18073__i < G__18073__a.length) {
            G__18073__a[G__18073__i] = arguments[G__18073__i + 3];
            ++G__18073__i;
          }
          args = new cljs.core.IndexedSeq(G__18073__a, 0);
        }
        return G__18072__delegate.call(this, x, y, z, args);
      };
      G__18072.cljs$lang$maxFixedArity = 3;
      G__18072.cljs$lang$applyTo = function(arglist__18074) {
        var x = cljs.core.first(arglist__18074);
        arglist__18074 = cljs.core.next(arglist__18074);
        var y = cljs.core.first(arglist__18074);
        arglist__18074 = cljs.core.next(arglist__18074);
        var z = cljs.core.first(arglist__18074);
        var args = cljs.core.rest(arglist__18074);
        return G__18072__delegate(x, y, z, args);
      };
      G__18072.cljs$core$IFn$_invoke$arity$variadic = G__18072__delegate;
      return G__18072;
    }();
    G__18071 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return G__18071__0.call(this);
        case 1:
          return G__18071__1.call(this, x);
        case 2:
          return G__18071__2.call(this, x, y);
        case 3:
          return G__18071__3.call(this, x, y, z);
        default:
          var G__18075 = null;
          if (arguments.length > 3) {
            var G__18076__i = 0, G__18076__a = new Array(arguments.length - 3);
            while (G__18076__i < G__18076__a.length) {
              G__18076__a[G__18076__i] = arguments[G__18076__i + 3];
              ++G__18076__i;
            }
            G__18075 = new cljs.core.IndexedSeq(G__18076__a, 0);
          }
          return G__18071__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__18075);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__18071.cljs$lang$maxFixedArity = 3;
    G__18071.cljs$lang$applyTo = G__18071__4.cljs$lang$applyTo;
    G__18071.cljs$core$IFn$_invoke$arity$0 = G__18071__0;
    G__18071.cljs$core$IFn$_invoke$arity$1 = G__18071__1;
    G__18071.cljs$core$IFn$_invoke$arity$2 = G__18071__2;
    G__18071.cljs$core$IFn$_invoke$arity$3 = G__18071__3;
    G__18071.cljs$core$IFn$_invoke$arity$variadic = G__18071__4.cljs$core$IFn$_invoke$arity$variadic;
    return G__18071;
  }();
};
cljs.core.partial.cljs$core$IFn$_invoke$arity$4 = function(f, arg1, arg2, arg3) {
  return function() {
    var G__18077 = null;
    var G__18077__0 = function() {
      var G__18046 = arg1;
      var G__18047 = arg2;
      var G__18048 = arg3;
      return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__18046, G__18047, G__18048) : f.call(null, G__18046, G__18047, G__18048);
    };
    var G__18077__1 = function(x) {
      var G__18049 = arg1;
      var G__18050 = arg2;
      var G__18051 = arg3;
      var G__18052 = x;
      return f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(G__18049, G__18050, G__18051, G__18052) : f.call(null, G__18049, G__18050, G__18051, G__18052);
    };
    var G__18077__2 = function(x, y) {
      var G__18053 = arg1;
      var G__18054 = arg2;
      var G__18055 = arg3;
      var G__18056 = x;
      var G__18057 = y;
      return f.cljs$core$IFn$_invoke$arity$5 ? f.cljs$core$IFn$_invoke$arity$5(G__18053, G__18054, G__18055, G__18056, G__18057) : f.call(null, G__18053, G__18054, G__18055, G__18056, G__18057);
    };
    var G__18077__3 = function(x, y, z) {
      var G__18058 = arg1;
      var G__18059 = arg2;
      var G__18060 = arg3;
      var G__18061 = x;
      var G__18062 = y;
      var G__18063 = z;
      return f.cljs$core$IFn$_invoke$arity$6 ? f.cljs$core$IFn$_invoke$arity$6(G__18058, G__18059, G__18060, G__18061, G__18062, G__18063) : f.call(null, G__18058, G__18059, G__18060, G__18061, G__18062, G__18063);
    };
    var G__18077__4 = function() {
      var G__18078__delegate = function(x, y, z, args) {
        return cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(f, arg1, arg2, arg3, x, cljs.core.array_seq([y, z, args], 0));
      };
      var G__18078 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__18079__i = 0, G__18079__a = new Array(arguments.length - 3);
          while (G__18079__i < G__18079__a.length) {
            G__18079__a[G__18079__i] = arguments[G__18079__i + 3];
            ++G__18079__i;
          }
          args = new cljs.core.IndexedSeq(G__18079__a, 0);
        }
        return G__18078__delegate.call(this, x, y, z, args);
      };
      G__18078.cljs$lang$maxFixedArity = 3;
      G__18078.cljs$lang$applyTo = function(arglist__18080) {
        var x = cljs.core.first(arglist__18080);
        arglist__18080 = cljs.core.next(arglist__18080);
        var y = cljs.core.first(arglist__18080);
        arglist__18080 = cljs.core.next(arglist__18080);
        var z = cljs.core.first(arglist__18080);
        var args = cljs.core.rest(arglist__18080);
        return G__18078__delegate(x, y, z, args);
      };
      G__18078.cljs$core$IFn$_invoke$arity$variadic = G__18078__delegate;
      return G__18078;
    }();
    G__18077 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return G__18077__0.call(this);
        case 1:
          return G__18077__1.call(this, x);
        case 2:
          return G__18077__2.call(this, x, y);
        case 3:
          return G__18077__3.call(this, x, y, z);
        default:
          var G__18081 = null;
          if (arguments.length > 3) {
            var G__18082__i = 0, G__18082__a = new Array(arguments.length - 3);
            while (G__18082__i < G__18082__a.length) {
              G__18082__a[G__18082__i] = arguments[G__18082__i + 3];
              ++G__18082__i;
            }
            G__18081 = new cljs.core.IndexedSeq(G__18082__a, 0);
          }
          return G__18077__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__18081);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__18077.cljs$lang$maxFixedArity = 3;
    G__18077.cljs$lang$applyTo = G__18077__4.cljs$lang$applyTo;
    G__18077.cljs$core$IFn$_invoke$arity$0 = G__18077__0;
    G__18077.cljs$core$IFn$_invoke$arity$1 = G__18077__1;
    G__18077.cljs$core$IFn$_invoke$arity$2 = G__18077__2;
    G__18077.cljs$core$IFn$_invoke$arity$3 = G__18077__3;
    G__18077.cljs$core$IFn$_invoke$arity$variadic = G__18077__4.cljs$core$IFn$_invoke$arity$variadic;
    return G__18077;
  }();
};
cljs.core.partial.cljs$core$IFn$_invoke$arity$variadic = function(f, arg1, arg2, arg3, more) {
  return function() {
    var G__18083__delegate = function(args) {
      return cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, arg1, arg2, arg3, cljs.core.concat.cljs$core$IFn$_invoke$arity$2(more, args));
    };
    var G__18083 = function(var_args) {
      var args = null;
      if (arguments.length > 0) {
        var G__18084__i = 0, G__18084__a = new Array(arguments.length - 0);
        while (G__18084__i < G__18084__a.length) {
          G__18084__a[G__18084__i] = arguments[G__18084__i + 0];
          ++G__18084__i;
        }
        args = new cljs.core.IndexedSeq(G__18084__a, 0);
      }
      return G__18083__delegate.call(this, args);
    };
    G__18083.cljs$lang$maxFixedArity = 0;
    G__18083.cljs$lang$applyTo = function(arglist__18085) {
      var args = cljs.core.seq(arglist__18085);
      return G__18083__delegate(args);
    };
    G__18083.cljs$core$IFn$_invoke$arity$variadic = G__18083__delegate;
    return G__18083;
  }();
};
cljs.core.partial.cljs$lang$applyTo = function(seq18015) {
  var G__18016 = cljs.core.first(seq18015);
  var seq18015__$1 = cljs.core.next(seq18015);
  var G__18017 = cljs.core.first(seq18015__$1);
  var seq18015__$2 = cljs.core.next(seq18015__$1);
  var G__18018 = cljs.core.first(seq18015__$2);
  var seq18015__$3 = cljs.core.next(seq18015__$2);
  var G__18019 = cljs.core.first(seq18015__$3);
  var seq18015__$4 = cljs.core.next(seq18015__$3);
  return cljs.core.partial.cljs$core$IFn$_invoke$arity$variadic(G__18016, G__18017, G__18018, G__18019, seq18015__$4);
};
cljs.core.partial.cljs$lang$maxFixedArity = 4;
cljs.core.fnil = function cljs$core$fnil() {
  var G__18087 = arguments.length;
  switch(G__18087) {
    case 2:
      return cljs.core.fnil.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.fnil.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.fnil.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.fnil.cljs$core$IFn$_invoke$arity$2 = function(f, x) {
  return function() {
    var G__18105 = null;
    var G__18105__1 = function(a) {
      var G__18088 = a == null ? x : a;
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__18088) : f.call(null, G__18088);
    };
    var G__18105__2 = function(a, b) {
      var G__18089 = a == null ? x : a;
      var G__18090 = b;
      return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__18089, G__18090) : f.call(null, G__18089, G__18090);
    };
    var G__18105__3 = function(a, b, c) {
      var G__18091 = a == null ? x : a;
      var G__18092 = b;
      var G__18093 = c;
      return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__18091, G__18092, G__18093) : f.call(null, G__18091, G__18092, G__18093);
    };
    var G__18105__4 = function() {
      var G__18106__delegate = function(a, b, c, ds) {
        return cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, a == null ? x : a, b, c, ds);
      };
      var G__18106 = function(a, b, c, var_args) {
        var ds = null;
        if (arguments.length > 3) {
          var G__18107__i = 0, G__18107__a = new Array(arguments.length - 3);
          while (G__18107__i < G__18107__a.length) {
            G__18107__a[G__18107__i] = arguments[G__18107__i + 3];
            ++G__18107__i;
          }
          ds = new cljs.core.IndexedSeq(G__18107__a, 0);
        }
        return G__18106__delegate.call(this, a, b, c, ds);
      };
      G__18106.cljs$lang$maxFixedArity = 3;
      G__18106.cljs$lang$applyTo = function(arglist__18108) {
        var a = cljs.core.first(arglist__18108);
        arglist__18108 = cljs.core.next(arglist__18108);
        var b = cljs.core.first(arglist__18108);
        arglist__18108 = cljs.core.next(arglist__18108);
        var c = cljs.core.first(arglist__18108);
        var ds = cljs.core.rest(arglist__18108);
        return G__18106__delegate(a, b, c, ds);
      };
      G__18106.cljs$core$IFn$_invoke$arity$variadic = G__18106__delegate;
      return G__18106;
    }();
    G__18105 = function(a, b, c, var_args) {
      var ds = var_args;
      switch(arguments.length) {
        case 1:
          return G__18105__1.call(this, a);
        case 2:
          return G__18105__2.call(this, a, b);
        case 3:
          return G__18105__3.call(this, a, b, c);
        default:
          var G__18109 = null;
          if (arguments.length > 3) {
            var G__18110__i = 0, G__18110__a = new Array(arguments.length - 3);
            while (G__18110__i < G__18110__a.length) {
              G__18110__a[G__18110__i] = arguments[G__18110__i + 3];
              ++G__18110__i;
            }
            G__18109 = new cljs.core.IndexedSeq(G__18110__a, 0);
          }
          return G__18105__4.cljs$core$IFn$_invoke$arity$variadic(a, b, c, G__18109);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__18105.cljs$lang$maxFixedArity = 3;
    G__18105.cljs$lang$applyTo = G__18105__4.cljs$lang$applyTo;
    G__18105.cljs$core$IFn$_invoke$arity$1 = G__18105__1;
    G__18105.cljs$core$IFn$_invoke$arity$2 = G__18105__2;
    G__18105.cljs$core$IFn$_invoke$arity$3 = G__18105__3;
    G__18105.cljs$core$IFn$_invoke$arity$variadic = G__18105__4.cljs$core$IFn$_invoke$arity$variadic;
    return G__18105;
  }();
};
cljs.core.fnil.cljs$core$IFn$_invoke$arity$3 = function(f, x, y) {
  return function() {
    var G__18111 = null;
    var G__18111__2 = function(a, b) {
      var G__18094 = a == null ? x : a;
      var G__18095 = b == null ? y : b;
      return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__18094, G__18095) : f.call(null, G__18094, G__18095);
    };
    var G__18111__3 = function(a, b, c) {
      var G__18096 = a == null ? x : a;
      var G__18097 = b == null ? y : b;
      var G__18098 = c;
      return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__18096, G__18097, G__18098) : f.call(null, G__18096, G__18097, G__18098);
    };
    var G__18111__4 = function() {
      var G__18112__delegate = function(a, b, c, ds) {
        return cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, a == null ? x : a, b == null ? y : b, c, ds);
      };
      var G__18112 = function(a, b, c, var_args) {
        var ds = null;
        if (arguments.length > 3) {
          var G__18113__i = 0, G__18113__a = new Array(arguments.length - 3);
          while (G__18113__i < G__18113__a.length) {
            G__18113__a[G__18113__i] = arguments[G__18113__i + 3];
            ++G__18113__i;
          }
          ds = new cljs.core.IndexedSeq(G__18113__a, 0);
        }
        return G__18112__delegate.call(this, a, b, c, ds);
      };
      G__18112.cljs$lang$maxFixedArity = 3;
      G__18112.cljs$lang$applyTo = function(arglist__18114) {
        var a = cljs.core.first(arglist__18114);
        arglist__18114 = cljs.core.next(arglist__18114);
        var b = cljs.core.first(arglist__18114);
        arglist__18114 = cljs.core.next(arglist__18114);
        var c = cljs.core.first(arglist__18114);
        var ds = cljs.core.rest(arglist__18114);
        return G__18112__delegate(a, b, c, ds);
      };
      G__18112.cljs$core$IFn$_invoke$arity$variadic = G__18112__delegate;
      return G__18112;
    }();
    G__18111 = function(a, b, c, var_args) {
      var ds = var_args;
      switch(arguments.length) {
        case 2:
          return G__18111__2.call(this, a, b);
        case 3:
          return G__18111__3.call(this, a, b, c);
        default:
          var G__18115 = null;
          if (arguments.length > 3) {
            var G__18116__i = 0, G__18116__a = new Array(arguments.length - 3);
            while (G__18116__i < G__18116__a.length) {
              G__18116__a[G__18116__i] = arguments[G__18116__i + 3];
              ++G__18116__i;
            }
            G__18115 = new cljs.core.IndexedSeq(G__18116__a, 0);
          }
          return G__18111__4.cljs$core$IFn$_invoke$arity$variadic(a, b, c, G__18115);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__18111.cljs$lang$maxFixedArity = 3;
    G__18111.cljs$lang$applyTo = G__18111__4.cljs$lang$applyTo;
    G__18111.cljs$core$IFn$_invoke$arity$2 = G__18111__2;
    G__18111.cljs$core$IFn$_invoke$arity$3 = G__18111__3;
    G__18111.cljs$core$IFn$_invoke$arity$variadic = G__18111__4.cljs$core$IFn$_invoke$arity$variadic;
    return G__18111;
  }();
};
cljs.core.fnil.cljs$core$IFn$_invoke$arity$4 = function(f, x, y, z) {
  return function() {
    var G__18117 = null;
    var G__18117__2 = function(a, b) {
      var G__18099 = a == null ? x : a;
      var G__18100 = b == null ? y : b;
      return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__18099, G__18100) : f.call(null, G__18099, G__18100);
    };
    var G__18117__3 = function(a, b, c) {
      var G__18101 = a == null ? x : a;
      var G__18102 = b == null ? y : b;
      var G__18103 = c == null ? z : c;
      return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__18101, G__18102, G__18103) : f.call(null, G__18101, G__18102, G__18103);
    };
    var G__18117__4 = function() {
      var G__18118__delegate = function(a, b, c, ds) {
        return cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, a == null ? x : a, b == null ? y : b, c == null ? z : c, ds);
      };
      var G__18118 = function(a, b, c, var_args) {
        var ds = null;
        if (arguments.length > 3) {
          var G__18119__i = 0, G__18119__a = new Array(arguments.length - 3);
          while (G__18119__i < G__18119__a.length) {
            G__18119__a[G__18119__i] = arguments[G__18119__i + 3];
            ++G__18119__i;
          }
          ds = new cljs.core.IndexedSeq(G__18119__a, 0);
        }
        return G__18118__delegate.call(this, a, b, c, ds);
      };
      G__18118.cljs$lang$maxFixedArity = 3;
      G__18118.cljs$lang$applyTo = function(arglist__18120) {
        var a = cljs.core.first(arglist__18120);
        arglist__18120 = cljs.core.next(arglist__18120);
        var b = cljs.core.first(arglist__18120);
        arglist__18120 = cljs.core.next(arglist__18120);
        var c = cljs.core.first(arglist__18120);
        var ds = cljs.core.rest(arglist__18120);
        return G__18118__delegate(a, b, c, ds);
      };
      G__18118.cljs$core$IFn$_invoke$arity$variadic = G__18118__delegate;
      return G__18118;
    }();
    G__18117 = function(a, b, c, var_args) {
      var ds = var_args;
      switch(arguments.length) {
        case 2:
          return G__18117__2.call(this, a, b);
        case 3:
          return G__18117__3.call(this, a, b, c);
        default:
          var G__18121 = null;
          if (arguments.length > 3) {
            var G__18122__i = 0, G__18122__a = new Array(arguments.length - 3);
            while (G__18122__i < G__18122__a.length) {
              G__18122__a[G__18122__i] = arguments[G__18122__i + 3];
              ++G__18122__i;
            }
            G__18121 = new cljs.core.IndexedSeq(G__18122__a, 0);
          }
          return G__18117__4.cljs$core$IFn$_invoke$arity$variadic(a, b, c, G__18121);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__18117.cljs$lang$maxFixedArity = 3;
    G__18117.cljs$lang$applyTo = G__18117__4.cljs$lang$applyTo;
    G__18117.cljs$core$IFn$_invoke$arity$2 = G__18117__2;
    G__18117.cljs$core$IFn$_invoke$arity$3 = G__18117__3;
    G__18117.cljs$core$IFn$_invoke$arity$variadic = G__18117__4.cljs$core$IFn$_invoke$arity$variadic;
    return G__18117;
  }();
};
cljs.core.fnil.cljs$lang$maxFixedArity = 4;
cljs.core.map_indexed = function cljs$core$map_indexed() {
  var G__18124 = arguments.length;
  switch(G__18124) {
    case 1:
      return cljs.core.map_indexed.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.map_indexed.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.map_indexed.cljs$core$IFn$_invoke$arity$1 = function(f) {
  return function(rf) {
    var i = function() {
      var G__18125 = -1;
      return cljs.core.volatile_BANG_.cljs$core$IFn$_invoke$arity$1 ? cljs.core.volatile_BANG_.cljs$core$IFn$_invoke$arity$1(G__18125) : cljs.core.volatile_BANG_.call(null, G__18125);
    }();
    return function(i) {
      return function() {
        var G__18156 = null;
        var G__18156__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__18156__1 = function(result) {
          var G__18126 = result;
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__18126) : rf.call(null, G__18126);
        };
        var G__18156__2 = function(result, input) {
          var G__18127 = result;
          var G__18128 = function() {
            var G__18129 = cljs.core._vreset_BANG_(i, cljs.core._deref(i) + 1);
            var G__18130 = input;
            return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__18129, G__18130) : f.call(null, G__18129, G__18130);
          }();
          return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__18127, G__18128) : rf.call(null, G__18127, G__18128);
        };
        G__18156 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__18156__0.call(this);
            case 1:
              return G__18156__1.call(this, result);
            case 2:
              return G__18156__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__18156.cljs$core$IFn$_invoke$arity$0 = G__18156__0;
        G__18156.cljs$core$IFn$_invoke$arity$1 = G__18156__1;
        G__18156.cljs$core$IFn$_invoke$arity$2 = G__18156__2;
        return G__18156;
      }();
    }(i);
  };
};
cljs.core.map_indexed.cljs$core$IFn$_invoke$arity$2 = function(f, coll) {
  var mapi = function cljs$core$mapi(idx, coll__$1) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq(coll__$1);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_(s)) {
          var c = cljs.core.chunk_first(s);
          var size = cljs.core.count(c);
          var b = cljs.core.chunk_buffer(size);
          var n__5220__auto___18157 = size;
          var i_18158 = 0;
          while (true) {
            if (i_18158 < n__5220__auto___18157) {
              cljs.core.chunk_append(b, function() {
                var G__18151 = idx + i_18158;
                var G__18152 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c, i_18158);
                return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__18151, G__18152) : f.call(null, G__18151, G__18152);
              }());
              var G__18159 = i_18158 + 1;
              i_18158 = G__18159;
              continue;
            } else {
            }
            break;
          }
          return cljs.core.chunk_cons(cljs.core.chunk(b), cljs$core$mapi(idx + size, cljs.core.chunk_rest(s)));
        } else {
          return cljs.core.cons(function() {
            var G__18153 = idx;
            var G__18154 = cljs.core.first(s);
            return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__18153, G__18154) : f.call(null, G__18153, G__18154);
          }(), cljs$core$mapi(idx + 1, cljs.core.rest(s)));
        }
      } else {
        return null;
      }
    }, null, null);
  };
  return mapi(0, coll);
};
cljs.core.map_indexed.cljs$lang$maxFixedArity = 2;
cljs.core.keep = function cljs$core$keep() {
  var G__18161 = arguments.length;
  switch(G__18161) {
    case 1:
      return cljs.core.keep.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.keep.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.keep.cljs$core$IFn$_invoke$arity$1 = function(f) {
  return function(rf) {
    return function() {
      var G__18169 = null;
      var G__18169__0 = function() {
        return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
      };
      var G__18169__1 = function(result) {
        var G__18162 = result;
        return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__18162) : rf.call(null, G__18162);
      };
      var G__18169__2 = function(result, input) {
        var v = function() {
          var G__18163 = input;
          return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__18163) : f.call(null, G__18163);
        }();
        if (v == null) {
          return result;
        } else {
          var G__18164 = result;
          var G__18165 = v;
          return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__18164, G__18165) : rf.call(null, G__18164, G__18165);
        }
      };
      G__18169 = function(result, input) {
        switch(arguments.length) {
          case 0:
            return G__18169__0.call(this);
          case 1:
            return G__18169__1.call(this, result);
          case 2:
            return G__18169__2.call(this, result, input);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__18169.cljs$core$IFn$_invoke$arity$0 = G__18169__0;
      G__18169.cljs$core$IFn$_invoke$arity$1 = G__18169__1;
      G__18169.cljs$core$IFn$_invoke$arity$2 = G__18169__2;
      return G__18169;
    }();
  };
};
cljs.core.keep.cljs$core$IFn$_invoke$arity$2 = function(f, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4126__auto__ = cljs.core.seq(coll);
    if (temp__4126__auto__) {
      var s = temp__4126__auto__;
      if (cljs.core.chunked_seq_QMARK_(s)) {
        var c = cljs.core.chunk_first(s);
        var size = cljs.core.count(c);
        var b = cljs.core.chunk_buffer(size);
        var n__5220__auto___18170 = size;
        var i_18171 = 0;
        while (true) {
          if (i_18171 < n__5220__auto___18170) {
            var x_18172 = function() {
              var G__18166 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c, i_18171);
              return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__18166) : f.call(null, G__18166);
            }();
            if (x_18172 == null) {
            } else {
              cljs.core.chunk_append(b, x_18172);
            }
            var G__18173 = i_18171 + 1;
            i_18171 = G__18173;
            continue;
          } else {
          }
          break;
        }
        return cljs.core.chunk_cons(cljs.core.chunk(b), cljs.core.keep.cljs$core$IFn$_invoke$arity$2(f, cljs.core.chunk_rest(s)));
      } else {
        var x = function() {
          var G__18167 = cljs.core.first(s);
          return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__18167) : f.call(null, G__18167);
        }();
        if (x == null) {
          return cljs.core.keep.cljs$core$IFn$_invoke$arity$2(f, cljs.core.rest(s));
        } else {
          return cljs.core.cons(x, cljs.core.keep.cljs$core$IFn$_invoke$arity$2(f, cljs.core.rest(s)));
        }
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.keep.cljs$lang$maxFixedArity = 2;
cljs.core.Atom = function(state, meta, validator, watches) {
  this.state = state;
  this.meta = meta;
  this.validator = validator;
  this.watches = watches;
  this.cljs$lang$protocol_mask$partition0$ = 6455296;
  this.cljs$lang$protocol_mask$partition1$ = 16386;
};
cljs.core.Atom.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var G__18174 = this$__$1;
  return goog.getUid(G__18174);
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_notify_watches$arity$3 = function(this$, oldval, newval) {
  var self__ = this;
  var this$__$1 = this;
  var seq__18175 = cljs.core.seq(self__.watches);
  var chunk__18176 = null;
  var count__18177 = 0;
  var i__18178 = 0;
  while (true) {
    if (i__18178 < count__18177) {
      var vec__18179 = chunk__18176.cljs$core$IIndexed$_nth$arity$2(null, i__18178);
      var key = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__18179, 0, null);
      var f = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__18179, 1, null);
      var G__18180_18189 = key;
      var G__18181_18190 = this$__$1;
      var G__18182_18191 = oldval;
      var G__18183_18192 = newval;
      f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(G__18180_18189, G__18181_18190, G__18182_18191, G__18183_18192) : f.call(null, G__18180_18189, G__18181_18190, G__18182_18191, G__18183_18192);
      var G__18193 = seq__18175;
      var G__18194 = chunk__18176;
      var G__18195 = count__18177;
      var G__18196 = i__18178 + 1;
      seq__18175 = G__18193;
      chunk__18176 = G__18194;
      count__18177 = G__18195;
      i__18178 = G__18196;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq(seq__18175);
      if (temp__4126__auto__) {
        var seq__18175__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__18175__$1)) {
          var c__5120__auto__ = cljs.core.chunk_first(seq__18175__$1);
          var G__18197 = cljs.core.chunk_rest(seq__18175__$1);
          var G__18198 = c__5120__auto__;
          var G__18199 = cljs.core.count(c__5120__auto__);
          var G__18200 = 0;
          seq__18175 = G__18197;
          chunk__18176 = G__18198;
          count__18177 = G__18199;
          i__18178 = G__18200;
          continue;
        } else {
          var vec__18184 = cljs.core.first(seq__18175__$1);
          var key = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__18184, 0, null);
          var f = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__18184, 1, null);
          var G__18185_18201 = key;
          var G__18186_18202 = this$__$1;
          var G__18187_18203 = oldval;
          var G__18188_18204 = newval;
          f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(G__18185_18201, G__18186_18202, G__18187_18203, G__18188_18204) : f.call(null, G__18185_18201, G__18186_18202, G__18187_18203, G__18188_18204);
          var G__18205 = cljs.core.next(seq__18175__$1);
          var G__18206 = null;
          var G__18207 = 0;
          var G__18208 = 0;
          seq__18175 = G__18205;
          chunk__18176 = G__18206;
          count__18177 = G__18207;
          i__18178 = G__18208;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_add_watch$arity$3 = function(this$, key, f) {
  var self__ = this;
  var this$__$1 = this;
  this$__$1.watches = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(self__.watches, key, f);
  return this$__$1;
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_remove_watch$arity$2 = function(this$, key) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1.watches = cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(self__.watches, key);
};
cljs.core.Atom.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.meta;
};
cljs.core.Atom.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.state;
};
cljs.core.Atom.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var self__ = this;
  var o__$1 = this;
  return o__$1 === other;
};
cljs.core.Atom.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.Atom.cljs$lang$type = true;
cljs.core.Atom.cljs$lang$ctorStr = "cljs.core/Atom";
cljs.core.Atom.cljs$lang$ctorPrWriter = function(this__4914__auto__, writer__4915__auto__, opt__4916__auto__) {
  return cljs.core._write(writer__4915__auto__, "cljs.core/Atom");
};
cljs.core.__GT_Atom = function cljs$core$__GT_Atom(state, meta, validator, watches) {
  return new cljs.core.Atom(state, meta, validator, watches);
};
cljs.core.atom = function cljs$core$atom() {
  var G__18212 = arguments.length;
  switch(G__18212) {
    case 1:
      return cljs.core.atom.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      var argseq__5386__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0);
      return cljs.core.atom.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5386__auto__);
  }
};
cljs.core.atom.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return new cljs.core.Atom(x, null, null, null);
};
cljs.core.atom.cljs$core$IFn$_invoke$arity$variadic = function(x, p__18213) {
  var map__18214 = p__18213;
  var map__18214__$1 = cljs.core.seq_QMARK_(map__18214) ? cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map, map__18214) : map__18214;
  var validator = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__18214__$1, new cljs.core.Keyword(null, "validator", "validator", -1966190681));
  var meta = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__18214__$1, new cljs.core.Keyword(null, "meta", "meta", 1499536964));
  return new cljs.core.Atom(x, meta, validator, null);
};
cljs.core.atom.cljs$lang$applyTo = function(seq18209) {
  var G__18210 = cljs.core.first(seq18209);
  var seq18209__$1 = cljs.core.next(seq18209);
  return cljs.core.atom.cljs$core$IFn$_invoke$arity$variadic(G__18210, seq18209__$1);
};
cljs.core.atom.cljs$lang$maxFixedArity = 1;
cljs.core.reset_BANG_ = function cljs$core$reset_BANG_(a, new_value) {
  if (a instanceof cljs.core.Atom) {
    var validate = a.validator;
    if (validate == null) {
    } else {
      if (cljs.core.truth_(function() {
        var G__18218 = new_value;
        return validate.cljs$core$IFn$_invoke$arity$1 ? validate.cljs$core$IFn$_invoke$arity$1(G__18218) : validate.call(null, G__18218);
      }())) {
      } else {
        throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("Validator rejected reference state"), cljs.core.str("\n"), cljs.core.str(function() {
          var G__18219 = cljs.core.list(new cljs.core.Symbol(null, "validate", "validate", 1439230700, null), new cljs.core.Symbol(null, "new-value", "new-value", -1567397401, null));
          return cljs.core.pr_str.cljs$core$IFn$_invoke$arity$1 ? cljs.core.pr_str.cljs$core$IFn$_invoke$arity$1(G__18219) : cljs.core.pr_str.call(null, G__18219);
        }())].join(""));
      }
    }
    var old_value = a.state;
    a.state = new_value;
    if (a.watches == null) {
    } else {
      cljs.core._notify_watches(a, old_value, new_value);
    }
    return new_value;
  } else {
    return cljs.core._reset_BANG_(a, new_value);
  }
};
cljs.core.swap_BANG_ = function cljs$core$swap_BANG_() {
  var G__18226 = arguments.length;
  switch(G__18226) {
    case 2:
      return cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      var argseq__5386__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 4), 0);
      return cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], arguments[3], argseq__5386__auto__);
  }
};
cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2 = function(a, f) {
  if (a instanceof cljs.core.Atom) {
    return cljs.core.reset_BANG_(a, function() {
      var G__18227 = a.state;
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__18227) : f.call(null, G__18227);
    }());
  } else {
    return cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$2(a, f);
  }
};
cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3 = function(a, f, x) {
  if (a instanceof cljs.core.Atom) {
    return cljs.core.reset_BANG_(a, function() {
      var G__18228 = a.state;
      var G__18229 = x;
      return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__18228, G__18229) : f.call(null, G__18228, G__18229);
    }());
  } else {
    return cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$3(a, f, x);
  }
};
cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4 = function(a, f, x, y) {
  if (a instanceof cljs.core.Atom) {
    return cljs.core.reset_BANG_(a, function() {
      var G__18230 = a.state;
      var G__18231 = x;
      var G__18232 = y;
      return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__18230, G__18231, G__18232) : f.call(null, G__18230, G__18231, G__18232);
    }());
  } else {
    return cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$4(a, f, x, y);
  }
};
cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(a, f, x, y, more) {
  if (a instanceof cljs.core.Atom) {
    return cljs.core.reset_BANG_(a, cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, a.state, x, y, more));
  } else {
    return cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$5(a, f, x, y, more);
  }
};
cljs.core.swap_BANG_.cljs$lang$applyTo = function(seq18220) {
  var G__18221 = cljs.core.first(seq18220);
  var seq18220__$1 = cljs.core.next(seq18220);
  var G__18222 = cljs.core.first(seq18220__$1);
  var seq18220__$2 = cljs.core.next(seq18220__$1);
  var G__18223 = cljs.core.first(seq18220__$2);
  var seq18220__$3 = cljs.core.next(seq18220__$2);
  var G__18224 = cljs.core.first(seq18220__$3);
  var seq18220__$4 = cljs.core.next(seq18220__$3);
  return cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$variadic(G__18221, G__18222, G__18223, G__18224, seq18220__$4);
};
cljs.core.swap_BANG_.cljs$lang$maxFixedArity = 4;
cljs.core.compare_and_set_BANG_ = function cljs$core$compare_and_set_BANG_(a, oldval, newval) {
  if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(a.cljs$core$IDeref$_deref$arity$1(null), oldval)) {
    cljs.core.reset_BANG_(a, newval);
    return true;
  } else {
    return false;
  }
};
cljs.core.set_validator_BANG_ = function cljs$core$set_validator_BANG_(iref, val) {
  return iref.validator = val;
};
cljs.core.get_validator = function cljs$core$get_validator(iref) {
  return iref.validator;
};
cljs.core.Volatile = function(state) {
  this.state = state;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32768;
};
cljs.core.Volatile.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.state;
};
cljs.core.Volatile.prototype.cljs$core$IVolatile$ = true;
cljs.core.Volatile.prototype.cljs$core$IVolatile$_vreset_BANG_$arity$2 = function(_, new_state) {
  var self__ = this;
  var ___$1 = this;
  return self__.state = new_state;
};
cljs.core.Volatile.cljs$lang$type = true;
cljs.core.Volatile.cljs$lang$ctorStr = "cljs.core/Volatile";
cljs.core.Volatile.cljs$lang$ctorPrWriter = function(this__4914__auto__, writer__4915__auto__, opt__4916__auto__) {
  return cljs.core._write(writer__4915__auto__, "cljs.core/Volatile");
};
cljs.core.__GT_Volatile = function cljs$core$__GT_Volatile(state) {
  return new cljs.core.Volatile(state);
};
cljs.core.volatile_BANG_ = function cljs$core$volatile_BANG_(val) {
  return new cljs.core.Volatile(val);
};
cljs.core.volatile_QMARK_ = function cljs$core$volatile_QMARK_(x) {
  return x instanceof cljs.core.Volatile;
};
cljs.core.vreset_BANG_ = function cljs$core$vreset_BANG_(vol, newval) {
  return cljs.core._vreset_BANG_(vol, newval);
};
cljs.core.keep_indexed = function cljs$core$keep_indexed() {
  var G__18235 = arguments.length;
  switch(G__18235) {
    case 1:
      return cljs.core.keep_indexed.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.keep_indexed.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.keep_indexed.cljs$core$IFn$_invoke$arity$1 = function(f) {
  return function(rf) {
    var ia = cljs.core.volatile_BANG_(-1);
    return function(ia) {
      return function() {
        var G__18270 = null;
        var G__18270__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__18270__1 = function(result) {
          var G__18236 = result;
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__18236) : rf.call(null, G__18236);
        };
        var G__18270__2 = function(result, input) {
          var i = cljs.core._vreset_BANG_(ia, cljs.core._deref(ia) + 1);
          var v = function() {
            var G__18237 = i;
            var G__18238 = input;
            return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__18237, G__18238) : f.call(null, G__18237, G__18238);
          }();
          if (v == null) {
            return result;
          } else {
            var G__18239 = result;
            var G__18240 = v;
            return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__18239, G__18240) : rf.call(null, G__18239, G__18240);
          }
        };
        G__18270 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__18270__0.call(this);
            case 1:
              return G__18270__1.call(this, result);
            case 2:
              return G__18270__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__18270.cljs$core$IFn$_invoke$arity$0 = G__18270__0;
        G__18270.cljs$core$IFn$_invoke$arity$1 = G__18270__1;
        G__18270.cljs$core$IFn$_invoke$arity$2 = G__18270__2;
        return G__18270;
      }();
    }(ia);
  };
};
cljs.core.keep_indexed.cljs$core$IFn$_invoke$arity$2 = function(f, coll) {
  var keepi = function cljs$core$keepi(idx, coll__$1) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq(coll__$1);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_(s)) {
          var c = cljs.core.chunk_first(s);
          var size = cljs.core.count(c);
          var b = cljs.core.chunk_buffer(size);
          var n__5220__auto___18271 = size;
          var i_18272 = 0;
          while (true) {
            if (i_18272 < n__5220__auto___18271) {
              var x_18273 = function() {
                var G__18265 = idx + i_18272;
                var G__18266 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c, i_18272);
                return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__18265, G__18266) : f.call(null, G__18265, G__18266);
              }();
              if (x_18273 == null) {
              } else {
                cljs.core.chunk_append(b, x_18273);
              }
              var G__18274 = i_18272 + 1;
              i_18272 = G__18274;
              continue;
            } else {
            }
            break;
          }
          return cljs.core.chunk_cons(cljs.core.chunk(b), cljs$core$keepi(idx + size, cljs.core.chunk_rest(s)));
        } else {
          var x = function() {
            var G__18267 = idx;
            var G__18268 = cljs.core.first(s);
            return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__18267, G__18268) : f.call(null, G__18267, G__18268);
          }();
          if (x == null) {
            return cljs$core$keepi(idx + 1, cljs.core.rest(s));
          } else {
            return cljs.core.cons(x, cljs$core$keepi(idx + 1, cljs.core.rest(s)));
          }
        }
      } else {
        return null;
      }
    }, null, null);
  };
  return keepi(0, coll);
};
cljs.core.keep_indexed.cljs$lang$maxFixedArity = 2;
cljs.core.every_pred = function cljs$core$every_pred() {
  var G__18286 = arguments.length;
  switch(G__18286) {
    case 1:
      return cljs.core.every_pred.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.every_pred.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.every_pred.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      var argseq__5386__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 3), 0);
      return cljs.core.every_pred.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__5386__auto__);
  }
};
cljs.core.every_pred.cljs$core$IFn$_invoke$arity$1 = function(p) {
  return function() {
    var cljs$core$ep1 = null;
    var cljs$core$ep1__0 = function() {
      return true;
    };
    var cljs$core$ep1__1 = function(x) {
      return cljs.core.boolean$(function() {
        var G__18302 = x;
        return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(G__18302) : p.call(null, G__18302);
      }());
    };
    var cljs$core$ep1__2 = function(x, y) {
      return cljs.core.boolean$(function() {
        var and__4323__auto__ = function() {
          var G__18304 = x;
          return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(G__18304) : p.call(null, G__18304);
        }();
        if (cljs.core.truth_(and__4323__auto__)) {
          var G__18305 = y;
          return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(G__18305) : p.call(null, G__18305);
        } else {
          return and__4323__auto__;
        }
      }());
    };
    var cljs$core$ep1__3 = function(x, y, z) {
      return cljs.core.boolean$(function() {
        var and__4323__auto__ = function() {
          var G__18307 = x;
          return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(G__18307) : p.call(null, G__18307);
        }();
        if (cljs.core.truth_(and__4323__auto__)) {
          var and__4323__auto____$1 = function() {
            var G__18309 = y;
            return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(G__18309) : p.call(null, G__18309);
          }();
          if (cljs.core.truth_(and__4323__auto____$1)) {
            var G__18310 = z;
            return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(G__18310) : p.call(null, G__18310);
          } else {
            return and__4323__auto____$1;
          }
        } else {
          return and__4323__auto__;
        }
      }());
    };
    var cljs$core$ep1__4 = function() {
      var G__18472__delegate = function(x, y, z, args) {
        return cljs.core.boolean$(function() {
          var and__4323__auto__ = cljs$core$ep1.cljs$core$IFn$_invoke$arity$3(x, y, z);
          if (cljs.core.truth_(and__4323__auto__)) {
            return cljs.core.every_QMARK_(p, args);
          } else {
            return and__4323__auto__;
          }
        }());
      };
      var G__18472 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__18473__i = 0, G__18473__a = new Array(arguments.length - 3);
          while (G__18473__i < G__18473__a.length) {
            G__18473__a[G__18473__i] = arguments[G__18473__i + 3];
            ++G__18473__i;
          }
          args = new cljs.core.IndexedSeq(G__18473__a, 0);
        }
        return G__18472__delegate.call(this, x, y, z, args);
      };
      G__18472.cljs$lang$maxFixedArity = 3;
      G__18472.cljs$lang$applyTo = function(arglist__18474) {
        var x = cljs.core.first(arglist__18474);
        arglist__18474 = cljs.core.next(arglist__18474);
        var y = cljs.core.first(arglist__18474);
        arglist__18474 = cljs.core.next(arglist__18474);
        var z = cljs.core.first(arglist__18474);
        var args = cljs.core.rest(arglist__18474);
        return G__18472__delegate(x, y, z, args);
      };
      G__18472.cljs$core$IFn$_invoke$arity$variadic = G__18472__delegate;
      return G__18472;
    }();
    cljs$core$ep1 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return cljs$core$ep1__0.call(this);
        case 1:
          return cljs$core$ep1__1.call(this, x);
        case 2:
          return cljs$core$ep1__2.call(this, x, y);
        case 3:
          return cljs$core$ep1__3.call(this, x, y, z);
        default:
          var G__18475 = null;
          if (arguments.length > 3) {
            var G__18476__i = 0, G__18476__a = new Array(arguments.length - 3);
            while (G__18476__i < G__18476__a.length) {
              G__18476__a[G__18476__i] = arguments[G__18476__i + 3];
              ++G__18476__i;
            }
            G__18475 = new cljs.core.IndexedSeq(G__18476__a, 0);
          }
          return cljs$core$ep1__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__18475);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    cljs$core$ep1.cljs$lang$maxFixedArity = 3;
    cljs$core$ep1.cljs$lang$applyTo = cljs$core$ep1__4.cljs$lang$applyTo;
    cljs$core$ep1.cljs$core$IFn$_invoke$arity$0 = cljs$core$ep1__0;
    cljs$core$ep1.cljs$core$IFn$_invoke$arity$1 = cljs$core$ep1__1;
    cljs$core$ep1.cljs$core$IFn$_invoke$arity$2 = cljs$core$ep1__2;
    cljs$core$ep1.cljs$core$IFn$_invoke$arity$3 = cljs$core$ep1__3;
    cljs$core$ep1.cljs$core$IFn$_invoke$arity$variadic = cljs$core$ep1__4.cljs$core$IFn$_invoke$arity$variadic;
    return cljs$core$ep1;
  }();
};
cljs.core.every_pred.cljs$core$IFn$_invoke$arity$2 = function(p1, p2) {
  return function() {
    var cljs$core$ep2 = null;
    var cljs$core$ep2__0 = function() {
      return true;
    };
    var cljs$core$ep2__1 = function(x) {
      return cljs.core.boolean$(function() {
        var and__4323__auto__ = function() {
          var G__18342 = x;
          return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__18342) : p1.call(null, G__18342);
        }();
        if (cljs.core.truth_(and__4323__auto__)) {
          var G__18343 = x;
          return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__18343) : p2.call(null, G__18343);
        } else {
          return and__4323__auto__;
        }
      }());
    };
    var cljs$core$ep2__2 = function(x, y) {
      return cljs.core.boolean$(function() {
        var and__4323__auto__ = function() {
          var G__18345 = x;
          return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__18345) : p1.call(null, G__18345);
        }();
        if (cljs.core.truth_(and__4323__auto__)) {
          var and__4323__auto____$1 = function() {
            var G__18347 = y;
            return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__18347) : p1.call(null, G__18347);
          }();
          if (cljs.core.truth_(and__4323__auto____$1)) {
            var and__4323__auto____$2 = function() {
              var G__18349 = x;
              return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__18349) : p2.call(null, G__18349);
            }();
            if (cljs.core.truth_(and__4323__auto____$2)) {
              var G__18350 = y;
              return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__18350) : p2.call(null, G__18350);
            } else {
              return and__4323__auto____$2;
            }
          } else {
            return and__4323__auto____$1;
          }
        } else {
          return and__4323__auto__;
        }
      }());
    };
    var cljs$core$ep2__3 = function(x, y, z) {
      return cljs.core.boolean$(function() {
        var and__4323__auto__ = function() {
          var G__18352 = x;
          return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__18352) : p1.call(null, G__18352);
        }();
        if (cljs.core.truth_(and__4323__auto__)) {
          var and__4323__auto____$1 = function() {
            var G__18354 = y;
            return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__18354) : p1.call(null, G__18354);
          }();
          if (cljs.core.truth_(and__4323__auto____$1)) {
            var and__4323__auto____$2 = function() {
              var G__18356 = z;
              return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__18356) : p1.call(null, G__18356);
            }();
            if (cljs.core.truth_(and__4323__auto____$2)) {
              var and__4323__auto____$3 = function() {
                var G__18358 = x;
                return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__18358) : p2.call(null, G__18358);
              }();
              if (cljs.core.truth_(and__4323__auto____$3)) {
                var and__4323__auto____$4 = function() {
                  var G__18360 = y;
                  return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__18360) : p2.call(null, G__18360);
                }();
                if (cljs.core.truth_(and__4323__auto____$4)) {
                  var G__18361 = z;
                  return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__18361) : p2.call(null, G__18361);
                } else {
                  return and__4323__auto____$4;
                }
              } else {
                return and__4323__auto____$3;
              }
            } else {
              return and__4323__auto____$2;
            }
          } else {
            return and__4323__auto____$1;
          }
        } else {
          return and__4323__auto__;
        }
      }());
    };
    var cljs$core$ep2__4 = function() {
      var G__18477__delegate = function(x, y, z, args) {
        return cljs.core.boolean$(function() {
          var and__4323__auto__ = cljs$core$ep2.cljs$core$IFn$_invoke$arity$3(x, y, z);
          if (cljs.core.truth_(and__4323__auto__)) {
            return cljs.core.every_QMARK_(function(and__4323__auto__) {
              return function(p1__18275_SHARP_) {
                var and__4323__auto____$1 = function() {
                  var G__18363 = p1__18275_SHARP_;
                  return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__18363) : p1.call(null, G__18363);
                }();
                if (cljs.core.truth_(and__4323__auto____$1)) {
                  var G__18364 = p1__18275_SHARP_;
                  return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__18364) : p2.call(null, G__18364);
                } else {
                  return and__4323__auto____$1;
                }
              };
            }(and__4323__auto__), args);
          } else {
            return and__4323__auto__;
          }
        }());
      };
      var G__18477 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__18478__i = 0, G__18478__a = new Array(arguments.length - 3);
          while (G__18478__i < G__18478__a.length) {
            G__18478__a[G__18478__i] = arguments[G__18478__i + 3];
            ++G__18478__i;
          }
          args = new cljs.core.IndexedSeq(G__18478__a, 0);
        }
        return G__18477__delegate.call(this, x, y, z, args);
      };
      G__18477.cljs$lang$maxFixedArity = 3;
      G__18477.cljs$lang$applyTo = function(arglist__18479) {
        var x = cljs.core.first(arglist__18479);
        arglist__18479 = cljs.core.next(arglist__18479);
        var y = cljs.core.first(arglist__18479);
        arglist__18479 = cljs.core.next(arglist__18479);
        var z = cljs.core.first(arglist__18479);
        var args = cljs.core.rest(arglist__18479);
        return G__18477__delegate(x, y, z, args);
      };
      G__18477.cljs$core$IFn$_invoke$arity$variadic = G__18477__delegate;
      return G__18477;
    }();
    cljs$core$ep2 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return cljs$core$ep2__0.call(this);
        case 1:
          return cljs$core$ep2__1.call(this, x);
        case 2:
          return cljs$core$ep2__2.call(this, x, y);
        case 3:
          return cljs$core$ep2__3.call(this, x, y, z);
        default:
          var G__18480 = null;
          if (arguments.length > 3) {
            var G__18481__i = 0, G__18481__a = new Array(arguments.length - 3);
            while (G__18481__i < G__18481__a.length) {
              G__18481__a[G__18481__i] = arguments[G__18481__i + 3];
              ++G__18481__i;
            }
            G__18480 = new cljs.core.IndexedSeq(G__18481__a, 0);
          }
          return cljs$core$ep2__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__18480);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    cljs$core$ep2.cljs$lang$maxFixedArity = 3;
    cljs$core$ep2.cljs$lang$applyTo = cljs$core$ep2__4.cljs$lang$applyTo;
    cljs$core$ep2.cljs$core$IFn$_invoke$arity$0 = cljs$core$ep2__0;
    cljs$core$ep2.cljs$core$IFn$_invoke$arity$1 = cljs$core$ep2__1;
    cljs$core$ep2.cljs$core$IFn$_invoke$arity$2 = cljs$core$ep2__2;
    cljs$core$ep2.cljs$core$IFn$_invoke$arity$3 = cljs$core$ep2__3;
    cljs$core$ep2.cljs$core$IFn$_invoke$arity$variadic = cljs$core$ep2__4.cljs$core$IFn$_invoke$arity$variadic;
    return cljs$core$ep2;
  }();
};
cljs.core.every_pred.cljs$core$IFn$_invoke$arity$3 = function(p1, p2, p3) {
  return function() {
    var cljs$core$ep3 = null;
    var cljs$core$ep3__0 = function() {
      return true;
    };
    var cljs$core$ep3__1 = function(x) {
      return cljs.core.boolean$(function() {
        var and__4323__auto__ = function() {
          var G__18410 = x;
          return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__18410) : p1.call(null, G__18410);
        }();
        if (cljs.core.truth_(and__4323__auto__)) {
          var and__4323__auto____$1 = function() {
            var G__18412 = x;
            return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__18412) : p2.call(null, G__18412);
          }();
          if (cljs.core.truth_(and__4323__auto____$1)) {
            var G__18413 = x;
            return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__18413) : p3.call(null, G__18413);
          } else {
            return and__4323__auto____$1;
          }
        } else {
          return and__4323__auto__;
        }
      }());
    };
    var cljs$core$ep3__2 = function(x, y) {
      return cljs.core.boolean$(function() {
        var and__4323__auto__ = function() {
          var G__18415 = x;
          return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__18415) : p1.call(null, G__18415);
        }();
        if (cljs.core.truth_(and__4323__auto__)) {
          var and__4323__auto____$1 = function() {
            var G__18417 = x;
            return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__18417) : p2.call(null, G__18417);
          }();
          if (cljs.core.truth_(and__4323__auto____$1)) {
            var and__4323__auto____$2 = function() {
              var G__18419 = x;
              return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__18419) : p3.call(null, G__18419);
            }();
            if (cljs.core.truth_(and__4323__auto____$2)) {
              var and__4323__auto____$3 = function() {
                var G__18421 = y;
                return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__18421) : p1.call(null, G__18421);
              }();
              if (cljs.core.truth_(and__4323__auto____$3)) {
                var and__4323__auto____$4 = function() {
                  var G__18423 = y;
                  return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__18423) : p2.call(null, G__18423);
                }();
                if (cljs.core.truth_(and__4323__auto____$4)) {
                  var G__18424 = y;
                  return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__18424) : p3.call(null, G__18424);
                } else {
                  return and__4323__auto____$4;
                }
              } else {
                return and__4323__auto____$3;
              }
            } else {
              return and__4323__auto____$2;
            }
          } else {
            return and__4323__auto____$1;
          }
        } else {
          return and__4323__auto__;
        }
      }());
    };
    var cljs$core$ep3__3 = function(x, y, z) {
      return cljs.core.boolean$(function() {
        var and__4323__auto__ = function() {
          var G__18426 = x;
          return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__18426) : p1.call(null, G__18426);
        }();
        if (cljs.core.truth_(and__4323__auto__)) {
          var and__4323__auto____$1 = function() {
            var G__18428 = x;
            return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__18428) : p2.call(null, G__18428);
          }();
          if (cljs.core.truth_(and__4323__auto____$1)) {
            var and__4323__auto____$2 = function() {
              var G__18430 = x;
              return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__18430) : p3.call(null, G__18430);
            }();
            if (cljs.core.truth_(and__4323__auto____$2)) {
              var and__4323__auto____$3 = function() {
                var G__18432 = y;
                return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__18432) : p1.call(null, G__18432);
              }();
              if (cljs.core.truth_(and__4323__auto____$3)) {
                var and__4323__auto____$4 = function() {
                  var G__18434 = y;
                  return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__18434) : p2.call(null, G__18434);
                }();
                if (cljs.core.truth_(and__4323__auto____$4)) {
                  var and__4323__auto____$5 = function() {
                    var G__18436 = y;
                    return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__18436) : p3.call(null, G__18436);
                  }();
                  if (cljs.core.truth_(and__4323__auto____$5)) {
                    var and__4323__auto____$6 = function() {
                      var G__18438 = z;
                      return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__18438) : p1.call(null, G__18438);
                    }();
                    if (cljs.core.truth_(and__4323__auto____$6)) {
                      var and__4323__auto____$7 = function() {
                        var G__18440 = z;
                        return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__18440) : p2.call(null, G__18440);
                      }();
                      if (cljs.core.truth_(and__4323__auto____$7)) {
                        var G__18441 = z;
                        return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__18441) : p3.call(null, G__18441);
                      } else {
                        return and__4323__auto____$7;
                      }
                    } else {
                      return and__4323__auto____$6;
                    }
                  } else {
                    return and__4323__auto____$5;
                  }
                } else {
                  return and__4323__auto____$4;
                }
              } else {
                return and__4323__auto____$3;
              }
            } else {
              return and__4323__auto____$2;
            }
          } else {
            return and__4323__auto____$1;
          }
        } else {
          return and__4323__auto__;
        }
      }());
    };
    var cljs$core$ep3__4 = function() {
      var G__18482__delegate = function(x, y, z, args) {
        return cljs.core.boolean$(function() {
          var and__4323__auto__ = cljs$core$ep3.cljs$core$IFn$_invoke$arity$3(x, y, z);
          if (cljs.core.truth_(and__4323__auto__)) {
            return cljs.core.every_QMARK_(function(and__4323__auto__) {
              return function(p1__18276_SHARP_) {
                var and__4323__auto____$1 = function() {
                  var G__18443 = p1__18276_SHARP_;
                  return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__18443) : p1.call(null, G__18443);
                }();
                if (cljs.core.truth_(and__4323__auto____$1)) {
                  var and__4323__auto____$2 = function() {
                    var G__18445 = p1__18276_SHARP_;
                    return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__18445) : p2.call(null, G__18445);
                  }();
                  if (cljs.core.truth_(and__4323__auto____$2)) {
                    var G__18446 = p1__18276_SHARP_;
                    return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__18446) : p3.call(null, G__18446);
                  } else {
                    return and__4323__auto____$2;
                  }
                } else {
                  return and__4323__auto____$1;
                }
              };
            }(and__4323__auto__), args);
          } else {
            return and__4323__auto__;
          }
        }());
      };
      var G__18482 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__18483__i = 0, G__18483__a = new Array(arguments.length - 3);
          while (G__18483__i < G__18483__a.length) {
            G__18483__a[G__18483__i] = arguments[G__18483__i + 3];
            ++G__18483__i;
          }
          args = new cljs.core.IndexedSeq(G__18483__a, 0);
        }
        return G__18482__delegate.call(this, x, y, z, args);
      };
      G__18482.cljs$lang$maxFixedArity = 3;
      G__18482.cljs$lang$applyTo = function(arglist__18484) {
        var x = cljs.core.first(arglist__18484);
        arglist__18484 = cljs.core.next(arglist__18484);
        var y = cljs.core.first(arglist__18484);
        arglist__18484 = cljs.core.next(arglist__18484);
        var z = cljs.core.first(arglist__18484);
        var args = cljs.core.rest(arglist__18484);
        return G__18482__delegate(x, y, z, args);
      };
      G__18482.cljs$core$IFn$_invoke$arity$variadic = G__18482__delegate;
      return G__18482;
    }();
    cljs$core$ep3 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return cljs$core$ep3__0.call(this);
        case 1:
          return cljs$core$ep3__1.call(this, x);
        case 2:
          return cljs$core$ep3__2.call(this, x, y);
        case 3:
          return cljs$core$ep3__3.call(this, x, y, z);
        default:
          var G__18485 = null;
          if (arguments.length > 3) {
            var G__18486__i = 0, G__18486__a = new Array(arguments.length - 3);
            while (G__18486__i < G__18486__a.length) {
              G__18486__a[G__18486__i] = arguments[G__18486__i + 3];
              ++G__18486__i;
            }
            G__18485 = new cljs.core.IndexedSeq(G__18486__a, 0);
          }
          return cljs$core$ep3__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__18485);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    cljs$core$ep3.cljs$lang$maxFixedArity = 3;
    cljs$core$ep3.cljs$lang$applyTo = cljs$core$ep3__4.cljs$lang$applyTo;
    cljs$core$ep3.cljs$core$IFn$_invoke$arity$0 = cljs$core$ep3__0;
    cljs$core$ep3.cljs$core$IFn$_invoke$arity$1 = cljs$core$ep3__1;
    cljs$core$ep3.cljs$core$IFn$_invoke$arity$2 = cljs$core$ep3__2;
    cljs$core$ep3.cljs$core$IFn$_invoke$arity$3 = cljs$core$ep3__3;
    cljs$core$ep3.cljs$core$IFn$_invoke$arity$variadic = cljs$core$ep3__4.cljs$core$IFn$_invoke$arity$variadic;
    return cljs$core$ep3;
  }();
};
cljs.core.every_pred.cljs$core$IFn$_invoke$arity$variadic = function(p1, p2, p3, ps) {
  var ps__$1 = cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$4(p1, p2, p3, ps);
  return function(ps__$1) {
    return function() {
      var cljs$core$epn = null;
      var cljs$core$epn__0 = function() {
        return true;
      };
      var cljs$core$epn__1 = function(x) {
        return cljs.core.every_QMARK_(function(ps__$1) {
          return function(p1__18277_SHARP_) {
            var G__18462 = x;
            return p1__18277_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__18277_SHARP_.cljs$core$IFn$_invoke$arity$1(G__18462) : p1__18277_SHARP_.call(null, G__18462);
          };
        }(ps__$1), ps__$1);
      };
      var cljs$core$epn__2 = function(x, y) {
        return cljs.core.every_QMARK_(function(ps__$1) {
          return function(p1__18278_SHARP_) {
            var and__4323__auto__ = function() {
              var G__18464 = x;
              return p1__18278_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__18278_SHARP_.cljs$core$IFn$_invoke$arity$1(G__18464) : p1__18278_SHARP_.call(null, G__18464);
            }();
            if (cljs.core.truth_(and__4323__auto__)) {
              var G__18465 = y;
              return p1__18278_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__18278_SHARP_.cljs$core$IFn$_invoke$arity$1(G__18465) : p1__18278_SHARP_.call(null, G__18465);
            } else {
              return and__4323__auto__;
            }
          };
        }(ps__$1), ps__$1);
      };
      var cljs$core$epn__3 = function(x, y, z) {
        return cljs.core.every_QMARK_(function(ps__$1) {
          return function(p1__18279_SHARP_) {
            var and__4323__auto__ = function() {
              var G__18467 = x;
              return p1__18279_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__18279_SHARP_.cljs$core$IFn$_invoke$arity$1(G__18467) : p1__18279_SHARP_.call(null, G__18467);
            }();
            if (cljs.core.truth_(and__4323__auto__)) {
              var and__4323__auto____$1 = function() {
                var G__18469 = y;
                return p1__18279_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__18279_SHARP_.cljs$core$IFn$_invoke$arity$1(G__18469) : p1__18279_SHARP_.call(null, G__18469);
              }();
              if (cljs.core.truth_(and__4323__auto____$1)) {
                var G__18470 = z;
                return p1__18279_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__18279_SHARP_.cljs$core$IFn$_invoke$arity$1(G__18470) : p1__18279_SHARP_.call(null, G__18470);
              } else {
                return and__4323__auto____$1;
              }
            } else {
              return and__4323__auto__;
            }
          };
        }(ps__$1), ps__$1);
      };
      var cljs$core$epn__4 = function() {
        var G__18487__delegate = function(x, y, z, args) {
          return cljs.core.boolean$(function() {
            var and__4323__auto__ = cljs$core$epn.cljs$core$IFn$_invoke$arity$3(x, y, z);
            if (cljs.core.truth_(and__4323__auto__)) {
              return cljs.core.every_QMARK_(function(and__4323__auto__, ps__$1) {
                return function(p1__18280_SHARP_) {
                  return cljs.core.every_QMARK_(p1__18280_SHARP_, args);
                };
              }(and__4323__auto__, ps__$1), ps__$1);
            } else {
              return and__4323__auto__;
            }
          }());
        };
        var G__18487 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            var G__18488__i = 0, G__18488__a = new Array(arguments.length - 3);
            while (G__18488__i < G__18488__a.length) {
              G__18488__a[G__18488__i] = arguments[G__18488__i + 3];
              ++G__18488__i;
            }
            args = new cljs.core.IndexedSeq(G__18488__a, 0);
          }
          return G__18487__delegate.call(this, x, y, z, args);
        };
        G__18487.cljs$lang$maxFixedArity = 3;
        G__18487.cljs$lang$applyTo = function(arglist__18489) {
          var x = cljs.core.first(arglist__18489);
          arglist__18489 = cljs.core.next(arglist__18489);
          var y = cljs.core.first(arglist__18489);
          arglist__18489 = cljs.core.next(arglist__18489);
          var z = cljs.core.first(arglist__18489);
          var args = cljs.core.rest(arglist__18489);
          return G__18487__delegate(x, y, z, args);
        };
        G__18487.cljs$core$IFn$_invoke$arity$variadic = G__18487__delegate;
        return G__18487;
      }();
      cljs$core$epn = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return cljs$core$epn__0.call(this);
          case 1:
            return cljs$core$epn__1.call(this, x);
          case 2:
            return cljs$core$epn__2.call(this, x, y);
          case 3:
            return cljs$core$epn__3.call(this, x, y, z);
          default:
            var G__18490 = null;
            if (arguments.length > 3) {
              var G__18491__i = 0, G__18491__a = new Array(arguments.length - 3);
              while (G__18491__i < G__18491__a.length) {
                G__18491__a[G__18491__i] = arguments[G__18491__i + 3];
                ++G__18491__i;
              }
              G__18490 = new cljs.core.IndexedSeq(G__18491__a, 0);
            }
            return cljs$core$epn__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__18490);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      cljs$core$epn.cljs$lang$maxFixedArity = 3;
      cljs$core$epn.cljs$lang$applyTo = cljs$core$epn__4.cljs$lang$applyTo;
      cljs$core$epn.cljs$core$IFn$_invoke$arity$0 = cljs$core$epn__0;
      cljs$core$epn.cljs$core$IFn$_invoke$arity$1 = cljs$core$epn__1;
      cljs$core$epn.cljs$core$IFn$_invoke$arity$2 = cljs$core$epn__2;
      cljs$core$epn.cljs$core$IFn$_invoke$arity$3 = cljs$core$epn__3;
      cljs$core$epn.cljs$core$IFn$_invoke$arity$variadic = cljs$core$epn__4.cljs$core$IFn$_invoke$arity$variadic;
      return cljs$core$epn;
    }();
  }(ps__$1);
};
cljs.core.every_pred.cljs$lang$applyTo = function(seq18281) {
  var G__18282 = cljs.core.first(seq18281);
  var seq18281__$1 = cljs.core.next(seq18281);
  var G__18283 = cljs.core.first(seq18281__$1);
  var seq18281__$2 = cljs.core.next(seq18281__$1);
  var G__18284 = cljs.core.first(seq18281__$2);
  var seq18281__$3 = cljs.core.next(seq18281__$2);
  return cljs.core.every_pred.cljs$core$IFn$_invoke$arity$variadic(G__18282, G__18283, G__18284, seq18281__$3);
};
cljs.core.every_pred.cljs$lang$maxFixedArity = 3;
cljs.core.some_fn = function cljs$core$some_fn() {
  var G__18503 = arguments.length;
  switch(G__18503) {
    case 1:
      return cljs.core.some_fn.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.some_fn.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.some_fn.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      var argseq__5386__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 3), 0);
      return cljs.core.some_fn.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__5386__auto__);
  }
};
cljs.core.some_fn.cljs$core$IFn$_invoke$arity$1 = function(p) {
  return function() {
    var cljs$core$sp1 = null;
    var cljs$core$sp1__0 = function() {
      return null;
    };
    var cljs$core$sp1__1 = function(x) {
      var G__18519 = x;
      return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(G__18519) : p.call(null, G__18519);
    };
    var cljs$core$sp1__2 = function(x, y) {
      var or__4335__auto__ = function() {
        var G__18521 = x;
        return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(G__18521) : p.call(null, G__18521);
      }();
      if (cljs.core.truth_(or__4335__auto__)) {
        return or__4335__auto__;
      } else {
        var G__18522 = y;
        return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(G__18522) : p.call(null, G__18522);
      }
    };
    var cljs$core$sp1__3 = function(x, y, z) {
      var or__4335__auto__ = function() {
        var G__18524 = x;
        return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(G__18524) : p.call(null, G__18524);
      }();
      if (cljs.core.truth_(or__4335__auto__)) {
        return or__4335__auto__;
      } else {
        var or__4335__auto____$1 = function() {
          var G__18526 = y;
          return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(G__18526) : p.call(null, G__18526);
        }();
        if (cljs.core.truth_(or__4335__auto____$1)) {
          return or__4335__auto____$1;
        } else {
          var G__18527 = z;
          return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(G__18527) : p.call(null, G__18527);
        }
      }
    };
    var cljs$core$sp1__4 = function() {
      var G__18689__delegate = function(x, y, z, args) {
        var or__4335__auto__ = cljs$core$sp1.cljs$core$IFn$_invoke$arity$3(x, y, z);
        if (cljs.core.truth_(or__4335__auto__)) {
          return or__4335__auto__;
        } else {
          return cljs.core.some(p, args);
        }
      };
      var G__18689 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__18690__i = 0, G__18690__a = new Array(arguments.length - 3);
          while (G__18690__i < G__18690__a.length) {
            G__18690__a[G__18690__i] = arguments[G__18690__i + 3];
            ++G__18690__i;
          }
          args = new cljs.core.IndexedSeq(G__18690__a, 0);
        }
        return G__18689__delegate.call(this, x, y, z, args);
      };
      G__18689.cljs$lang$maxFixedArity = 3;
      G__18689.cljs$lang$applyTo = function(arglist__18691) {
        var x = cljs.core.first(arglist__18691);
        arglist__18691 = cljs.core.next(arglist__18691);
        var y = cljs.core.first(arglist__18691);
        arglist__18691 = cljs.core.next(arglist__18691);
        var z = cljs.core.first(arglist__18691);
        var args = cljs.core.rest(arglist__18691);
        return G__18689__delegate(x, y, z, args);
      };
      G__18689.cljs$core$IFn$_invoke$arity$variadic = G__18689__delegate;
      return G__18689;
    }();
    cljs$core$sp1 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return cljs$core$sp1__0.call(this);
        case 1:
          return cljs$core$sp1__1.call(this, x);
        case 2:
          return cljs$core$sp1__2.call(this, x, y);
        case 3:
          return cljs$core$sp1__3.call(this, x, y, z);
        default:
          var G__18692 = null;
          if (arguments.length > 3) {
            var G__18693__i = 0, G__18693__a = new Array(arguments.length - 3);
            while (G__18693__i < G__18693__a.length) {
              G__18693__a[G__18693__i] = arguments[G__18693__i + 3];
              ++G__18693__i;
            }
            G__18692 = new cljs.core.IndexedSeq(G__18693__a, 0);
          }
          return cljs$core$sp1__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__18692);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    cljs$core$sp1.cljs$lang$maxFixedArity = 3;
    cljs$core$sp1.cljs$lang$applyTo = cljs$core$sp1__4.cljs$lang$applyTo;
    cljs$core$sp1.cljs$core$IFn$_invoke$arity$0 = cljs$core$sp1__0;
    cljs$core$sp1.cljs$core$IFn$_invoke$arity$1 = cljs$core$sp1__1;
    cljs$core$sp1.cljs$core$IFn$_invoke$arity$2 = cljs$core$sp1__2;
    cljs$core$sp1.cljs$core$IFn$_invoke$arity$3 = cljs$core$sp1__3;
    cljs$core$sp1.cljs$core$IFn$_invoke$arity$variadic = cljs$core$sp1__4.cljs$core$IFn$_invoke$arity$variadic;
    return cljs$core$sp1;
  }();
};
cljs.core.some_fn.cljs$core$IFn$_invoke$arity$2 = function(p1, p2) {
  return function() {
    var cljs$core$sp2 = null;
    var cljs$core$sp2__0 = function() {
      return null;
    };
    var cljs$core$sp2__1 = function(x) {
      var or__4335__auto__ = function() {
        var G__18559 = x;
        return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__18559) : p1.call(null, G__18559);
      }();
      if (cljs.core.truth_(or__4335__auto__)) {
        return or__4335__auto__;
      } else {
        var G__18560 = x;
        return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__18560) : p2.call(null, G__18560);
      }
    };
    var cljs$core$sp2__2 = function(x, y) {
      var or__4335__auto__ = function() {
        var G__18562 = x;
        return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__18562) : p1.call(null, G__18562);
      }();
      if (cljs.core.truth_(or__4335__auto__)) {
        return or__4335__auto__;
      } else {
        var or__4335__auto____$1 = function() {
          var G__18564 = y;
          return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__18564) : p1.call(null, G__18564);
        }();
        if (cljs.core.truth_(or__4335__auto____$1)) {
          return or__4335__auto____$1;
        } else {
          var or__4335__auto____$2 = function() {
            var G__18566 = x;
            return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__18566) : p2.call(null, G__18566);
          }();
          if (cljs.core.truth_(or__4335__auto____$2)) {
            return or__4335__auto____$2;
          } else {
            var G__18567 = y;
            return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__18567) : p2.call(null, G__18567);
          }
        }
      }
    };
    var cljs$core$sp2__3 = function(x, y, z) {
      var or__4335__auto__ = function() {
        var G__18569 = x;
        return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__18569) : p1.call(null, G__18569);
      }();
      if (cljs.core.truth_(or__4335__auto__)) {
        return or__4335__auto__;
      } else {
        var or__4335__auto____$1 = function() {
          var G__18571 = y;
          return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__18571) : p1.call(null, G__18571);
        }();
        if (cljs.core.truth_(or__4335__auto____$1)) {
          return or__4335__auto____$1;
        } else {
          var or__4335__auto____$2 = function() {
            var G__18573 = z;
            return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__18573) : p1.call(null, G__18573);
          }();
          if (cljs.core.truth_(or__4335__auto____$2)) {
            return or__4335__auto____$2;
          } else {
            var or__4335__auto____$3 = function() {
              var G__18575 = x;
              return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__18575) : p2.call(null, G__18575);
            }();
            if (cljs.core.truth_(or__4335__auto____$3)) {
              return or__4335__auto____$3;
            } else {
              var or__4335__auto____$4 = function() {
                var G__18577 = y;
                return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__18577) : p2.call(null, G__18577);
              }();
              if (cljs.core.truth_(or__4335__auto____$4)) {
                return or__4335__auto____$4;
              } else {
                var G__18578 = z;
                return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__18578) : p2.call(null, G__18578);
              }
            }
          }
        }
      }
    };
    var cljs$core$sp2__4 = function() {
      var G__18694__delegate = function(x, y, z, args) {
        var or__4335__auto__ = cljs$core$sp2.cljs$core$IFn$_invoke$arity$3(x, y, z);
        if (cljs.core.truth_(or__4335__auto__)) {
          return or__4335__auto__;
        } else {
          return cljs.core.some(function(or__4335__auto__) {
            return function(p1__18492_SHARP_) {
              var or__4335__auto____$1 = function() {
                var G__18580 = p1__18492_SHARP_;
                return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__18580) : p1.call(null, G__18580);
              }();
              if (cljs.core.truth_(or__4335__auto____$1)) {
                return or__4335__auto____$1;
              } else {
                var G__18581 = p1__18492_SHARP_;
                return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__18581) : p2.call(null, G__18581);
              }
            };
          }(or__4335__auto__), args);
        }
      };
      var G__18694 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__18695__i = 0, G__18695__a = new Array(arguments.length - 3);
          while (G__18695__i < G__18695__a.length) {
            G__18695__a[G__18695__i] = arguments[G__18695__i + 3];
            ++G__18695__i;
          }
          args = new cljs.core.IndexedSeq(G__18695__a, 0);
        }
        return G__18694__delegate.call(this, x, y, z, args);
      };
      G__18694.cljs$lang$maxFixedArity = 3;
      G__18694.cljs$lang$applyTo = function(arglist__18696) {
        var x = cljs.core.first(arglist__18696);
        arglist__18696 = cljs.core.next(arglist__18696);
        var y = cljs.core.first(arglist__18696);
        arglist__18696 = cljs.core.next(arglist__18696);
        var z = cljs.core.first(arglist__18696);
        var args = cljs.core.rest(arglist__18696);
        return G__18694__delegate(x, y, z, args);
      };
      G__18694.cljs$core$IFn$_invoke$arity$variadic = G__18694__delegate;
      return G__18694;
    }();
    cljs$core$sp2 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return cljs$core$sp2__0.call(this);
        case 1:
          return cljs$core$sp2__1.call(this, x);
        case 2:
          return cljs$core$sp2__2.call(this, x, y);
        case 3:
          return cljs$core$sp2__3.call(this, x, y, z);
        default:
          var G__18697 = null;
          if (arguments.length > 3) {
            var G__18698__i = 0, G__18698__a = new Array(arguments.length - 3);
            while (G__18698__i < G__18698__a.length) {
              G__18698__a[G__18698__i] = arguments[G__18698__i + 3];
              ++G__18698__i;
            }
            G__18697 = new cljs.core.IndexedSeq(G__18698__a, 0);
          }
          return cljs$core$sp2__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__18697);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    cljs$core$sp2.cljs$lang$maxFixedArity = 3;
    cljs$core$sp2.cljs$lang$applyTo = cljs$core$sp2__4.cljs$lang$applyTo;
    cljs$core$sp2.cljs$core$IFn$_invoke$arity$0 = cljs$core$sp2__0;
    cljs$core$sp2.cljs$core$IFn$_invoke$arity$1 = cljs$core$sp2__1;
    cljs$core$sp2.cljs$core$IFn$_invoke$arity$2 = cljs$core$sp2__2;
    cljs$core$sp2.cljs$core$IFn$_invoke$arity$3 = cljs$core$sp2__3;
    cljs$core$sp2.cljs$core$IFn$_invoke$arity$variadic = cljs$core$sp2__4.cljs$core$IFn$_invoke$arity$variadic;
    return cljs$core$sp2;
  }();
};
cljs.core.some_fn.cljs$core$IFn$_invoke$arity$3 = function(p1, p2, p3) {
  return function() {
    var cljs$core$sp3 = null;
    var cljs$core$sp3__0 = function() {
      return null;
    };
    var cljs$core$sp3__1 = function(x) {
      var or__4335__auto__ = function() {
        var G__18627 = x;
        return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__18627) : p1.call(null, G__18627);
      }();
      if (cljs.core.truth_(or__4335__auto__)) {
        return or__4335__auto__;
      } else {
        var or__4335__auto____$1 = function() {
          var G__18629 = x;
          return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__18629) : p2.call(null, G__18629);
        }();
        if (cljs.core.truth_(or__4335__auto____$1)) {
          return or__4335__auto____$1;
        } else {
          var G__18630 = x;
          return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__18630) : p3.call(null, G__18630);
        }
      }
    };
    var cljs$core$sp3__2 = function(x, y) {
      var or__4335__auto__ = function() {
        var G__18632 = x;
        return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__18632) : p1.call(null, G__18632);
      }();
      if (cljs.core.truth_(or__4335__auto__)) {
        return or__4335__auto__;
      } else {
        var or__4335__auto____$1 = function() {
          var G__18634 = x;
          return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__18634) : p2.call(null, G__18634);
        }();
        if (cljs.core.truth_(or__4335__auto____$1)) {
          return or__4335__auto____$1;
        } else {
          var or__4335__auto____$2 = function() {
            var G__18636 = x;
            return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__18636) : p3.call(null, G__18636);
          }();
          if (cljs.core.truth_(or__4335__auto____$2)) {
            return or__4335__auto____$2;
          } else {
            var or__4335__auto____$3 = function() {
              var G__18638 = y;
              return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__18638) : p1.call(null, G__18638);
            }();
            if (cljs.core.truth_(or__4335__auto____$3)) {
              return or__4335__auto____$3;
            } else {
              var or__4335__auto____$4 = function() {
                var G__18640 = y;
                return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__18640) : p2.call(null, G__18640);
              }();
              if (cljs.core.truth_(or__4335__auto____$4)) {
                return or__4335__auto____$4;
              } else {
                var G__18641 = y;
                return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__18641) : p3.call(null, G__18641);
              }
            }
          }
        }
      }
    };
    var cljs$core$sp3__3 = function(x, y, z) {
      var or__4335__auto__ = function() {
        var G__18643 = x;
        return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__18643) : p1.call(null, G__18643);
      }();
      if (cljs.core.truth_(or__4335__auto__)) {
        return or__4335__auto__;
      } else {
        var or__4335__auto____$1 = function() {
          var G__18645 = x;
          return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__18645) : p2.call(null, G__18645);
        }();
        if (cljs.core.truth_(or__4335__auto____$1)) {
          return or__4335__auto____$1;
        } else {
          var or__4335__auto____$2 = function() {
            var G__18647 = x;
            return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__18647) : p3.call(null, G__18647);
          }();
          if (cljs.core.truth_(or__4335__auto____$2)) {
            return or__4335__auto____$2;
          } else {
            var or__4335__auto____$3 = function() {
              var G__18649 = y;
              return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__18649) : p1.call(null, G__18649);
            }();
            if (cljs.core.truth_(or__4335__auto____$3)) {
              return or__4335__auto____$3;
            } else {
              var or__4335__auto____$4 = function() {
                var G__18651 = y;
                return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__18651) : p2.call(null, G__18651);
              }();
              if (cljs.core.truth_(or__4335__auto____$4)) {
                return or__4335__auto____$4;
              } else {
                var or__4335__auto____$5 = function() {
                  var G__18653 = y;
                  return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__18653) : p3.call(null, G__18653);
                }();
                if (cljs.core.truth_(or__4335__auto____$5)) {
                  return or__4335__auto____$5;
                } else {
                  var or__4335__auto____$6 = function() {
                    var G__18655 = z;
                    return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__18655) : p1.call(null, G__18655);
                  }();
                  if (cljs.core.truth_(or__4335__auto____$6)) {
                    return or__4335__auto____$6;
                  } else {
                    var or__4335__auto____$7 = function() {
                      var G__18657 = z;
                      return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__18657) : p2.call(null, G__18657);
                    }();
                    if (cljs.core.truth_(or__4335__auto____$7)) {
                      return or__4335__auto____$7;
                    } else {
                      var G__18658 = z;
                      return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__18658) : p3.call(null, G__18658);
                    }
                  }
                }
              }
            }
          }
        }
      }
    };
    var cljs$core$sp3__4 = function() {
      var G__18699__delegate = function(x, y, z, args) {
        var or__4335__auto__ = cljs$core$sp3.cljs$core$IFn$_invoke$arity$3(x, y, z);
        if (cljs.core.truth_(or__4335__auto__)) {
          return or__4335__auto__;
        } else {
          return cljs.core.some(function(or__4335__auto__) {
            return function(p1__18493_SHARP_) {
              var or__4335__auto____$1 = function() {
                var G__18660 = p1__18493_SHARP_;
                return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__18660) : p1.call(null, G__18660);
              }();
              if (cljs.core.truth_(or__4335__auto____$1)) {
                return or__4335__auto____$1;
              } else {
                var or__4335__auto____$2 = function() {
                  var G__18662 = p1__18493_SHARP_;
                  return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__18662) : p2.call(null, G__18662);
                }();
                if (cljs.core.truth_(or__4335__auto____$2)) {
                  return or__4335__auto____$2;
                } else {
                  var G__18663 = p1__18493_SHARP_;
                  return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__18663) : p3.call(null, G__18663);
                }
              }
            };
          }(or__4335__auto__), args);
        }
      };
      var G__18699 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__18700__i = 0, G__18700__a = new Array(arguments.length - 3);
          while (G__18700__i < G__18700__a.length) {
            G__18700__a[G__18700__i] = arguments[G__18700__i + 3];
            ++G__18700__i;
          }
          args = new cljs.core.IndexedSeq(G__18700__a, 0);
        }
        return G__18699__delegate.call(this, x, y, z, args);
      };
      G__18699.cljs$lang$maxFixedArity = 3;
      G__18699.cljs$lang$applyTo = function(arglist__18701) {
        var x = cljs.core.first(arglist__18701);
        arglist__18701 = cljs.core.next(arglist__18701);
        var y = cljs.core.first(arglist__18701);
        arglist__18701 = cljs.core.next(arglist__18701);
        var z = cljs.core.first(arglist__18701);
        var args = cljs.core.rest(arglist__18701);
        return G__18699__delegate(x, y, z, args);
      };
      G__18699.cljs$core$IFn$_invoke$arity$variadic = G__18699__delegate;
      return G__18699;
    }();
    cljs$core$sp3 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return cljs$core$sp3__0.call(this);
        case 1:
          return cljs$core$sp3__1.call(this, x);
        case 2:
          return cljs$core$sp3__2.call(this, x, y);
        case 3:
          return cljs$core$sp3__3.call(this, x, y, z);
        default:
          var G__18702 = null;
          if (arguments.length > 3) {
            var G__18703__i = 0, G__18703__a = new Array(arguments.length - 3);
            while (G__18703__i < G__18703__a.length) {
              G__18703__a[G__18703__i] = arguments[G__18703__i + 3];
              ++G__18703__i;
            }
            G__18702 = new cljs.core.IndexedSeq(G__18703__a, 0);
          }
          return cljs$core$sp3__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__18702);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    cljs$core$sp3.cljs$lang$maxFixedArity = 3;
    cljs$core$sp3.cljs$lang$applyTo = cljs$core$sp3__4.cljs$lang$applyTo;
    cljs$core$sp3.cljs$core$IFn$_invoke$arity$0 = cljs$core$sp3__0;
    cljs$core$sp3.cljs$core$IFn$_invoke$arity$1 = cljs$core$sp3__1;
    cljs$core$sp3.cljs$core$IFn$_invoke$arity$2 = cljs$core$sp3__2;
    cljs$core$sp3.cljs$core$IFn$_invoke$arity$3 = cljs$core$sp3__3;
    cljs$core$sp3.cljs$core$IFn$_invoke$arity$variadic = cljs$core$sp3__4.cljs$core$IFn$_invoke$arity$variadic;
    return cljs$core$sp3;
  }();
};
cljs.core.some_fn.cljs$core$IFn$_invoke$arity$variadic = function(p1, p2, p3, ps) {
  var ps__$1 = cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$4(p1, p2, p3, ps);
  return function(ps__$1) {
    return function() {
      var cljs$core$spn = null;
      var cljs$core$spn__0 = function() {
        return null;
      };
      var cljs$core$spn__1 = function(x) {
        return cljs.core.some(function(ps__$1) {
          return function(p1__18494_SHARP_) {
            var G__18679 = x;
            return p1__18494_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__18494_SHARP_.cljs$core$IFn$_invoke$arity$1(G__18679) : p1__18494_SHARP_.call(null, G__18679);
          };
        }(ps__$1), ps__$1);
      };
      var cljs$core$spn__2 = function(x, y) {
        return cljs.core.some(function(ps__$1) {
          return function(p1__18495_SHARP_) {
            var or__4335__auto__ = function() {
              var G__18681 = x;
              return p1__18495_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__18495_SHARP_.cljs$core$IFn$_invoke$arity$1(G__18681) : p1__18495_SHARP_.call(null, G__18681);
            }();
            if (cljs.core.truth_(or__4335__auto__)) {
              return or__4335__auto__;
            } else {
              var G__18682 = y;
              return p1__18495_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__18495_SHARP_.cljs$core$IFn$_invoke$arity$1(G__18682) : p1__18495_SHARP_.call(null, G__18682);
            }
          };
        }(ps__$1), ps__$1);
      };
      var cljs$core$spn__3 = function(x, y, z) {
        return cljs.core.some(function(ps__$1) {
          return function(p1__18496_SHARP_) {
            var or__4335__auto__ = function() {
              var G__18684 = x;
              return p1__18496_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__18496_SHARP_.cljs$core$IFn$_invoke$arity$1(G__18684) : p1__18496_SHARP_.call(null, G__18684);
            }();
            if (cljs.core.truth_(or__4335__auto__)) {
              return or__4335__auto__;
            } else {
              var or__4335__auto____$1 = function() {
                var G__18686 = y;
                return p1__18496_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__18496_SHARP_.cljs$core$IFn$_invoke$arity$1(G__18686) : p1__18496_SHARP_.call(null, G__18686);
              }();
              if (cljs.core.truth_(or__4335__auto____$1)) {
                return or__4335__auto____$1;
              } else {
                var G__18687 = z;
                return p1__18496_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__18496_SHARP_.cljs$core$IFn$_invoke$arity$1(G__18687) : p1__18496_SHARP_.call(null, G__18687);
              }
            }
          };
        }(ps__$1), ps__$1);
      };
      var cljs$core$spn__4 = function() {
        var G__18704__delegate = function(x, y, z, args) {
          var or__4335__auto__ = cljs$core$spn.cljs$core$IFn$_invoke$arity$3(x, y, z);
          if (cljs.core.truth_(or__4335__auto__)) {
            return or__4335__auto__;
          } else {
            return cljs.core.some(function(or__4335__auto__, ps__$1) {
              return function(p1__18497_SHARP_) {
                return cljs.core.some(p1__18497_SHARP_, args);
              };
            }(or__4335__auto__, ps__$1), ps__$1);
          }
        };
        var G__18704 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            var G__18705__i = 0, G__18705__a = new Array(arguments.length - 3);
            while (G__18705__i < G__18705__a.length) {
              G__18705__a[G__18705__i] = arguments[G__18705__i + 3];
              ++G__18705__i;
            }
            args = new cljs.core.IndexedSeq(G__18705__a, 0);
          }
          return G__18704__delegate.call(this, x, y, z, args);
        };
        G__18704.cljs$lang$maxFixedArity = 3;
        G__18704.cljs$lang$applyTo = function(arglist__18706) {
          var x = cljs.core.first(arglist__18706);
          arglist__18706 = cljs.core.next(arglist__18706);
          var y = cljs.core.first(arglist__18706);
          arglist__18706 = cljs.core.next(arglist__18706);
          var z = cljs.core.first(arglist__18706);
          var args = cljs.core.rest(arglist__18706);
          return G__18704__delegate(x, y, z, args);
        };
        G__18704.cljs$core$IFn$_invoke$arity$variadic = G__18704__delegate;
        return G__18704;
      }();
      cljs$core$spn = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return cljs$core$spn__0.call(this);
          case 1:
            return cljs$core$spn__1.call(this, x);
          case 2:
            return cljs$core$spn__2.call(this, x, y);
          case 3:
            return cljs$core$spn__3.call(this, x, y, z);
          default:
            var G__18707 = null;
            if (arguments.length > 3) {
              var G__18708__i = 0, G__18708__a = new Array(arguments.length - 3);
              while (G__18708__i < G__18708__a.length) {
                G__18708__a[G__18708__i] = arguments[G__18708__i + 3];
                ++G__18708__i;
              }
              G__18707 = new cljs.core.IndexedSeq(G__18708__a, 0);
            }
            return cljs$core$spn__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__18707);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      cljs$core$spn.cljs$lang$maxFixedArity = 3;
      cljs$core$spn.cljs$lang$applyTo = cljs$core$spn__4.cljs$lang$applyTo;
      cljs$core$spn.cljs$core$IFn$_invoke$arity$0 = cljs$core$spn__0;
      cljs$core$spn.cljs$core$IFn$_invoke$arity$1 = cljs$core$spn__1;
      cljs$core$spn.cljs$core$IFn$_invoke$arity$2 = cljs$core$spn__2;
      cljs$core$spn.cljs$core$IFn$_invoke$arity$3 = cljs$core$spn__3;
      cljs$core$spn.cljs$core$IFn$_invoke$arity$variadic = cljs$core$spn__4.cljs$core$IFn$_invoke$arity$variadic;
      return cljs$core$spn;
    }();
  }(ps__$1);
};
cljs.core.some_fn.cljs$lang$applyTo = function(seq18498) {
  var G__18499 = cljs.core.first(seq18498);
  var seq18498__$1 = cljs.core.next(seq18498);
  var G__18500 = cljs.core.first(seq18498__$1);
  var seq18498__$2 = cljs.core.next(seq18498__$1);
  var G__18501 = cljs.core.first(seq18498__$2);
  var seq18498__$3 = cljs.core.next(seq18498__$2);
  return cljs.core.some_fn.cljs$core$IFn$_invoke$arity$variadic(G__18499, G__18500, G__18501, seq18498__$3);
};
cljs.core.some_fn.cljs$lang$maxFixedArity = 3;
cljs.core.map = function cljs$core$map() {
  var G__18716 = arguments.length;
  switch(G__18716) {
    case 1:
      return cljs.core.map.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.map.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.map.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.map.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      var argseq__5386__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 4), 0);
      return cljs.core.map.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], arguments[3], argseq__5386__auto__);
  }
};
cljs.core.map.cljs$core$IFn$_invoke$arity$1 = function(f) {
  return function(rf) {
    return function() {
      var G__18732 = null;
      var G__18732__0 = function() {
        return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
      };
      var G__18732__1 = function(result) {
        var G__18717 = result;
        return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__18717) : rf.call(null, G__18717);
      };
      var G__18732__2 = function(result, input) {
        var G__18718 = result;
        var G__18719 = function() {
          var G__18720 = input;
          return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__18720) : f.call(null, G__18720);
        }();
        return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__18718, G__18719) : rf.call(null, G__18718, G__18719);
      };
      var G__18732__3 = function() {
        var G__18733__delegate = function(result, input, inputs) {
          var G__18721 = result;
          var G__18722 = cljs.core.apply.cljs$core$IFn$_invoke$arity$3(f, input, inputs);
          return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__18721, G__18722) : rf.call(null, G__18721, G__18722);
        };
        var G__18733 = function(result, input, var_args) {
          var inputs = null;
          if (arguments.length > 2) {
            var G__18734__i = 0, G__18734__a = new Array(arguments.length - 2);
            while (G__18734__i < G__18734__a.length) {
              G__18734__a[G__18734__i] = arguments[G__18734__i + 2];
              ++G__18734__i;
            }
            inputs = new cljs.core.IndexedSeq(G__18734__a, 0);
          }
          return G__18733__delegate.call(this, result, input, inputs);
        };
        G__18733.cljs$lang$maxFixedArity = 2;
        G__18733.cljs$lang$applyTo = function(arglist__18735) {
          var result = cljs.core.first(arglist__18735);
          arglist__18735 = cljs.core.next(arglist__18735);
          var input = cljs.core.first(arglist__18735);
          var inputs = cljs.core.rest(arglist__18735);
          return G__18733__delegate(result, input, inputs);
        };
        G__18733.cljs$core$IFn$_invoke$arity$variadic = G__18733__delegate;
        return G__18733;
      }();
      G__18732 = function(result, input, var_args) {
        var inputs = var_args;
        switch(arguments.length) {
          case 0:
            return G__18732__0.call(this);
          case 1:
            return G__18732__1.call(this, result);
          case 2:
            return G__18732__2.call(this, result, input);
          default:
            var G__18736 = null;
            if (arguments.length > 2) {
              var G__18737__i = 0, G__18737__a = new Array(arguments.length - 2);
              while (G__18737__i < G__18737__a.length) {
                G__18737__a[G__18737__i] = arguments[G__18737__i + 2];
                ++G__18737__i;
              }
              G__18736 = new cljs.core.IndexedSeq(G__18737__a, 0);
            }
            return G__18732__3.cljs$core$IFn$_invoke$arity$variadic(result, input, G__18736);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__18732.cljs$lang$maxFixedArity = 2;
      G__18732.cljs$lang$applyTo = G__18732__3.cljs$lang$applyTo;
      G__18732.cljs$core$IFn$_invoke$arity$0 = G__18732__0;
      G__18732.cljs$core$IFn$_invoke$arity$1 = G__18732__1;
      G__18732.cljs$core$IFn$_invoke$arity$2 = G__18732__2;
      G__18732.cljs$core$IFn$_invoke$arity$variadic = G__18732__3.cljs$core$IFn$_invoke$arity$variadic;
      return G__18732;
    }();
  };
};
cljs.core.map.cljs$core$IFn$_invoke$arity$2 = function(f, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4126__auto__ = cljs.core.seq(coll);
    if (temp__4126__auto__) {
      var s = temp__4126__auto__;
      if (cljs.core.chunked_seq_QMARK_(s)) {
        var c = cljs.core.chunk_first(s);
        var size = cljs.core.count(c);
        var b = cljs.core.chunk_buffer(size);
        var n__5220__auto___18738 = size;
        var i_18739 = 0;
        while (true) {
          if (i_18739 < n__5220__auto___18738) {
            cljs.core.chunk_append(b, function() {
              var G__18723 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c, i_18739);
              return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__18723) : f.call(null, G__18723);
            }());
            var G__18740 = i_18739 + 1;
            i_18739 = G__18740;
            continue;
          } else {
          }
          break;
        }
        return cljs.core.chunk_cons(cljs.core.chunk(b), cljs.core.map.cljs$core$IFn$_invoke$arity$2(f, cljs.core.chunk_rest(s)));
      } else {
        return cljs.core.cons(function() {
          var G__18724 = cljs.core.first(s);
          return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__18724) : f.call(null, G__18724);
        }(), cljs.core.map.cljs$core$IFn$_invoke$arity$2(f, cljs.core.rest(s)));
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.map.cljs$core$IFn$_invoke$arity$3 = function(f, c1, c2) {
  return new cljs.core.LazySeq(null, function() {
    var s1 = cljs.core.seq(c1);
    var s2 = cljs.core.seq(c2);
    if (s1 && s2) {
      return cljs.core.cons(function() {
        var G__18725 = cljs.core.first(s1);
        var G__18726 = cljs.core.first(s2);
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__18725, G__18726) : f.call(null, G__18725, G__18726);
      }(), cljs.core.map.cljs$core$IFn$_invoke$arity$3(f, cljs.core.rest(s1), cljs.core.rest(s2)));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.map.cljs$core$IFn$_invoke$arity$4 = function(f, c1, c2, c3) {
  return new cljs.core.LazySeq(null, function() {
    var s1 = cljs.core.seq(c1);
    var s2 = cljs.core.seq(c2);
    var s3 = cljs.core.seq(c3);
    if (s1 && s2 && s3) {
      return cljs.core.cons(function() {
        var G__18727 = cljs.core.first(s1);
        var G__18728 = cljs.core.first(s2);
        var G__18729 = cljs.core.first(s3);
        return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__18727, G__18728, G__18729) : f.call(null, G__18727, G__18728, G__18729);
      }(), cljs.core.map.cljs$core$IFn$_invoke$arity$4(f, cljs.core.rest(s1), cljs.core.rest(s2), cljs.core.rest(s3)));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.map.cljs$core$IFn$_invoke$arity$variadic = function(f, c1, c2, c3, colls) {
  var step = function cljs$core$step(cs) {
    return new cljs.core.LazySeq(null, function() {
      var ss = cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.seq, cs);
      if (cljs.core.every_QMARK_(cljs.core.identity, ss)) {
        return cljs.core.cons(cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.first, ss), cljs$core$step(cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.rest, ss)));
      } else {
        return null;
      }
    }, null, null);
  };
  return cljs.core.map.cljs$core$IFn$_invoke$arity$2(function(step) {
    return function(p1__18709_SHARP_) {
      return cljs.core.apply.cljs$core$IFn$_invoke$arity$2(f, p1__18709_SHARP_);
    };
  }(step), step(cljs.core.conj.cljs$core$IFn$_invoke$arity$variadic(colls, c3, cljs.core.array_seq([c2, c1], 0))));
};
cljs.core.map.cljs$lang$applyTo = function(seq18710) {
  var G__18711 = cljs.core.first(seq18710);
  var seq18710__$1 = cljs.core.next(seq18710);
  var G__18712 = cljs.core.first(seq18710__$1);
  var seq18710__$2 = cljs.core.next(seq18710__$1);
  var G__18713 = cljs.core.first(seq18710__$2);
  var seq18710__$3 = cljs.core.next(seq18710__$2);
  var G__18714 = cljs.core.first(seq18710__$3);
  var seq18710__$4 = cljs.core.next(seq18710__$3);
  return cljs.core.map.cljs$core$IFn$_invoke$arity$variadic(G__18711, G__18712, G__18713, G__18714, seq18710__$4);
};
cljs.core.map.cljs$lang$maxFixedArity = 4;
cljs.core.take = function cljs$core$take() {
  var G__18742 = arguments.length;
  switch(G__18742) {
    case 1:
      return cljs.core.take.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.take.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.take.cljs$core$IFn$_invoke$arity$1 = function(n) {
  return function(rf) {
    var na = cljs.core.volatile_BANG_(n);
    return function(na) {
      return function() {
        var G__18747 = null;
        var G__18747__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__18747__1 = function(result) {
          var G__18743 = result;
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__18743) : rf.call(null, G__18743);
        };
        var G__18747__2 = function(result, input) {
          var n__$1 = cljs.core.deref(na);
          var nn = cljs.core._vreset_BANG_(na, cljs.core._deref(na) - 1);
          var result__$1 = n__$1 > 0 ? function() {
            var G__18744 = result;
            var G__18745 = input;
            return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__18744, G__18745) : rf.call(null, G__18744, G__18745);
          }() : result;
          if (!(nn > 0)) {
            return cljs.core.ensure_reduced(result__$1);
          } else {
            return result__$1;
          }
        };
        G__18747 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__18747__0.call(this);
            case 1:
              return G__18747__1.call(this, result);
            case 2:
              return G__18747__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__18747.cljs$core$IFn$_invoke$arity$0 = G__18747__0;
        G__18747.cljs$core$IFn$_invoke$arity$1 = G__18747__1;
        G__18747.cljs$core$IFn$_invoke$arity$2 = G__18747__2;
        return G__18747;
      }();
    }(na);
  };
};
cljs.core.take.cljs$core$IFn$_invoke$arity$2 = function(n, coll) {
  return new cljs.core.LazySeq(null, function() {
    if (n > 0) {
      var temp__4126__auto__ = cljs.core.seq(coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        return cljs.core.cons(cljs.core.first(s), cljs.core.take.cljs$core$IFn$_invoke$arity$2(n - 1, cljs.core.rest(s)));
      } else {
        return null;
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.take.cljs$lang$maxFixedArity = 2;
cljs.core.drop = function cljs$core$drop() {
  var G__18749 = arguments.length;
  switch(G__18749) {
    case 1:
      return cljs.core.drop.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.drop.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.drop.cljs$core$IFn$_invoke$arity$1 = function(n) {
  return function(rf) {
    var na = cljs.core.volatile_BANG_(n);
    return function(na) {
      return function() {
        var G__18754 = null;
        var G__18754__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__18754__1 = function(result) {
          var G__18750 = result;
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__18750) : rf.call(null, G__18750);
        };
        var G__18754__2 = function(result, input) {
          var n__$1 = cljs.core.deref(na);
          cljs.core._vreset_BANG_(na, cljs.core._deref(na) - 1);
          if (n__$1 > 0) {
            return result;
          } else {
            var G__18751 = result;
            var G__18752 = input;
            return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__18751, G__18752) : rf.call(null, G__18751, G__18752);
          }
        };
        G__18754 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__18754__0.call(this);
            case 1:
              return G__18754__1.call(this, result);
            case 2:
              return G__18754__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__18754.cljs$core$IFn$_invoke$arity$0 = G__18754__0;
        G__18754.cljs$core$IFn$_invoke$arity$1 = G__18754__1;
        G__18754.cljs$core$IFn$_invoke$arity$2 = G__18754__2;
        return G__18754;
      }();
    }(na);
  };
};
cljs.core.drop.cljs$core$IFn$_invoke$arity$2 = function(n, coll) {
  var step = function(n__$1, coll__$1) {
    while (true) {
      var s = cljs.core.seq(coll__$1);
      if (n__$1 > 0 && s) {
        var G__18755 = n__$1 - 1;
        var G__18756 = cljs.core.rest(s);
        n__$1 = G__18755;
        coll__$1 = G__18756;
        continue;
      } else {
        return s;
      }
      break;
    }
  };
  return new cljs.core.LazySeq(null, function(step) {
    return function() {
      return step(n, coll);
    };
  }(step), null, null);
};
cljs.core.drop.cljs$lang$maxFixedArity = 2;
cljs.core.drop_last = function cljs$core$drop_last() {
  var G__18758 = arguments.length;
  switch(G__18758) {
    case 1:
      return cljs.core.drop_last.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.drop_last.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.drop_last.cljs$core$IFn$_invoke$arity$1 = function(s) {
  return cljs.core.drop_last.cljs$core$IFn$_invoke$arity$2(1, s);
};
cljs.core.drop_last.cljs$core$IFn$_invoke$arity$2 = function(n, s) {
  return cljs.core.map.cljs$core$IFn$_invoke$arity$3(function(x, _) {
    return x;
  }, s, cljs.core.drop.cljs$core$IFn$_invoke$arity$2(n, s));
};
cljs.core.drop_last.cljs$lang$maxFixedArity = 2;
cljs.core.take_last = function cljs$core$take_last(n, coll) {
  var s = cljs.core.seq(coll);
  var lead = cljs.core.seq(cljs.core.drop.cljs$core$IFn$_invoke$arity$2(n, coll));
  while (true) {
    if (lead) {
      var G__18760 = cljs.core.next(s);
      var G__18761 = cljs.core.next(lead);
      s = G__18760;
      lead = G__18761;
      continue;
    } else {
      return s;
    }
    break;
  }
};
cljs.core.drop_while = function cljs$core$drop_while() {
  var G__18763 = arguments.length;
  switch(G__18763) {
    case 1:
      return cljs.core.drop_while.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.drop_while.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.drop_while.cljs$core$IFn$_invoke$arity$1 = function(pred) {
  return function(rf) {
    var da = cljs.core.volatile_BANG_(true);
    return function(da) {
      return function() {
        var G__18771 = null;
        var G__18771__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__18771__1 = function(result) {
          var G__18764 = result;
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__18764) : rf.call(null, G__18764);
        };
        var G__18771__2 = function(result, input) {
          var drop_QMARK_ = cljs.core.deref(da);
          if (cljs.core.truth_(function() {
            var and__4323__auto__ = drop_QMARK_;
            if (cljs.core.truth_(and__4323__auto__)) {
              var G__18765 = input;
              return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(G__18765) : pred.call(null, G__18765);
            } else {
              return and__4323__auto__;
            }
          }())) {
            return result;
          } else {
            cljs.core.vreset_BANG_(da, null);
            var G__18766 = result;
            var G__18767 = input;
            return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__18766, G__18767) : rf.call(null, G__18766, G__18767);
          }
        };
        G__18771 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__18771__0.call(this);
            case 1:
              return G__18771__1.call(this, result);
            case 2:
              return G__18771__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__18771.cljs$core$IFn$_invoke$arity$0 = G__18771__0;
        G__18771.cljs$core$IFn$_invoke$arity$1 = G__18771__1;
        G__18771.cljs$core$IFn$_invoke$arity$2 = G__18771__2;
        return G__18771;
      }();
    }(da);
  };
};
cljs.core.drop_while.cljs$core$IFn$_invoke$arity$2 = function(pred, coll) {
  var step = function(pred__$1, coll__$1) {
    while (true) {
      var s = cljs.core.seq(coll__$1);
      if (cljs.core.truth_(function() {
        var and__4323__auto__ = s;
        if (and__4323__auto__) {
          var G__18769 = cljs.core.first(s);
          return pred__$1.cljs$core$IFn$_invoke$arity$1 ? pred__$1.cljs$core$IFn$_invoke$arity$1(G__18769) : pred__$1.call(null, G__18769);
        } else {
          return and__4323__auto__;
        }
      }())) {
        var G__18772 = pred__$1;
        var G__18773 = cljs.core.rest(s);
        pred__$1 = G__18772;
        coll__$1 = G__18773;
        continue;
      } else {
        return s;
      }
      break;
    }
  };
  return new cljs.core.LazySeq(null, function(step) {
    return function() {
      return step(pred, coll);
    };
  }(step), null, null);
};
cljs.core.drop_while.cljs$lang$maxFixedArity = 2;
cljs.core.cycle = function cljs$core$cycle(coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4126__auto__ = cljs.core.seq(coll);
    if (temp__4126__auto__) {
      var s = temp__4126__auto__;
      return cljs.core.concat.cljs$core$IFn$_invoke$arity$2(s, cljs$core$cycle(s));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.split_at = function cljs$core$split_at(n, coll) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, coll), cljs.core.drop.cljs$core$IFn$_invoke$arity$2(n, coll)], null);
};
cljs.core.repeat = function cljs$core$repeat() {
  var G__18776 = arguments.length;
  switch(G__18776) {
    case 1:
      return cljs.core.repeat.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.repeat.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.repeat.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return new cljs.core.LazySeq(null, function() {
    return cljs.core.cons(x, cljs.core.repeat.cljs$core$IFn$_invoke$arity$1(x));
  }, null, null);
};
cljs.core.repeat.cljs$core$IFn$_invoke$arity$2 = function(n, x) {
  return cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, cljs.core.repeat.cljs$core$IFn$_invoke$arity$1(x));
};
cljs.core.repeat.cljs$lang$maxFixedArity = 2;
cljs.core.replicate = function cljs$core$replicate(n, x) {
  return cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, cljs.core.repeat.cljs$core$IFn$_invoke$arity$1(x));
};
cljs.core.repeatedly = function cljs$core$repeatedly() {
  var G__18779 = arguments.length;
  switch(G__18779) {
    case 1:
      return cljs.core.repeatedly.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.repeatedly.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.repeatedly.cljs$core$IFn$_invoke$arity$1 = function(f) {
  return new cljs.core.LazySeq(null, function() {
    return cljs.core.cons(function() {
      return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
    }(), cljs.core.repeatedly.cljs$core$IFn$_invoke$arity$1(f));
  }, null, null);
};
cljs.core.repeatedly.cljs$core$IFn$_invoke$arity$2 = function(n, f) {
  return cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, cljs.core.repeatedly.cljs$core$IFn$_invoke$arity$1(f));
};
cljs.core.repeatedly.cljs$lang$maxFixedArity = 2;
cljs.core.iterate = function cljs$core$iterate(f, x) {
  return cljs.core.cons(x, new cljs.core.LazySeq(null, function() {
    return cljs$core$iterate(f, function() {
      var G__18784 = x;
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__18784) : f.call(null, G__18784);
    }());
  }, null, null));
};
cljs.core.interleave = function cljs$core$interleave() {
  var G__18789 = arguments.length;
  switch(G__18789) {
    case 2:
      return cljs.core.interleave.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5386__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core.interleave.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5386__auto__);
  }
};
cljs.core.interleave.cljs$core$IFn$_invoke$arity$2 = function(c1, c2) {
  return new cljs.core.LazySeq(null, function() {
    var s1 = cljs.core.seq(c1);
    var s2 = cljs.core.seq(c2);
    if (s1 && s2) {
      return cljs.core.cons(cljs.core.first(s1), cljs.core.cons(cljs.core.first(s2), cljs.core.interleave.cljs$core$IFn$_invoke$arity$2(cljs.core.rest(s1), cljs.core.rest(s2))));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.interleave.cljs$core$IFn$_invoke$arity$variadic = function(c1, c2, colls) {
  return new cljs.core.LazySeq(null, function() {
    var ss = cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.seq, cljs.core.conj.cljs$core$IFn$_invoke$arity$variadic(colls, c2, cljs.core.array_seq([c1], 0)));
    if (cljs.core.every_QMARK_(cljs.core.identity, ss)) {
      return cljs.core.concat.cljs$core$IFn$_invoke$arity$2(cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.first, ss), cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.interleave, cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.rest, ss)));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.interleave.cljs$lang$applyTo = function(seq18785) {
  var G__18786 = cljs.core.first(seq18785);
  var seq18785__$1 = cljs.core.next(seq18785);
  var G__18787 = cljs.core.first(seq18785__$1);
  var seq18785__$2 = cljs.core.next(seq18785__$1);
  return cljs.core.interleave.cljs$core$IFn$_invoke$arity$variadic(G__18786, G__18787, seq18785__$2);
};
cljs.core.interleave.cljs$lang$maxFixedArity = 2;
cljs.core.interpose = function cljs$core$interpose() {
  var G__18792 = arguments.length;
  switch(G__18792) {
    case 1:
      return cljs.core.interpose.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.interpose.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.interpose.cljs$core$IFn$_invoke$arity$1 = function(sep) {
  return function(rf) {
    var started = cljs.core.volatile_BANG_(false);
    return function(started) {
      return function() {
        var G__18801 = null;
        var G__18801__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__18801__1 = function(result) {
          var G__18793 = result;
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__18793) : rf.call(null, G__18793);
        };
        var G__18801__2 = function(result, input) {
          if (cljs.core.truth_(cljs.core.deref(started))) {
            var sepr = function() {
              var G__18794 = result;
              var G__18795 = sep;
              return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__18794, G__18795) : rf.call(null, G__18794, G__18795);
            }();
            if (cljs.core.reduced_QMARK_(sepr)) {
              return sepr;
            } else {
              var G__18796 = sepr;
              var G__18797 = input;
              return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__18796, G__18797) : rf.call(null, G__18796, G__18797);
            }
          } else {
            cljs.core.vreset_BANG_(started, true);
            var G__18798 = result;
            var G__18799 = input;
            return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__18798, G__18799) : rf.call(null, G__18798, G__18799);
          }
        };
        G__18801 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__18801__0.call(this);
            case 1:
              return G__18801__1.call(this, result);
            case 2:
              return G__18801__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__18801.cljs$core$IFn$_invoke$arity$0 = G__18801__0;
        G__18801.cljs$core$IFn$_invoke$arity$1 = G__18801__1;
        G__18801.cljs$core$IFn$_invoke$arity$2 = G__18801__2;
        return G__18801;
      }();
    }(started);
  };
};
cljs.core.interpose.cljs$core$IFn$_invoke$arity$2 = function(sep, coll) {
  return cljs.core.drop.cljs$core$IFn$_invoke$arity$2(1, cljs.core.interleave.cljs$core$IFn$_invoke$arity$2(cljs.core.repeat.cljs$core$IFn$_invoke$arity$1(sep), coll));
};
cljs.core.interpose.cljs$lang$maxFixedArity = 2;
cljs.core.flatten1 = function cljs$core$flatten1(colls) {
  var cat = function cljs$core$flatten1_$_cat(coll, colls__$1) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4124__auto__ = cljs.core.seq(coll);
      if (temp__4124__auto__) {
        var coll__$1 = temp__4124__auto__;
        return cljs.core.cons(cljs.core.first(coll__$1), cljs$core$flatten1_$_cat(cljs.core.rest(coll__$1), colls__$1));
      } else {
        if (cljs.core.seq(colls__$1)) {
          return cljs$core$flatten1_$_cat(cljs.core.first(colls__$1), cljs.core.rest(colls__$1));
        } else {
          return null;
        }
      }
    }, null, null);
  };
  return cat(null, colls);
};
cljs.core.mapcat = function cljs$core$mapcat() {
  var G__18813 = arguments.length;
  switch(G__18813) {
    case 1:
      return cljs.core.mapcat.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      var argseq__5386__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0);
      return cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5386__auto__);
  }
};
cljs.core.mapcat.cljs$core$IFn$_invoke$arity$1 = function(f) {
  return cljs.core.comp.cljs$core$IFn$_invoke$arity$2(cljs.core.map.cljs$core$IFn$_invoke$arity$1(f), cljs.core.cat);
};
cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic = function(f, colls) {
  return cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.concat, cljs.core.apply.cljs$core$IFn$_invoke$arity$3(cljs.core.map, f, colls));
};
cljs.core.mapcat.cljs$lang$applyTo = function(seq18810) {
  var G__18811 = cljs.core.first(seq18810);
  var seq18810__$1 = cljs.core.next(seq18810);
  return cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic(G__18811, seq18810__$1);
};
cljs.core.mapcat.cljs$lang$maxFixedArity = 1;
cljs.core.filter = function cljs$core$filter() {
  var G__18816 = arguments.length;
  switch(G__18816) {
    case 1:
      return cljs.core.filter.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.filter.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.filter.cljs$core$IFn$_invoke$arity$1 = function(pred) {
  return function(rf) {
    return function() {
      var G__18824 = null;
      var G__18824__0 = function() {
        return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
      };
      var G__18824__1 = function(result) {
        var G__18817 = result;
        return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__18817) : rf.call(null, G__18817);
      };
      var G__18824__2 = function(result, input) {
        if (cljs.core.truth_(function() {
          var G__18818 = input;
          return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(G__18818) : pred.call(null, G__18818);
        }())) {
          var G__18819 = result;
          var G__18820 = input;
          return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__18819, G__18820) : rf.call(null, G__18819, G__18820);
        } else {
          return result;
        }
      };
      G__18824 = function(result, input) {
        switch(arguments.length) {
          case 0:
            return G__18824__0.call(this);
          case 1:
            return G__18824__1.call(this, result);
          case 2:
            return G__18824__2.call(this, result, input);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__18824.cljs$core$IFn$_invoke$arity$0 = G__18824__0;
      G__18824.cljs$core$IFn$_invoke$arity$1 = G__18824__1;
      G__18824.cljs$core$IFn$_invoke$arity$2 = G__18824__2;
      return G__18824;
    }();
  };
};
cljs.core.filter.cljs$core$IFn$_invoke$arity$2 = function(pred, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4126__auto__ = cljs.core.seq(coll);
    if (temp__4126__auto__) {
      var s = temp__4126__auto__;
      if (cljs.core.chunked_seq_QMARK_(s)) {
        var c = cljs.core.chunk_first(s);
        var size = cljs.core.count(c);
        var b = cljs.core.chunk_buffer(size);
        var n__5220__auto___18825 = size;
        var i_18826 = 0;
        while (true) {
          if (i_18826 < n__5220__auto___18825) {
            if (cljs.core.truth_(function() {
              var G__18821 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c, i_18826);
              return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(G__18821) : pred.call(null, G__18821);
            }())) {
              cljs.core.chunk_append(b, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c, i_18826));
            } else {
            }
            var G__18827 = i_18826 + 1;
            i_18826 = G__18827;
            continue;
          } else {
          }
          break;
        }
        return cljs.core.chunk_cons(cljs.core.chunk(b), cljs.core.filter.cljs$core$IFn$_invoke$arity$2(pred, cljs.core.chunk_rest(s)));
      } else {
        var f = cljs.core.first(s);
        var r = cljs.core.rest(s);
        if (cljs.core.truth_(function() {
          var G__18822 = f;
          return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(G__18822) : pred.call(null, G__18822);
        }())) {
          return cljs.core.cons(f, cljs.core.filter.cljs$core$IFn$_invoke$arity$2(pred, r));
        } else {
          return cljs.core.filter.cljs$core$IFn$_invoke$arity$2(pred, r);
        }
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.filter.cljs$lang$maxFixedArity = 2;
cljs.core.remove = function cljs$core$remove() {
  var G__18829 = arguments.length;
  switch(G__18829) {
    case 1:
      return cljs.core.remove.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.remove.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.remove.cljs$core$IFn$_invoke$arity$1 = function(pred) {
  return cljs.core.filter.cljs$core$IFn$_invoke$arity$1(cljs.core.complement(pred));
};
cljs.core.remove.cljs$core$IFn$_invoke$arity$2 = function(pred, coll) {
  return cljs.core.filter.cljs$core$IFn$_invoke$arity$2(cljs.core.complement(pred), coll);
};
cljs.core.remove.cljs$lang$maxFixedArity = 2;
cljs.core.tree_seq = function cljs$core$tree_seq(branch_QMARK_, children, root) {
  var walk = function cljs$core$tree_seq_$_walk(node) {
    return new cljs.core.LazySeq(null, function() {
      return cljs.core.cons(node, cljs.core.truth_(function() {
        var G__18837 = node;
        return branch_QMARK_.cljs$core$IFn$_invoke$arity$1 ? branch_QMARK_.cljs$core$IFn$_invoke$arity$1(G__18837) : branch_QMARK_.call(null, G__18837);
      }()) ? cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic(cljs$core$tree_seq_$_walk, cljs.core.array_seq([function() {
        var G__18838 = node;
        return children.cljs$core$IFn$_invoke$arity$1 ? children.cljs$core$IFn$_invoke$arity$1(G__18838) : children.call(null, G__18838);
      }()], 0)) : null);
    }, null, null);
  };
  return walk(root);
};
cljs.core.flatten = function cljs$core$flatten(x) {
  return cljs.core.filter.cljs$core$IFn$_invoke$arity$2(function(p1__18839_SHARP_) {
    return!cljs.core.sequential_QMARK_(p1__18839_SHARP_);
  }, cljs.core.rest(cljs.core.tree_seq(cljs.core.sequential_QMARK_, cljs.core.seq, x)));
};
cljs.core.into = function cljs$core$into() {
  var G__18841 = arguments.length;
  switch(G__18841) {
    case 2:
      return cljs.core.into.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.into.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.into.cljs$core$IFn$_invoke$arity$2 = function(to, from) {
  if (!(to == null)) {
    if (function() {
      var G__18842 = to;
      if (G__18842) {
        var bit__5002__auto__ = G__18842.cljs$lang$protocol_mask$partition1$ & 4;
        if (bit__5002__auto__ || G__18842.cljs$core$IEditableCollection$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core.with_meta(cljs.core.persistent_BANG_(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._conj_BANG_, cljs.core.transient$(to), from)), cljs.core.meta(to));
    } else {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._conj, to, from);
    }
  } else {
    return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.conj, cljs.core.List.EMPTY, from);
  }
};
cljs.core.into.cljs$core$IFn$_invoke$arity$3 = function(to, xform, from) {
  if (function() {
    var G__18843 = to;
    if (G__18843) {
      var bit__5002__auto__ = G__18843.cljs$lang$protocol_mask$partition1$ & 4;
      if (bit__5002__auto__ || G__18843.cljs$core$IEditableCollection$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return cljs.core.with_meta(cljs.core.persistent_BANG_(cljs.core.transduce.cljs$core$IFn$_invoke$arity$4(xform, cljs.core.conj_BANG_, cljs.core.transient$(to), from)), cljs.core.meta(to));
  } else {
    return cljs.core.transduce.cljs$core$IFn$_invoke$arity$4(xform, cljs.core.conj, to, from);
  }
};
cljs.core.into.cljs$lang$maxFixedArity = 3;
cljs.core.mapv = function cljs$core$mapv() {
  var G__18851 = arguments.length;
  switch(G__18851) {
    case 2:
      return cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.mapv.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.mapv.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      var argseq__5386__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 4), 0);
      return cljs.core.mapv.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], arguments[3], argseq__5386__auto__);
  }
};
cljs.core.mapv.cljs$core$IFn$_invoke$arity$2 = function(f, coll) {
  return cljs.core.persistent_BANG_(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(v, o) {
    return cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2(v, function() {
      var G__18852 = o;
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__18852) : f.call(null, G__18852);
    }());
  }, cljs.core.transient$(cljs.core.PersistentVector.EMPTY), coll));
};
cljs.core.mapv.cljs$core$IFn$_invoke$arity$3 = function(f, c1, c2) {
  return cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentVector.EMPTY, cljs.core.map.cljs$core$IFn$_invoke$arity$3(f, c1, c2));
};
cljs.core.mapv.cljs$core$IFn$_invoke$arity$4 = function(f, c1, c2, c3) {
  return cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentVector.EMPTY, cljs.core.map.cljs$core$IFn$_invoke$arity$4(f, c1, c2, c3));
};
cljs.core.mapv.cljs$core$IFn$_invoke$arity$variadic = function(f, c1, c2, c3, colls) {
  return cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentVector.EMPTY, cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(cljs.core.map, f, c1, c2, c3, cljs.core.array_seq([colls], 0)));
};
cljs.core.mapv.cljs$lang$applyTo = function(seq18845) {
  var G__18846 = cljs.core.first(seq18845);
  var seq18845__$1 = cljs.core.next(seq18845);
  var G__18847 = cljs.core.first(seq18845__$1);
  var seq18845__$2 = cljs.core.next(seq18845__$1);
  var G__18848 = cljs.core.first(seq18845__$2);
  var seq18845__$3 = cljs.core.next(seq18845__$2);
  var G__18849 = cljs.core.first(seq18845__$3);
  var seq18845__$4 = cljs.core.next(seq18845__$3);
  return cljs.core.mapv.cljs$core$IFn$_invoke$arity$variadic(G__18846, G__18847, G__18848, G__18849, seq18845__$4);
};
cljs.core.mapv.cljs$lang$maxFixedArity = 4;
cljs.core.filterv = function cljs$core$filterv(pred, coll) {
  return cljs.core.persistent_BANG_(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(v, o) {
    if (cljs.core.truth_(function() {
      var G__18855 = o;
      return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(G__18855) : pred.call(null, G__18855);
    }())) {
      return cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2(v, o);
    } else {
      return v;
    }
  }, cljs.core.transient$(cljs.core.PersistentVector.EMPTY), coll));
};
cljs.core.partition = function cljs$core$partition() {
  var G__18857 = arguments.length;
  switch(G__18857) {
    case 2:
      return cljs.core.partition.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.partition.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.partition.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.partition.cljs$core$IFn$_invoke$arity$2 = function(n, coll) {
  return cljs.core.partition.cljs$core$IFn$_invoke$arity$3(n, n, coll);
};
cljs.core.partition.cljs$core$IFn$_invoke$arity$3 = function(n, step, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4126__auto__ = cljs.core.seq(coll);
    if (temp__4126__auto__) {
      var s = temp__4126__auto__;
      var p = cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, s);
      if (n === cljs.core.count(p)) {
        return cljs.core.cons(p, cljs.core.partition.cljs$core$IFn$_invoke$arity$3(n, step, cljs.core.drop.cljs$core$IFn$_invoke$arity$2(step, s)));
      } else {
        return null;
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.partition.cljs$core$IFn$_invoke$arity$4 = function(n, step, pad, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4126__auto__ = cljs.core.seq(coll);
    if (temp__4126__auto__) {
      var s = temp__4126__auto__;
      var p = cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, s);
      if (n === cljs.core.count(p)) {
        return cljs.core.cons(p, cljs.core.partition.cljs$core$IFn$_invoke$arity$4(n, step, pad, cljs.core.drop.cljs$core$IFn$_invoke$arity$2(step, s)));
      } else {
        return cljs.core._conj(cljs.core.List.EMPTY, cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, cljs.core.concat.cljs$core$IFn$_invoke$arity$2(p, pad)));
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.partition.cljs$lang$maxFixedArity = 4;
cljs.core.get_in = function cljs$core$get_in() {
  var G__18860 = arguments.length;
  switch(G__18860) {
    case 2:
      return cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.get_in.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.get_in.cljs$core$IFn$_invoke$arity$2 = function(m, ks) {
  return cljs.core.get_in.cljs$core$IFn$_invoke$arity$3(m, ks, null);
};
cljs.core.get_in.cljs$core$IFn$_invoke$arity$3 = function(m, ks, not_found) {
  var sentinel = cljs.core.lookup_sentinel;
  var m__$1 = m;
  var ks__$1 = cljs.core.seq(ks);
  while (true) {
    if (ks__$1) {
      if (!function() {
        var G__18861 = m__$1;
        if (G__18861) {
          var bit__5009__auto__ = G__18861.cljs$lang$protocol_mask$partition0$ & 256;
          if (bit__5009__auto__ || G__18861.cljs$core$ILookup$) {
            return true;
          } else {
            if (!G__18861.cljs$lang$protocol_mask$partition0$) {
              return cljs.core.native_satisfies_QMARK_(cljs.core.ILookup, G__18861);
            } else {
              return false;
            }
          }
        } else {
          return cljs.core.native_satisfies_QMARK_(cljs.core.ILookup, G__18861);
        }
      }()) {
        return not_found;
      } else {
        var m__$2 = cljs.core.get.cljs$core$IFn$_invoke$arity$3(m__$1, cljs.core.first(ks__$1), sentinel);
        if (sentinel === m__$2) {
          return not_found;
        } else {
          var G__18863 = sentinel;
          var G__18864 = m__$2;
          var G__18865 = cljs.core.next(ks__$1);
          sentinel = G__18863;
          m__$1 = G__18864;
          ks__$1 = G__18865;
          continue;
        }
      }
    } else {
      return m__$1;
    }
    break;
  }
};
cljs.core.get_in.cljs$lang$maxFixedArity = 3;
cljs.core.assoc_in = function cljs$core$assoc_in(m, p__18866, v) {
  var vec__18871 = p__18866;
  var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__18871, 0, null);
  var ks = cljs.core.nthnext(vec__18871, 1);
  if (cljs.core.truth_(ks)) {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, cljs$core$assoc_in(cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), ks, v));
  } else {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, v);
  }
};
cljs.core.update_in = function cljs$core$update_in() {
  var G__18880 = arguments.length;
  switch(G__18880) {
    case 3:
      return cljs.core.update_in.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.update_in.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    case 5:
      return cljs.core.update_in.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    case 6:
      return cljs.core.update_in.cljs$core$IFn$_invoke$arity$6(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]);
      break;
    default:
      var argseq__5386__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 6), 0);
      return cljs.core.update_in.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], argseq__5386__auto__);
  }
};
cljs.core.update_in.cljs$core$IFn$_invoke$arity$3 = function(m, p__18881, f) {
  var vec__18882 = p__18881;
  var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__18882, 0, null);
  var ks = cljs.core.nthnext(vec__18882, 1);
  if (cljs.core.truth_(ks)) {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, cljs.core.update_in.cljs$core$IFn$_invoke$arity$3(cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), ks, f));
  } else {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
      var G__18883 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__18883) : f.call(null, G__18883);
    }());
  }
};
cljs.core.update_in.cljs$core$IFn$_invoke$arity$4 = function(m, p__18884, f, a) {
  var vec__18885 = p__18884;
  var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__18885, 0, null);
  var ks = cljs.core.nthnext(vec__18885, 1);
  if (cljs.core.truth_(ks)) {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, cljs.core.update_in.cljs$core$IFn$_invoke$arity$4(cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), ks, f, a));
  } else {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
      var G__18886 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
      var G__18887 = a;
      return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__18886, G__18887) : f.call(null, G__18886, G__18887);
    }());
  }
};
cljs.core.update_in.cljs$core$IFn$_invoke$arity$5 = function(m, p__18888, f, a, b) {
  var vec__18889 = p__18888;
  var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__18889, 0, null);
  var ks = cljs.core.nthnext(vec__18889, 1);
  if (cljs.core.truth_(ks)) {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, cljs.core.update_in.cljs$core$IFn$_invoke$arity$5(cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), ks, f, a, b));
  } else {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
      var G__18890 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
      var G__18891 = a;
      var G__18892 = b;
      return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__18890, G__18891, G__18892) : f.call(null, G__18890, G__18891, G__18892);
    }());
  }
};
cljs.core.update_in.cljs$core$IFn$_invoke$arity$6 = function(m, p__18893, f, a, b, c) {
  var vec__18894 = p__18893;
  var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__18894, 0, null);
  var ks = cljs.core.nthnext(vec__18894, 1);
  if (cljs.core.truth_(ks)) {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, cljs.core.update_in.cljs$core$IFn$_invoke$arity$6(cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), ks, f, a, b, c));
  } else {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
      var G__18895 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
      var G__18896 = a;
      var G__18897 = b;
      var G__18898 = c;
      return f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(G__18895, G__18896, G__18897, G__18898) : f.call(null, G__18895, G__18896, G__18897, G__18898);
    }());
  }
};
cljs.core.update_in.cljs$core$IFn$_invoke$arity$variadic = function(m, p__18899, f, a, b, c, args) {
  var vec__18900 = p__18899;
  var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__18900, 0, null);
  var ks = cljs.core.nthnext(vec__18900, 1);
  if (cljs.core.truth_(ks)) {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(cljs.core.update_in, cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), ks, f, a, cljs.core.array_seq([b, c, args], 0)));
  } else {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(f, cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), a, b, c, cljs.core.array_seq([args], 0)));
  }
};
cljs.core.update_in.cljs$lang$applyTo = function(seq18872) {
  var G__18873 = cljs.core.first(seq18872);
  var seq18872__$1 = cljs.core.next(seq18872);
  var G__18874 = cljs.core.first(seq18872__$1);
  var seq18872__$2 = cljs.core.next(seq18872__$1);
  var G__18875 = cljs.core.first(seq18872__$2);
  var seq18872__$3 = cljs.core.next(seq18872__$2);
  var G__18876 = cljs.core.first(seq18872__$3);
  var seq18872__$4 = cljs.core.next(seq18872__$3);
  var G__18877 = cljs.core.first(seq18872__$4);
  var seq18872__$5 = cljs.core.next(seq18872__$4);
  var G__18878 = cljs.core.first(seq18872__$5);
  var seq18872__$6 = cljs.core.next(seq18872__$5);
  return cljs.core.update_in.cljs$core$IFn$_invoke$arity$variadic(G__18873, G__18874, G__18875, G__18876, G__18877, G__18878, seq18872__$6);
};
cljs.core.update_in.cljs$lang$maxFixedArity = 6;
cljs.core.update = function cljs$core$update() {
  var G__18910 = arguments.length;
  switch(G__18910) {
    case 3:
      return cljs.core.update.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.update.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    case 5:
      return cljs.core.update.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    case 6:
      return cljs.core.update.cljs$core$IFn$_invoke$arity$6(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]);
      break;
    default:
      var argseq__5386__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 6), 0);
      return cljs.core.update.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], argseq__5386__auto__);
  }
};
cljs.core.update.cljs$core$IFn$_invoke$arity$3 = function(m, k, f) {
  return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
    var G__18911 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
    return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__18911) : f.call(null, G__18911);
  }());
};
cljs.core.update.cljs$core$IFn$_invoke$arity$4 = function(m, k, f, x) {
  return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
    var G__18912 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
    var G__18913 = x;
    return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__18912, G__18913) : f.call(null, G__18912, G__18913);
  }());
};
cljs.core.update.cljs$core$IFn$_invoke$arity$5 = function(m, k, f, x, y) {
  return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
    var G__18914 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
    var G__18915 = x;
    var G__18916 = y;
    return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__18914, G__18915, G__18916) : f.call(null, G__18914, G__18915, G__18916);
  }());
};
cljs.core.update.cljs$core$IFn$_invoke$arity$6 = function(m, k, f, x, y, z) {
  return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
    var G__18917 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
    var G__18918 = x;
    var G__18919 = y;
    var G__18920 = z;
    return f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(G__18917, G__18918, G__18919, G__18920) : f.call(null, G__18917, G__18918, G__18919, G__18920);
  }());
};
cljs.core.update.cljs$core$IFn$_invoke$arity$variadic = function(m, k, f, x, y, z, more) {
  return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(f, cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), x, y, z, cljs.core.array_seq([more], 0)));
};
cljs.core.update.cljs$lang$applyTo = function(seq18902) {
  var G__18903 = cljs.core.first(seq18902);
  var seq18902__$1 = cljs.core.next(seq18902);
  var G__18904 = cljs.core.first(seq18902__$1);
  var seq18902__$2 = cljs.core.next(seq18902__$1);
  var G__18905 = cljs.core.first(seq18902__$2);
  var seq18902__$3 = cljs.core.next(seq18902__$2);
  var G__18906 = cljs.core.first(seq18902__$3);
  var seq18902__$4 = cljs.core.next(seq18902__$3);
  var G__18907 = cljs.core.first(seq18902__$4);
  var seq18902__$5 = cljs.core.next(seq18902__$4);
  var G__18908 = cljs.core.first(seq18902__$5);
  var seq18902__$6 = cljs.core.next(seq18902__$5);
  return cljs.core.update.cljs$core$IFn$_invoke$arity$variadic(G__18903, G__18904, G__18905, G__18906, G__18907, G__18908, seq18902__$6);
};
cljs.core.update.cljs$lang$maxFixedArity = 6;
cljs.core.VectorNode = function(edit, arr) {
  this.edit = edit;
  this.arr = arr;
};
cljs.core.VectorNode.cljs$lang$type = true;
cljs.core.VectorNode.cljs$lang$ctorStr = "cljs.core/VectorNode";
cljs.core.VectorNode.cljs$lang$ctorPrWriter = function(this__4914__auto__, writer__4915__auto__, opt__4916__auto__) {
  return cljs.core._write(writer__4915__auto__, "cljs.core/VectorNode");
};
cljs.core.__GT_VectorNode = function cljs$core$__GT_VectorNode(edit, arr) {
  return new cljs.core.VectorNode(edit, arr);
};
cljs.core.pv_fresh_node = function cljs$core$pv_fresh_node(edit) {
  return new cljs.core.VectorNode(edit, [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]);
};
cljs.core.pv_aget = function cljs$core$pv_aget(node, idx) {
  return node.arr[idx];
};
cljs.core.pv_aset = function cljs$core$pv_aset(node, idx, val) {
  return node.arr[idx] = val;
};
cljs.core.pv_clone_node = function cljs$core$pv_clone_node(node) {
  return new cljs.core.VectorNode(node.edit, cljs.core.aclone(node.arr));
};
cljs.core.tail_off = function cljs$core$tail_off(pv) {
  var cnt = pv.cnt;
  if (cnt < 32) {
    return 0;
  } else {
    return cnt - 1 >>> 5 << 5;
  }
};
cljs.core.new_path = function cljs$core$new_path(edit, level, node) {
  var ll = level;
  var ret = node;
  while (true) {
    if (ll === 0) {
      return ret;
    } else {
      var embed = ret;
      var r = cljs.core.pv_fresh_node(edit);
      var _ = cljs.core.pv_aset(r, 0, embed);
      var G__18922 = ll - 5;
      var G__18923 = r;
      ll = G__18922;
      ret = G__18923;
      continue;
    }
    break;
  }
};
cljs.core.push_tail = function cljs$core$push_tail(pv, level, parent, tailnode) {
  var ret = cljs.core.pv_clone_node(parent);
  var subidx = pv.cnt - 1 >>> level & 31;
  if (5 === level) {
    cljs.core.pv_aset(ret, subidx, tailnode);
    return ret;
  } else {
    var child = cljs.core.pv_aget(parent, subidx);
    if (!(child == null)) {
      var node_to_insert = cljs$core$push_tail(pv, level - 5, child, tailnode);
      cljs.core.pv_aset(ret, subidx, node_to_insert);
      return ret;
    } else {
      var node_to_insert = cljs.core.new_path(null, level - 5, tailnode);
      cljs.core.pv_aset(ret, subidx, node_to_insert);
      return ret;
    }
  }
};
cljs.core.vector_index_out_of_bounds = function cljs$core$vector_index_out_of_bounds(i, cnt) {
  throw new Error([cljs.core.str("No item "), cljs.core.str(i), cljs.core.str(" in vector of length "), cljs.core.str(cnt)].join(""));
};
cljs.core.first_array_for_longvec = function cljs$core$first_array_for_longvec(pv) {
  var node = pv.root;
  var level = pv.shift;
  while (true) {
    if (level > 0) {
      var G__18928 = cljs.core.pv_aget(node, 0);
      var G__18929 = level - 5;
      node = G__18928;
      level = G__18929;
      continue;
    } else {
      return node.arr;
    }
    break;
  }
};
cljs.core.unchecked_array_for = function cljs$core$unchecked_array_for(pv, i) {
  if (i >= cljs.core.tail_off(pv)) {
    return pv.tail;
  } else {
    var node = pv.root;
    var level = pv.shift;
    while (true) {
      if (level > 0) {
        var G__18930 = cljs.core.pv_aget(node, i >>> level & 31);
        var G__18931 = level - 5;
        node = G__18930;
        level = G__18931;
        continue;
      } else {
        return node.arr;
      }
      break;
    }
  }
};
cljs.core.array_for = function cljs$core$array_for(pv, i) {
  if (0 <= i && i < pv.cnt) {
    return cljs.core.unchecked_array_for(pv, i);
  } else {
    return cljs.core.vector_index_out_of_bounds(i, pv.cnt);
  }
};
cljs.core.do_assoc = function cljs$core$do_assoc(pv, level, node, i, val) {
  var ret = cljs.core.pv_clone_node(node);
  if (level === 0) {
    cljs.core.pv_aset(ret, i & 31, val);
    return ret;
  } else {
    var subidx = i >>> level & 31;
    cljs.core.pv_aset(ret, subidx, cljs$core$do_assoc(pv, level - 5, cljs.core.pv_aget(node, subidx), i, val));
    return ret;
  }
};
cljs.core.pop_tail = function cljs$core$pop_tail(pv, level, node) {
  var subidx = pv.cnt - 2 >>> level & 31;
  if (level > 5) {
    var new_child = cljs$core$pop_tail(pv, level - 5, cljs.core.pv_aget(node, subidx));
    if (new_child == null && subidx === 0) {
      return null;
    } else {
      var ret = cljs.core.pv_clone_node(node);
      cljs.core.pv_aset(ret, subidx, new_child);
      return ret;
    }
  } else {
    if (subidx === 0) {
      return null;
    } else {
      var ret = cljs.core.pv_clone_node(node);
      cljs.core.pv_aset(ret, subidx, null);
      return ret;
    }
  }
};
cljs.core.RangedIterator = function(i, base, arr, v, start, end) {
  this.i = i;
  this.base = base;
  this.arr = arr;
  this.v = v;
  this.start = start;
  this.end = end;
};
cljs.core.RangedIterator.prototype.hasNext = function() {
  var self__ = this;
  var this$ = this;
  return self__.i < self__.end;
};
cljs.core.RangedIterator.prototype.next = function() {
  var self__ = this;
  var this$ = this;
  if (self__.i - self__.base === 32) {
    self__.arr = cljs.core.unchecked_array_for(self__.v, self__.i);
    self__.base = self__.base + 32;
  } else {
  }
  var ret = self__.arr[self__.i & 31];
  self__.i = self__.i + 1;
  return ret;
};
cljs.core.RangedIterator.cljs$lang$type = true;
cljs.core.RangedIterator.cljs$lang$ctorStr = "cljs.core/RangedIterator";
cljs.core.RangedIterator.cljs$lang$ctorPrWriter = function(this__4914__auto__, writer__4915__auto__, opt__4916__auto__) {
  return cljs.core._write(writer__4915__auto__, "cljs.core/RangedIterator");
};
cljs.core.__GT_RangedIterator = function cljs$core$__GT_RangedIterator(i, base, arr, v, start, end) {
  return new cljs.core.RangedIterator(i, base, arr, v, start, end);
};
cljs.core.ranged_iterator = function cljs$core$ranged_iterator(v, start, end) {
  var i = start;
  return new cljs.core.RangedIterator(i, i - i % 32, start < cljs.core.count(v) ? cljs.core.unchecked_array_for(v, i) : null, v, start, end);
};
cljs.core.PersistentVector = function(meta, cnt, shift, root, tail, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.shift = shift;
  this.root = root;
  this.tail = tail;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 167668511;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
};
cljs.core.PersistentVector.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentVector.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentVector.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, k, null);
};
cljs.core.PersistentVector.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof k === "number") {
    return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(coll__$1, k, not_found);
  } else {
    return not_found;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(v, f, init) {
  var self__ = this;
  var v__$1 = this;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < self__.cnt) {
      var arr = cljs.core.unchecked_array_for(v__$1, i);
      var len = arr.length;
      var init__$2 = function() {
        var j = 0;
        var init__$2 = init__$1;
        while (true) {
          if (j < len) {
            var init__$3 = function() {
              var G__18941 = init__$2;
              var G__18942 = j + i;
              var G__18943 = arr[j];
              return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__18941, G__18942, G__18943) : f.call(null, G__18941, G__18942, G__18943);
            }();
            if (cljs.core.reduced_QMARK_(init__$3)) {
              return init__$3;
            } else {
              var G__18954 = j + 1;
              var G__18955 = init__$3;
              j = G__18954;
              init__$2 = G__18955;
              continue;
            }
          } else {
            return init__$2;
          }
          break;
        }
      }();
      if (cljs.core.reduced_QMARK_(init__$2)) {
        var G__18944 = init__$2;
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__18944) : cljs.core.deref.call(null, G__18944);
      } else {
        var G__18956 = i + len;
        var G__18957 = init__$2;
        i = G__18956;
        init__$1 = G__18957;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_for(coll__$1, n)[n & 31];
};
cljs.core.PersistentVector.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (0 <= n && n < self__.cnt) {
    return cljs.core.unchecked_array_for(coll__$1, n)[n & 31];
  } else {
    return not_found;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(coll, n, val) {
  var self__ = this;
  var coll__$1 = this;
  if (0 <= n && n < self__.cnt) {
    if (cljs.core.tail_off(coll__$1) <= n) {
      var new_tail = cljs.core.aclone(self__.tail);
      new_tail[n & 31] = val;
      return new cljs.core.PersistentVector(self__.meta, self__.cnt, self__.shift, self__.root, new_tail, null);
    } else {
      return new cljs.core.PersistentVector(self__.meta, self__.cnt, self__.shift, cljs.core.do_assoc(coll__$1, self__.shift, self__.root, n, val), self__.tail, null);
    }
  } else {
    if (n === self__.cnt) {
      return cljs.core._conj(coll__$1, val);
    } else {
      throw new Error([cljs.core.str("Index "), cljs.core.str(n), cljs.core.str(" out of bounds  [0,"), cljs.core.str(self__.cnt), cljs.core.str("]")].join(""));
    }
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IIterable$ = true;
cljs.core.PersistentVector.prototype.cljs$core$IIterable$_iterator$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.ranged_iterator(this$__$1, 0, self__.cnt);
};
cljs.core.PersistentVector.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentVector.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentVector(self__.meta, self__.cnt, self__.shift, self__.root, self__.tail, self__.__hash);
};
cljs.core.PersistentVector.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentVector.prototype.cljs$core$IMapEntry$_key$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(coll__$1, 0);
};
cljs.core.PersistentVector.prototype.cljs$core$IMapEntry$_val$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(coll__$1, 1);
};
cljs.core.PersistentVector.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(coll__$1, self__.cnt - 1);
  } else {
    return null;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt === 0) {
    throw new Error("Can't pop empty vector");
  } else {
    if (1 === self__.cnt) {
      return cljs.core._with_meta(cljs.core.PersistentVector.EMPTY, self__.meta);
    } else {
      if (1 < self__.cnt - cljs.core.tail_off(coll__$1)) {
        return new cljs.core.PersistentVector(self__.meta, self__.cnt - 1, self__.shift, self__.root, self__.tail.slice(0, -1), null);
      } else {
        var new_tail = cljs.core.unchecked_array_for(coll__$1, self__.cnt - 2);
        var nr = cljs.core.pop_tail(coll__$1, self__.shift, self__.root);
        var new_root = nr == null ? cljs.core.PersistentVector.EMPTY_NODE : nr;
        var cnt_1 = self__.cnt - 1;
        if (5 < self__.shift && cljs.core.pv_aget(new_root, 1) == null) {
          return new cljs.core.PersistentVector(self__.meta, cnt_1, self__.shift - 5, cljs.core.pv_aget(new_root, 0), new_tail, null);
        } else {
          return new cljs.core.PersistentVector(self__.meta, cnt_1, self__.shift, new_root, new_tail, null);
        }
      }
    }
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return new cljs.core.RSeq(coll__$1, self__.cnt - 1, null);
  } else {
    return null;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4751__auto__ = self__.__hash;
  if (!(h__4751__auto__ == null)) {
    return h__4751__auto__;
  } else {
    var h__4751__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4751__auto____$1;
    return h__4751__auto____$1;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  if (other instanceof cljs.core.PersistentVector) {
    if (self__.cnt === cljs.core.count(other)) {
      var me_iter = cljs.core._iterator(coll__$1);
      var you_iter = cljs.core._iterator(other);
      while (true) {
        if (cljs.core.truth_(me_iter.hasNext())) {
          var x = me_iter.next();
          var y = you_iter.next();
          if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(x, y)) {
            continue;
          } else {
            return false;
          }
        } else {
          return true;
        }
        break;
      }
    } else {
      return false;
    }
  } else {
    return cljs.core.equiv_sequential(coll__$1, other);
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientVector(self__.cnt, self__.shift, function() {
    var G__18945 = self__.root;
    return cljs.core.tv_editable_root.cljs$core$IFn$_invoke$arity$1 ? cljs.core.tv_editable_root.cljs$core$IFn$_invoke$arity$1(G__18945) : cljs.core.tv_editable_root.call(null, G__18945);
  }(), function() {
    var G__18946 = self__.tail;
    return cljs.core.tv_editable_tail.cljs$core$IFn$_invoke$arity$1 ? cljs.core.tv_editable_tail.cljs$core$IFn$_invoke$arity$1(G__18946) : cljs.core.tv_editable_tail.call(null, G__18946);
  }());
};
cljs.core.PersistentVector.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.PersistentVector.EMPTY, self__.meta);
};
cljs.core.PersistentVector.prototype.cljs$core$IReduce$_reduce$arity$2 = function(v, f) {
  var self__ = this;
  var v__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2(v__$1, f);
};
cljs.core.PersistentVector.prototype.cljs$core$IReduce$_reduce$arity$3 = function(v, f, init) {
  var self__ = this;
  var v__$1 = this;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < self__.cnt) {
      var arr = cljs.core.unchecked_array_for(v__$1, i);
      var len = arr.length;
      var init__$2 = function() {
        var j = 0;
        var init__$2 = init__$1;
        while (true) {
          if (j < len) {
            var init__$3 = function() {
              var G__18947 = init__$2;
              var G__18948 = arr[j];
              return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__18947, G__18948) : f.call(null, G__18947, G__18948);
            }();
            if (cljs.core.reduced_QMARK_(init__$3)) {
              return init__$3;
            } else {
              var G__18958 = j + 1;
              var G__18959 = init__$3;
              j = G__18958;
              init__$2 = G__18959;
              continue;
            }
          } else {
            return init__$2;
          }
          break;
        }
      }();
      if (cljs.core.reduced_QMARK_(init__$2)) {
        var G__18949 = init__$2;
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__18949) : cljs.core.deref.call(null, G__18949);
      } else {
        var G__18960 = i + len;
        var G__18961 = init__$2;
        i = G__18960;
        init__$1 = G__18961;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof k === "number") {
    return cljs.core._assoc_n(coll__$1, k, v);
  } else {
    throw new Error("Vector's key for assoc must be a number.");
  }
};
cljs.core.PersistentVector.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt === 0) {
    return null;
  } else {
    if (self__.cnt <= 32) {
      return new cljs.core.IndexedSeq(self__.tail, 0);
    } else {
      var G__18950 = coll__$1;
      var G__18951 = cljs.core.first_array_for_longvec(coll__$1);
      var G__18952 = 0;
      var G__18953 = 0;
      return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4 ? cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4(G__18950, G__18951, G__18952, G__18953) : cljs.core.chunked_seq.call(null, G__18950, G__18951, G__18952, G__18953);
    }
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentVector(meta__$1, self__.cnt, self__.shift, self__.root, self__.tail, self__.__hash);
};
cljs.core.PersistentVector.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt - cljs.core.tail_off(coll__$1) < 32) {
    var len = self__.tail.length;
    var new_tail = new Array(len + 1);
    var n__5220__auto___18962 = len;
    var i_18963 = 0;
    while (true) {
      if (i_18963 < n__5220__auto___18962) {
        new_tail[i_18963] = self__.tail[i_18963];
        var G__18964 = i_18963 + 1;
        i_18963 = G__18964;
        continue;
      } else {
      }
      break;
    }
    new_tail[len] = o;
    return new cljs.core.PersistentVector(self__.meta, self__.cnt + 1, self__.shift, self__.root, new_tail, null);
  } else {
    var root_overflow_QMARK_ = self__.cnt >>> 5 > 1 << self__.shift;
    var new_shift = root_overflow_QMARK_ ? self__.shift + 5 : self__.shift;
    var new_root = root_overflow_QMARK_ ? function() {
      var n_r = cljs.core.pv_fresh_node(null);
      cljs.core.pv_aset(n_r, 0, self__.root);
      cljs.core.pv_aset(n_r, 1, cljs.core.new_path(null, self__.shift, new cljs.core.VectorNode(null, self__.tail)));
      return n_r;
    }() : cljs.core.push_tail(coll__$1, self__.shift, self__.root, new cljs.core.VectorNode(null, self__.tail));
    return new cljs.core.PersistentVector(self__.meta, self__.cnt + 1, new_shift, new_root, [o], null);
  }
};
cljs.core.PersistentVector.prototype.call = function() {
  var G__18965 = null;
  var G__18965__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
  };
  var G__18965__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
  };
  G__18965 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__18965__2.call(this, self__, k);
      case 3:
        return G__18965__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__18965.cljs$core$IFn$_invoke$arity$2 = G__18965__2;
  G__18965.cljs$core$IFn$_invoke$arity$3 = G__18965__3;
  return G__18965;
}();
cljs.core.PersistentVector.prototype.apply = function(self__, args18940) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args18940)));
};
cljs.core.PersistentVector.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
};
cljs.core.PersistentVector.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
};
cljs.core.PersistentVector.cljs$lang$type = true;
cljs.core.PersistentVector.cljs$lang$ctorStr = "cljs.core/PersistentVector";
cljs.core.PersistentVector.cljs$lang$ctorPrWriter = function(this__4914__auto__, writer__4915__auto__, opt__4916__auto__) {
  return cljs.core._write(writer__4915__auto__, "cljs.core/PersistentVector");
};
cljs.core.__GT_PersistentVector = function cljs$core$__GT_PersistentVector(meta, cnt, shift, root, tail, __hash) {
  return new cljs.core.PersistentVector(meta, cnt, shift, root, tail, __hash);
};
cljs.core.PersistentVector.EMPTY_NODE = new cljs.core.VectorNode(null, [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]);
cljs.core.PersistentVector.EMPTY = new cljs.core.PersistentVector(null, 0, 5, cljs.core.PersistentVector.EMPTY_NODE, [], cljs.core.empty_ordered_hash);
cljs.core.PersistentVector.fromArray = function(xs, no_clone) {
  var l = xs.length;
  var xs__$1 = no_clone ? xs : cljs.core.aclone(xs);
  if (l < 32) {
    return new cljs.core.PersistentVector(null, l, 5, cljs.core.PersistentVector.EMPTY_NODE, xs__$1, null);
  } else {
    var node = xs__$1.slice(0, 32);
    var v = new cljs.core.PersistentVector(null, 32, 5, cljs.core.PersistentVector.EMPTY_NODE, node, null);
    var i = 32;
    var out = v.cljs$core$IEditableCollection$_as_transient$arity$1(null);
    while (true) {
      if (i < l) {
        var G__18966 = i + 1;
        var G__18967 = cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2(out, xs__$1[i]);
        i = G__18966;
        out = G__18967;
        continue;
      } else {
        return cljs.core.persistent_BANG_(out);
      }
      break;
    }
  }
};
cljs.core.PersistentVector.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5311__auto__ = this;
  return cljs.core.es6_iterator(this__5311__auto__);
};
cljs.core.vec = function cljs$core$vec(coll) {
  if (cljs.core.array_QMARK_(coll)) {
    return cljs.core.PersistentVector.fromArray(coll, true);
  } else {
    return cljs.core._persistent_BANG_(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._conj_BANG_, cljs.core._as_transient(cljs.core.PersistentVector.EMPTY), coll));
  }
};
cljs.core.vector = function cljs$core$vector() {
  var argseq__5375__auto__ = 0 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 0), 0) : null;
  return cljs.core.vector.cljs$core$IFn$_invoke$arity$variadic(argseq__5375__auto__);
};
cljs.core.vector.cljs$core$IFn$_invoke$arity$variadic = function(args) {
  if (args instanceof cljs.core.IndexedSeq && args.i === 0) {
    return cljs.core.PersistentVector.fromArray(args.arr, true);
  } else {
    return cljs.core.vec(args);
  }
};
cljs.core.vector.cljs$lang$maxFixedArity = 0;
cljs.core.vector.cljs$lang$applyTo = function(seq18968) {
  return cljs.core.vector.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq18968));
};
cljs.core.ChunkedSeq = function(vec, node, i, off, meta, __hash) {
  this.vec = vec;
  this.node = node;
  this.i = i;
  this.off = off;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32375020;
  this.cljs$lang$protocol_mask$partition1$ = 1536;
};
cljs.core.ChunkedSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.ChunkedSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ChunkedSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.off + 1 < self__.node.length) {
    var s = function() {
      var G__18969 = self__.vec;
      var G__18970 = self__.node;
      var G__18971 = self__.i;
      var G__18972 = self__.off + 1;
      return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4 ? cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4(G__18969, G__18970, G__18971, G__18972) : cljs.core.chunked_seq.call(null, G__18969, G__18970, G__18971, G__18972);
    }();
    if (s == null) {
      return null;
    } else {
      return s;
    }
  } else {
    return cljs.core._chunked_next(coll__$1);
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4751__auto__ = self__.__hash;
  if (!(h__4751__auto__ == null)) {
    return h__4751__auto__;
  } else {
    var h__4751__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4751__auto____$1;
    return h__4751__auto____$1;
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.PersistentVector.EMPTY, self__.meta);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2(function() {
    var G__18973 = self__.vec;
    var G__18974 = self__.i + self__.off;
    var G__18975 = cljs.core.count(self__.vec);
    return cljs.core.subvec.cljs$core$IFn$_invoke$arity$3 ? cljs.core.subvec.cljs$core$IFn$_invoke$arity$3(G__18973, G__18974, G__18975) : cljs.core.subvec.call(null, G__18973, G__18974, G__18975);
  }(), f);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$3(function() {
    var G__18976 = self__.vec;
    var G__18977 = self__.i + self__.off;
    var G__18978 = cljs.core.count(self__.vec);
    return cljs.core.subvec.cljs$core$IFn$_invoke$arity$3 ? cljs.core.subvec.cljs$core$IFn$_invoke$arity$3(G__18976, G__18977, G__18978) : cljs.core.subvec.call(null, G__18976, G__18977, G__18978);
  }(), f, start);
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.node[self__.off];
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.off + 1 < self__.node.length) {
    var s = function() {
      var G__18979 = self__.vec;
      var G__18980 = self__.node;
      var G__18981 = self__.i;
      var G__18982 = self__.off + 1;
      return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4 ? cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4(G__18979, G__18980, G__18981, G__18982) : cljs.core.chunked_seq.call(null, G__18979, G__18980, G__18981, G__18982);
    }();
    if (s == null) {
      return cljs.core.List.EMPTY;
    } else {
      return s;
    }
  } else {
    return cljs.core._chunked_rest(coll__$1);
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedSeq$_chunked_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_chunk.cljs$core$IFn$_invoke$arity$2(self__.node, self__.off);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedSeq$_chunked_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var end = self__.i + self__.node.length;
  if (end < cljs.core._count(self__.vec)) {
    var G__18983 = self__.vec;
    var G__18984 = cljs.core.unchecked_array_for(self__.vec, end);
    var G__18985 = end;
    var G__18986 = 0;
    return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4 ? cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4(G__18983, G__18984, G__18985, G__18986) : cljs.core.chunked_seq.call(null, G__18983, G__18984, G__18985, G__18986);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, m) {
  var self__ = this;
  var coll__$1 = this;
  var G__18987 = self__.vec;
  var G__18988 = self__.node;
  var G__18989 = self__.i;
  var G__18990 = self__.off;
  var G__18991 = m;
  return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$5 ? cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$5(G__18987, G__18988, G__18989, G__18990, G__18991) : cljs.core.chunked_seq.call(null, G__18987, G__18988, G__18989, G__18990, G__18991);
};
cljs.core.ChunkedSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedNext$_chunked_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var end = self__.i + self__.node.length;
  if (end < cljs.core._count(self__.vec)) {
    var G__18992 = self__.vec;
    var G__18993 = cljs.core.unchecked_array_for(self__.vec, end);
    var G__18994 = end;
    var G__18995 = 0;
    return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4 ? cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4(G__18992, G__18993, G__18994, G__18995) : cljs.core.chunked_seq.call(null, G__18992, G__18993, G__18994, G__18995);
  } else {
    return null;
  }
};
cljs.core.ChunkedSeq.cljs$lang$type = true;
cljs.core.ChunkedSeq.cljs$lang$ctorStr = "cljs.core/ChunkedSeq";
cljs.core.ChunkedSeq.cljs$lang$ctorPrWriter = function(this__4914__auto__, writer__4915__auto__, opt__4916__auto__) {
  return cljs.core._write(writer__4915__auto__, "cljs.core/ChunkedSeq");
};
cljs.core.__GT_ChunkedSeq = function cljs$core$__GT_ChunkedSeq(vec, node, i, off, meta, __hash) {
  return new cljs.core.ChunkedSeq(vec, node, i, off, meta, __hash);
};
cljs.core.ChunkedSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5311__auto__ = this;
  return cljs.core.es6_iterator(this__5311__auto__);
};
cljs.core.chunked_seq = function cljs$core$chunked_seq() {
  var G__18997 = arguments.length;
  switch(G__18997) {
    case 3:
      return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    case 5:
      return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$3 = function(vec, i, off) {
  return new cljs.core.ChunkedSeq(vec, cljs.core.array_for(vec, i), i, off, null, null);
};
cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4 = function(vec, node, i, off) {
  return new cljs.core.ChunkedSeq(vec, node, i, off, null, null);
};
cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$5 = function(vec, node, i, off, meta) {
  return new cljs.core.ChunkedSeq(vec, node, i, off, meta, null);
};
cljs.core.chunked_seq.cljs$lang$maxFixedArity = 5;
cljs.core.Subvec = function(meta, v, start, end, __hash) {
  this.meta = meta;
  this.v = v;
  this.start = start;
  this.end = end;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 167666463;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.Subvec.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.Subvec.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.Subvec.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, k, null);
};
cljs.core.Subvec.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof k === "number") {
    return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(coll__$1, k, not_found);
  } else {
    return not_found;
  }
};
cljs.core.Subvec.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var i = self__.start;
  var j = 0;
  var init__$1 = init;
  while (true) {
    if (i < self__.end) {
      var init__$2 = function() {
        var G__19000 = init__$1;
        var G__19001 = j;
        var G__19002 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(self__.v, i);
        return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__19000, G__19001, G__19002) : f.call(null, G__19000, G__19001, G__19002);
      }();
      if (cljs.core.reduced_QMARK_(init__$2)) {
        var G__19003 = init__$2;
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__19003) : cljs.core.deref.call(null, G__19003);
      } else {
        var G__19025 = i + 1;
        var G__19026 = j + 1;
        var G__19027 = init__$2;
        i = G__19025;
        j = G__19026;
        init__$1 = G__19027;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.Subvec.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  if (n < 0 || self__.end <= self__.start + n) {
    return cljs.core.vector_index_out_of_bounds(n, self__.end - self__.start);
  } else {
    return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(self__.v, self__.start + n);
  }
};
cljs.core.Subvec.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (n < 0 || self__.end <= self__.start + n) {
    return not_found;
  } else {
    return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(self__.v, self__.start + n, not_found);
  }
};
cljs.core.Subvec.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(coll, n, val) {
  var self__ = this;
  var coll__$1 = this;
  var v_pos = self__.start + n;
  var G__19004 = self__.meta;
  var G__19005 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(self__.v, v_pos, val);
  var G__19006 = self__.start;
  var G__19007 = function() {
    var x__4647__auto__ = self__.end;
    var y__4648__auto__ = v_pos + 1;
    return x__4647__auto__ > y__4648__auto__ ? x__4647__auto__ : y__4648__auto__;
  }();
  var G__19008 = null;
  return cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5 ? cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5(G__19004, G__19005, G__19006, G__19007, G__19008) : cljs.core.build_subvec.call(null, G__19004, G__19005, G__19006, G__19007, G__19008);
};
cljs.core.Subvec.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.Subvec.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Subvec(self__.meta, self__.v, self__.start, self__.end, self__.__hash);
};
cljs.core.Subvec.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.end - self__.start;
};
cljs.core.Subvec.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(self__.v, self__.end - 1);
};
cljs.core.Subvec.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.start === self__.end) {
    throw new Error("Can't pop empty vector");
  } else {
    var G__19009 = self__.meta;
    var G__19010 = self__.v;
    var G__19011 = self__.start;
    var G__19012 = self__.end - 1;
    var G__19013 = null;
    return cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5 ? cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5(G__19009, G__19010, G__19011, G__19012, G__19013) : cljs.core.build_subvec.call(null, G__19009, G__19010, G__19011, G__19012, G__19013);
  }
};
cljs.core.Subvec.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (!(self__.start === self__.end)) {
    return new cljs.core.RSeq(coll__$1, self__.end - self__.start - 1, null);
  } else {
    return null;
  }
};
cljs.core.Subvec.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4751__auto__ = self__.__hash;
  if (!(h__4751__auto__ == null)) {
    return h__4751__auto__;
  } else {
    var h__4751__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4751__auto____$1;
    return h__4751__auto____$1;
  }
};
cljs.core.Subvec.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.Subvec.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.PersistentVector.EMPTY, self__.meta);
};
cljs.core.Subvec.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2(coll__$1, f);
};
cljs.core.Subvec.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start__$1) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$3(coll__$1, f, start__$1);
};
cljs.core.Subvec.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, key, val) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof key === "number") {
    return cljs.core._assoc_n(coll__$1, key, val);
  } else {
    throw new Error("Subvec's key for assoc must be a number.");
  }
};
cljs.core.Subvec.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var subvec_seq = function(coll__$1) {
    return function cljs$core$subvec_seq(i) {
      if (i === self__.end) {
        return null;
      } else {
        return cljs.core.cons(cljs.core._nth.cljs$core$IFn$_invoke$arity$2(self__.v, i), new cljs.core.LazySeq(null, function(coll__$1) {
          return function() {
            return cljs$core$subvec_seq(i + 1);
          };
        }(coll__$1), null, null));
      }
    };
  }(coll__$1);
  return subvec_seq(self__.start);
};
cljs.core.Subvec.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  var G__19015 = meta__$1;
  var G__19016 = self__.v;
  var G__19017 = self__.start;
  var G__19018 = self__.end;
  var G__19019 = self__.__hash;
  return cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5 ? cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5(G__19015, G__19016, G__19017, G__19018, G__19019) : cljs.core.build_subvec.call(null, G__19015, G__19016, G__19017, G__19018, G__19019);
};
cljs.core.Subvec.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  var G__19020 = self__.meta;
  var G__19021 = cljs.core._assoc_n(self__.v, self__.end, o);
  var G__19022 = self__.start;
  var G__19023 = self__.end + 1;
  var G__19024 = null;
  return cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5 ? cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5(G__19020, G__19021, G__19022, G__19023, G__19024) : cljs.core.build_subvec.call(null, G__19020, G__19021, G__19022, G__19023, G__19024);
};
cljs.core.Subvec.prototype.call = function() {
  var G__19028 = null;
  var G__19028__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
  };
  var G__19028__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
  };
  G__19028 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__19028__2.call(this, self__, k);
      case 3:
        return G__19028__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__19028.cljs$core$IFn$_invoke$arity$2 = G__19028__2;
  G__19028.cljs$core$IFn$_invoke$arity$3 = G__19028__3;
  return G__19028;
}();
cljs.core.Subvec.prototype.apply = function(self__, args18999) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args18999)));
};
cljs.core.Subvec.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
};
cljs.core.Subvec.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
};
cljs.core.Subvec.cljs$lang$type = true;
cljs.core.Subvec.cljs$lang$ctorStr = "cljs.core/Subvec";
cljs.core.Subvec.cljs$lang$ctorPrWriter = function(this__4914__auto__, writer__4915__auto__, opt__4916__auto__) {
  return cljs.core._write(writer__4915__auto__, "cljs.core/Subvec");
};
cljs.core.__GT_Subvec = function cljs$core$__GT_Subvec(meta, v, start, end, __hash) {
  return new cljs.core.Subvec(meta, v, start, end, __hash);
};
cljs.core.Subvec.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5311__auto__ = this;
  return cljs.core.es6_iterator(this__5311__auto__);
};
cljs.core.build_subvec = function cljs$core$build_subvec(meta, v, start, end, __hash) {
  while (true) {
    if (v instanceof cljs.core.Subvec) {
      var G__19029 = meta;
      var G__19030 = v.v;
      var G__19031 = v.start + start;
      var G__19032 = v.start + end;
      var G__19033 = __hash;
      meta = G__19029;
      v = G__19030;
      start = G__19031;
      end = G__19032;
      __hash = G__19033;
      continue;
    } else {
      var c = cljs.core.count(v);
      if (start < 0 || end < 0 || start > c || end > c) {
        throw new Error("Index out of bounds");
      } else {
      }
      return new cljs.core.Subvec(meta, v, start, end, __hash);
    }
    break;
  }
};
cljs.core.subvec = function cljs$core$subvec() {
  var G__19035 = arguments.length;
  switch(G__19035) {
    case 2:
      return cljs.core.subvec.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.subvec.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.subvec.cljs$core$IFn$_invoke$arity$2 = function(v, start) {
  return cljs.core.subvec.cljs$core$IFn$_invoke$arity$3(v, start, cljs.core.count(v));
};
cljs.core.subvec.cljs$core$IFn$_invoke$arity$3 = function(v, start, end) {
  return cljs.core.build_subvec(null, v, start, end, null);
};
cljs.core.subvec.cljs$lang$maxFixedArity = 3;
cljs.core.tv_ensure_editable = function cljs$core$tv_ensure_editable(edit, node) {
  if (edit === node.edit) {
    return node;
  } else {
    return new cljs.core.VectorNode(edit, cljs.core.aclone(node.arr));
  }
};
cljs.core.tv_editable_root = function cljs$core$tv_editable_root(node) {
  return new cljs.core.VectorNode(function() {
    var obj19040 = {};
    return obj19040;
  }(), cljs.core.aclone(node.arr));
};
cljs.core.tv_editable_tail = function cljs$core$tv_editable_tail(tl) {
  var ret = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
  cljs.core.array_copy(tl, 0, ret, 0, tl.length);
  return ret;
};
cljs.core.tv_push_tail = function cljs$core$tv_push_tail(tv, level, parent, tail_node) {
  var ret = cljs.core.tv_ensure_editable(tv.root.edit, parent);
  var subidx = tv.cnt - 1 >>> level & 31;
  cljs.core.pv_aset(ret, subidx, level === 5 ? tail_node : function() {
    var child = cljs.core.pv_aget(ret, subidx);
    if (!(child == null)) {
      return cljs$core$tv_push_tail(tv, level - 5, child, tail_node);
    } else {
      return cljs.core.new_path(tv.root.edit, level - 5, tail_node);
    }
  }());
  return ret;
};
cljs.core.tv_pop_tail = function cljs$core$tv_pop_tail(tv, level, node) {
  var node__$1 = cljs.core.tv_ensure_editable(tv.root.edit, node);
  var subidx = tv.cnt - 2 >>> level & 31;
  if (level > 5) {
    var new_child = cljs$core$tv_pop_tail(tv, level - 5, cljs.core.pv_aget(node__$1, subidx));
    if (new_child == null && subidx === 0) {
      return null;
    } else {
      cljs.core.pv_aset(node__$1, subidx, new_child);
      return node__$1;
    }
  } else {
    if (subidx === 0) {
      return null;
    } else {
      cljs.core.pv_aset(node__$1, subidx, null);
      return node__$1;
    }
  }
};
cljs.core.unchecked_editable_array_for = function cljs$core$unchecked_editable_array_for(tv, i) {
  if (i >= cljs.core.tail_off(tv)) {
    return tv.tail;
  } else {
    var root = tv.root;
    var node = root;
    var level = tv.shift;
    while (true) {
      if (level > 0) {
        var G__19048 = cljs.core.tv_ensure_editable(root.edit, cljs.core.pv_aget(node, i >>> level & 31));
        var G__19049 = level - 5;
        node = G__19048;
        level = G__19049;
        continue;
      } else {
        return node.arr;
      }
      break;
    }
  }
};
cljs.core.TransientVector = function(cnt, shift, root, tail) {
  this.cnt = cnt;
  this.shift = shift;
  this.root = root;
  this.tail = tail;
  this.cljs$lang$protocol_mask$partition0$ = 275;
  this.cljs$lang$protocol_mask$partition1$ = 88;
};
cljs.core.TransientVector.prototype.call = function() {
  var G__19053 = null;
  var G__19053__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__19053__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__19053 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__19053__2.call(this, self__, k);
      case 3:
        return G__19053__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__19053.cljs$core$IFn$_invoke$arity$2 = G__19053__2;
  G__19053.cljs$core$IFn$_invoke$arity$3 = G__19053__3;
  return G__19053;
}();
cljs.core.TransientVector.prototype.apply = function(self__, args19050) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args19050)));
};
cljs.core.TransientVector.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.TransientVector.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.TransientVector.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, k, null);
};
cljs.core.TransientVector.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof k === "number") {
    return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(coll__$1, k, not_found);
  } else {
    return not_found;
  }
};
cljs.core.TransientVector.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.root.edit) {
    return cljs.core.array_for(coll__$1, n)[n & 31];
  } else {
    throw new Error("nth after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (0 <= n && n < self__.cnt) {
    return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(coll__$1, n);
  } else {
    return not_found;
  }
};
cljs.core.TransientVector.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.root.edit) {
    return self__.cnt;
  } else {
    throw new Error("count after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3 = function(tcoll, n, val) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    if (0 <= n && n < self__.cnt) {
      if (cljs.core.tail_off(tcoll__$1) <= n) {
        self__.tail[n & 31] = val;
        return tcoll__$1;
      } else {
        var new_root = function(tcoll__$1) {
          return function cljs$core$go(level, node) {
            var node__$1 = cljs.core.tv_ensure_editable(self__.root.edit, node);
            if (level === 0) {
              cljs.core.pv_aset(node__$1, n & 31, val);
              return node__$1;
            } else {
              var subidx = n >>> level & 31;
              cljs.core.pv_aset(node__$1, subidx, cljs$core$go(level - 5, cljs.core.pv_aget(node__$1, subidx)));
              return node__$1;
            }
          };
        }(tcoll__$1).call(null, self__.shift, self__.root);
        self__.root = new_root;
        return tcoll__$1;
      }
    } else {
      if (n === self__.cnt) {
        return cljs.core._conj_BANG_(tcoll__$1, val);
      } else {
        throw new Error([cljs.core.str("Index "), cljs.core.str(n), cljs.core.str(" out of bounds for TransientVector of length"), cljs.core.str(self__.cnt)].join(""));
      }
    }
  } else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientVector$_pop_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    if (self__.cnt === 0) {
      throw new Error("Can't pop empty vector");
    } else {
      if (1 === self__.cnt) {
        self__.cnt = 0;
        return tcoll__$1;
      } else {
        if ((self__.cnt - 1 & 31) > 0) {
          self__.cnt = self__.cnt - 1;
          return tcoll__$1;
        } else {
          var new_tail = cljs.core.unchecked_editable_array_for(tcoll__$1, self__.cnt - 2);
          var new_root = function() {
            var nr = cljs.core.tv_pop_tail(tcoll__$1, self__.shift, self__.root);
            if (!(nr == null)) {
              return nr;
            } else {
              return new cljs.core.VectorNode(self__.root.edit, [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]);
            }
          }();
          if (5 < self__.shift && cljs.core.pv_aget(new_root, 1) == null) {
            var new_root__$1 = cljs.core.tv_ensure_editable(self__.root.edit, cljs.core.pv_aget(new_root, 0));
            self__.root = new_root__$1;
            self__.shift = self__.shift - 5;
            self__.cnt = self__.cnt - 1;
            self__.tail = new_tail;
            return tcoll__$1;
          } else {
            self__.root = new_root;
            self__.cnt = self__.cnt - 1;
            self__.tail = new_tail;
            return tcoll__$1;
          }
        }
      }
    }
  } else {
    throw new Error("pop! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  var tcoll__$1 = this;
  if (typeof key === "number") {
    return cljs.core._assoc_n_BANG_(tcoll__$1, key, val);
  } else {
    throw new Error("TransientVector's key for assoc! must be a number.");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    if (self__.cnt - cljs.core.tail_off(tcoll__$1) < 32) {
      self__.tail[self__.cnt & 31] = o;
      self__.cnt = self__.cnt + 1;
      return tcoll__$1;
    } else {
      var tail_node = new cljs.core.VectorNode(self__.root.edit, self__.tail);
      var new_tail = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
      new_tail[0] = o;
      self__.tail = new_tail;
      if (self__.cnt >>> 5 > 1 << self__.shift) {
        var new_root_array = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
        var new_shift = self__.shift + 5;
        new_root_array[0] = self__.root;
        new_root_array[1] = cljs.core.new_path(self__.root.edit, self__.shift, tail_node);
        self__.root = new cljs.core.VectorNode(self__.root.edit, new_root_array);
        self__.shift = new_shift;
        self__.cnt = self__.cnt + 1;
        return tcoll__$1;
      } else {
        var new_root = cljs.core.tv_push_tail(tcoll__$1, self__.shift, self__.root, tail_node);
        self__.root = new_root;
        self__.cnt = self__.cnt + 1;
        return tcoll__$1;
      }
    }
  } else {
    throw new Error("conj! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    self__.root.edit = null;
    var len = self__.cnt - cljs.core.tail_off(tcoll__$1);
    var trimmed_tail = new Array(len);
    cljs.core.array_copy(self__.tail, 0, trimmed_tail, 0, len);
    return new cljs.core.PersistentVector(null, self__.cnt, self__.shift, self__.root, trimmed_tail, null);
  } else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.TransientVector.cljs$lang$type = true;
cljs.core.TransientVector.cljs$lang$ctorStr = "cljs.core/TransientVector";
cljs.core.TransientVector.cljs$lang$ctorPrWriter = function(this__4914__auto__, writer__4915__auto__, opt__4916__auto__) {
  return cljs.core._write(writer__4915__auto__, "cljs.core/TransientVector");
};
cljs.core.__GT_TransientVector = function cljs$core$__GT_TransientVector(cnt, shift, root, tail) {
  return new cljs.core.TransientVector(cnt, shift, root, tail);
};
cljs.core.PersistentQueueSeq = function(meta, front, rear, __hash) {
  this.meta = meta;
  this.front = front;
  this.rear = rear;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 31850572;
};
cljs.core.PersistentQueueSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentQueueSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4751__auto__ = self__.__hash;
  if (!(h__4751__auto__ == null)) {
    return h__4751__auto__;
  } else {
    var h__4751__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4751__auto____$1;
    return h__4751__auto____$1;
  }
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first(self__.front);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var temp__4124__auto__ = cljs.core.next(self__.front);
  if (temp__4124__auto__) {
    var f1 = temp__4124__auto__;
    return new cljs.core.PersistentQueueSeq(self__.meta, f1, self__.rear, null);
  } else {
    if (self__.rear == null) {
      return cljs.core._empty(coll__$1);
    } else {
      return new cljs.core.PersistentQueueSeq(self__.meta, self__.rear, null, null);
    }
  }
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentQueueSeq(meta__$1, self__.front, self__.rear, self__.__hash);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.PersistentQueueSeq.cljs$lang$type = true;
cljs.core.PersistentQueueSeq.cljs$lang$ctorStr = "cljs.core/PersistentQueueSeq";
cljs.core.PersistentQueueSeq.cljs$lang$ctorPrWriter = function(this__4914__auto__, writer__4915__auto__, opt__4916__auto__) {
  return cljs.core._write(writer__4915__auto__, "cljs.core/PersistentQueueSeq");
};
cljs.core.__GT_PersistentQueueSeq = function cljs$core$__GT_PersistentQueueSeq(meta, front, rear, __hash) {
  return new cljs.core.PersistentQueueSeq(meta, front, rear, __hash);
};
cljs.core.PersistentQueueSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5311__auto__ = this;
  return cljs.core.es6_iterator(this__5311__auto__);
};
cljs.core.PersistentQueue = function(meta, count, front, rear, __hash) {
  this.meta = meta;
  this.count = count;
  this.front = front;
  this.rear = rear;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 31858766;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.PersistentQueue.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentQueue.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentQueue.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentQueue.prototype.cljs$core$ICloneable$_clone$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentQueue(self__.meta, self__.count, self__.front, self__.rear, self__.__hash);
};
cljs.core.PersistentQueue.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.count;
};
cljs.core.PersistentQueue.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first(self__.front);
};
cljs.core.PersistentQueue.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.truth_(self__.front)) {
    var temp__4124__auto__ = cljs.core.next(self__.front);
    if (temp__4124__auto__) {
      var f1 = temp__4124__auto__;
      return new cljs.core.PersistentQueue(self__.meta, self__.count - 1, f1, self__.rear, null);
    } else {
      return new cljs.core.PersistentQueue(self__.meta, self__.count - 1, cljs.core.seq(self__.rear), cljs.core.PersistentVector.EMPTY, null);
    }
  } else {
    return coll__$1;
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4751__auto__ = self__.__hash;
  if (!(h__4751__auto__ == null)) {
    return h__4751__auto__;
  } else {
    var h__4751__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4751__auto____$1;
    return h__4751__auto____$1;
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.PersistentQueue.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.PersistentQueue.EMPTY, self__.meta);
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first(self__.front);
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.rest(cljs.core.seq(coll__$1));
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var rear__$1 = cljs.core.seq(self__.rear);
  if (cljs.core.truth_(function() {
    var or__4335__auto__ = self__.front;
    if (cljs.core.truth_(or__4335__auto__)) {
      return or__4335__auto__;
    } else {
      return rear__$1;
    }
  }())) {
    return new cljs.core.PersistentQueueSeq(null, self__.front, cljs.core.seq(rear__$1), null);
  } else {
    return null;
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentQueue(meta__$1, self__.count, self__.front, self__.rear, self__.__hash);
};
cljs.core.PersistentQueue.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.truth_(self__.front)) {
    return new cljs.core.PersistentQueue(self__.meta, self__.count + 1, self__.front, cljs.core.conj.cljs$core$IFn$_invoke$arity$2(function() {
      var or__4335__auto__ = self__.rear;
      if (cljs.core.truth_(or__4335__auto__)) {
        return or__4335__auto__;
      } else {
        return cljs.core.PersistentVector.EMPTY;
      }
    }(), o), null);
  } else {
    return new cljs.core.PersistentQueue(self__.meta, self__.count + 1, cljs.core.conj.cljs$core$IFn$_invoke$arity$2(self__.front, o), cljs.core.PersistentVector.EMPTY, null);
  }
};
cljs.core.PersistentQueue.cljs$lang$type = true;
cljs.core.PersistentQueue.cljs$lang$ctorStr = "cljs.core/PersistentQueue";
cljs.core.PersistentQueue.cljs$lang$ctorPrWriter = function(this__4914__auto__, writer__4915__auto__, opt__4916__auto__) {
  return cljs.core._write(writer__4915__auto__, "cljs.core/PersistentQueue");
};
cljs.core.__GT_PersistentQueue = function cljs$core$__GT_PersistentQueue(meta, count, front, rear, __hash) {
  return new cljs.core.PersistentQueue(meta, count, front, rear, __hash);
};
cljs.core.PersistentQueue.EMPTY = new cljs.core.PersistentQueue(null, 0, null, cljs.core.PersistentVector.EMPTY, cljs.core.empty_ordered_hash);
cljs.core.PersistentQueue.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5311__auto__ = this;
  return cljs.core.es6_iterator(this__5311__auto__);
};
cljs.core.NeverEquiv = function() {
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2097152;
};
cljs.core.NeverEquiv.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var self__ = this;
  var o__$1 = this;
  return false;
};
cljs.core.NeverEquiv.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.NeverEquiv.cljs$lang$type = true;
cljs.core.NeverEquiv.cljs$lang$ctorStr = "cljs.core/NeverEquiv";
cljs.core.NeverEquiv.cljs$lang$ctorPrWriter = function(this__4914__auto__, writer__4915__auto__, opt__4916__auto__) {
  return cljs.core._write(writer__4915__auto__, "cljs.core/NeverEquiv");
};
cljs.core.__GT_NeverEquiv = function cljs$core$__GT_NeverEquiv() {
  return new cljs.core.NeverEquiv;
};
cljs.core.never_equiv = new cljs.core.NeverEquiv;
cljs.core.equiv_map = function cljs$core$equiv_map(x, y) {
  return cljs.core.boolean$(cljs.core.map_QMARK_(y) ? cljs.core.count(x) === cljs.core.count(y) ? cljs.core.every_QMARK_(cljs.core.identity, cljs.core.map.cljs$core$IFn$_invoke$arity$2(function(xkv) {
    return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.get.cljs$core$IFn$_invoke$arity$3(y, cljs.core.first(xkv), cljs.core.never_equiv), cljs.core.second(xkv));
  }, x)) : null : null);
};
cljs.core.scan_array = function cljs$core$scan_array(incr, k, array) {
  var len = array.length;
  var i = 0;
  while (true) {
    if (i < len) {
      if (k === array[i]) {
        return i;
      } else {
        var G__19054 = i + incr;
        i = G__19054;
        continue;
      }
    } else {
      return null;
    }
    break;
  }
};
cljs.core.obj_map_compare_keys = function cljs$core$obj_map_compare_keys(a, b) {
  var a__$1 = cljs.core.hash(a);
  var b__$1 = cljs.core.hash(b);
  if (a__$1 < b__$1) {
    return-1;
  } else {
    if (a__$1 > b__$1) {
      return 1;
    } else {
      return 0;
    }
  }
};
cljs.core.obj_map__GT_hash_map = function cljs$core$obj_map__GT_hash_map(m, k, v) {
  var ks = m.keys;
  var len = ks.length;
  var so = m.strobj;
  var mm = cljs.core.meta(m);
  var i = 0;
  var out = cljs.core.transient$(cljs.core.PersistentHashMap.EMPTY);
  while (true) {
    if (i < len) {
      var k__$1 = ks[i];
      var G__19055 = i + 1;
      var G__19056 = cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(out, k__$1, so[k__$1]);
      i = G__19055;
      out = G__19056;
      continue;
    } else {
      return cljs.core.with_meta(cljs.core.persistent_BANG_(cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(out, k, v)), mm);
    }
    break;
  }
};
cljs.core.obj_clone = function cljs$core$obj_clone(obj, ks) {
  var new_obj = function() {
    var obj19060 = {};
    return obj19060;
  }();
  var l = ks.length;
  var i_19061 = 0;
  while (true) {
    if (i_19061 < l) {
      var k_19062 = ks[i_19061];
      new_obj[k_19062] = obj[k_19062];
      var G__19063 = i_19061 + 1;
      i_19061 = G__19063;
      continue;
    } else {
    }
    break;
  }
  return new_obj;
};
cljs.core.ObjMap = function(meta, keys, strobj, update_count, __hash) {
  this.meta = meta;
  this.keys = keys;
  this.strobj = strobj;
  this.update_count = update_count;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 16123663;
  this.cljs$lang$protocol_mask$partition1$ = 4;
};
cljs.core.ObjMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.ObjMap.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.ObjMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, k, null);
};
cljs.core.ObjMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.truth_(function() {
    var and__4323__auto__ = function() {
      var G__19067 = k;
      return goog.isString(G__19067);
    }();
    if (cljs.core.truth_(and__4323__auto__)) {
      return!(cljs.core.scan_array(1, k, self__.keys) == null);
    } else {
      return and__4323__auto__;
    }
  }())) {
    return self__.strobj[k];
  } else {
    return not_found;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var len = self__.keys.length;
  var keys__$1 = self__.keys.sort(cljs.core.obj_map_compare_keys);
  var init__$1 = init;
  while (true) {
    if (cljs.core.seq(keys__$1)) {
      var k = cljs.core.first(keys__$1);
      var init__$2 = function() {
        var G__19068 = init__$1;
        var G__19069 = k;
        var G__19070 = self__.strobj[k];
        return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__19068, G__19069, G__19070) : f.call(null, G__19068, G__19069, G__19070);
      }();
      if (cljs.core.reduced_QMARK_(init__$2)) {
        var G__19071 = init__$2;
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__19071) : cljs.core.deref.call(null, G__19071);
      } else {
        var G__19077 = cljs.core.rest(keys__$1);
        var G__19078 = init__$2;
        keys__$1 = G__19077;
        init__$1 = G__19078;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ObjMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.keys.length;
};
cljs.core.ObjMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4751__auto__ = self__.__hash;
  if (!(h__4751__auto__ == null)) {
    return h__4751__auto__;
  } else {
    var h__4751__auto____$1 = cljs.core.hash_unordered_coll(coll__$1);
    self__.__hash = h__4751__auto____$1;
    return h__4751__auto____$1;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map(coll__$1, other);
};
cljs.core.ObjMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.transient$(cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentHashMap.EMPTY, coll__$1));
};
cljs.core.ObjMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.ObjMap.EMPTY, self__.meta);
};
cljs.core.ObjMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.truth_(function() {
    var and__4323__auto__ = function() {
      var G__19073 = k;
      return goog.isString(G__19073);
    }();
    if (cljs.core.truth_(and__4323__auto__)) {
      return!(cljs.core.scan_array(1, k, self__.keys) == null);
    } else {
      return and__4323__auto__;
    }
  }())) {
    var new_keys = cljs.core.aclone(self__.keys);
    var new_strobj = cljs.core.obj_clone(self__.strobj, self__.keys);
    new_keys.splice(cljs.core.scan_array(1, k, new_keys), 1);
    delete new_strobj[k];
    return new cljs.core.ObjMap(self__.meta, new_keys, new_strobj, self__.update_count + 1, null);
  } else {
    return coll__$1;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.truth_(function() {
    var G__19074 = k;
    return goog.isString(G__19074);
  }())) {
    if (self__.update_count > cljs.core.ObjMap.HASHMAP_THRESHOLD || self__.keys.length >= cljs.core.ObjMap.HASHMAP_THRESHOLD) {
      return cljs.core.obj_map__GT_hash_map(coll__$1, k, v);
    } else {
      if (!(cljs.core.scan_array(1, k, self__.keys) == null)) {
        var new_strobj = cljs.core.obj_clone(self__.strobj, self__.keys);
        new_strobj[k] = v;
        return new cljs.core.ObjMap(self__.meta, self__.keys, new_strobj, self__.update_count + 1, null);
      } else {
        var new_strobj = cljs.core.obj_clone(self__.strobj, self__.keys);
        var new_keys = cljs.core.aclone(self__.keys);
        new_strobj[k] = v;
        new_keys.push(k);
        return new cljs.core.ObjMap(self__.meta, new_keys, new_strobj, self__.update_count + 1, null);
      }
    }
  } else {
    return cljs.core.obj_map__GT_hash_map(coll__$1, k, v);
  }
};
cljs.core.ObjMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.truth_(function() {
    var and__4323__auto__ = function() {
      var G__19076 = k;
      return goog.isString(G__19076);
    }();
    if (cljs.core.truth_(and__4323__auto__)) {
      return!(cljs.core.scan_array(1, k, self__.keys) == null);
    } else {
      return and__4323__auto__;
    }
  }())) {
    return true;
  } else {
    return false;
  }
};
cljs.core.ObjMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.keys.length > 0) {
    return cljs.core.map.cljs$core$IFn$_invoke$arity$2(function(coll__$1) {
      return function(p1__19064_SHARP_) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [p1__19064_SHARP_, self__.strobj[p1__19064_SHARP_]], null);
      };
    }(coll__$1), self__.keys.sort(cljs.core.obj_map_compare_keys));
  } else {
    return null;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ObjMap(meta__$1, self__.keys, self__.strobj, self__.update_count, self__.__hash);
};
cljs.core.ObjMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_(entry)) {
    return cljs.core._assoc(coll__$1, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 0), cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 1));
  } else {
    return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._conj, coll__$1, entry);
  }
};
cljs.core.ObjMap.prototype.call = function() {
  var G__19079 = null;
  var G__19079__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__19079__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__19079 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__19079__2.call(this, self__, k);
      case 3:
        return G__19079__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__19079.cljs$core$IFn$_invoke$arity$2 = G__19079__2;
  G__19079.cljs$core$IFn$_invoke$arity$3 = G__19079__3;
  return G__19079;
}();
cljs.core.ObjMap.prototype.apply = function(self__, args19065) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args19065)));
};
cljs.core.ObjMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.ObjMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.ObjMap.cljs$lang$type = true;
cljs.core.ObjMap.cljs$lang$ctorStr = "cljs.core/ObjMap";
cljs.core.ObjMap.cljs$lang$ctorPrWriter = function(this__4914__auto__, writer__4915__auto__, opt__4916__auto__) {
  return cljs.core._write(writer__4915__auto__, "cljs.core/ObjMap");
};
cljs.core.__GT_ObjMap = function cljs$core$__GT_ObjMap(meta, keys, strobj, update_count, __hash) {
  return new cljs.core.ObjMap(meta, keys, strobj, update_count, __hash);
};
cljs.core.ObjMap.EMPTY = new cljs.core.ObjMap(null, [], function() {
  var obj19081 = {};
  return obj19081;
}(), 0, cljs.core.empty_unordered_hash);
cljs.core.ObjMap.HASHMAP_THRESHOLD = 8;
cljs.core.ObjMap.fromObject = function(ks, obj) {
  return new cljs.core.ObjMap(null, ks, obj, 0, null);
};
cljs.core.ES6EntriesIterator = function(s) {
  this.s = s;
};
cljs.core.ES6EntriesIterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  if (!(self__.s == null)) {
    var vec__19082 = cljs.core.first(self__.s);
    var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__19082, 0, null);
    var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__19082, 1, null);
    self__.s = cljs.core.next(self__.s);
    return{"done":false, "value":[k, v]};
  } else {
    return{"done":true, "value":null};
  }
};
cljs.core.ES6EntriesIterator.cljs$lang$type = true;
cljs.core.ES6EntriesIterator.cljs$lang$ctorStr = "cljs.core/ES6EntriesIterator";
cljs.core.ES6EntriesIterator.cljs$lang$ctorPrWriter = function(this__4914__auto__, writer__4915__auto__, opt__4916__auto__) {
  return cljs.core._write(writer__4915__auto__, "cljs.core/ES6EntriesIterator");
};
cljs.core.__GT_ES6EntriesIterator = function cljs$core$__GT_ES6EntriesIterator(s) {
  return new cljs.core.ES6EntriesIterator(s);
};
cljs.core.es6_entries_iterator = function cljs$core$es6_entries_iterator(coll) {
  return new cljs.core.ES6EntriesIterator(cljs.core.seq(coll));
};
cljs.core.ES6SetEntriesIterator = function(s) {
  this.s = s;
};
cljs.core.ES6SetEntriesIterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  if (!(self__.s == null)) {
    var x = cljs.core.first(self__.s);
    self__.s = cljs.core.next(self__.s);
    return{"done":false, "value":[x, x]};
  } else {
    return{"done":true, "value":null};
  }
};
cljs.core.ES6SetEntriesIterator.cljs$lang$type = true;
cljs.core.ES6SetEntriesIterator.cljs$lang$ctorStr = "cljs.core/ES6SetEntriesIterator";
cljs.core.ES6SetEntriesIterator.cljs$lang$ctorPrWriter = function(this__4914__auto__, writer__4915__auto__, opt__4916__auto__) {
  return cljs.core._write(writer__4915__auto__, "cljs.core/ES6SetEntriesIterator");
};
cljs.core.__GT_ES6SetEntriesIterator = function cljs$core$__GT_ES6SetEntriesIterator(s) {
  return new cljs.core.ES6SetEntriesIterator(s);
};
cljs.core.es6_set_entries_iterator = function cljs$core$es6_set_entries_iterator(coll) {
  return new cljs.core.ES6SetEntriesIterator(cljs.core.seq(coll));
};
cljs.core.array_index_of_nil_QMARK_ = function cljs$core$array_index_of_nil_QMARK_(arr) {
  var len = arr.length;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (arr[i] == null) {
        return i;
      } else {
        var G__19083 = i + 2;
        i = G__19083;
        continue;
      }
    }
    break;
  }
};
cljs.core.array_index_of_keyword_QMARK_ = function cljs$core$array_index_of_keyword_QMARK_(arr, k) {
  var len = arr.length;
  var kstr = k.fqn;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (function() {
        var k_SINGLEQUOTE_ = arr[i];
        return k_SINGLEQUOTE_ instanceof cljs.core.Keyword && kstr === k_SINGLEQUOTE_.fqn;
      }()) {
        return i;
      } else {
        var G__19084 = i + 2;
        i = G__19084;
        continue;
      }
    }
    break;
  }
};
cljs.core.array_index_of_symbol_QMARK_ = function cljs$core$array_index_of_symbol_QMARK_(arr, k) {
  var len = arr.length;
  var kstr = k.str;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (function() {
        var k_SINGLEQUOTE_ = arr[i];
        return k_SINGLEQUOTE_ instanceof cljs.core.Symbol && kstr === k_SINGLEQUOTE_.str;
      }()) {
        return i;
      } else {
        var G__19085 = i + 2;
        i = G__19085;
        continue;
      }
    }
    break;
  }
};
cljs.core.array_index_of_identical_QMARK_ = function cljs$core$array_index_of_identical_QMARK_(arr, k) {
  var len = arr.length;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (k === arr[i]) {
        return i;
      } else {
        var G__19086 = i + 2;
        i = G__19086;
        continue;
      }
    }
    break;
  }
};
cljs.core.array_index_of_equiv_QMARK_ = function cljs$core$array_index_of_equiv_QMARK_(arr, k) {
  var len = arr.length;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(k, arr[i])) {
        return i;
      } else {
        var G__19087 = i + 2;
        i = G__19087;
        continue;
      }
    }
    break;
  }
};
cljs.core.array_index_of = function cljs$core$array_index_of(arr, k) {
  if (k instanceof cljs.core.Keyword) {
    return cljs.core.array_index_of_keyword_QMARK_(arr, k);
  } else {
    if (cljs.core.truth_(function() {
      var or__4335__auto__ = function() {
        var G__19091 = k;
        return goog.isString(G__19091);
      }();
      if (cljs.core.truth_(or__4335__auto__)) {
        return or__4335__auto__;
      } else {
        return typeof k === "number";
      }
    }())) {
      return cljs.core.array_index_of_identical_QMARK_(arr, k);
    } else {
      if (k instanceof cljs.core.Symbol) {
        return cljs.core.array_index_of_symbol_QMARK_(arr, k);
      } else {
        if (k == null) {
          return cljs.core.array_index_of_nil_QMARK_(arr);
        } else {
          return cljs.core.array_index_of_equiv_QMARK_(arr, k);
        }
      }
    }
  }
};
cljs.core.array_map_index_of = function cljs$core$array_map_index_of(m, k) {
  return cljs.core.array_index_of(m.arr, k);
};
cljs.core.array_extend_kv = function cljs$core$array_extend_kv(arr, k, v) {
  var l = arr.length;
  var narr = new Array(l + 2);
  var i_19092 = 0;
  while (true) {
    if (i_19092 < l) {
      narr[i_19092] = arr[i_19092];
      var G__19093 = i_19092 + 1;
      i_19092 = G__19093;
      continue;
    } else {
    }
    break;
  }
  narr[l] = k;
  narr[l + 1] = v;
  return narr;
};
cljs.core.array_map_extend_kv = function cljs$core$array_map_extend_kv(m, k, v) {
  return cljs.core.array_extend_kv(m.arr, k, v);
};
cljs.core.PersistentArrayMapSeq = function(arr, i, _meta) {
  this.arr = arr;
  this.i = i;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374990;
};
cljs.core.PersistentArrayMapSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentArrayMapSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__._meta;
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i < self__.arr.length - 2) {
    return new cljs.core.PersistentArrayMapSeq(self__.arr, self__.i + 2, self__._meta);
  } else {
    return null;
  }
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return(self__.arr.length - self__.i) / 2;
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll(coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__._meta);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.arr[self__.i], self__.arr[self__.i + 1]], null);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i < self__.arr.length - 2) {
    return new cljs.core.PersistentArrayMapSeq(self__.arr, self__.i + 2, self__._meta);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentArrayMapSeq(self__.arr, self__.i, new_meta);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.PersistentArrayMapSeq.cljs$lang$type = true;
cljs.core.PersistentArrayMapSeq.cljs$lang$ctorStr = "cljs.core/PersistentArrayMapSeq";
cljs.core.PersistentArrayMapSeq.cljs$lang$ctorPrWriter = function(this__4914__auto__, writer__4915__auto__, opt__4916__auto__) {
  return cljs.core._write(writer__4915__auto__, "cljs.core/PersistentArrayMapSeq");
};
cljs.core.__GT_PersistentArrayMapSeq = function cljs$core$__GT_PersistentArrayMapSeq(arr, i, _meta) {
  return new cljs.core.PersistentArrayMapSeq(arr, i, _meta);
};
cljs.core.PersistentArrayMapSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5311__auto__ = this;
  return cljs.core.es6_iterator(this__5311__auto__);
};
cljs.core.persistent_array_map_seq = function cljs$core$persistent_array_map_seq(arr, i, _meta) {
  if (i <= arr.length - 2) {
    return new cljs.core.PersistentArrayMapSeq(arr, i, _meta);
  } else {
    return null;
  }
};
cljs.core.PersistentArrayMapIterator = function(arr, i, cnt) {
  this.arr = arr;
  this.i = i;
  this.cnt = cnt;
};
cljs.core.PersistentArrayMapIterator.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  return self__.i < self__.cnt;
};
cljs.core.PersistentArrayMapIterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var ret = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.arr[self__.i], self__.arr[self__.i + 1]], null);
  self__.i = self__.i + 2;
  return ret;
};
cljs.core.PersistentArrayMapIterator.cljs$lang$type = true;
cljs.core.PersistentArrayMapIterator.cljs$lang$ctorStr = "cljs.core/PersistentArrayMapIterator";
cljs.core.PersistentArrayMapIterator.cljs$lang$ctorPrWriter = function(this__4914__auto__, writer__4915__auto__, opt__4916__auto__) {
  return cljs.core._write(writer__4915__auto__, "cljs.core/PersistentArrayMapIterator");
};
cljs.core.__GT_PersistentArrayMapIterator = function cljs$core$__GT_PersistentArrayMapIterator(arr, i, cnt) {
  return new cljs.core.PersistentArrayMapIterator(arr, i, cnt);
};
cljs.core.PersistentArrayMap = function(meta, cnt, arr, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.arr = arr;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 16647951;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
};
cljs.core.PersistentArrayMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentArrayMap.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentArrayMap.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(function() {
    var G__19095 = coll;
    return cljs.core.keys.cljs$core$IFn$_invoke$arity$1 ? cljs.core.keys.cljs$core$IFn$_invoke$arity$1(G__19095) : cljs.core.keys.call(null, G__19095);
  }());
};
cljs.core.PersistentArrayMap.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_entries_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentArrayMap.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(function() {
    var G__19096 = coll;
    return cljs.core.vals.cljs$core$IFn$_invoke$arity$1 ? cljs.core.vals.cljs$core$IFn$_invoke$arity$1(G__19096) : cljs.core.vals.call(null, G__19096);
  }());
};
cljs.core.PersistentArrayMap.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_(coll, k);
};
cljs.core.PersistentArrayMap.prototype.get = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentArrayMap.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__19097 = cljs.core.seq(coll);
  var chunk__19098 = null;
  var count__19099 = 0;
  var i__19100 = 0;
  while (true) {
    if (i__19100 < count__19099) {
      var vec__19101 = chunk__19098.cljs$core$IIndexed$_nth$arity$2(null, i__19100);
      var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__19101, 0, null);
      var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__19101, 1, null);
      var G__19102_19115 = v;
      var G__19103_19116 = k;
      f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__19102_19115, G__19103_19116) : f.call(null, G__19102_19115, G__19103_19116);
      var G__19117 = seq__19097;
      var G__19118 = chunk__19098;
      var G__19119 = count__19099;
      var G__19120 = i__19100 + 1;
      seq__19097 = G__19117;
      chunk__19098 = G__19118;
      count__19099 = G__19119;
      i__19100 = G__19120;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq(seq__19097);
      if (temp__4126__auto__) {
        var seq__19097__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__19097__$1)) {
          var c__5120__auto__ = cljs.core.chunk_first(seq__19097__$1);
          var G__19121 = cljs.core.chunk_rest(seq__19097__$1);
          var G__19122 = c__5120__auto__;
          var G__19123 = cljs.core.count(c__5120__auto__);
          var G__19124 = 0;
          seq__19097 = G__19121;
          chunk__19098 = G__19122;
          count__19099 = G__19123;
          i__19100 = G__19124;
          continue;
        } else {
          var vec__19104 = cljs.core.first(seq__19097__$1);
          var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__19104, 0, null);
          var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__19104, 1, null);
          var G__19105_19125 = v;
          var G__19106_19126 = k;
          f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__19105_19125, G__19106_19126) : f.call(null, G__19105_19125, G__19106_19126);
          var G__19127 = cljs.core.next(seq__19097__$1);
          var G__19128 = null;
          var G__19129 = 0;
          var G__19130 = 0;
          seq__19097 = G__19127;
          chunk__19098 = G__19128;
          count__19099 = G__19129;
          i__19100 = G__19130;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, k, null);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var idx = cljs.core.array_map_index_of(coll__$1, k);
  if (idx === -1) {
    return not_found;
  } else {
    return self__.arr[idx + 1];
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var len = self__.arr.length;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < len) {
      var init__$2 = function() {
        var G__19107 = init__$1;
        var G__19108 = self__.arr[i];
        var G__19109 = self__.arr[i + 1];
        return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__19107, G__19108, G__19109) : f.call(null, G__19107, G__19108, G__19109);
      }();
      if (cljs.core.reduced_QMARK_(init__$2)) {
        var G__19110 = init__$2;
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__19110) : cljs.core.deref.call(null, G__19110);
      } else {
        var G__19131 = i + 2;
        var G__19132 = init__$2;
        i = G__19131;
        init__$1 = G__19132;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IIterable$ = true;
cljs.core.PersistentArrayMap.prototype.cljs$core$IIterable$_iterator$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return new cljs.core.PersistentArrayMapIterator(self__.arr, 0, self__.cnt * 2);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt, self__.arr, self__.__hash);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4751__auto__ = self__.__hash;
  if (!(h__4751__auto__ == null)) {
    return h__4751__auto__;
  } else {
    var h__4751__auto____$1 = cljs.core.hash_unordered_coll(coll__$1);
    self__.__hash = h__4751__auto____$1;
    return h__4751__auto____$1;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  if (function() {
    var G__19111 = other;
    if (G__19111) {
      var bit__5002__auto__ = G__19111.cljs$lang$protocol_mask$partition0$ & 1024;
      if (bit__5002__auto__ || G__19111.cljs$core$IMap$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    var alen = self__.arr.length;
    var other__$1 = other;
    if (self__.cnt === other__$1.cljs$core$ICounted$_count$arity$1(null)) {
      var i = 0;
      while (true) {
        if (i < alen) {
          var v = other__$1.cljs$core$ILookup$_lookup$arity$3(null, self__.arr[i], cljs.core.lookup_sentinel);
          if (!(v === cljs.core.lookup_sentinel)) {
            if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(self__.arr[i + 1], v)) {
              var G__19133 = i + 2;
              i = G__19133;
              continue;
            } else {
              return false;
            }
          } else {
            return false;
          }
        } else {
          return true;
        }
        break;
      }
    } else {
      return false;
    }
  } else {
    return cljs.core.equiv_map(coll__$1, other);
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientArrayMap(function() {
    var obj19113 = {};
    return obj19113;
  }(), self__.arr.length, cljs.core.aclone(self__.arr));
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._with_meta(cljs.core.PersistentArrayMap.EMPTY, self__.meta);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  var idx = cljs.core.array_map_index_of(coll__$1, k);
  if (idx >= 0) {
    var len = self__.arr.length;
    var new_len = len - 2;
    if (new_len === 0) {
      return cljs.core._empty(coll__$1);
    } else {
      var new_arr = new Array(new_len);
      var s = 0;
      var d = 0;
      while (true) {
        if (s >= len) {
          return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt - 1, new_arr, null);
        } else {
          if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(k, self__.arr[s])) {
            var G__19134 = s + 2;
            var G__19135 = d;
            s = G__19134;
            d = G__19135;
            continue;
          } else {
            new_arr[d] = self__.arr[s];
            new_arr[d + 1] = self__.arr[s + 1];
            var G__19136 = s + 2;
            var G__19137 = d + 2;
            s = G__19136;
            d = G__19137;
            continue;
          }
        }
        break;
      }
    }
  } else {
    return coll__$1;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  var idx = cljs.core.array_map_index_of(coll__$1, k);
  if (idx === -1) {
    if (self__.cnt < cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
      var arr__$1 = cljs.core.array_map_extend_kv(coll__$1, k, v);
      return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt + 1, arr__$1, null);
    } else {
      return cljs.core._with_meta(cljs.core._assoc(cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentHashMap.EMPTY, coll__$1), k, v), self__.meta);
    }
  } else {
    if (v === self__.arr[idx + 1]) {
      return coll__$1;
    } else {
      var arr__$1 = function() {
        var G__19114 = cljs.core.aclone(self__.arr);
        G__19114[idx + 1] = v;
        return G__19114;
      }();
      return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt, arr__$1, null);
    }
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return!(cljs.core.array_map_index_of(coll__$1, k) === -1);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.persistent_array_map_seq(self__.arr, 0, null);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentArrayMap(meta__$1, self__.cnt, self__.arr, self__.__hash);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_(entry)) {
    return cljs.core._assoc(coll__$1, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 0), cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 1));
  } else {
    var ret = coll__$1;
    var es = cljs.core.seq(entry);
    while (true) {
      if (es == null) {
        return ret;
      } else {
        var e = cljs.core.first(es);
        if (cljs.core.vector_QMARK_(e)) {
          var G__19138 = cljs.core._assoc(ret, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(e, 0), cljs.core._nth.cljs$core$IFn$_invoke$arity$2(e, 1));
          var G__19139 = cljs.core.next(es);
          ret = G__19138;
          es = G__19139;
          continue;
        } else {
          throw new Error("conj on a map takes map entries or seqables of map entries");
        }
      }
      break;
    }
  }
};
cljs.core.PersistentArrayMap.prototype.call = function() {
  var G__19140 = null;
  var G__19140__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__19140__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__19140 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__19140__2.call(this, self__, k);
      case 3:
        return G__19140__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__19140.cljs$core$IFn$_invoke$arity$2 = G__19140__2;
  G__19140.cljs$core$IFn$_invoke$arity$3 = G__19140__3;
  return G__19140;
}();
cljs.core.PersistentArrayMap.prototype.apply = function(self__, args19094) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args19094)));
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentArrayMap.cljs$lang$type = true;
cljs.core.PersistentArrayMap.cljs$lang$ctorStr = "cljs.core/PersistentArrayMap";
cljs.core.PersistentArrayMap.cljs$lang$ctorPrWriter = function(this__4914__auto__, writer__4915__auto__, opt__4916__auto__) {
  return cljs.core._write(writer__4915__auto__, "cljs.core/PersistentArrayMap");
};
cljs.core.__GT_PersistentArrayMap = function cljs$core$__GT_PersistentArrayMap(meta, cnt, arr, __hash) {
  return new cljs.core.PersistentArrayMap(meta, cnt, arr, __hash);
};
cljs.core.PersistentArrayMap.EMPTY = new cljs.core.PersistentArrayMap(null, 0, [], cljs.core.empty_unordered_hash);
cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD = 8;
cljs.core.PersistentArrayMap.fromArray = function(arr, no_clone, no_check) {
  var arr__$1 = no_clone ? arr : cljs.core.aclone(arr);
  var arr__$2 = no_check ? arr__$1 : function() {
    var ret = [];
    var i_19141 = 0;
    while (true) {
      if (i_19141 < arr__$1.length) {
        var k_19142 = arr__$1[i_19141];
        var v_19143 = arr__$1[i_19141 + 1];
        var idx_19144 = cljs.core.array_index_of(ret, k_19142);
        if (idx_19144 === -1) {
          ret.push(k_19142);
          ret.push(v_19143);
        } else {
        }
        var G__19145 = i_19141 + 2;
        i_19141 = G__19145;
        continue;
      } else {
      }
      break;
    }
    return ret;
  }();
  var arr__$3 = function() {
    var cnt = arr__$2.length / 2;
    return new cljs.core.PersistentArrayMap(null, cnt, arr__$2, null);
  }();
  return arr__$3;
};
cljs.core.PersistentArrayMap.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5311__auto__ = this;
  return cljs.core.es6_iterator(this__5311__auto__);
};
cljs.core.TransientArrayMap = function(editable_QMARK_, len, arr) {
  this.editable_QMARK_ = editable_QMARK_;
  this.len = len;
  this.arr = arr;
  this.cljs$lang$protocol_mask$partition1$ = 56;
  this.cljs$lang$protocol_mask$partition0$ = 258;
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientMap$_dissoc_BANG_$arity$2 = function(tcoll, key) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of(tcoll__$1, key);
    if (idx >= 0) {
      self__.arr[idx] = self__.arr[self__.len - 2];
      self__.arr[idx + 1] = self__.arr[self__.len - 1];
      var G__19146_19154 = self__.arr;
      G__19146_19154.pop();
      G__19146_19154.pop();
      self__.len = self__.len - 2;
    } else {
    }
    return tcoll__$1;
  } else {
    throw new Error("dissoc! after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of(tcoll__$1, key);
    if (idx === -1) {
      if (self__.len + 2 <= 2 * cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
        self__.len = self__.len + 2;
        self__.arr.push(key);
        self__.arr.push(val);
        return tcoll__$1;
      } else {
        return cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(function() {
          var G__19147 = self__.len;
          var G__19148 = self__.arr;
          return cljs.core.array__GT_transient_hash_map.cljs$core$IFn$_invoke$arity$2 ? cljs.core.array__GT_transient_hash_map.cljs$core$IFn$_invoke$arity$2(G__19147, G__19148) : cljs.core.array__GT_transient_hash_map.call(null, G__19147, G__19148);
        }(), key, val);
      }
    } else {
      if (val === self__.arr[idx + 1]) {
        return tcoll__$1;
      } else {
        self__.arr[idx + 1] = val;
        return tcoll__$1;
      }
    }
  } else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    if (function() {
      var G__19149 = o;
      if (G__19149) {
        var bit__5009__auto__ = G__19149.cljs$lang$protocol_mask$partition0$ & 2048;
        if (bit__5009__auto__ || G__19149.cljs$core$IMapEntry$) {
          return true;
        } else {
          if (!G__19149.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_(cljs.core.IMapEntry, G__19149);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IMapEntry, G__19149);
      }
    }()) {
      return cljs.core._assoc_BANG_(tcoll__$1, function() {
        var G__19150 = o;
        return cljs.core.key.cljs$core$IFn$_invoke$arity$1 ? cljs.core.key.cljs$core$IFn$_invoke$arity$1(G__19150) : cljs.core.key.call(null, G__19150);
      }(), function() {
        var G__19151 = o;
        return cljs.core.val.cljs$core$IFn$_invoke$arity$1 ? cljs.core.val.cljs$core$IFn$_invoke$arity$1(G__19151) : cljs.core.val.call(null, G__19151);
      }());
    } else {
      var es = cljs.core.seq(o);
      var tcoll__$2 = tcoll__$1;
      while (true) {
        var temp__4124__auto__ = cljs.core.first(es);
        if (cljs.core.truth_(temp__4124__auto__)) {
          var e = temp__4124__auto__;
          var G__19155 = cljs.core.next(es);
          var G__19156 = cljs.core._assoc_BANG_(tcoll__$2, function() {
            var G__19152 = e;
            return cljs.core.key.cljs$core$IFn$_invoke$arity$1 ? cljs.core.key.cljs$core$IFn$_invoke$arity$1(G__19152) : cljs.core.key.call(null, G__19152);
          }(), function() {
            var G__19153 = e;
            return cljs.core.val.cljs$core$IFn$_invoke$arity$1 ? cljs.core.val.cljs$core$IFn$_invoke$arity$1(G__19153) : cljs.core.val.call(null, G__19153);
          }());
          es = G__19155;
          tcoll__$2 = G__19156;
          continue;
        } else {
          return tcoll__$2;
        }
        break;
      }
    }
  } else {
    throw new Error("conj! after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    self__.editable_QMARK_ = false;
    return new cljs.core.PersistentArrayMap(null, cljs.core.quot(self__.len, 2), self__.arr, null);
  } else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, k) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(tcoll__$1, k, null);
};
cljs.core.TransientArrayMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, k, not_found) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of(tcoll__$1, k);
    if (idx === -1) {
      return not_found;
    } else {
      return self__.arr[idx + 1];
    }
  } else {
    throw new Error("lookup after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ICounted$_count$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    return cljs.core.quot(self__.len, 2);
  } else {
    throw new Error("count after persistent!");
  }
};
cljs.core.TransientArrayMap.cljs$lang$type = true;
cljs.core.TransientArrayMap.cljs$lang$ctorStr = "cljs.core/TransientArrayMap";
cljs.core.TransientArrayMap.cljs$lang$ctorPrWriter = function(this__4914__auto__, writer__4915__auto__, opt__4916__auto__) {
  return cljs.core._write(writer__4915__auto__, "cljs.core/TransientArrayMap");
};
cljs.core.__GT_TransientArrayMap = function cljs$core$__GT_TransientArrayMap(editable_QMARK_, len, arr) {
  return new cljs.core.TransientArrayMap(editable_QMARK_, len, arr);
};
cljs.core.array__GT_transient_hash_map = function cljs$core$array__GT_transient_hash_map(len, arr) {
  var out = cljs.core.transient$(cljs.core.PersistentHashMap.EMPTY);
  var i = 0;
  while (true) {
    if (i < len) {
      var G__19157 = cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(out, arr[i], arr[i + 1]);
      var G__19158 = i + 2;
      out = G__19157;
      i = G__19158;
      continue;
    } else {
      return out;
    }
    break;
  }
};
cljs.core.Box = function(val) {
  this.val = val;
};
cljs.core.Box.cljs$lang$type = true;
cljs.core.Box.cljs$lang$ctorStr = "cljs.core/Box";
cljs.core.Box.cljs$lang$ctorPrWriter = function(this__4914__auto__, writer__4915__auto__, opt__4916__auto__) {
  return cljs.core._write(writer__4915__auto__, "cljs.core/Box");
};
cljs.core.__GT_Box = function cljs$core$__GT_Box(val) {
  return new cljs.core.Box(val);
};
cljs.core.key_test = function cljs$core$key_test(key, other) {
  if (key === other) {
    return true;
  } else {
    if (cljs.core.keyword_identical_QMARK_(key, other)) {
      return true;
    } else {
      return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(key, other);
    }
  }
};
cljs.core.mask = function cljs$core$mask(hash, shift) {
  return hash >>> shift & 31;
};
cljs.core.clone_and_set = function cljs$core$clone_and_set() {
  var G__19160 = arguments.length;
  switch(G__19160) {
    case 3:
      return cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 5:
      return cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3 = function(arr, i, a) {
  var G__19161 = cljs.core.aclone(arr);
  G__19161[i] = a;
  return G__19161;
};
cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$5 = function(arr, i, a, j, b) {
  var G__19162 = cljs.core.aclone(arr);
  G__19162[i] = a;
  G__19162[j] = b;
  return G__19162;
};
cljs.core.clone_and_set.cljs$lang$maxFixedArity = 5;
cljs.core.remove_pair = function cljs$core$remove_pair(arr, i) {
  var new_arr = new Array(arr.length - 2);
  cljs.core.array_copy(arr, 0, new_arr, 0, 2 * i);
  cljs.core.array_copy(arr, 2 * (i + 1), new_arr, 2 * i, new_arr.length - 2 * i);
  return new_arr;
};
cljs.core.bitmap_indexed_node_index = function cljs$core$bitmap_indexed_node_index(bitmap, bit) {
  return cljs.core.bit_count(bitmap & bit - 1);
};
cljs.core.bitpos = function cljs$core$bitpos(hash, shift) {
  return 1 << (hash >>> shift & 31);
};
cljs.core.edit_and_set = function cljs$core$edit_and_set() {
  var G__19165 = arguments.length;
  switch(G__19165) {
    case 4:
      return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    case 6:
      return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$6(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4 = function(inode, edit, i, a) {
  var editable = inode.ensure_editable(edit);
  editable.arr[i] = a;
  return editable;
};
cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$6 = function(inode, edit, i, a, j, b) {
  var editable = inode.ensure_editable(edit);
  editable.arr[i] = a;
  editable.arr[j] = b;
  return editable;
};
cljs.core.edit_and_set.cljs$lang$maxFixedArity = 6;
cljs.core.inode_kv_reduce = function cljs$core$inode_kv_reduce(arr, f, init) {
  var len = arr.length;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < len) {
      var init__$2 = function() {
        var k = arr[i];
        if (!(k == null)) {
          var G__19171 = init__$1;
          var G__19172 = k;
          var G__19173 = arr[i + 1];
          return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__19171, G__19172, G__19173) : f.call(null, G__19171, G__19172, G__19173);
        } else {
          var node = arr[i + 1];
          if (!(node == null)) {
            return node.kv_reduce(f, init__$1);
          } else {
            return init__$1;
          }
        }
      }();
      if (cljs.core.reduced_QMARK_(init__$2)) {
        var G__19174 = init__$2;
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__19174) : cljs.core.deref.call(null, G__19174);
      } else {
        var G__19175 = i + 2;
        var G__19176 = init__$2;
        i = G__19175;
        init__$1 = G__19176;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.BitmapIndexedNode = function(edit, bitmap, arr) {
  this.edit = edit;
  this.bitmap = bitmap;
  this.arr = arr;
};
cljs.core.BitmapIndexedNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    return inode;
  } else {
    var n = cljs.core.bit_count(self__.bitmap);
    var new_arr = new Array(n < 0 ? 4 : 2 * (n + 1));
    cljs.core.array_copy(self__.arr, 0, new_arr, 0, 2 * n);
    return new cljs.core.BitmapIndexedNode(e, self__.bitmap, new_arr);
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return inode;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index(self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_without_BANG_(edit__$1, shift + 5, hash, key, removed_leaf_QMARK_);
      if (n === val_or_node) {
        return inode;
      } else {
        if (!(n == null)) {
          return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, 2 * idx + 1, n);
        } else {
          if (self__.bitmap === bit) {
            return null;
          } else {
            return inode.edit_and_remove_pair(edit__$1, bit, idx);
          }
        }
      }
    } else {
      if (cljs.core.key_test(key, key_or_nil)) {
        removed_leaf_QMARK_[0] = true;
        return inode.edit_and_remove_pair(edit__$1, bit, idx);
      } else {
        return inode;
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.edit_and_remove_pair = function(e, bit, i) {
  var self__ = this;
  var inode = this;
  if (self__.bitmap === bit) {
    return null;
  } else {
    var editable = inode.ensure_editable(e);
    var earr = editable.arr;
    var len = earr.length;
    editable.bitmap = bit ^ editable.bitmap;
    cljs.core.array_copy(earr, 2 * (i + 1), earr, 2 * i, len - 2 * (i + 1));
    earr[len - 2] = null;
    earr[len - 1] = null;
    return editable;
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  var G__19177 = self__.arr;
  return cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$1 ? cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$1(G__19177) : cljs.core.create_inode_seq.call(null, G__19177);
};
cljs.core.BitmapIndexedNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  return cljs.core.inode_kv_reduce(self__.arr, f, init);
};
cljs.core.BitmapIndexedNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return not_found;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index(self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      return val_or_node.inode_lookup(shift + 5, hash, key, not_found);
    } else {
      if (cljs.core.key_test(key, key_or_nil)) {
        return val_or_node;
      } else {
        return not_found;
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  var idx = cljs.core.bitmap_indexed_node_index(self__.bitmap, bit);
  if ((self__.bitmap & bit) === 0) {
    var n = cljs.core.bit_count(self__.bitmap);
    if (2 * n < self__.arr.length) {
      var editable = inode.ensure_editable(edit__$1);
      var earr = editable.arr;
      added_leaf_QMARK_.val = true;
      cljs.core.array_copy_downward(earr, 2 * idx, earr, 2 * (idx + 1), 2 * (n - idx));
      earr[2 * idx] = key;
      earr[2 * idx + 1] = val;
      editable.bitmap = editable.bitmap | bit;
      return editable;
    } else {
      if (n >= 16) {
        var nodes = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
        var jdx = hash >>> shift & 31;
        nodes[jdx] = cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
        var i_19191 = 0;
        var j_19192 = 0;
        while (true) {
          if (i_19191 < 32) {
            if ((self__.bitmap >>> i_19191 & 1) === 0) {
              var G__19193 = i_19191 + 1;
              var G__19194 = j_19192;
              i_19191 = G__19193;
              j_19192 = G__19194;
              continue;
            } else {
              nodes[i_19191] = !(self__.arr[j_19192] == null) ? cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, cljs.core.hash(self__.arr[j_19192]), self__.arr[j_19192], self__.arr[j_19192 + 1], added_leaf_QMARK_) : self__.arr[j_19192 + 1];
              var G__19195 = i_19191 + 1;
              var G__19196 = j_19192 + 2;
              i_19191 = G__19195;
              j_19192 = G__19196;
              continue;
            }
          } else {
          }
          break;
        }
        return new cljs.core.ArrayNode(edit__$1, n + 1, nodes);
      } else {
        var new_arr = new Array(2 * (n + 4));
        cljs.core.array_copy(self__.arr, 0, new_arr, 0, 2 * idx);
        new_arr[2 * idx] = key;
        new_arr[2 * idx + 1] = val;
        cljs.core.array_copy(self__.arr, 2 * idx, new_arr, 2 * (idx + 1), 2 * (n - idx));
        added_leaf_QMARK_.val = true;
        var editable = inode.ensure_editable(edit__$1);
        editable.arr = new_arr;
        editable.bitmap = editable.bitmap | bit;
        return editable;
      }
    }
  } else {
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
      if (n === val_or_node) {
        return inode;
      } else {
        return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, 2 * idx + 1, n);
      }
    } else {
      if (cljs.core.key_test(key, key_or_nil)) {
        if (val === val_or_node) {
          return inode;
        } else {
          return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, 2 * idx + 1, val);
        }
      } else {
        added_leaf_QMARK_.val = true;
        return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$6(inode, edit__$1, 2 * idx, null, 2 * idx + 1, function() {
          var G__19178 = edit__$1;
          var G__19179 = shift + 5;
          var G__19180 = key_or_nil;
          var G__19181 = val_or_node;
          var G__19182 = hash;
          var G__19183 = key;
          var G__19184 = val;
          return cljs.core.create_node.cljs$core$IFn$_invoke$arity$7 ? cljs.core.create_node.cljs$core$IFn$_invoke$arity$7(G__19178, G__19179, G__19180, G__19181, G__19182, G__19183, G__19184) : cljs.core.create_node.call(null, G__19178, G__19179, G__19180, G__19181, G__19182, G__19183, G__19184);
        }());
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  var idx = cljs.core.bitmap_indexed_node_index(self__.bitmap, bit);
  if ((self__.bitmap & bit) === 0) {
    var n = cljs.core.bit_count(self__.bitmap);
    if (n >= 16) {
      var nodes = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
      var jdx = hash >>> shift & 31;
      nodes[jdx] = cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
      var i_19197 = 0;
      var j_19198 = 0;
      while (true) {
        if (i_19197 < 32) {
          if ((self__.bitmap >>> i_19197 & 1) === 0) {
            var G__19199 = i_19197 + 1;
            var G__19200 = j_19198;
            i_19197 = G__19199;
            j_19198 = G__19200;
            continue;
          } else {
            nodes[i_19197] = !(self__.arr[j_19198] == null) ? cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, cljs.core.hash(self__.arr[j_19198]), self__.arr[j_19198], self__.arr[j_19198 + 1], added_leaf_QMARK_) : self__.arr[j_19198 + 1];
            var G__19201 = i_19197 + 1;
            var G__19202 = j_19198 + 2;
            i_19197 = G__19201;
            j_19198 = G__19202;
            continue;
          }
        } else {
        }
        break;
      }
      return new cljs.core.ArrayNode(null, n + 1, nodes);
    } else {
      var new_arr = new Array(2 * (n + 1));
      cljs.core.array_copy(self__.arr, 0, new_arr, 0, 2 * idx);
      new_arr[2 * idx] = key;
      new_arr[2 * idx + 1] = val;
      cljs.core.array_copy(self__.arr, 2 * idx, new_arr, 2 * (idx + 1), 2 * (n - idx));
      added_leaf_QMARK_.val = true;
      return new cljs.core.BitmapIndexedNode(null, self__.bitmap | bit, new_arr);
    }
  } else {
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
      if (n === val_or_node) {
        return inode;
      } else {
        return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, 2 * idx + 1, n));
      }
    } else {
      if (cljs.core.key_test(key, key_or_nil)) {
        if (val === val_or_node) {
          return inode;
        } else {
          return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, 2 * idx + 1, val));
        }
      } else {
        added_leaf_QMARK_.val = true;
        return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$5(self__.arr, 2 * idx, null, 2 * idx + 1, function() {
          var G__19185 = shift + 5;
          var G__19186 = key_or_nil;
          var G__19187 = val_or_node;
          var G__19188 = hash;
          var G__19189 = key;
          var G__19190 = val;
          return cljs.core.create_node.cljs$core$IFn$_invoke$arity$6 ? cljs.core.create_node.cljs$core$IFn$_invoke$arity$6(G__19185, G__19186, G__19187, G__19188, G__19189, G__19190) : cljs.core.create_node.call(null, G__19185, G__19186, G__19187, G__19188, G__19189, G__19190);
        }()));
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return not_found;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index(self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      return val_or_node.inode_find(shift + 5, hash, key, not_found);
    } else {
      if (cljs.core.key_test(key, key_or_nil)) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [key_or_nil, val_or_node], null);
      } else {
        return not_found;
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return inode;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index(self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_without(shift + 5, hash, key);
      if (n === val_or_node) {
        return inode;
      } else {
        if (!(n == null)) {
          return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, 2 * idx + 1, n));
        } else {
          if (self__.bitmap === bit) {
            return null;
          } else {
            return new cljs.core.BitmapIndexedNode(null, self__.bitmap ^ bit, cljs.core.remove_pair(self__.arr, idx));
          }
        }
      }
    } else {
      if (cljs.core.key_test(key, key_or_nil)) {
        return new cljs.core.BitmapIndexedNode(null, self__.bitmap ^ bit, cljs.core.remove_pair(self__.arr, idx));
      } else {
        return inode;
      }
    }
  }
};
cljs.core.BitmapIndexedNode.cljs$lang$type = true;
cljs.core.BitmapIndexedNode.cljs$lang$ctorStr = "cljs.core/BitmapIndexedNode";
cljs.core.BitmapIndexedNode.cljs$lang$ctorPrWriter = function(this__4914__auto__, writer__4915__auto__, opt__4916__auto__) {
  return cljs.core._write(writer__4915__auto__, "cljs.core/BitmapIndexedNode");
};
cljs.core.__GT_BitmapIndexedNode = function cljs$core$__GT_BitmapIndexedNode(edit, bitmap, arr) {
  return new cljs.core.BitmapIndexedNode(edit, bitmap, arr);
};
cljs.core.BitmapIndexedNode.EMPTY = new cljs.core.BitmapIndexedNode(null, 0, []);
cljs.core.pack_array_node = function cljs$core$pack_array_node(array_node, edit, idx) {
  var arr = array_node.arr;
  var len = arr.length;
  var new_arr = new Array(2 * (array_node.cnt - 1));
  var i = 0;
  var j = 1;
  var bitmap = 0;
  while (true) {
    if (i < len) {
      if (!(i === idx) && !(arr[i] == null)) {
        new_arr[j] = arr[i];
        var G__19203 = i + 1;
        var G__19204 = j + 2;
        var G__19205 = bitmap | 1 << i;
        i = G__19203;
        j = G__19204;
        bitmap = G__19205;
        continue;
      } else {
        var G__19206 = i + 1;
        var G__19207 = j;
        var G__19208 = bitmap;
        i = G__19206;
        j = G__19207;
        bitmap = G__19208;
        continue;
      }
    } else {
      return new cljs.core.BitmapIndexedNode(edit, bitmap, new_arr);
    }
    break;
  }
};
cljs.core.ArrayNode = function(edit, cnt, arr) {
  this.edit = edit;
  this.cnt = cnt;
  this.arr = arr;
};
cljs.core.ArrayNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    return inode;
  } else {
    return new cljs.core.ArrayNode(e, self__.cnt, cljs.core.aclone(self__.arr));
  }
};
cljs.core.ArrayNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (node == null) {
    return inode;
  } else {
    var n = node.inode_without_BANG_(edit__$1, shift + 5, hash, key, removed_leaf_QMARK_);
    if (n === node) {
      return inode;
    } else {
      if (n == null) {
        if (self__.cnt <= 8) {
          return cljs.core.pack_array_node(inode, edit__$1, idx);
        } else {
          var editable = cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, idx, n);
          editable.cnt = editable.cnt - 1;
          return editable;
        }
      } else {
        return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, idx, n);
      }
    }
  }
};
cljs.core.ArrayNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  var G__19209 = self__.arr;
  return cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$1 ? cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$1(G__19209) : cljs.core.create_array_node_seq.call(null, G__19209);
};
cljs.core.ArrayNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  var len = self__.arr.length;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < len) {
      var node = self__.arr[i];
      if (!(node == null)) {
        var init__$2 = node.kv_reduce(f, init__$1);
        if (cljs.core.reduced_QMARK_(init__$2)) {
          var G__19210 = init__$2;
          return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__19210) : cljs.core.deref.call(null, G__19210);
        } else {
          var G__19211 = i + 1;
          var G__19212 = init__$2;
          i = G__19211;
          init__$1 = G__19212;
          continue;
        }
      } else {
        var G__19213 = i + 1;
        var G__19214 = init__$1;
        i = G__19213;
        init__$1 = G__19214;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.ArrayNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (!(node == null)) {
    return node.inode_lookup(shift + 5, hash, key, not_found);
  } else {
    return not_found;
  }
};
cljs.core.ArrayNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (node == null) {
    var editable = cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, idx, cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_));
    editable.cnt = editable.cnt + 1;
    return editable;
  } else {
    var n = node.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
    if (n === node) {
      return inode;
    } else {
      return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, idx, n);
    }
  }
};
cljs.core.ArrayNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (node == null) {
    return new cljs.core.ArrayNode(null, self__.cnt + 1, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, idx, cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_)));
  } else {
    var n = node.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
    if (n === node) {
      return inode;
    } else {
      return new cljs.core.ArrayNode(null, self__.cnt, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, idx, n));
    }
  }
};
cljs.core.ArrayNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (!(node == null)) {
    return node.inode_find(shift + 5, hash, key, not_found);
  } else {
    return not_found;
  }
};
cljs.core.ArrayNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (!(node == null)) {
    var n = node.inode_without(shift + 5, hash, key);
    if (n === node) {
      return inode;
    } else {
      if (n == null) {
        if (self__.cnt <= 8) {
          return cljs.core.pack_array_node(inode, null, idx);
        } else {
          return new cljs.core.ArrayNode(null, self__.cnt - 1, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, idx, n));
        }
      } else {
        return new cljs.core.ArrayNode(null, self__.cnt, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, idx, n));
      }
    }
  } else {
    return inode;
  }
};
cljs.core.ArrayNode.cljs$lang$type = true;
cljs.core.ArrayNode.cljs$lang$ctorStr = "cljs.core/ArrayNode";
cljs.core.ArrayNode.cljs$lang$ctorPrWriter = function(this__4914__auto__, writer__4915__auto__, opt__4916__auto__) {
  return cljs.core._write(writer__4915__auto__, "cljs.core/ArrayNode");
};
cljs.core.__GT_ArrayNode = function cljs$core$__GT_ArrayNode(edit, cnt, arr) {
  return new cljs.core.ArrayNode(edit, cnt, arr);
};
cljs.core.hash_collision_node_find_index = function cljs$core$hash_collision_node_find_index(arr, cnt, key) {
  var lim = 2 * cnt;
  var i = 0;
  while (true) {
    if (i < lim) {
      if (cljs.core.key_test(key, arr[i])) {
        return i;
      } else {
        var G__19215 = i + 2;
        i = G__19215;
        continue;
      }
    } else {
      return-1;
    }
    break;
  }
};
cljs.core.HashCollisionNode = function(edit, collision_hash, cnt, arr) {
  this.edit = edit;
  this.collision_hash = collision_hash;
  this.cnt = cnt;
  this.arr = arr;
};
cljs.core.HashCollisionNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    return inode;
  } else {
    var new_arr = new Array(2 * (self__.cnt + 1));
    cljs.core.array_copy(self__.arr, 0, new_arr, 0, 2 * self__.cnt);
    return new cljs.core.HashCollisionNode(e, self__.collision_hash, self__.cnt, new_arr);
  }
};
cljs.core.HashCollisionNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index(self__.arr, self__.cnt, key);
  if (idx === -1) {
    return inode;
  } else {
    removed_leaf_QMARK_[0] = true;
    if (self__.cnt === 1) {
      return null;
    } else {
      var editable = inode.ensure_editable(edit__$1);
      var earr = editable.arr;
      earr[idx] = earr[2 * self__.cnt - 2];
      earr[idx + 1] = earr[2 * self__.cnt - 1];
      earr[2 * self__.cnt - 1] = null;
      earr[2 * self__.cnt - 2] = null;
      editable.cnt = editable.cnt - 1;
      return editable;
    }
  }
};
cljs.core.HashCollisionNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  var G__19216 = self__.arr;
  return cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$1 ? cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$1(G__19216) : cljs.core.create_inode_seq.call(null, G__19216);
};
cljs.core.HashCollisionNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  return cljs.core.inode_kv_reduce(self__.arr, f, init);
};
cljs.core.HashCollisionNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index(self__.arr, self__.cnt, key);
  if (idx < 0) {
    return not_found;
  } else {
    if (cljs.core.key_test(key, self__.arr[idx])) {
      return self__.arr[idx + 1];
    } else {
      return not_found;
    }
  }
};
cljs.core.HashCollisionNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  if (hash === self__.collision_hash) {
    var idx = cljs.core.hash_collision_node_find_index(self__.arr, self__.cnt, key);
    if (idx === -1) {
      if (self__.arr.length > 2 * self__.cnt) {
        var editable = cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$6(inode, edit__$1, 2 * self__.cnt, key, 2 * self__.cnt + 1, val);
        added_leaf_QMARK_.val = true;
        editable.cnt = editable.cnt + 1;
        return editable;
      } else {
        var len = self__.arr.length;
        var new_arr = new Array(len + 2);
        cljs.core.array_copy(self__.arr, 0, new_arr, 0, len);
        new_arr[len] = key;
        new_arr[len + 1] = val;
        added_leaf_QMARK_.val = true;
        return inode.ensure_editable_array(edit__$1, self__.cnt + 1, new_arr);
      }
    } else {
      if (self__.arr[idx + 1] === val) {
        return inode;
      } else {
        return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, idx + 1, val);
      }
    }
  } else {
    return(new cljs.core.BitmapIndexedNode(edit__$1, 1 << (self__.collision_hash >>> shift & 31), [null, inode, null, null])).inode_assoc_BANG_(edit__$1, shift, hash, key, val, added_leaf_QMARK_);
  }
};
cljs.core.HashCollisionNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  if (hash === self__.collision_hash) {
    var idx = cljs.core.hash_collision_node_find_index(self__.arr, self__.cnt, key);
    if (idx === -1) {
      var len = 2 * self__.cnt;
      var new_arr = new Array(len + 2);
      cljs.core.array_copy(self__.arr, 0, new_arr, 0, len);
      new_arr[len] = key;
      new_arr[len + 1] = val;
      added_leaf_QMARK_.val = true;
      return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt + 1, new_arr);
    } else {
      if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(self__.arr[idx], val)) {
        return inode;
      } else {
        return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, idx + 1, val));
      }
    }
  } else {
    return(new cljs.core.BitmapIndexedNode(null, 1 << (self__.collision_hash >>> shift & 31), [null, inode])).inode_assoc(shift, hash, key, val, added_leaf_QMARK_);
  }
};
cljs.core.HashCollisionNode.prototype.ensure_editable_array = function(e, count, array) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    self__.arr = array;
    self__.cnt = count;
    return inode;
  } else {
    return new cljs.core.HashCollisionNode(self__.edit, self__.collision_hash, count, array);
  }
};
cljs.core.HashCollisionNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index(self__.arr, self__.cnt, key);
  if (idx < 0) {
    return not_found;
  } else {
    if (cljs.core.key_test(key, self__.arr[idx])) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.arr[idx], self__.arr[idx + 1]], null);
    } else {
      return not_found;
    }
  }
};
cljs.core.HashCollisionNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index(self__.arr, self__.cnt, key);
  if (idx === -1) {
    return inode;
  } else {
    if (self__.cnt === 1) {
      return null;
    } else {
      return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt - 1, cljs.core.remove_pair(self__.arr, cljs.core.quot(idx, 2)));
    }
  }
};
cljs.core.HashCollisionNode.cljs$lang$type = true;
cljs.core.HashCollisionNode.cljs$lang$ctorStr = "cljs.core/HashCollisionNode";
cljs.core.HashCollisionNode.cljs$lang$ctorPrWriter = function(this__4914__auto__, writer__4915__auto__, opt__4916__auto__) {
  return cljs.core._write(writer__4915__auto__, "cljs.core/HashCollisionNode");
};
cljs.core.__GT_HashCollisionNode = function cljs$core$__GT_HashCollisionNode(edit, collision_hash, cnt, arr) {
  return new cljs.core.HashCollisionNode(edit, collision_hash, cnt, arr);
};
cljs.core.create_node = function cljs$core$create_node() {
  var G__19218 = arguments.length;
  switch(G__19218) {
    case 6:
      return cljs.core.create_node.cljs$core$IFn$_invoke$arity$6(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]);
      break;
    case 7:
      return cljs.core.create_node.cljs$core$IFn$_invoke$arity$7(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.create_node.cljs$core$IFn$_invoke$arity$6 = function(shift, key1, val1, key2hash, key2, val2) {
  var key1hash = cljs.core.hash(key1);
  if (key1hash === key2hash) {
    return new cljs.core.HashCollisionNode(null, key1hash, 2, [key1, val1, key2, val2]);
  } else {
    var added_leaf_QMARK_ = new cljs.core.Box(false);
    return cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift, key1hash, key1, val1, added_leaf_QMARK_).inode_assoc(shift, key2hash, key2, val2, added_leaf_QMARK_);
  }
};
cljs.core.create_node.cljs$core$IFn$_invoke$arity$7 = function(edit, shift, key1, val1, key2hash, key2, val2) {
  var key1hash = cljs.core.hash(key1);
  if (key1hash === key2hash) {
    return new cljs.core.HashCollisionNode(null, key1hash, 2, [key1, val1, key2, val2]);
  } else {
    var added_leaf_QMARK_ = new cljs.core.Box(false);
    return cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit, shift, key1hash, key1, val1, added_leaf_QMARK_).inode_assoc_BANG_(edit, shift, key2hash, key2, val2, added_leaf_QMARK_);
  }
};
cljs.core.create_node.cljs$lang$maxFixedArity = 7;
cljs.core.NodeSeq = function(meta, nodes, i, s, __hash) {
  this.meta = meta;
  this.nodes = nodes;
  this.i = i;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374860;
};
cljs.core.NodeSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.NodeSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.NodeSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.NodeSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4751__auto__ = self__.__hash;
  if (!(h__4751__auto__ == null)) {
    return h__4751__auto__;
  } else {
    var h__4751__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4751__auto____$1;
    return h__4751__auto____$1;
  }
};
cljs.core.NodeSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.NodeSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.NodeSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.NodeSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.NodeSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.s == null) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.nodes[self__.i], self__.nodes[self__.i + 1]], null);
  } else {
    return cljs.core.first(self__.s);
  }
};
cljs.core.NodeSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.s == null) {
    var G__19220 = self__.nodes;
    var G__19221 = self__.i + 2;
    var G__19222 = null;
    return cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$3 ? cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$3(G__19220, G__19221, G__19222) : cljs.core.create_inode_seq.call(null, G__19220, G__19221, G__19222);
  } else {
    var G__19223 = self__.nodes;
    var G__19224 = self__.i;
    var G__19225 = cljs.core.next(self__.s);
    return cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$3 ? cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$3(G__19223, G__19224, G__19225) : cljs.core.create_inode_seq.call(null, G__19223, G__19224, G__19225);
  }
};
cljs.core.NodeSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.NodeSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.NodeSeq(meta__$1, self__.nodes, self__.i, self__.s, self__.__hash);
};
cljs.core.NodeSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.NodeSeq.cljs$lang$type = true;
cljs.core.NodeSeq.cljs$lang$ctorStr = "cljs.core/NodeSeq";
cljs.core.NodeSeq.cljs$lang$ctorPrWriter = function(this__4914__auto__, writer__4915__auto__, opt__4916__auto__) {
  return cljs.core._write(writer__4915__auto__, "cljs.core/NodeSeq");
};
cljs.core.__GT_NodeSeq = function cljs$core$__GT_NodeSeq(meta, nodes, i, s, __hash) {
  return new cljs.core.NodeSeq(meta, nodes, i, s, __hash);
};
cljs.core.NodeSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5311__auto__ = this;
  return cljs.core.es6_iterator(this__5311__auto__);
};
cljs.core.create_inode_seq = function cljs$core$create_inode_seq() {
  var G__19227 = arguments.length;
  switch(G__19227) {
    case 1:
      return cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 3:
      return cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$1 = function(nodes) {
  return cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$3(nodes, 0, null);
};
cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$3 = function(nodes, i, s) {
  if (s == null) {
    var len = nodes.length;
    var j = i;
    while (true) {
      if (j < len) {
        if (!(nodes[j] == null)) {
          return new cljs.core.NodeSeq(null, nodes, j, null, null);
        } else {
          var temp__4124__auto__ = nodes[j + 1];
          if (cljs.core.truth_(temp__4124__auto__)) {
            var node = temp__4124__auto__;
            var temp__4124__auto____$1 = node.inode_seq();
            if (cljs.core.truth_(temp__4124__auto____$1)) {
              var node_seq = temp__4124__auto____$1;
              return new cljs.core.NodeSeq(null, nodes, j + 2, node_seq, null);
            } else {
              var G__19229 = j + 2;
              j = G__19229;
              continue;
            }
          } else {
            var G__19230 = j + 2;
            j = G__19230;
            continue;
          }
        }
      } else {
        return null;
      }
      break;
    }
  } else {
    return new cljs.core.NodeSeq(null, nodes, i, s, null);
  }
};
cljs.core.create_inode_seq.cljs$lang$maxFixedArity = 3;
cljs.core.ArrayNodeSeq = function(meta, nodes, i, s, __hash) {
  this.meta = meta;
  this.nodes = nodes;
  this.i = i;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374860;
};
cljs.core.ArrayNodeSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.ArrayNodeSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4751__auto__ = self__.__hash;
  if (!(h__4751__auto__ == null)) {
    return h__4751__auto__;
  } else {
    var h__4751__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4751__auto____$1;
    return h__4751__auto____$1;
  }
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first(self__.s);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var G__19231 = null;
  var G__19232 = self__.nodes;
  var G__19233 = self__.i;
  var G__19234 = cljs.core.next(self__.s);
  return cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$4 ? cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$4(G__19231, G__19232, G__19233, G__19234) : cljs.core.create_array_node_seq.call(null, G__19231, G__19232, G__19233, G__19234);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ArrayNodeSeq(meta__$1, self__.nodes, self__.i, self__.s, self__.__hash);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.ArrayNodeSeq.cljs$lang$type = true;
cljs.core.ArrayNodeSeq.cljs$lang$ctorStr = "cljs.core/ArrayNodeSeq";
cljs.core.ArrayNodeSeq.cljs$lang$ctorPrWriter = function(this__4914__auto__, writer__4915__auto__, opt__4916__auto__) {
  return cljs.core._write(writer__4915__auto__, "cljs.core/ArrayNodeSeq");
};
cljs.core.__GT_ArrayNodeSeq = function cljs$core$__GT_ArrayNodeSeq(meta, nodes, i, s, __hash) {
  return new cljs.core.ArrayNodeSeq(meta, nodes, i, s, __hash);
};
cljs.core.ArrayNodeSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5311__auto__ = this;
  return cljs.core.es6_iterator(this__5311__auto__);
};
cljs.core.create_array_node_seq = function cljs$core$create_array_node_seq() {
  var G__19236 = arguments.length;
  switch(G__19236) {
    case 1:
      return cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 4:
      return cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$1 = function(nodes) {
  return cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$4(null, nodes, 0, null);
};
cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$4 = function(meta, nodes, i, s) {
  if (s == null) {
    var len = nodes.length;
    var j = i;
    while (true) {
      if (j < len) {
        var temp__4124__auto__ = nodes[j];
        if (cljs.core.truth_(temp__4124__auto__)) {
          var nj = temp__4124__auto__;
          var temp__4124__auto____$1 = nj.inode_seq();
          if (cljs.core.truth_(temp__4124__auto____$1)) {
            var ns = temp__4124__auto____$1;
            return new cljs.core.ArrayNodeSeq(meta, nodes, j + 1, ns, null);
          } else {
            var G__19238 = j + 1;
            j = G__19238;
            continue;
          }
        } else {
          var G__19239 = j + 1;
          j = G__19239;
          continue;
        }
      } else {
        return null;
      }
      break;
    }
  } else {
    return new cljs.core.ArrayNodeSeq(meta, nodes, i, s, null);
  }
};
cljs.core.create_array_node_seq.cljs$lang$maxFixedArity = 4;
cljs.core.PersistentHashMap = function(meta, cnt, root, has_nil_QMARK_, nil_val, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.root = root;
  this.has_nil_QMARK_ = has_nil_QMARK_;
  this.nil_val = nil_val;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 16123663;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
};
cljs.core.PersistentHashMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentHashMap.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentHashMap.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(function() {
    var G__19241 = coll;
    return cljs.core.keys.cljs$core$IFn$_invoke$arity$1 ? cljs.core.keys.cljs$core$IFn$_invoke$arity$1(G__19241) : cljs.core.keys.call(null, G__19241);
  }());
};
cljs.core.PersistentHashMap.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_entries_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentHashMap.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(function() {
    var G__19242 = coll;
    return cljs.core.vals.cljs$core$IFn$_invoke$arity$1 ? cljs.core.vals.cljs$core$IFn$_invoke$arity$1(G__19242) : cljs.core.vals.call(null, G__19242);
  }());
};
cljs.core.PersistentHashMap.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_(coll, k);
};
cljs.core.PersistentHashMap.prototype.get = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentHashMap.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__19243 = cljs.core.seq(coll);
  var chunk__19244 = null;
  var count__19245 = 0;
  var i__19246 = 0;
  while (true) {
    if (i__19246 < count__19245) {
      var vec__19247 = chunk__19244.cljs$core$IIndexed$_nth$arity$2(null, i__19246);
      var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__19247, 0, null);
      var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__19247, 1, null);
      var G__19248_19259 = v;
      var G__19249_19260 = k;
      f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__19248_19259, G__19249_19260) : f.call(null, G__19248_19259, G__19249_19260);
      var G__19261 = seq__19243;
      var G__19262 = chunk__19244;
      var G__19263 = count__19245;
      var G__19264 = i__19246 + 1;
      seq__19243 = G__19261;
      chunk__19244 = G__19262;
      count__19245 = G__19263;
      i__19246 = G__19264;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq(seq__19243);
      if (temp__4126__auto__) {
        var seq__19243__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__19243__$1)) {
          var c__5120__auto__ = cljs.core.chunk_first(seq__19243__$1);
          var G__19265 = cljs.core.chunk_rest(seq__19243__$1);
          var G__19266 = c__5120__auto__;
          var G__19267 = cljs.core.count(c__5120__auto__);
          var G__19268 = 0;
          seq__19243 = G__19265;
          chunk__19244 = G__19266;
          count__19245 = G__19267;
          i__19246 = G__19268;
          continue;
        } else {
          var vec__19250 = cljs.core.first(seq__19243__$1);
          var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__19250, 0, null);
          var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__19250, 1, null);
          var G__19251_19269 = v;
          var G__19252_19270 = k;
          f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__19251_19269, G__19252_19270) : f.call(null, G__19251_19269, G__19252_19270);
          var G__19271 = cljs.core.next(seq__19243__$1);
          var G__19272 = null;
          var G__19273 = 0;
          var G__19274 = 0;
          seq__19243 = G__19271;
          chunk__19244 = G__19272;
          count__19245 = G__19273;
          i__19246 = G__19274;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, k, null);
};
cljs.core.PersistentHashMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return self__.nil_val;
    } else {
      return not_found;
    }
  } else {
    if (self__.root == null) {
      return not_found;
    } else {
      return self__.root.inode_lookup(0, cljs.core.hash(k), k, not_found);
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var init__$1 = self__.has_nil_QMARK_ ? function() {
    var G__19253 = init;
    var G__19254 = null;
    var G__19255 = self__.nil_val;
    return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__19253, G__19254, G__19255) : f.call(null, G__19253, G__19254, G__19255);
  }() : init;
  if (cljs.core.reduced_QMARK_(init__$1)) {
    var G__19256 = init__$1;
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__19256) : cljs.core.deref.call(null, G__19256);
  } else {
    if (!(self__.root == null)) {
      return self__.root.kv_reduce(f, init__$1);
    } else {
      return init__$1;
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentHashMap.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentHashMap(self__.meta, self__.cnt, self__.root, self__.has_nil_QMARK_, self__.nil_val, self__.__hash);
};
cljs.core.PersistentHashMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentHashMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4751__auto__ = self__.__hash;
  if (!(h__4751__auto__ == null)) {
    return h__4751__auto__;
  } else {
    var h__4751__auto____$1 = cljs.core.hash_unordered_coll(coll__$1);
    self__.__hash = h__4751__auto____$1;
    return h__4751__auto____$1;
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map(coll__$1, other);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientHashMap(function() {
    var obj19258 = {};
    return obj19258;
  }(), self__.root, self__.cnt, self__.has_nil_QMARK_, self__.nil_val);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._with_meta(cljs.core.PersistentHashMap.EMPTY, self__.meta);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return new cljs.core.PersistentHashMap(self__.meta, self__.cnt - 1, self__.root, false, null, null);
    } else {
      return coll__$1;
    }
  } else {
    if (self__.root == null) {
      return coll__$1;
    } else {
      var new_root = self__.root.inode_without(0, cljs.core.hash(k), k);
      if (new_root === self__.root) {
        return coll__$1;
      } else {
        return new cljs.core.PersistentHashMap(self__.meta, self__.cnt - 1, new_root, self__.has_nil_QMARK_, self__.nil_val, null);
      }
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_ && v === self__.nil_val) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentHashMap(self__.meta, self__.has_nil_QMARK_ ? self__.cnt : self__.cnt + 1, self__.root, true, v, null);
    }
  } else {
    var added_leaf_QMARK_ = new cljs.core.Box(false);
    var new_root = (self__.root == null ? cljs.core.BitmapIndexedNode.EMPTY : self__.root).inode_assoc(0, cljs.core.hash(k), k, v, added_leaf_QMARK_);
    if (new_root === self__.root) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentHashMap(self__.meta, added_leaf_QMARK_.val ? self__.cnt + 1 : self__.cnt, new_root, self__.has_nil_QMARK_, self__.nil_val, null);
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    return self__.has_nil_QMARK_;
  } else {
    if (self__.root == null) {
      return false;
    } else {
      return!(self__.root.inode_lookup(0, cljs.core.hash(k), k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel);
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    var s = !(self__.root == null) ? self__.root.inode_seq() : null;
    if (self__.has_nil_QMARK_) {
      return cljs.core.cons(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, self__.nil_val], null), s);
    } else {
      return s;
    }
  } else {
    return null;
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashMap(meta__$1, self__.cnt, self__.root, self__.has_nil_QMARK_, self__.nil_val, self__.__hash);
};
cljs.core.PersistentHashMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_(entry)) {
    return cljs.core._assoc(coll__$1, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 0), cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 1));
  } else {
    var ret = coll__$1;
    var es = cljs.core.seq(entry);
    while (true) {
      if (es == null) {
        return ret;
      } else {
        var e = cljs.core.first(es);
        if (cljs.core.vector_QMARK_(e)) {
          var G__19275 = cljs.core._assoc(ret, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(e, 0), cljs.core._nth.cljs$core$IFn$_invoke$arity$2(e, 1));
          var G__19276 = cljs.core.next(es);
          ret = G__19275;
          es = G__19276;
          continue;
        } else {
          throw new Error("conj on a map takes map entries or seqables of map entries");
        }
      }
      break;
    }
  }
};
cljs.core.PersistentHashMap.prototype.call = function() {
  var G__19277 = null;
  var G__19277__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__19277__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__19277 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__19277__2.call(this, self__, k);
      case 3:
        return G__19277__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__19277.cljs$core$IFn$_invoke$arity$2 = G__19277__2;
  G__19277.cljs$core$IFn$_invoke$arity$3 = G__19277__3;
  return G__19277;
}();
cljs.core.PersistentHashMap.prototype.apply = function(self__, args19240) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args19240)));
};
cljs.core.PersistentHashMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentHashMap.cljs$lang$type = true;
cljs.core.PersistentHashMap.cljs$lang$ctorStr = "cljs.core/PersistentHashMap";
cljs.core.PersistentHashMap.cljs$lang$ctorPrWriter = function(this__4914__auto__, writer__4915__auto__, opt__4916__auto__) {
  return cljs.core._write(writer__4915__auto__, "cljs.core/PersistentHashMap");
};
cljs.core.__GT_PersistentHashMap = function cljs$core$__GT_PersistentHashMap(meta, cnt, root, has_nil_QMARK_, nil_val, __hash) {
  return new cljs.core.PersistentHashMap(meta, cnt, root, has_nil_QMARK_, nil_val, __hash);
};
cljs.core.PersistentHashMap.EMPTY = new cljs.core.PersistentHashMap(null, 0, null, false, null, cljs.core.empty_unordered_hash);
cljs.core.PersistentHashMap.fromArray = function(arr, no_clone) {
  var arr__$1 = no_clone ? arr : cljs.core.aclone(arr);
  var len = arr__$1.length;
  var i = 0;
  var ret = cljs.core.transient$(cljs.core.PersistentHashMap.EMPTY);
  while (true) {
    if (i < len) {
      var G__19278 = i + 2;
      var G__19279 = cljs.core._assoc_BANG_(ret, arr__$1[i], arr__$1[i + 1]);
      i = G__19278;
      ret = G__19279;
      continue;
    } else {
      return cljs.core._persistent_BANG_(ret);
    }
    break;
  }
};
cljs.core.PersistentHashMap.fromArrays = function(ks, vs) {
  var len = ks.length;
  var i = 0;
  var out = cljs.core.transient$(cljs.core.PersistentHashMap.EMPTY);
  while (true) {
    if (i < len) {
      var G__19280 = i + 1;
      var G__19281 = out.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3(null, ks[i], vs[i]);
      i = G__19280;
      out = G__19281;
      continue;
    } else {
      return cljs.core.persistent_BANG_(out);
    }
    break;
  }
};
cljs.core.PersistentHashMap.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5311__auto__ = this;
  return cljs.core.es6_iterator(this__5311__auto__);
};
cljs.core.TransientHashMap = function(edit, root, count, has_nil_QMARK_, nil_val) {
  this.edit = edit;
  this.root = root;
  this.count = count;
  this.has_nil_QMARK_ = has_nil_QMARK_;
  this.nil_val = nil_val;
  this.cljs$lang$protocol_mask$partition1$ = 56;
  this.cljs$lang$protocol_mask$partition0$ = 258;
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientMap$_dissoc_BANG_$arity$2 = function(tcoll, key) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.without_BANG_(key);
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.assoc_BANG_(key, val);
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, val) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.conj_BANG_(val);
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.persistent_BANG_();
};
cljs.core.TransientHashMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, k) {
  var self__ = this;
  var tcoll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return self__.nil_val;
    } else {
      return null;
    }
  } else {
    if (self__.root == null) {
      return null;
    } else {
      return self__.root.inode_lookup(0, cljs.core.hash(k), k);
    }
  }
};
cljs.core.TransientHashMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, k, not_found) {
  var self__ = this;
  var tcoll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return self__.nil_val;
    } else {
      return not_found;
    }
  } else {
    if (self__.root == null) {
      return not_found;
    } else {
      return self__.root.inode_lookup(0, cljs.core.hash(k), k, not_found);
    }
  }
};
cljs.core.TransientHashMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.edit) {
    return self__.count;
  } else {
    throw new Error("count after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.conj_BANG_ = function(o) {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    if (function() {
      var G__19282 = o;
      if (G__19282) {
        var bit__5009__auto__ = G__19282.cljs$lang$protocol_mask$partition0$ & 2048;
        if (bit__5009__auto__ || G__19282.cljs$core$IMapEntry$) {
          return true;
        } else {
          if (!G__19282.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_(cljs.core.IMapEntry, G__19282);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IMapEntry, G__19282);
      }
    }()) {
      return tcoll.assoc_BANG_(function() {
        var G__19283 = o;
        return cljs.core.key.cljs$core$IFn$_invoke$arity$1 ? cljs.core.key.cljs$core$IFn$_invoke$arity$1(G__19283) : cljs.core.key.call(null, G__19283);
      }(), function() {
        var G__19284 = o;
        return cljs.core.val.cljs$core$IFn$_invoke$arity$1 ? cljs.core.val.cljs$core$IFn$_invoke$arity$1(G__19284) : cljs.core.val.call(null, G__19284);
      }());
    } else {
      var es = cljs.core.seq(o);
      var tcoll__$1 = tcoll;
      while (true) {
        var temp__4124__auto__ = cljs.core.first(es);
        if (cljs.core.truth_(temp__4124__auto__)) {
          var e = temp__4124__auto__;
          var G__19287 = cljs.core.next(es);
          var G__19288 = tcoll__$1.assoc_BANG_(function() {
            var G__19285 = e;
            return cljs.core.key.cljs$core$IFn$_invoke$arity$1 ? cljs.core.key.cljs$core$IFn$_invoke$arity$1(G__19285) : cljs.core.key.call(null, G__19285);
          }(), function() {
            var G__19286 = e;
            return cljs.core.val.cljs$core$IFn$_invoke$arity$1 ? cljs.core.val.cljs$core$IFn$_invoke$arity$1(G__19286) : cljs.core.val.call(null, G__19286);
          }());
          es = G__19287;
          tcoll__$1 = G__19288;
          continue;
        } else {
          return tcoll__$1;
        }
        break;
      }
    }
  } else {
    throw new Error("conj! after persistent");
  }
};
cljs.core.TransientHashMap.prototype.assoc_BANG_ = function(k, v) {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    if (k == null) {
      if (self__.nil_val === v) {
      } else {
        self__.nil_val = v;
      }
      if (self__.has_nil_QMARK_) {
      } else {
        self__.count = self__.count + 1;
        self__.has_nil_QMARK_ = true;
      }
      return tcoll;
    } else {
      var added_leaf_QMARK_ = new cljs.core.Box(false);
      var node = (self__.root == null ? cljs.core.BitmapIndexedNode.EMPTY : self__.root).inode_assoc_BANG_(self__.edit, 0, cljs.core.hash(k), k, v, added_leaf_QMARK_);
      if (node === self__.root) {
      } else {
        self__.root = node;
      }
      if (added_leaf_QMARK_.val) {
        self__.count = self__.count + 1;
      } else {
      }
      return tcoll;
    }
  } else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.without_BANG_ = function(k) {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    if (k == null) {
      if (self__.has_nil_QMARK_) {
        self__.has_nil_QMARK_ = false;
        self__.nil_val = null;
        self__.count = self__.count - 1;
        return tcoll;
      } else {
        return tcoll;
      }
    } else {
      if (self__.root == null) {
        return tcoll;
      } else {
        var removed_leaf_QMARK_ = new cljs.core.Box(false);
        var node = self__.root.inode_without_BANG_(self__.edit, 0, cljs.core.hash(k), k, removed_leaf_QMARK_);
        if (node === self__.root) {
        } else {
          self__.root = node;
        }
        if (cljs.core.truth_(removed_leaf_QMARK_[0])) {
          self__.count = self__.count - 1;
        } else {
        }
        return tcoll;
      }
    }
  } else {
    throw new Error("dissoc! after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.persistent_BANG_ = function() {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    self__.edit = null;
    return new cljs.core.PersistentHashMap(null, self__.count, self__.root, self__.has_nil_QMARK_, self__.nil_val, null);
  } else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.TransientHashMap.cljs$lang$type = true;
cljs.core.TransientHashMap.cljs$lang$ctorStr = "cljs.core/TransientHashMap";
cljs.core.TransientHashMap.cljs$lang$ctorPrWriter = function(this__4914__auto__, writer__4915__auto__, opt__4916__auto__) {
  return cljs.core._write(writer__4915__auto__, "cljs.core/TransientHashMap");
};
cljs.core.__GT_TransientHashMap = function cljs$core$__GT_TransientHashMap(edit, root, count, has_nil_QMARK_, nil_val) {
  return new cljs.core.TransientHashMap(edit, root, count, has_nil_QMARK_, nil_val);
};
cljs.core.tree_map_seq_push = function cljs$core$tree_map_seq_push(node, stack, ascending_QMARK_) {
  var t = node;
  var stack__$1 = stack;
  while (true) {
    if (!(t == null)) {
      var G__19289 = ascending_QMARK_ ? t.left : t.right;
      var G__19290 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(stack__$1, t);
      t = G__19289;
      stack__$1 = G__19290;
      continue;
    } else {
      return stack__$1;
    }
    break;
  }
};
cljs.core.PersistentTreeMapSeq = function(meta, stack, ascending_QMARK_, cnt, __hash) {
  this.meta = meta;
  this.stack = stack;
  this.ascending_QMARK_ = ascending_QMARK_;
  this.cnt = cnt;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374862;
};
cljs.core.PersistentTreeMapSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentTreeMapSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt < 0) {
    return cljs.core.count(cljs.core.next(coll__$1)) + 1;
  } else {
    return self__.cnt;
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4751__auto__ = self__.__hash;
  if (!(h__4751__auto__ == null)) {
    return h__4751__auto__;
  } else {
    var h__4751__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4751__auto____$1;
    return h__4751__auto____$1;
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.peek(self__.stack);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var t = cljs.core.first(self__.stack);
  var next_stack = cljs.core.tree_map_seq_push(self__.ascending_QMARK_ ? t.right : t.left, cljs.core.next(self__.stack), self__.ascending_QMARK_);
  if (!(next_stack == null)) {
    return new cljs.core.PersistentTreeMapSeq(null, next_stack, self__.ascending_QMARK_, self__.cnt - 1, null);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeMapSeq(meta__$1, self__.stack, self__.ascending_QMARK_, self__.cnt, self__.__hash);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.PersistentTreeMapSeq.cljs$lang$type = true;
cljs.core.PersistentTreeMapSeq.cljs$lang$ctorStr = "cljs.core/PersistentTreeMapSeq";
cljs.core.PersistentTreeMapSeq.cljs$lang$ctorPrWriter = function(this__4914__auto__, writer__4915__auto__, opt__4916__auto__) {
  return cljs.core._write(writer__4915__auto__, "cljs.core/PersistentTreeMapSeq");
};
cljs.core.__GT_PersistentTreeMapSeq = function cljs$core$__GT_PersistentTreeMapSeq(meta, stack, ascending_QMARK_, cnt, __hash) {
  return new cljs.core.PersistentTreeMapSeq(meta, stack, ascending_QMARK_, cnt, __hash);
};
cljs.core.PersistentTreeMapSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5311__auto__ = this;
  return cljs.core.es6_iterator(this__5311__auto__);
};
cljs.core.create_tree_map_seq = function cljs$core$create_tree_map_seq(tree, ascending_QMARK_, cnt) {
  return new cljs.core.PersistentTreeMapSeq(null, cljs.core.tree_map_seq_push(tree, null, ascending_QMARK_), ascending_QMARK_, cnt, null);
};
cljs.core.balance_left = function cljs$core$balance_left(key, val, ins, right) {
  if (ins instanceof cljs.core.RedNode) {
    if (ins.left instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(ins.key, ins.val, ins.left.blacken(), new cljs.core.BlackNode(key, val, ins.right, right, null), null);
    } else {
      if (ins.right instanceof cljs.core.RedNode) {
        return new cljs.core.RedNode(ins.right.key, ins.right.val, new cljs.core.BlackNode(ins.key, ins.val, ins.left, ins.right.left, null), new cljs.core.BlackNode(key, val, ins.right.right, right, null), null);
      } else {
        return new cljs.core.BlackNode(key, val, ins, right, null);
      }
    }
  } else {
    return new cljs.core.BlackNode(key, val, ins, right, null);
  }
};
cljs.core.balance_right = function cljs$core$balance_right(key, val, left, ins) {
  if (ins instanceof cljs.core.RedNode) {
    if (ins.right instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(ins.key, ins.val, new cljs.core.BlackNode(key, val, left, ins.left, null), ins.right.blacken(), null);
    } else {
      if (ins.left instanceof cljs.core.RedNode) {
        return new cljs.core.RedNode(ins.left.key, ins.left.val, new cljs.core.BlackNode(key, val, left, ins.left.left, null), new cljs.core.BlackNode(ins.key, ins.val, ins.left.right, ins.right, null), null);
      } else {
        return new cljs.core.BlackNode(key, val, left, ins, null);
      }
    }
  } else {
    return new cljs.core.BlackNode(key, val, left, ins, null);
  }
};
cljs.core.balance_left_del = function cljs$core$balance_left_del(key, val, del, right) {
  if (del instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(key, val, del.blacken(), right, null);
  } else {
    if (right instanceof cljs.core.BlackNode) {
      return cljs.core.balance_right(key, val, del, right.redden());
    } else {
      if (right instanceof cljs.core.RedNode && right.left instanceof cljs.core.BlackNode) {
        return new cljs.core.RedNode(right.left.key, right.left.val, new cljs.core.BlackNode(key, val, del, right.left.left, null), cljs.core.balance_right(right.key, right.val, right.left.right, right.right.redden()), null);
      } else {
        throw new Error("red-black tree invariant violation");
      }
    }
  }
};
cljs.core.balance_right_del = function cljs$core$balance_right_del(key, val, left, del) {
  if (del instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(key, val, left, del.blacken(), null);
  } else {
    if (left instanceof cljs.core.BlackNode) {
      return cljs.core.balance_left(key, val, left.redden(), del);
    } else {
      if (left instanceof cljs.core.RedNode && left.right instanceof cljs.core.BlackNode) {
        return new cljs.core.RedNode(left.right.key, left.right.val, cljs.core.balance_left(left.key, left.val, left.left.redden(), left.right.left), new cljs.core.BlackNode(key, val, left.right.right, del, null), null);
      } else {
        throw new Error("red-black tree invariant violation");
      }
    }
  }
};
cljs.core.tree_map_kv_reduce = function cljs$core$tree_map_kv_reduce(node, f, init) {
  var init__$1 = !(node.left == null) ? cljs$core$tree_map_kv_reduce(node.left, f, init) : init;
  if (cljs.core.reduced_QMARK_(init__$1)) {
    var G__19303 = init__$1;
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__19303) : cljs.core.deref.call(null, G__19303);
  } else {
    var init__$2 = function() {
      var G__19304 = init__$1;
      var G__19305 = node.key;
      var G__19306 = node.val;
      return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__19304, G__19305, G__19306) : f.call(null, G__19304, G__19305, G__19306);
    }();
    if (cljs.core.reduced_QMARK_(init__$2)) {
      var G__19307 = init__$2;
      return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__19307) : cljs.core.deref.call(null, G__19307);
    } else {
      var init__$3 = !(node.right == null) ? cljs$core$tree_map_kv_reduce(node.right, f, init__$2) : init__$2;
      if (cljs.core.reduced_QMARK_(init__$3)) {
        var G__19308 = init__$3;
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__19308) : cljs.core.deref.call(null, G__19308);
      } else {
        return init__$3;
      }
    }
  }
};
cljs.core.BlackNode = function(key, val, left, right, __hash) {
  this.key = key;
  this.val = val;
  this.left = left;
  this.right = right;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32402207;
};
cljs.core.BlackNode.prototype.add_right = function(ins) {
  var self__ = this;
  var node = this;
  return ins.balance_right(node);
};
cljs.core.BlackNode.prototype.redden = function() {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, self__.right, null);
};
cljs.core.BlackNode.prototype.blacken = function() {
  var self__ = this;
  var node = this;
  return node;
};
cljs.core.BlackNode.prototype.add_left = function(ins) {
  var self__ = this;
  var node = this;
  return ins.balance_left(node);
};
cljs.core.BlackNode.prototype.replace = function(key__$1, val__$1, left__$1, right__$1) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(key__$1, val__$1, left__$1, right__$1, null);
};
cljs.core.BlackNode.prototype.balance_left = function(parent) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(parent.key, parent.val, node, parent.right, null);
};
cljs.core.BlackNode.prototype.balance_right = function(parent) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(parent.key, parent.val, parent.left, node, null);
};
cljs.core.BlackNode.prototype.remove_left = function(del) {
  var self__ = this;
  var node = this;
  return cljs.core.balance_left_del(self__.key, self__.val, del, self__.right);
};
cljs.core.BlackNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var node = this;
  return cljs.core.tree_map_kv_reduce(node, f, init);
};
cljs.core.BlackNode.prototype.remove_right = function(del) {
  var self__ = this;
  var node = this;
  return cljs.core.balance_right_del(self__.key, self__.val, self__.left, del);
};
cljs.core.BlackNode.prototype.cljs$core$ILookup$_lookup$arity$2 = function(node, k) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(node__$1, k, null);
};
cljs.core.BlackNode.prototype.cljs$core$ILookup$_lookup$arity$3 = function(node, k, not_found) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(node__$1, k, not_found);
};
cljs.core.BlackNode.prototype.cljs$core$IIndexed$_nth$arity$2 = function(node, n) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      return null;
    }
  }
};
cljs.core.BlackNode.prototype.cljs$core$IIndexed$_nth$arity$3 = function(node, n, not_found) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      return not_found;
    }
  }
};
cljs.core.BlackNode.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(node, n, v) {
  var self__ = this;
  var node__$1 = this;
  return(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null)).cljs$core$IVector$_assoc_n$arity$3(null, n, v);
};
cljs.core.BlackNode.prototype.cljs$core$IMeta$_meta$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return null;
};
cljs.core.BlackNode.prototype.cljs$core$ICounted$_count$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return 2;
};
cljs.core.BlackNode.prototype.cljs$core$IMapEntry$_key$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.key;
};
cljs.core.BlackNode.prototype.cljs$core$IMapEntry$_val$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.BlackNode.prototype.cljs$core$IStack$_peek$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.BlackNode.prototype.cljs$core$IStack$_pop$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key], null);
};
cljs.core.BlackNode.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4751__auto__ = self__.__hash;
  if (!(h__4751__auto__ == null)) {
    return h__4751__auto__;
  } else {
    var h__4751__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4751__auto____$1;
    return h__4751__auto____$1;
  }
};
cljs.core.BlackNode.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.BlackNode.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.PersistentVector.EMPTY;
};
cljs.core.BlackNode.prototype.cljs$core$IReduce$_reduce$arity$2 = function(node, f) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2(node__$1, f);
};
cljs.core.BlackNode.prototype.cljs$core$IReduce$_reduce$arity$3 = function(node, f, start) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$3(node__$1, f, start);
};
cljs.core.BlackNode.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(node, k, v) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), k, v);
};
cljs.core.BlackNode.prototype.cljs$core$ISeqable$_seq$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._conj(cljs.core._conj(cljs.core.List.EMPTY, self__.val), self__.key);
};
cljs.core.BlackNode.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(node, meta) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.with_meta(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), meta);
};
cljs.core.BlackNode.prototype.cljs$core$ICollection$_conj$arity$2 = function(node, o) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val, o], null);
};
cljs.core.BlackNode.prototype.call = function() {
  var G__19310 = null;
  var G__19310__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__19310__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__19310 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__19310__2.call(this, self__, k);
      case 3:
        return G__19310__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__19310.cljs$core$IFn$_invoke$arity$2 = G__19310__2;
  G__19310.cljs$core$IFn$_invoke$arity$3 = G__19310__3;
  return G__19310;
}();
cljs.core.BlackNode.prototype.apply = function(self__, args19309) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args19309)));
};
cljs.core.BlackNode.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.BlackNode.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.BlackNode.cljs$lang$type = true;
cljs.core.BlackNode.cljs$lang$ctorStr = "cljs.core/BlackNode";
cljs.core.BlackNode.cljs$lang$ctorPrWriter = function(this__4914__auto__, writer__4915__auto__, opt__4916__auto__) {
  return cljs.core._write(writer__4915__auto__, "cljs.core/BlackNode");
};
cljs.core.__GT_BlackNode = function cljs$core$__GT_BlackNode(key, val, left, right, __hash) {
  return new cljs.core.BlackNode(key, val, left, right, __hash);
};
cljs.core.BlackNode.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5311__auto__ = this;
  return cljs.core.es6_iterator(this__5311__auto__);
};
cljs.core.RedNode = function(key, val, left, right, __hash) {
  this.key = key;
  this.val = val;
  this.left = left;
  this.right = right;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32402207;
};
cljs.core.RedNode.prototype.add_right = function(ins) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, ins, null);
};
cljs.core.RedNode.prototype.redden = function() {
  var self__ = this;
  var node = this;
  throw new Error("red-black tree invariant violation");
};
cljs.core.RedNode.prototype.blacken = function() {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(self__.key, self__.val, self__.left, self__.right, null);
};
cljs.core.RedNode.prototype.add_left = function(ins) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, ins, self__.right, null);
};
cljs.core.RedNode.prototype.replace = function(key__$1, val__$1, left__$1, right__$1) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(key__$1, val__$1, left__$1, right__$1, null);
};
cljs.core.RedNode.prototype.balance_left = function(parent) {
  var self__ = this;
  var node = this;
  if (self__.left instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(self__.key, self__.val, self__.left.blacken(), new cljs.core.BlackNode(parent.key, parent.val, self__.right, parent.right, null), null);
  } else {
    if (self__.right instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(self__.right.key, self__.right.val, new cljs.core.BlackNode(self__.key, self__.val, self__.left, self__.right.left, null), new cljs.core.BlackNode(parent.key, parent.val, self__.right.right, parent.right, null), null);
    } else {
      return new cljs.core.BlackNode(parent.key, parent.val, node, parent.right, null);
    }
  }
};
cljs.core.RedNode.prototype.balance_right = function(parent) {
  var self__ = this;
  var node = this;
  if (self__.right instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(self__.key, self__.val, new cljs.core.BlackNode(parent.key, parent.val, parent.left, self__.left, null), self__.right.blacken(), null);
  } else {
    if (self__.left instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(self__.left.key, self__.left.val, new cljs.core.BlackNode(parent.key, parent.val, parent.left, self__.left.left, null), new cljs.core.BlackNode(self__.key, self__.val, self__.left.right, self__.right, null), null);
    } else {
      return new cljs.core.BlackNode(parent.key, parent.val, parent.left, node, null);
    }
  }
};
cljs.core.RedNode.prototype.remove_left = function(del) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, del, self__.right, null);
};
cljs.core.RedNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var node = this;
  return cljs.core.tree_map_kv_reduce(node, f, init);
};
cljs.core.RedNode.prototype.remove_right = function(del) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, del, null);
};
cljs.core.RedNode.prototype.cljs$core$ILookup$_lookup$arity$2 = function(node, k) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(node__$1, k, null);
};
cljs.core.RedNode.prototype.cljs$core$ILookup$_lookup$arity$3 = function(node, k, not_found) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(node__$1, k, not_found);
};
cljs.core.RedNode.prototype.cljs$core$IIndexed$_nth$arity$2 = function(node, n) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      return null;
    }
  }
};
cljs.core.RedNode.prototype.cljs$core$IIndexed$_nth$arity$3 = function(node, n, not_found) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      return not_found;
    }
  }
};
cljs.core.RedNode.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(node, n, v) {
  var self__ = this;
  var node__$1 = this;
  return(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null)).cljs$core$IVector$_assoc_n$arity$3(null, n, v);
};
cljs.core.RedNode.prototype.cljs$core$IMeta$_meta$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return null;
};
cljs.core.RedNode.prototype.cljs$core$ICounted$_count$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return 2;
};
cljs.core.RedNode.prototype.cljs$core$IMapEntry$_key$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.key;
};
cljs.core.RedNode.prototype.cljs$core$IMapEntry$_val$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.RedNode.prototype.cljs$core$IStack$_peek$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.RedNode.prototype.cljs$core$IStack$_pop$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key], null);
};
cljs.core.RedNode.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4751__auto__ = self__.__hash;
  if (!(h__4751__auto__ == null)) {
    return h__4751__auto__;
  } else {
    var h__4751__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4751__auto____$1;
    return h__4751__auto____$1;
  }
};
cljs.core.RedNode.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.RedNode.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.PersistentVector.EMPTY;
};
cljs.core.RedNode.prototype.cljs$core$IReduce$_reduce$arity$2 = function(node, f) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2(node__$1, f);
};
cljs.core.RedNode.prototype.cljs$core$IReduce$_reduce$arity$3 = function(node, f, start) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$3(node__$1, f, start);
};
cljs.core.RedNode.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(node, k, v) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), k, v);
};
cljs.core.RedNode.prototype.cljs$core$ISeqable$_seq$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._conj(cljs.core._conj(cljs.core.List.EMPTY, self__.val), self__.key);
};
cljs.core.RedNode.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(node, meta) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.with_meta(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), meta);
};
cljs.core.RedNode.prototype.cljs$core$ICollection$_conj$arity$2 = function(node, o) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val, o], null);
};
cljs.core.RedNode.prototype.call = function() {
  var G__19312 = null;
  var G__19312__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__19312__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__19312 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__19312__2.call(this, self__, k);
      case 3:
        return G__19312__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__19312.cljs$core$IFn$_invoke$arity$2 = G__19312__2;
  G__19312.cljs$core$IFn$_invoke$arity$3 = G__19312__3;
  return G__19312;
}();
cljs.core.RedNode.prototype.apply = function(self__, args19311) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args19311)));
};
cljs.core.RedNode.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.RedNode.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.RedNode.cljs$lang$type = true;
cljs.core.RedNode.cljs$lang$ctorStr = "cljs.core/RedNode";
cljs.core.RedNode.cljs$lang$ctorPrWriter = function(this__4914__auto__, writer__4915__auto__, opt__4916__auto__) {
  return cljs.core._write(writer__4915__auto__, "cljs.core/RedNode");
};
cljs.core.__GT_RedNode = function cljs$core$__GT_RedNode(key, val, left, right, __hash) {
  return new cljs.core.RedNode(key, val, left, right, __hash);
};
cljs.core.RedNode.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5311__auto__ = this;
  return cljs.core.es6_iterator(this__5311__auto__);
};
cljs.core.tree_map_add = function cljs$core$tree_map_add(comp, tree, k, v, found) {
  if (tree == null) {
    return new cljs.core.RedNode(k, v, null, null, null);
  } else {
    var c = function() {
      var G__19325 = k;
      var G__19326 = tree.key;
      return comp.cljs$core$IFn$_invoke$arity$2 ? comp.cljs$core$IFn$_invoke$arity$2(G__19325, G__19326) : comp.call(null, G__19325, G__19326);
    }();
    if (c === 0) {
      found[0] = tree;
      return null;
    } else {
      if (c < 0) {
        var ins = cljs$core$tree_map_add(comp, tree.left, k, v, found);
        if (!(ins == null)) {
          return tree.add_left(ins);
        } else {
          return null;
        }
      } else {
        var ins = cljs$core$tree_map_add(comp, tree.right, k, v, found);
        if (!(ins == null)) {
          return tree.add_right(ins);
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.tree_map_append = function cljs$core$tree_map_append(left, right) {
  if (left == null) {
    return right;
  } else {
    if (right == null) {
      return left;
    } else {
      if (left instanceof cljs.core.RedNode) {
        if (right instanceof cljs.core.RedNode) {
          var app = cljs$core$tree_map_append(left.right, right.left);
          if (app instanceof cljs.core.RedNode) {
            return new cljs.core.RedNode(app.key, app.val, new cljs.core.RedNode(left.key, left.val, left.left, app.left, null), new cljs.core.RedNode(right.key, right.val, app.right, right.right, null), null);
          } else {
            return new cljs.core.RedNode(left.key, left.val, left.left, new cljs.core.RedNode(right.key, right.val, app, right.right, null), null);
          }
        } else {
          return new cljs.core.RedNode(left.key, left.val, left.left, cljs$core$tree_map_append(left.right, right), null);
        }
      } else {
        if (right instanceof cljs.core.RedNode) {
          return new cljs.core.RedNode(right.key, right.val, cljs$core$tree_map_append(left, right.left), right.right, null);
        } else {
          var app = cljs$core$tree_map_append(left.right, right.left);
          if (app instanceof cljs.core.RedNode) {
            return new cljs.core.RedNode(app.key, app.val, new cljs.core.BlackNode(left.key, left.val, left.left, app.left, null), new cljs.core.BlackNode(right.key, right.val, app.right, right.right, null), null);
          } else {
            return cljs.core.balance_left_del(left.key, left.val, left.left, new cljs.core.BlackNode(right.key, right.val, app, right.right, null));
          }
        }
      }
    }
  }
};
cljs.core.tree_map_remove = function cljs$core$tree_map_remove(comp, tree, k, found) {
  if (!(tree == null)) {
    var c = function() {
      var G__19345 = k;
      var G__19346 = tree.key;
      return comp.cljs$core$IFn$_invoke$arity$2 ? comp.cljs$core$IFn$_invoke$arity$2(G__19345, G__19346) : comp.call(null, G__19345, G__19346);
    }();
    if (c === 0) {
      found[0] = tree;
      return cljs.core.tree_map_append(tree.left, tree.right);
    } else {
      if (c < 0) {
        var del = cljs$core$tree_map_remove(comp, tree.left, k, found);
        if (!(del == null) || !(found[0] == null)) {
          if (tree.left instanceof cljs.core.BlackNode) {
            return cljs.core.balance_left_del(tree.key, tree.val, del, tree.right);
          } else {
            return new cljs.core.RedNode(tree.key, tree.val, del, tree.right, null);
          }
        } else {
          return null;
        }
      } else {
        var del = cljs$core$tree_map_remove(comp, tree.right, k, found);
        if (!(del == null) || !(found[0] == null)) {
          if (tree.right instanceof cljs.core.BlackNode) {
            return cljs.core.balance_right_del(tree.key, tree.val, tree.left, del);
          } else {
            return new cljs.core.RedNode(tree.key, tree.val, tree.left, del, null);
          }
        } else {
          return null;
        }
      }
    }
  } else {
    return null;
  }
};
cljs.core.tree_map_replace = function cljs$core$tree_map_replace(comp, tree, k, v) {
  var tk = tree.key;
  var c = function() {
    var G__19357 = k;
    var G__19358 = tk;
    return comp.cljs$core$IFn$_invoke$arity$2 ? comp.cljs$core$IFn$_invoke$arity$2(G__19357, G__19358) : comp.call(null, G__19357, G__19358);
  }();
  if (c === 0) {
    return tree.replace(tk, v, tree.left, tree.right);
  } else {
    if (c < 0) {
      return tree.replace(tk, tree.val, cljs$core$tree_map_replace(comp, tree.left, k, v), tree.right);
    } else {
      return tree.replace(tk, tree.val, tree.left, cljs$core$tree_map_replace(comp, tree.right, k, v));
    }
  }
};
cljs.core.PersistentTreeMap = function(comp, tree, cnt, meta, __hash) {
  this.comp = comp;
  this.tree = tree;
  this.cnt = cnt;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 418776847;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.PersistentTreeMap.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__19360 = cljs.core.seq(coll);
  var chunk__19361 = null;
  var count__19362 = 0;
  var i__19363 = 0;
  while (true) {
    if (i__19363 < count__19362) {
      var vec__19364 = chunk__19361.cljs$core$IIndexed$_nth$arity$2(null, i__19363);
      var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__19364, 0, null);
      var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__19364, 1, null);
      var G__19365_19377 = v;
      var G__19366_19378 = k;
      f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__19365_19377, G__19366_19378) : f.call(null, G__19365_19377, G__19366_19378);
      var G__19379 = seq__19360;
      var G__19380 = chunk__19361;
      var G__19381 = count__19362;
      var G__19382 = i__19363 + 1;
      seq__19360 = G__19379;
      chunk__19361 = G__19380;
      count__19362 = G__19381;
      i__19363 = G__19382;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq(seq__19360);
      if (temp__4126__auto__) {
        var seq__19360__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__19360__$1)) {
          var c__5120__auto__ = cljs.core.chunk_first(seq__19360__$1);
          var G__19383 = cljs.core.chunk_rest(seq__19360__$1);
          var G__19384 = c__5120__auto__;
          var G__19385 = cljs.core.count(c__5120__auto__);
          var G__19386 = 0;
          seq__19360 = G__19383;
          chunk__19361 = G__19384;
          count__19362 = G__19385;
          i__19363 = G__19386;
          continue;
        } else {
          var vec__19367 = cljs.core.first(seq__19360__$1);
          var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__19367, 0, null);
          var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__19367, 1, null);
          var G__19368_19387 = v;
          var G__19369_19388 = k;
          f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__19368_19387, G__19369_19388) : f.call(null, G__19368_19387, G__19369_19388);
          var G__19389 = cljs.core.next(seq__19360__$1);
          var G__19390 = null;
          var G__19391 = 0;
          var G__19392 = 0;
          seq__19360 = G__19389;
          chunk__19361 = G__19390;
          count__19362 = G__19391;
          i__19363 = G__19392;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentTreeMap.prototype.get = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentTreeMap.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_entries_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentTreeMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentTreeMap.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(function() {
    var G__19370 = coll;
    return cljs.core.keys.cljs$core$IFn$_invoke$arity$1 ? cljs.core.keys.cljs$core$IFn$_invoke$arity$1(G__19370) : cljs.core.keys.call(null, G__19370);
  }());
};
cljs.core.PersistentTreeMap.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(function() {
    var G__19371 = coll;
    return cljs.core.vals.cljs$core$IFn$_invoke$arity$1 ? cljs.core.vals.cljs$core$IFn$_invoke$arity$1(G__19371) : cljs.core.vals.call(null, G__19371);
  }());
};
cljs.core.PersistentTreeMap.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentTreeMap.prototype.entry_at = function(k) {
  var self__ = this;
  var coll = this;
  var t = self__.tree;
  while (true) {
    if (!(t == null)) {
      var c = function() {
        var G__19372 = k;
        var G__19373 = t.key;
        return self__.comp.cljs$core$IFn$_invoke$arity$2 ? self__.comp.cljs$core$IFn$_invoke$arity$2(G__19372, G__19373) : self__.comp.call(null, G__19372, G__19373);
      }();
      if (c === 0) {
        return t;
      } else {
        if (c < 0) {
          var G__19393 = t.left;
          t = G__19393;
          continue;
        } else {
          var G__19394 = t.right;
          t = G__19394;
          continue;
        }
      }
    } else {
      return null;
    }
    break;
  }
};
cljs.core.PersistentTreeMap.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_(coll, k);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, k, null);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var n = coll__$1.entry_at(k);
  if (!(n == null)) {
    return n.val;
  } else {
    return not_found;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  if (!(self__.tree == null)) {
    return cljs.core.tree_map_kv_reduce(self__.tree, f, init);
  } else {
    return init;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentTreeMap(self__.comp, self__.tree, self__.cnt, self__.meta, self__.__hash);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core.create_tree_map_seq(self__.tree, false, self__.cnt);
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4751__auto__ = self__.__hash;
  if (!(h__4751__auto__ == null)) {
    return h__4751__auto__;
  } else {
    var h__4751__auto____$1 = cljs.core.hash_unordered_coll(coll__$1);
    self__.__hash = h__4751__auto____$1;
    return h__4751__auto____$1;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map(coll__$1, other);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeMap(self__.comp, null, 0, self__.meta, 0);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  var found = [null];
  var t = cljs.core.tree_map_remove(self__.comp, self__.tree, k, found);
  if (t == null) {
    if (cljs.core.nth.cljs$core$IFn$_invoke$arity$2(found, 0) == null) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentTreeMap(self__.comp, null, 0, self__.meta, null);
    }
  } else {
    return new cljs.core.PersistentTreeMap(self__.comp, t.blacken(), self__.cnt - 1, self__.meta, null);
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  var found = [null];
  var t = cljs.core.tree_map_add(self__.comp, self__.tree, k, v, found);
  if (t == null) {
    var found_node = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(found, 0);
    if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(v, found_node.val)) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentTreeMap(self__.comp, cljs.core.tree_map_replace(self__.comp, self__.tree, k, v), self__.cnt, self__.meta, null);
    }
  } else {
    return new cljs.core.PersistentTreeMap(self__.comp, t.blacken(), self__.cnt + 1, self__.meta, null);
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return!(coll__$1.entry_at(k) == null);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core.create_tree_map_seq(self__.tree, true, self__.cnt);
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeMap(self__.comp, self__.tree, self__.cnt, meta__$1, self__.__hash);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_(entry)) {
    return cljs.core._assoc(coll__$1, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 0), cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 1));
  } else {
    var ret = coll__$1;
    var es = cljs.core.seq(entry);
    while (true) {
      if (es == null) {
        return ret;
      } else {
        var e = cljs.core.first(es);
        if (cljs.core.vector_QMARK_(e)) {
          var G__19395 = cljs.core._assoc(ret, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(e, 0), cljs.core._nth.cljs$core$IFn$_invoke$arity$2(e, 1));
          var G__19396 = cljs.core.next(es);
          ret = G__19395;
          es = G__19396;
          continue;
        } else {
          throw new Error("conj on a map takes map entries or seqables of map entries");
        }
      }
      break;
    }
  }
};
cljs.core.PersistentTreeMap.prototype.call = function() {
  var G__19397 = null;
  var G__19397__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__19397__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__19397 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__19397__2.call(this, self__, k);
      case 3:
        return G__19397__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__19397.cljs$core$IFn$_invoke$arity$2 = G__19397__2;
  G__19397.cljs$core$IFn$_invoke$arity$3 = G__19397__3;
  return G__19397;
}();
cljs.core.PersistentTreeMap.prototype.apply = function(self__, args19359) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args19359)));
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_sorted_seq$arity$2 = function(coll, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core.create_tree_map_seq(self__.tree, ascending_QMARK_, self__.cnt);
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_sorted_seq_from$arity$3 = function(coll, k, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    var stack = null;
    var t = self__.tree;
    while (true) {
      if (!(t == null)) {
        var c = function() {
          var G__19374 = k;
          var G__19375 = t.key;
          return self__.comp.cljs$core$IFn$_invoke$arity$2 ? self__.comp.cljs$core$IFn$_invoke$arity$2(G__19374, G__19375) : self__.comp.call(null, G__19374, G__19375);
        }();
        if (c === 0) {
          return new cljs.core.PersistentTreeMapSeq(null, cljs.core.conj.cljs$core$IFn$_invoke$arity$2(stack, t), ascending_QMARK_, -1, null);
        } else {
          if (cljs.core.truth_(ascending_QMARK_)) {
            if (c < 0) {
              var G__19398 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(stack, t);
              var G__19399 = t.left;
              stack = G__19398;
              t = G__19399;
              continue;
            } else {
              var G__19400 = stack;
              var G__19401 = t.right;
              stack = G__19400;
              t = G__19401;
              continue;
            }
          } else {
            if (c > 0) {
              var G__19402 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(stack, t);
              var G__19403 = t.right;
              stack = G__19402;
              t = G__19403;
              continue;
            } else {
              var G__19404 = stack;
              var G__19405 = t.left;
              stack = G__19404;
              t = G__19405;
              continue;
            }
          }
        }
      } else {
        if (stack == null) {
          return null;
        } else {
          return new cljs.core.PersistentTreeMapSeq(null, stack, ascending_QMARK_, -1, null);
        }
      }
      break;
    }
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_entry_key$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  var G__19376 = entry;
  return cljs.core.key.cljs$core$IFn$_invoke$arity$1 ? cljs.core.key.cljs$core$IFn$_invoke$arity$1(G__19376) : cljs.core.key.call(null, G__19376);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_comparator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.comp;
};
cljs.core.PersistentTreeMap.cljs$lang$type = true;
cljs.core.PersistentTreeMap.cljs$lang$ctorStr = "cljs.core/PersistentTreeMap";
cljs.core.PersistentTreeMap.cljs$lang$ctorPrWriter = function(this__4914__auto__, writer__4915__auto__, opt__4916__auto__) {
  return cljs.core._write(writer__4915__auto__, "cljs.core/PersistentTreeMap");
};
cljs.core.__GT_PersistentTreeMap = function cljs$core$__GT_PersistentTreeMap(comp, tree, cnt, meta, __hash) {
  return new cljs.core.PersistentTreeMap(comp, tree, cnt, meta, __hash);
};
cljs.core.PersistentTreeMap.EMPTY = new cljs.core.PersistentTreeMap(cljs.core.compare, null, 0, null, cljs.core.empty_unordered_hash);
cljs.core.PersistentTreeMap.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5311__auto__ = this;
  return cljs.core.es6_iterator(this__5311__auto__);
};
cljs.core.hash_map = function cljs$core$hash_map() {
  var argseq__5375__auto__ = 0 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 0), 0) : null;
  return cljs.core.hash_map.cljs$core$IFn$_invoke$arity$variadic(argseq__5375__auto__);
};
cljs.core.hash_map.cljs$core$IFn$_invoke$arity$variadic = function(keyvals) {
  var in$ = cljs.core.seq(keyvals);
  var out = cljs.core.transient$(cljs.core.PersistentHashMap.EMPTY);
  while (true) {
    if (in$) {
      var G__19407 = cljs.core.nnext(in$);
      var G__19408 = cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(out, cljs.core.first(in$), cljs.core.second(in$));
      in$ = G__19407;
      out = G__19408;
      continue;
    } else {
      return cljs.core.persistent_BANG_(out);
    }
    break;
  }
};
cljs.core.hash_map.cljs$lang$maxFixedArity = 0;
cljs.core.hash_map.cljs$lang$applyTo = function(seq19406) {
  return cljs.core.hash_map.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq19406));
};
cljs.core.array_map = function cljs$core$array_map() {
  var argseq__5375__auto__ = 0 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 0), 0) : null;
  return cljs.core.array_map.cljs$core$IFn$_invoke$arity$variadic(argseq__5375__auto__);
};
cljs.core.array_map.cljs$core$IFn$_invoke$arity$variadic = function(keyvals) {
  var arr = keyvals instanceof cljs.core.IndexedSeq && keyvals.i === 0 ? keyvals.arr : cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(keyvals);
  return cljs.core.PersistentArrayMap.fromArray(arr, true, false);
};
cljs.core.array_map.cljs$lang$maxFixedArity = 0;
cljs.core.array_map.cljs$lang$applyTo = function(seq19409) {
  return cljs.core.array_map.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq19409));
};
cljs.core.obj_map = function cljs$core$obj_map() {
  var argseq__5375__auto__ = 0 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 0), 0) : null;
  return cljs.core.obj_map.cljs$core$IFn$_invoke$arity$variadic(argseq__5375__auto__);
};
cljs.core.obj_map.cljs$core$IFn$_invoke$arity$variadic = function(keyvals) {
  var ks = [];
  var obj = function() {
    var obj19412 = {};
    return obj19412;
  }();
  var kvs = cljs.core.seq(keyvals);
  while (true) {
    if (kvs) {
      ks.push(cljs.core.first(kvs));
      obj[cljs.core.first(kvs)] = cljs.core.second(kvs);
      var G__19413 = cljs.core.nnext(kvs);
      kvs = G__19413;
      continue;
    } else {
      return cljs.core.ObjMap.fromObject(ks, obj);
    }
    break;
  }
};
cljs.core.obj_map.cljs$lang$maxFixedArity = 0;
cljs.core.obj_map.cljs$lang$applyTo = function(seq19410) {
  return cljs.core.obj_map.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq19410));
};
cljs.core.sorted_map = function cljs$core$sorted_map() {
  var argseq__5375__auto__ = 0 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 0), 0) : null;
  return cljs.core.sorted_map.cljs$core$IFn$_invoke$arity$variadic(argseq__5375__auto__);
};
cljs.core.sorted_map.cljs$core$IFn$_invoke$arity$variadic = function(keyvals) {
  var in$ = cljs.core.seq(keyvals);
  var out = cljs.core.PersistentTreeMap.EMPTY;
  while (true) {
    if (in$) {
      var G__19415 = cljs.core.nnext(in$);
      var G__19416 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(out, cljs.core.first(in$), cljs.core.second(in$));
      in$ = G__19415;
      out = G__19416;
      continue;
    } else {
      return out;
    }
    break;
  }
};
cljs.core.sorted_map.cljs$lang$maxFixedArity = 0;
cljs.core.sorted_map.cljs$lang$applyTo = function(seq19414) {
  return cljs.core.sorted_map.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq19414));
};
cljs.core.sorted_map_by = function cljs$core$sorted_map_by() {
  var argseq__5375__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return cljs.core.sorted_map_by.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5375__auto__);
};
cljs.core.sorted_map_by.cljs$core$IFn$_invoke$arity$variadic = function(comparator, keyvals) {
  var in$ = cljs.core.seq(keyvals);
  var out = new cljs.core.PersistentTreeMap(cljs.core.fn__GT_comparator(comparator), null, 0, null, 0);
  while (true) {
    if (in$) {
      var G__19419 = cljs.core.nnext(in$);
      var G__19420 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(out, cljs.core.first(in$), cljs.core.second(in$));
      in$ = G__19419;
      out = G__19420;
      continue;
    } else {
      return out;
    }
    break;
  }
};
cljs.core.sorted_map_by.cljs$lang$maxFixedArity = 1;
cljs.core.sorted_map_by.cljs$lang$applyTo = function(seq19417) {
  var G__19418 = cljs.core.first(seq19417);
  var seq19417__$1 = cljs.core.next(seq19417);
  return cljs.core.sorted_map_by.cljs$core$IFn$_invoke$arity$variadic(G__19418, seq19417__$1);
};
cljs.core.KeySeq = function(mseq, _meta) {
  this.mseq = mseq;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374988;
};
cljs.core.KeySeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.KeySeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.KeySeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__._meta;
};
cljs.core.KeySeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__19421 = self__.mseq;
    if (G__19421) {
      var bit__5009__auto__ = G__19421.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__5009__auto__ || G__19421.cljs$core$INext$) {
        return true;
      } else {
        if (!G__19421.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.INext, G__19421);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.INext, G__19421);
    }
  }() ? self__.mseq.cljs$core$INext$_next$arity$1(null) : cljs.core.next(self__.mseq);
  if (nseq == null) {
    return null;
  } else {
    return new cljs.core.KeySeq(nseq, self__._meta);
  }
};
cljs.core.KeySeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll(coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.KeySeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__._meta);
};
cljs.core.KeySeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var me = self__.mseq.cljs$core$ISeq$_first$arity$1(null);
  return me.cljs$core$IMapEntry$_key$arity$1(null);
};
cljs.core.KeySeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__19422 = self__.mseq;
    if (G__19422) {
      var bit__5009__auto__ = G__19422.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__5009__auto__ || G__19422.cljs$core$INext$) {
        return true;
      } else {
        if (!G__19422.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.INext, G__19422);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.INext, G__19422);
    }
  }() ? self__.mseq.cljs$core$INext$_next$arity$1(null) : cljs.core.next(self__.mseq);
  if (!(nseq == null)) {
    return new cljs.core.KeySeq(nseq, self__._meta);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.KeySeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.KeySeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.KeySeq(self__.mseq, new_meta);
};
cljs.core.KeySeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.KeySeq.cljs$lang$type = true;
cljs.core.KeySeq.cljs$lang$ctorStr = "cljs.core/KeySeq";
cljs.core.KeySeq.cljs$lang$ctorPrWriter = function(this__4914__auto__, writer__4915__auto__, opt__4916__auto__) {
  return cljs.core._write(writer__4915__auto__, "cljs.core/KeySeq");
};
cljs.core.__GT_KeySeq = function cljs$core$__GT_KeySeq(mseq, _meta) {
  return new cljs.core.KeySeq(mseq, _meta);
};
cljs.core.KeySeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5311__auto__ = this;
  return cljs.core.es6_iterator(this__5311__auto__);
};
cljs.core.keys = function cljs$core$keys(hash_map) {
  var temp__4126__auto__ = cljs.core.seq(hash_map);
  if (temp__4126__auto__) {
    var mseq = temp__4126__auto__;
    return new cljs.core.KeySeq(mseq, null);
  } else {
    return null;
  }
};
cljs.core.key = function cljs$core$key(map_entry) {
  return cljs.core._key(map_entry);
};
cljs.core.ValSeq = function(mseq, _meta) {
  this.mseq = mseq;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374988;
};
cljs.core.ValSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.ValSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.ValSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__._meta;
};
cljs.core.ValSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__19423 = self__.mseq;
    if (G__19423) {
      var bit__5009__auto__ = G__19423.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__5009__auto__ || G__19423.cljs$core$INext$) {
        return true;
      } else {
        if (!G__19423.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.INext, G__19423);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.INext, G__19423);
    }
  }() ? self__.mseq.cljs$core$INext$_next$arity$1(null) : cljs.core.next(self__.mseq);
  if (nseq == null) {
    return null;
  } else {
    return new cljs.core.ValSeq(nseq, self__._meta);
  }
};
cljs.core.ValSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll(coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.ValSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__._meta);
};
cljs.core.ValSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var me = self__.mseq.cljs$core$ISeq$_first$arity$1(null);
  return me.cljs$core$IMapEntry$_val$arity$1(null);
};
cljs.core.ValSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__19424 = self__.mseq;
    if (G__19424) {
      var bit__5009__auto__ = G__19424.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__5009__auto__ || G__19424.cljs$core$INext$) {
        return true;
      } else {
        if (!G__19424.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.INext, G__19424);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.INext, G__19424);
    }
  }() ? self__.mseq.cljs$core$INext$_next$arity$1(null) : cljs.core.next(self__.mseq);
  if (!(nseq == null)) {
    return new cljs.core.ValSeq(nseq, self__._meta);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.ValSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.ValSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ValSeq(self__.mseq, new_meta);
};
cljs.core.ValSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.ValSeq.cljs$lang$type = true;
cljs.core.ValSeq.cljs$lang$ctorStr = "cljs.core/ValSeq";
cljs.core.ValSeq.cljs$lang$ctorPrWriter = function(this__4914__auto__, writer__4915__auto__, opt__4916__auto__) {
  return cljs.core._write(writer__4915__auto__, "cljs.core/ValSeq");
};
cljs.core.__GT_ValSeq = function cljs$core$__GT_ValSeq(mseq, _meta) {
  return new cljs.core.ValSeq(mseq, _meta);
};
cljs.core.ValSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5311__auto__ = this;
  return cljs.core.es6_iterator(this__5311__auto__);
};
cljs.core.vals = function cljs$core$vals(hash_map) {
  var temp__4126__auto__ = cljs.core.seq(hash_map);
  if (temp__4126__auto__) {
    var mseq = temp__4126__auto__;
    return new cljs.core.ValSeq(mseq, null);
  } else {
    return null;
  }
};
cljs.core.val = function cljs$core$val(map_entry) {
  return cljs.core._val(map_entry);
};
cljs.core.merge = function cljs$core$merge() {
  var argseq__5375__auto__ = 0 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 0), 0) : null;
  return cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(argseq__5375__auto__);
};
cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic = function(maps) {
  if (cljs.core.truth_(cljs.core.some(cljs.core.identity, maps))) {
    return cljs.core.reduce.cljs$core$IFn$_invoke$arity$2(function(p1__19425_SHARP_, p2__19426_SHARP_) {
      return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(function() {
        var or__4335__auto__ = p1__19425_SHARP_;
        if (cljs.core.truth_(or__4335__auto__)) {
          return or__4335__auto__;
        } else {
          return cljs.core.PersistentArrayMap.EMPTY;
        }
      }(), p2__19426_SHARP_);
    }, maps);
  } else {
    return null;
  }
};
cljs.core.merge.cljs$lang$maxFixedArity = 0;
cljs.core.merge.cljs$lang$applyTo = function(seq19427) {
  return cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq19427));
};
cljs.core.merge_with = function cljs$core$merge_with() {
  var argseq__5375__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return cljs.core.merge_with.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5375__auto__);
};
cljs.core.merge_with.cljs$core$IFn$_invoke$arity$variadic = function(f, maps) {
  if (cljs.core.truth_(cljs.core.some(cljs.core.identity, maps))) {
    var merge_entry = function(m, e) {
      var k = cljs.core.first(e);
      var v = cljs.core.second(e);
      if (cljs.core.contains_QMARK_(m, k)) {
        return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
          var G__19430 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
          var G__19431 = v;
          return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__19430, G__19431) : f.call(null, G__19430, G__19431);
        }());
      } else {
        return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, v);
      }
    };
    var merge2 = function(merge_entry) {
      return function(m1, m2) {
        return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(merge_entry, function() {
          var or__4335__auto__ = m1;
          if (cljs.core.truth_(or__4335__auto__)) {
            return or__4335__auto__;
          } else {
            return cljs.core.PersistentArrayMap.EMPTY;
          }
        }(), cljs.core.seq(m2));
      };
    }(merge_entry);
    return cljs.core.reduce.cljs$core$IFn$_invoke$arity$2(merge2, maps);
  } else {
    return null;
  }
};
cljs.core.merge_with.cljs$lang$maxFixedArity = 1;
cljs.core.merge_with.cljs$lang$applyTo = function(seq19428) {
  var G__19429 = cljs.core.first(seq19428);
  var seq19428__$1 = cljs.core.next(seq19428);
  return cljs.core.merge_with.cljs$core$IFn$_invoke$arity$variadic(G__19429, seq19428__$1);
};
cljs.core.select_keys = function cljs$core$select_keys(map, keyseq) {
  var ret = cljs.core.PersistentArrayMap.EMPTY;
  var keys = cljs.core.seq(keyseq);
  while (true) {
    if (keys) {
      var key = cljs.core.first(keys);
      var entry = cljs.core.get.cljs$core$IFn$_invoke$arity$3(map, key, new cljs.core.Keyword("cljs.core", "not-found", "cljs.core/not-found", -1572889185));
      var G__19432 = cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(entry, new cljs.core.Keyword("cljs.core", "not-found", "cljs.core/not-found", -1572889185)) ? cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(ret, key, entry) : ret;
      var G__19433 = cljs.core.next(keys);
      ret = G__19432;
      keys = G__19433;
      continue;
    } else {
      return cljs.core.with_meta(ret, cljs.core.meta(map));
    }
    break;
  }
};
cljs.core.PersistentHashSet = function(meta, hash_map, __hash) {
  this.meta = meta;
  this.hash_map = hash_map;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 15077647;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
};
cljs.core.PersistentHashSet.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentHashSet.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentHashSet.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentHashSet.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_set_entries_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentHashSet.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentHashSet.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_(coll, k);
};
cljs.core.PersistentHashSet.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__19436 = cljs.core.seq(coll);
  var chunk__19437 = null;
  var count__19438 = 0;
  var i__19439 = 0;
  while (true) {
    if (i__19439 < count__19438) {
      var vec__19440 = chunk__19437.cljs$core$IIndexed$_nth$arity$2(null, i__19439);
      var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__19440, 0, null);
      var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__19440, 1, null);
      var G__19441_19446 = v;
      var G__19442_19447 = k;
      f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__19441_19446, G__19442_19447) : f.call(null, G__19441_19446, G__19442_19447);
      var G__19448 = seq__19436;
      var G__19449 = chunk__19437;
      var G__19450 = count__19438;
      var G__19451 = i__19439 + 1;
      seq__19436 = G__19448;
      chunk__19437 = G__19449;
      count__19438 = G__19450;
      i__19439 = G__19451;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq(seq__19436);
      if (temp__4126__auto__) {
        var seq__19436__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__19436__$1)) {
          var c__5120__auto__ = cljs.core.chunk_first(seq__19436__$1);
          var G__19452 = cljs.core.chunk_rest(seq__19436__$1);
          var G__19453 = c__5120__auto__;
          var G__19454 = cljs.core.count(c__5120__auto__);
          var G__19455 = 0;
          seq__19436 = G__19452;
          chunk__19437 = G__19453;
          count__19438 = G__19454;
          i__19439 = G__19455;
          continue;
        } else {
          var vec__19443 = cljs.core.first(seq__19436__$1);
          var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__19443, 0, null);
          var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__19443, 1, null);
          var G__19444_19456 = v;
          var G__19445_19457 = k;
          f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__19444_19456, G__19445_19457) : f.call(null, G__19444_19456, G__19445_19457);
          var G__19458 = cljs.core.next(seq__19436__$1);
          var G__19459 = null;
          var G__19460 = 0;
          var G__19461 = 0;
          seq__19436 = G__19458;
          chunk__19437 = G__19459;
          count__19438 = G__19460;
          i__19439 = G__19461;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentHashSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, v, null);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, v, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core._contains_key_QMARK_(self__.hash_map, v)) {
    return v;
  } else {
    return not_found;
  }
};
cljs.core.PersistentHashSet.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentHashSet.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentHashSet(self__.meta, self__.hash_map, self__.__hash);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._count(self__.hash_map);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4751__auto__ = self__.__hash;
  if (!(h__4751__auto__ == null)) {
    return h__4751__auto__;
  } else {
    var h__4751__auto____$1 = cljs.core.hash_unordered_coll(coll__$1);
    self__.__hash = h__4751__auto____$1;
    return h__4751__auto____$1;
  }
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.set_QMARK_(other) && cljs.core.count(coll__$1) === cljs.core.count(other) && cljs.core.every_QMARK_(function(coll__$1) {
    return function(p1__19434_SHARP_) {
      return cljs.core.contains_QMARK_(coll__$1, p1__19434_SHARP_);
    };
  }(coll__$1), other);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientHashSet(cljs.core._as_transient(self__.hash_map));
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.PersistentHashSet.EMPTY, self__.meta);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ISet$_disjoin$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashSet(self__.meta, cljs.core._dissoc(self__.hash_map, v), null);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.keys(self__.hash_map);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashSet(meta__$1, self__.hash_map, self__.__hash);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashSet(self__.meta, cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(self__.hash_map, o, null), null);
};
cljs.core.PersistentHashSet.prototype.call = function() {
  var G__19462 = null;
  var G__19462__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__19462__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__19462 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__19462__2.call(this, self__, k);
      case 3:
        return G__19462__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__19462.cljs$core$IFn$_invoke$arity$2 = G__19462__2;
  G__19462.cljs$core$IFn$_invoke$arity$3 = G__19462__3;
  return G__19462;
}();
cljs.core.PersistentHashSet.prototype.apply = function(self__, args19435) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args19435)));
};
cljs.core.PersistentHashSet.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentHashSet.cljs$lang$type = true;
cljs.core.PersistentHashSet.cljs$lang$ctorStr = "cljs.core/PersistentHashSet";
cljs.core.PersistentHashSet.cljs$lang$ctorPrWriter = function(this__4914__auto__, writer__4915__auto__, opt__4916__auto__) {
  return cljs.core._write(writer__4915__auto__, "cljs.core/PersistentHashSet");
};
cljs.core.__GT_PersistentHashSet = function cljs$core$__GT_PersistentHashSet(meta, hash_map, __hash) {
  return new cljs.core.PersistentHashSet(meta, hash_map, __hash);
};
cljs.core.PersistentHashSet.EMPTY = new cljs.core.PersistentHashSet(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.empty_unordered_hash);
cljs.core.PersistentHashSet.fromArray = function(items, no_clone) {
  var len = items.length;
  if (len <= cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
    var arr = no_clone ? items : cljs.core.aclone(items);
    var i = 0;
    var out = cljs.core.transient$(cljs.core.PersistentArrayMap.EMPTY);
    while (true) {
      if (i < len) {
        var G__19463 = i + 1;
        var G__19464 = cljs.core._assoc_BANG_(out, items[i], null);
        i = G__19463;
        out = G__19464;
        continue;
      } else {
        return new cljs.core.PersistentHashSet(null, cljs.core._persistent_BANG_(out), null);
      }
      break;
    }
  } else {
    var i = 0;
    var out = cljs.core.transient$(cljs.core.PersistentHashSet.EMPTY);
    while (true) {
      if (i < len) {
        var G__19465 = i + 1;
        var G__19466 = cljs.core._conj_BANG_(out, items[i]);
        i = G__19465;
        out = G__19466;
        continue;
      } else {
        return cljs.core._persistent_BANG_(out);
      }
      break;
    }
  }
};
cljs.core.PersistentHashSet.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5311__auto__ = this;
  return cljs.core.es6_iterator(this__5311__auto__);
};
cljs.core.TransientHashSet = function(transient_map) {
  this.transient_map = transient_map;
  this.cljs$lang$protocol_mask$partition0$ = 259;
  this.cljs$lang$protocol_mask$partition1$ = 136;
};
cljs.core.TransientHashSet.prototype.call = function() {
  var G__19468 = null;
  var G__19468__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var tcoll = self____$1;
    if (cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
      return null;
    } else {
      return k;
    }
  };
  var G__19468__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var tcoll = self____$1;
    if (cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
      return not_found;
    } else {
      return k;
    }
  };
  G__19468 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__19468__2.call(this, self__, k);
      case 3:
        return G__19468__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__19468.cljs$core$IFn$_invoke$arity$2 = G__19468__2;
  G__19468.cljs$core$IFn$_invoke$arity$3 = G__19468__3;
  return G__19468;
}();
cljs.core.TransientHashSet.prototype.apply = function(self__, args19467) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args19467)));
};
cljs.core.TransientHashSet.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var tcoll = this;
  if (cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return null;
  } else {
    return k;
  }
};
cljs.core.TransientHashSet.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var tcoll = this;
  if (cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return not_found;
  } else {
    return k;
  }
};
cljs.core.TransientHashSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, v) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(tcoll__$1, v, null);
};
cljs.core.TransientHashSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, v, not_found) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(self__.transient_map, v, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return not_found;
  } else {
    return v;
  }
};
cljs.core.TransientHashSet.prototype.cljs$core$ICounted$_count$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core.count(self__.transient_map);
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientSet$_disjoin_BANG_$arity$2 = function(tcoll, v) {
  var self__ = this;
  var tcoll__$1 = this;
  self__.transient_map = cljs.core.dissoc_BANG_.cljs$core$IFn$_invoke$arity$2(self__.transient_map, v);
  return tcoll__$1;
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  var tcoll__$1 = this;
  self__.transient_map = cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(self__.transient_map, o, null);
  return tcoll__$1;
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  return new cljs.core.PersistentHashSet(null, cljs.core.persistent_BANG_(self__.transient_map), null);
};
cljs.core.TransientHashSet.cljs$lang$type = true;
cljs.core.TransientHashSet.cljs$lang$ctorStr = "cljs.core/TransientHashSet";
cljs.core.TransientHashSet.cljs$lang$ctorPrWriter = function(this__4914__auto__, writer__4915__auto__, opt__4916__auto__) {
  return cljs.core._write(writer__4915__auto__, "cljs.core/TransientHashSet");
};
cljs.core.__GT_TransientHashSet = function cljs$core$__GT_TransientHashSet(transient_map) {
  return new cljs.core.TransientHashSet(transient_map);
};
cljs.core.PersistentTreeSet = function(meta, tree_map, __hash) {
  this.meta = meta;
  this.tree_map = tree_map;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 417730831;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.PersistentTreeSet.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentTreeSet.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentTreeSet.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentTreeSet.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_set_entries_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentTreeSet.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentTreeSet.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_(coll, k);
};
cljs.core.PersistentTreeSet.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__19471 = cljs.core.seq(coll);
  var chunk__19472 = null;
  var count__19473 = 0;
  var i__19474 = 0;
  while (true) {
    if (i__19474 < count__19473) {
      var vec__19475 = chunk__19472.cljs$core$IIndexed$_nth$arity$2(null, i__19474);
      var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__19475, 0, null);
      var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__19475, 1, null);
      var G__19476_19481 = v;
      var G__19477_19482 = k;
      f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__19476_19481, G__19477_19482) : f.call(null, G__19476_19481, G__19477_19482);
      var G__19483 = seq__19471;
      var G__19484 = chunk__19472;
      var G__19485 = count__19473;
      var G__19486 = i__19474 + 1;
      seq__19471 = G__19483;
      chunk__19472 = G__19484;
      count__19473 = G__19485;
      i__19474 = G__19486;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq(seq__19471);
      if (temp__4126__auto__) {
        var seq__19471__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__19471__$1)) {
          var c__5120__auto__ = cljs.core.chunk_first(seq__19471__$1);
          var G__19487 = cljs.core.chunk_rest(seq__19471__$1);
          var G__19488 = c__5120__auto__;
          var G__19489 = cljs.core.count(c__5120__auto__);
          var G__19490 = 0;
          seq__19471 = G__19487;
          chunk__19472 = G__19488;
          count__19473 = G__19489;
          i__19474 = G__19490;
          continue;
        } else {
          var vec__19478 = cljs.core.first(seq__19471__$1);
          var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__19478, 0, null);
          var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__19478, 1, null);
          var G__19479_19491 = v;
          var G__19480_19492 = k;
          f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__19479_19491, G__19480_19492) : f.call(null, G__19479_19491, G__19480_19492);
          var G__19493 = cljs.core.next(seq__19471__$1);
          var G__19494 = null;
          var G__19495 = 0;
          var G__19496 = 0;
          seq__19471 = G__19493;
          chunk__19472 = G__19494;
          count__19473 = G__19495;
          i__19474 = G__19496;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, v, null);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, v, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var n = self__.tree_map.entry_at(v);
  if (!(n == null)) {
    return n.key;
  } else {
    return not_found;
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, self__.tree_map, self__.__hash);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.count(self__.tree_map);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.count(self__.tree_map) > 0) {
    return cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.key, cljs.core.rseq(self__.tree_map));
  } else {
    return null;
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4751__auto__ = self__.__hash;
  if (!(h__4751__auto__ == null)) {
    return h__4751__auto__;
  } else {
    var h__4751__auto____$1 = cljs.core.hash_unordered_coll(coll__$1);
    self__.__hash = h__4751__auto____$1;
    return h__4751__auto____$1;
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.set_QMARK_(other) && cljs.core.count(coll__$1) === cljs.core.count(other) && cljs.core.every_QMARK_(function(coll__$1) {
    return function(p1__19469_SHARP_) {
      return cljs.core.contains_QMARK_(coll__$1, p1__19469_SHARP_);
    };
  }(coll__$1), other);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, cljs.core._empty(self__.tree_map), 0);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISet$_disjoin$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(self__.tree_map, v), null);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.keys(self__.tree_map);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(meta__$1, self__.tree_map, self__.__hash);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(self__.tree_map, o, null), null);
};
cljs.core.PersistentTreeSet.prototype.call = function() {
  var G__19497 = null;
  var G__19497__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__19497__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__19497 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__19497__2.call(this, self__, k);
      case 3:
        return G__19497__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__19497.cljs$core$IFn$_invoke$arity$2 = G__19497__2;
  G__19497.cljs$core$IFn$_invoke$arity$3 = G__19497__3;
  return G__19497;
}();
cljs.core.PersistentTreeSet.prototype.apply = function(self__, args19470) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args19470)));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_sorted_seq$arity$2 = function(coll, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.key, cljs.core._sorted_seq(self__.tree_map, ascending_QMARK_));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_sorted_seq_from$arity$3 = function(coll, k, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.key, cljs.core._sorted_seq_from(self__.tree_map, k, ascending_QMARK_));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_entry_key$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  return entry;
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_comparator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._comparator(self__.tree_map);
};
cljs.core.PersistentTreeSet.cljs$lang$type = true;
cljs.core.PersistentTreeSet.cljs$lang$ctorStr = "cljs.core/PersistentTreeSet";
cljs.core.PersistentTreeSet.cljs$lang$ctorPrWriter = function(this__4914__auto__, writer__4915__auto__, opt__4916__auto__) {
  return cljs.core._write(writer__4915__auto__, "cljs.core/PersistentTreeSet");
};
cljs.core.__GT_PersistentTreeSet = function cljs$core$__GT_PersistentTreeSet(meta, tree_map, __hash) {
  return new cljs.core.PersistentTreeSet(meta, tree_map, __hash);
};
cljs.core.PersistentTreeSet.EMPTY = new cljs.core.PersistentTreeSet(null, cljs.core.PersistentTreeMap.EMPTY, cljs.core.empty_unordered_hash);
cljs.core.PersistentTreeSet.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5311__auto__ = this;
  return cljs.core.es6_iterator(this__5311__auto__);
};
cljs.core.set_from_indexed_seq = function cljs$core$set_from_indexed_seq(iseq) {
  var arr = iseq.arr;
  var ret = function() {
    var a__5214__auto__ = arr;
    var i = 0;
    var res = cljs.core._as_transient(cljs.core.PersistentHashSet.EMPTY);
    while (true) {
      if (i < a__5214__auto__.length) {
        var G__19498 = i + 1;
        var G__19499 = res.cljs$core$ITransientCollection$_conj_BANG_$arity$2(null, arr[i]);
        i = G__19498;
        res = G__19499;
        continue;
      } else {
        return res;
      }
      break;
    }
  }();
  return ret.cljs$core$ITransientCollection$_persistent_BANG_$arity$1(null);
};
cljs.core.set = function cljs$core$set(coll) {
  var in$ = cljs.core.seq(coll);
  if (in$ == null) {
    return cljs.core.PersistentHashSet.EMPTY;
  } else {
    if (in$ instanceof cljs.core.IndexedSeq && in$.i === 0) {
      return cljs.core.set_from_indexed_seq(in$);
    } else {
      var in$__$1 = in$;
      var out = cljs.core._as_transient(cljs.core.PersistentHashSet.EMPTY);
      while (true) {
        if (!(in$__$1 == null)) {
          var G__19500 = in$__$1.cljs$core$INext$_next$arity$1(null);
          var G__19501 = out.cljs$core$ITransientCollection$_conj_BANG_$arity$2(null, in$__$1.cljs$core$ISeq$_first$arity$1(null));
          in$__$1 = G__19500;
          out = G__19501;
          continue;
        } else {
          return out.cljs$core$ITransientCollection$_persistent_BANG_$arity$1(null);
        }
        break;
      }
    }
  }
};
cljs.core.hash_set = function cljs$core$hash_set() {
  var G__19504 = arguments.length;
  switch(G__19504) {
    case 0:
      return cljs.core.hash_set.cljs$core$IFn$_invoke$arity$0();
      break;
    default:
      var argseq__5386__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 0), 0);
      return cljs.core.hash_set.cljs$core$IFn$_invoke$arity$variadic(argseq__5386__auto__);
  }
};
cljs.core.hash_set.cljs$core$IFn$_invoke$arity$0 = function() {
  return cljs.core.PersistentHashSet.EMPTY;
};
cljs.core.hash_set.cljs$core$IFn$_invoke$arity$variadic = function(keys) {
  return cljs.core.set(keys);
};
cljs.core.hash_set.cljs$lang$applyTo = function(seq19502) {
  return cljs.core.hash_set.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq19502));
};
cljs.core.hash_set.cljs$lang$maxFixedArity = 0;
cljs.core.sorted_set = function cljs$core$sorted_set() {
  var argseq__5375__auto__ = 0 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 0), 0) : null;
  return cljs.core.sorted_set.cljs$core$IFn$_invoke$arity$variadic(argseq__5375__auto__);
};
cljs.core.sorted_set.cljs$core$IFn$_invoke$arity$variadic = function(keys) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._conj, cljs.core.PersistentTreeSet.EMPTY, keys);
};
cljs.core.sorted_set.cljs$lang$maxFixedArity = 0;
cljs.core.sorted_set.cljs$lang$applyTo = function(seq19506) {
  return cljs.core.sorted_set.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq19506));
};
cljs.core.sorted_set_by = function cljs$core$sorted_set_by() {
  var argseq__5375__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return cljs.core.sorted_set_by.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5375__auto__);
};
cljs.core.sorted_set_by.cljs$core$IFn$_invoke$arity$variadic = function(comparator, keys) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._conj, new cljs.core.PersistentTreeSet(null, cljs.core.sorted_map_by(comparator), 0), keys);
};
cljs.core.sorted_set_by.cljs$lang$maxFixedArity = 1;
cljs.core.sorted_set_by.cljs$lang$applyTo = function(seq19507) {
  var G__19508 = cljs.core.first(seq19507);
  var seq19507__$1 = cljs.core.next(seq19507);
  return cljs.core.sorted_set_by.cljs$core$IFn$_invoke$arity$variadic(G__19508, seq19507__$1);
};
cljs.core.replace = function cljs$core$replace() {
  var G__19512 = arguments.length;
  switch(G__19512) {
    case 1:
      return cljs.core.replace.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.replace.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.replace.cljs$core$IFn$_invoke$arity$1 = function(smap) {
  return cljs.core.map.cljs$core$IFn$_invoke$arity$1(function(p1__19509_SHARP_) {
    var temp__4124__auto__ = cljs.core.find(smap, p1__19509_SHARP_);
    if (cljs.core.truth_(temp__4124__auto__)) {
      var e = temp__4124__auto__;
      return cljs.core.val(e);
    } else {
      return p1__19509_SHARP_;
    }
  });
};
cljs.core.replace.cljs$core$IFn$_invoke$arity$2 = function(smap, coll) {
  if (cljs.core.vector_QMARK_(coll)) {
    var n = cljs.core.count(coll);
    return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(n) {
      return function(v, i) {
        var temp__4124__auto__ = cljs.core.find(smap, cljs.core.nth.cljs$core$IFn$_invoke$arity$2(v, i));
        if (cljs.core.truth_(temp__4124__auto__)) {
          var e = temp__4124__auto__;
          return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(v, i, cljs.core.second(e));
        } else {
          return v;
        }
      };
    }(n), coll, cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, cljs.core.iterate(cljs.core.inc, 0)));
  } else {
    return cljs.core.map.cljs$core$IFn$_invoke$arity$2(function(p1__19510_SHARP_) {
      var temp__4124__auto__ = cljs.core.find(smap, p1__19510_SHARP_);
      if (cljs.core.truth_(temp__4124__auto__)) {
        var e = temp__4124__auto__;
        return cljs.core.second(e);
      } else {
        return p1__19510_SHARP_;
      }
    }, coll);
  }
};
cljs.core.replace.cljs$lang$maxFixedArity = 2;
cljs.core.distinct = function cljs$core$distinct() {
  var G__19515 = arguments.length;
  switch(G__19515) {
    case 0:
      return cljs.core.distinct.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.distinct.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.distinct.cljs$core$IFn$_invoke$arity$0 = function() {
  return function(rf) {
    var seen = cljs.core.volatile_BANG_(cljs.core.PersistentHashSet.EMPTY);
    return function(seen) {
      return function() {
        var G__19527 = null;
        var G__19527__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__19527__1 = function(result) {
          var G__19516 = result;
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__19516) : rf.call(null, G__19516);
        };
        var G__19527__2 = function(result, input) {
          if (cljs.core.contains_QMARK_(function() {
            var G__19517 = seen;
            return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__19517) : cljs.core.deref.call(null, G__19517);
          }(), input)) {
            return result;
          } else {
            cljs.core._vreset_BANG_(seen, cljs.core.conj.cljs$core$IFn$_invoke$arity$2(cljs.core._deref(seen), input));
            var G__19518 = result;
            var G__19519 = input;
            return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__19518, G__19519) : rf.call(null, G__19518, G__19519);
          }
        };
        G__19527 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__19527__0.call(this);
            case 1:
              return G__19527__1.call(this, result);
            case 2:
              return G__19527__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__19527.cljs$core$IFn$_invoke$arity$0 = G__19527__0;
        G__19527.cljs$core$IFn$_invoke$arity$1 = G__19527__1;
        G__19527.cljs$core$IFn$_invoke$arity$2 = G__19527__2;
        return G__19527;
      }();
    }(seen);
  };
};
cljs.core.distinct.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  var step = function cljs$core$step(xs, seen) {
    return new cljs.core.LazySeq(null, function() {
      return function(p__19524, seen__$1) {
        while (true) {
          var vec__19525 = p__19524;
          var f = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__19525, 0, null);
          var xs__$1 = vec__19525;
          var temp__4126__auto__ = cljs.core.seq(xs__$1);
          if (temp__4126__auto__) {
            var s = temp__4126__auto__;
            if (cljs.core.contains_QMARK_(seen__$1, f)) {
              var G__19528 = cljs.core.rest(s);
              var G__19529 = seen__$1;
              p__19524 = G__19528;
              seen__$1 = G__19529;
              continue;
            } else {
              return cljs.core.cons(f, cljs$core$step(cljs.core.rest(s), cljs.core.conj.cljs$core$IFn$_invoke$arity$2(seen__$1, f)));
            }
          } else {
            return null;
          }
          break;
        }
      }.call(null, xs, seen);
    }, null, null);
  };
  return step(coll, cljs.core.PersistentHashSet.EMPTY);
};
cljs.core.distinct.cljs$lang$maxFixedArity = 1;
cljs.core.butlast = function cljs$core$butlast(s) {
  var ret = cljs.core.PersistentVector.EMPTY;
  var s__$1 = s;
  while (true) {
    if (cljs.core.next(s__$1)) {
      var G__19530 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(ret, cljs.core.first(s__$1));
      var G__19531 = cljs.core.next(s__$1);
      ret = G__19530;
      s__$1 = G__19531;
      continue;
    } else {
      return cljs.core.seq(ret);
    }
    break;
  }
};
cljs.core.name = function cljs$core$name(x) {
  if (function() {
    var G__19533 = x;
    if (G__19533) {
      var bit__5002__auto__ = G__19533.cljs$lang$protocol_mask$partition1$ & 4096;
      if (bit__5002__auto__ || G__19533.cljs$core$INamed$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return x.cljs$core$INamed$_name$arity$1(null);
  } else {
    if (typeof x === "string") {
      return x;
    } else {
      throw new Error([cljs.core.str("Doesn't support name: "), cljs.core.str(x)].join(""));
    }
  }
};
cljs.core.zipmap = function cljs$core$zipmap(keys, vals) {
  var map = cljs.core.transient$(cljs.core.PersistentArrayMap.EMPTY);
  var ks = cljs.core.seq(keys);
  var vs = cljs.core.seq(vals);
  while (true) {
    if (ks && vs) {
      var G__19534 = cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(map, cljs.core.first(ks), cljs.core.first(vs));
      var G__19535 = cljs.core.next(ks);
      var G__19536 = cljs.core.next(vs);
      map = G__19534;
      ks = G__19535;
      vs = G__19536;
      continue;
    } else {
      return cljs.core.persistent_BANG_(map);
    }
    break;
  }
};
cljs.core.max_key = function cljs$core$max_key() {
  var G__19544 = arguments.length;
  switch(G__19544) {
    case 2:
      return cljs.core.max_key.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.max_key.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      var argseq__5386__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 3), 0);
      return cljs.core.max_key.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__5386__auto__);
  }
};
cljs.core.max_key.cljs$core$IFn$_invoke$arity$2 = function(k, x) {
  return x;
};
cljs.core.max_key.cljs$core$IFn$_invoke$arity$3 = function(k, x, y) {
  if (function() {
    var G__19545 = x;
    return k.cljs$core$IFn$_invoke$arity$1 ? k.cljs$core$IFn$_invoke$arity$1(G__19545) : k.call(null, G__19545);
  }() > function() {
    var G__19546 = y;
    return k.cljs$core$IFn$_invoke$arity$1 ? k.cljs$core$IFn$_invoke$arity$1(G__19546) : k.call(null, G__19546);
  }()) {
    return x;
  } else {
    return y;
  }
};
cljs.core.max_key.cljs$core$IFn$_invoke$arity$variadic = function(k, x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(p1__19537_SHARP_, p2__19538_SHARP_) {
    return cljs.core.max_key.cljs$core$IFn$_invoke$arity$3(k, p1__19537_SHARP_, p2__19538_SHARP_);
  }, cljs.core.max_key.cljs$core$IFn$_invoke$arity$3(k, x, y), more);
};
cljs.core.max_key.cljs$lang$applyTo = function(seq19539) {
  var G__19540 = cljs.core.first(seq19539);
  var seq19539__$1 = cljs.core.next(seq19539);
  var G__19541 = cljs.core.first(seq19539__$1);
  var seq19539__$2 = cljs.core.next(seq19539__$1);
  var G__19542 = cljs.core.first(seq19539__$2);
  var seq19539__$3 = cljs.core.next(seq19539__$2);
  return cljs.core.max_key.cljs$core$IFn$_invoke$arity$variadic(G__19540, G__19541, G__19542, seq19539__$3);
};
cljs.core.max_key.cljs$lang$maxFixedArity = 3;
cljs.core.min_key = function cljs$core$min_key() {
  var G__19555 = arguments.length;
  switch(G__19555) {
    case 2:
      return cljs.core.min_key.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.min_key.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      var argseq__5386__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 3), 0);
      return cljs.core.min_key.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__5386__auto__);
  }
};
cljs.core.min_key.cljs$core$IFn$_invoke$arity$2 = function(k, x) {
  return x;
};
cljs.core.min_key.cljs$core$IFn$_invoke$arity$3 = function(k, x, y) {
  if (function() {
    var G__19556 = x;
    return k.cljs$core$IFn$_invoke$arity$1 ? k.cljs$core$IFn$_invoke$arity$1(G__19556) : k.call(null, G__19556);
  }() < function() {
    var G__19557 = y;
    return k.cljs$core$IFn$_invoke$arity$1 ? k.cljs$core$IFn$_invoke$arity$1(G__19557) : k.call(null, G__19557);
  }()) {
    return x;
  } else {
    return y;
  }
};
cljs.core.min_key.cljs$core$IFn$_invoke$arity$variadic = function(k, x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(p1__19548_SHARP_, p2__19549_SHARP_) {
    return cljs.core.min_key.cljs$core$IFn$_invoke$arity$3(k, p1__19548_SHARP_, p2__19549_SHARP_);
  }, cljs.core.min_key.cljs$core$IFn$_invoke$arity$3(k, x, y), more);
};
cljs.core.min_key.cljs$lang$applyTo = function(seq19550) {
  var G__19551 = cljs.core.first(seq19550);
  var seq19550__$1 = cljs.core.next(seq19550);
  var G__19552 = cljs.core.first(seq19550__$1);
  var seq19550__$2 = cljs.core.next(seq19550__$1);
  var G__19553 = cljs.core.first(seq19550__$2);
  var seq19550__$3 = cljs.core.next(seq19550__$2);
  return cljs.core.min_key.cljs$core$IFn$_invoke$arity$variadic(G__19551, G__19552, G__19553, seq19550__$3);
};
cljs.core.min_key.cljs$lang$maxFixedArity = 3;
cljs.core.ArrayList = function(arr) {
  this.arr = arr;
};
cljs.core.ArrayList.prototype.add = function(x) {
  var self__ = this;
  var _ = this;
  return self__.arr.push(x);
};
cljs.core.ArrayList.prototype.size = function() {
  var self__ = this;
  var _ = this;
  return self__.arr.length;
};
cljs.core.ArrayList.prototype.clear = function() {
  var self__ = this;
  var _ = this;
  return self__.arr = [];
};
cljs.core.ArrayList.prototype.isEmpty = function() {
  var self__ = this;
  var _ = this;
  return self__.arr.length === 0;
};
cljs.core.ArrayList.prototype.toArray = function() {
  var self__ = this;
  var _ = this;
  return self__.arr;
};
cljs.core.ArrayList.cljs$lang$type = true;
cljs.core.ArrayList.cljs$lang$ctorStr = "cljs.core/ArrayList";
cljs.core.ArrayList.cljs$lang$ctorPrWriter = function(this__4914__auto__, writer__4915__auto__, opt__4916__auto__) {
  return cljs.core._write(writer__4915__auto__, "cljs.core/ArrayList");
};
cljs.core.__GT_ArrayList = function cljs$core$__GT_ArrayList(arr) {
  return new cljs.core.ArrayList(arr);
};
cljs.core.array_list = function cljs$core$array_list() {
  return new cljs.core.ArrayList([]);
};
cljs.core.partition_all = function cljs$core$partition_all() {
  var G__19560 = arguments.length;
  switch(G__19560) {
    case 1:
      return cljs.core.partition_all.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.partition_all.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.partition_all.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.partition_all.cljs$core$IFn$_invoke$arity$1 = function(n) {
  return function(rf) {
    var a = cljs.core.array_list();
    return function(a) {
      return function() {
        var G__19567 = null;
        var G__19567__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__19567__1 = function(result) {
          var result__$1 = cljs.core.truth_(a.isEmpty()) ? result : function() {
            var v = cljs.core.vec(a.toArray());
            a.clear();
            return cljs.core.unreduced(function() {
              var G__19561 = result;
              var G__19562 = v;
              return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__19561, G__19562) : rf.call(null, G__19561, G__19562);
            }());
          }();
          var G__19563 = result__$1;
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__19563) : rf.call(null, G__19563);
        };
        var G__19567__2 = function(result, input) {
          a.add(input);
          if (n === a.size()) {
            var v = cljs.core.vec(a.toArray());
            a.clear();
            var G__19564 = result;
            var G__19565 = v;
            return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__19564, G__19565) : rf.call(null, G__19564, G__19565);
          } else {
            return result;
          }
        };
        G__19567 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__19567__0.call(this);
            case 1:
              return G__19567__1.call(this, result);
            case 2:
              return G__19567__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__19567.cljs$core$IFn$_invoke$arity$0 = G__19567__0;
        G__19567.cljs$core$IFn$_invoke$arity$1 = G__19567__1;
        G__19567.cljs$core$IFn$_invoke$arity$2 = G__19567__2;
        return G__19567;
      }();
    }(a);
  };
};
cljs.core.partition_all.cljs$core$IFn$_invoke$arity$2 = function(n, coll) {
  return cljs.core.partition_all.cljs$core$IFn$_invoke$arity$3(n, n, coll);
};
cljs.core.partition_all.cljs$core$IFn$_invoke$arity$3 = function(n, step, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4126__auto__ = cljs.core.seq(coll);
    if (temp__4126__auto__) {
      var s = temp__4126__auto__;
      return cljs.core.cons(cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, s), cljs.core.partition_all.cljs$core$IFn$_invoke$arity$3(n, step, cljs.core.drop.cljs$core$IFn$_invoke$arity$2(step, s)));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.partition_all.cljs$lang$maxFixedArity = 3;
cljs.core.take_while = function cljs$core$take_while() {
  var G__19569 = arguments.length;
  switch(G__19569) {
    case 1:
      return cljs.core.take_while.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.take_while.cljs$core$IFn$_invoke$arity$1 = function(pred) {
  return function(rf) {
    return function() {
      var G__19576 = null;
      var G__19576__0 = function() {
        return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
      };
      var G__19576__1 = function(result) {
        var G__19570 = result;
        return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__19570) : rf.call(null, G__19570);
      };
      var G__19576__2 = function(result, input) {
        if (cljs.core.truth_(function() {
          var G__19571 = input;
          return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(G__19571) : pred.call(null, G__19571);
        }())) {
          var G__19572 = result;
          var G__19573 = input;
          return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__19572, G__19573) : rf.call(null, G__19572, G__19573);
        } else {
          return cljs.core.reduced(result);
        }
      };
      G__19576 = function(result, input) {
        switch(arguments.length) {
          case 0:
            return G__19576__0.call(this);
          case 1:
            return G__19576__1.call(this, result);
          case 2:
            return G__19576__2.call(this, result, input);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__19576.cljs$core$IFn$_invoke$arity$0 = G__19576__0;
      G__19576.cljs$core$IFn$_invoke$arity$1 = G__19576__1;
      G__19576.cljs$core$IFn$_invoke$arity$2 = G__19576__2;
      return G__19576;
    }();
  };
};
cljs.core.take_while.cljs$core$IFn$_invoke$arity$2 = function(pred, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4126__auto__ = cljs.core.seq(coll);
    if (temp__4126__auto__) {
      var s = temp__4126__auto__;
      if (cljs.core.truth_(function() {
        var G__19574 = cljs.core.first(s);
        return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(G__19574) : pred.call(null, G__19574);
      }())) {
        return cljs.core.cons(cljs.core.first(s), cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(pred, cljs.core.rest(s)));
      } else {
        return null;
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.take_while.cljs$lang$maxFixedArity = 2;
cljs.core.mk_bound_fn = function cljs$core$mk_bound_fn(sc, test, key) {
  return function(e) {
    var comp = cljs.core._comparator(sc);
    var G__19581 = function() {
      var G__19583 = cljs.core._entry_key(sc, e);
      var G__19584 = key;
      return comp.cljs$core$IFn$_invoke$arity$2 ? comp.cljs$core$IFn$_invoke$arity$2(G__19583, G__19584) : comp.call(null, G__19583, G__19584);
    }();
    var G__19582 = 0;
    return test.cljs$core$IFn$_invoke$arity$2 ? test.cljs$core$IFn$_invoke$arity$2(G__19581, G__19582) : test.call(null, G__19581, G__19582);
  };
};
cljs.core.subseq = function cljs$core$subseq() {
  var G__19586 = arguments.length;
  switch(G__19586) {
    case 3:
      return cljs.core.subseq.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 5:
      return cljs.core.subseq.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.subseq.cljs$core$IFn$_invoke$arity$3 = function(sc, test, key) {
  var include = cljs.core.mk_bound_fn(sc, test, key);
  if (cljs.core.truth_(cljs.core.PersistentHashSet.fromArray([cljs.core._GT_, cljs.core._GT__EQ_], true).call(null, test))) {
    var temp__4126__auto__ = cljs.core._sorted_seq_from(sc, key, true);
    if (cljs.core.truth_(temp__4126__auto__)) {
      var vec__19587 = temp__4126__auto__;
      var e = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__19587, 0, null);
      var s = vec__19587;
      if (cljs.core.truth_(function() {
        var G__19588 = e;
        return include.cljs$core$IFn$_invoke$arity$1 ? include.cljs$core$IFn$_invoke$arity$1(G__19588) : include.call(null, G__19588);
      }())) {
        return s;
      } else {
        return cljs.core.next(s);
      }
    } else {
      return null;
    }
  } else {
    return cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(include, cljs.core._sorted_seq(sc, true));
  }
};
cljs.core.subseq.cljs$core$IFn$_invoke$arity$5 = function(sc, start_test, start_key, end_test, end_key) {
  var temp__4126__auto__ = cljs.core._sorted_seq_from(sc, start_key, true);
  if (cljs.core.truth_(temp__4126__auto__)) {
    var vec__19589 = temp__4126__auto__;
    var e = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__19589, 0, null);
    var s = vec__19589;
    return cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(cljs.core.mk_bound_fn(sc, end_test, end_key), cljs.core.truth_(cljs.core.mk_bound_fn(sc, start_test, start_key).call(null, e)) ? s : cljs.core.next(s));
  } else {
    return null;
  }
};
cljs.core.subseq.cljs$lang$maxFixedArity = 5;
cljs.core.rsubseq = function cljs$core$rsubseq() {
  var G__19592 = arguments.length;
  switch(G__19592) {
    case 3:
      return cljs.core.rsubseq.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 5:
      return cljs.core.rsubseq.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.rsubseq.cljs$core$IFn$_invoke$arity$3 = function(sc, test, key) {
  var include = cljs.core.mk_bound_fn(sc, test, key);
  if (cljs.core.truth_(cljs.core.PersistentHashSet.fromArray([cljs.core._LT_, cljs.core._LT__EQ_], true).call(null, test))) {
    var temp__4126__auto__ = cljs.core._sorted_seq_from(sc, key, false);
    if (cljs.core.truth_(temp__4126__auto__)) {
      var vec__19593 = temp__4126__auto__;
      var e = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__19593, 0, null);
      var s = vec__19593;
      if (cljs.core.truth_(function() {
        var G__19594 = e;
        return include.cljs$core$IFn$_invoke$arity$1 ? include.cljs$core$IFn$_invoke$arity$1(G__19594) : include.call(null, G__19594);
      }())) {
        return s;
      } else {
        return cljs.core.next(s);
      }
    } else {
      return null;
    }
  } else {
    return cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(include, cljs.core._sorted_seq(sc, false));
  }
};
cljs.core.rsubseq.cljs$core$IFn$_invoke$arity$5 = function(sc, start_test, start_key, end_test, end_key) {
  var temp__4126__auto__ = cljs.core._sorted_seq_from(sc, end_key, false);
  if (cljs.core.truth_(temp__4126__auto__)) {
    var vec__19595 = temp__4126__auto__;
    var e = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__19595, 0, null);
    var s = vec__19595;
    return cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(cljs.core.mk_bound_fn(sc, start_test, start_key), cljs.core.truth_(cljs.core.mk_bound_fn(sc, end_test, end_key).call(null, e)) ? s : cljs.core.next(s));
  } else {
    return null;
  }
};
cljs.core.rsubseq.cljs$lang$maxFixedArity = 5;
cljs.core.RangeIterator = function(i, end, step) {
  this.i = i;
  this.end = end;
  this.step = step;
};
cljs.core.RangeIterator.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  if (self__.step > 0) {
    return self__.i < self__.end;
  } else {
    return self__.i > self__.end;
  }
};
cljs.core.RangeIterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var ret = self__.i;
  self__.i = self__.i + self__.step;
  return ret;
};
cljs.core.RangeIterator.cljs$lang$type = true;
cljs.core.RangeIterator.cljs$lang$ctorStr = "cljs.core/RangeIterator";
cljs.core.RangeIterator.cljs$lang$ctorPrWriter = function(this__4914__auto__, writer__4915__auto__, opt__4916__auto__) {
  return cljs.core._write(writer__4915__auto__, "cljs.core/RangeIterator");
};
cljs.core.__GT_RangeIterator = function cljs$core$__GT_RangeIterator(i, end, step) {
  return new cljs.core.RangeIterator(i, end, step);
};
cljs.core.Range = function(meta, start, end, step, __hash) {
  this.meta = meta;
  this.start = start;
  this.end = end;
  this.step = step;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32375006;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.Range.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.Range.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.Range.prototype.cljs$core$IIndexed$_nth$arity$2 = function(rng, n) {
  var self__ = this;
  var rng__$1 = this;
  if (n < cljs.core._count(rng__$1)) {
    return self__.start + n * self__.step;
  } else {
    if (self__.start > self__.end && self__.step === 0) {
      return self__.start;
    } else {
      throw new Error("Index out of bounds");
    }
  }
};
cljs.core.Range.prototype.cljs$core$IIndexed$_nth$arity$3 = function(rng, n, not_found) {
  var self__ = this;
  var rng__$1 = this;
  if (n < cljs.core._count(rng__$1)) {
    return self__.start + n * self__.step;
  } else {
    if (self__.start > self__.end && self__.step === 0) {
      return self__.start;
    } else {
      return not_found;
    }
  }
};
cljs.core.Range.prototype.cljs$core$IIterable$ = true;
cljs.core.Range.prototype.cljs$core$IIterable$_iterator$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.RangeIterator(self__.start, self__.end, self__.step);
};
cljs.core.Range.prototype.cljs$core$IMeta$_meta$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  return self__.meta;
};
cljs.core.Range.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Range(self__.meta, self__.start, self__.end, self__.step, self__.__hash);
};
cljs.core.Range.prototype.cljs$core$INext$_next$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (self__.step > 0) {
    if (self__.start + self__.step < self__.end) {
      return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null);
    } else {
      return null;
    }
  } else {
    if (self__.start + self__.step > self__.end) {
      return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null);
    } else {
      return null;
    }
  }
};
cljs.core.Range.prototype.cljs$core$ICounted$_count$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (cljs.core.not(cljs.core._seq(rng__$1))) {
    return 0;
  } else {
    var G__19597 = (self__.end - self__.start) / self__.step;
    return Math.ceil.cljs$core$IFn$_invoke$arity$1 ? Math.ceil.cljs$core$IFn$_invoke$arity$1(G__19597) : Math.ceil.call(null, G__19597);
  }
};
cljs.core.Range.prototype.cljs$core$IHash$_hash$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  var h__4751__auto__ = self__.__hash;
  if (!(h__4751__auto__ == null)) {
    return h__4751__auto__;
  } else {
    var h__4751__auto____$1 = cljs.core.hash_ordered_coll(rng__$1);
    self__.__hash = h__4751__auto____$1;
    return h__4751__auto____$1;
  }
};
cljs.core.Range.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(rng, other) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.equiv_sequential(rng__$1, other);
};
cljs.core.Range.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.Range.prototype.cljs$core$IReduce$_reduce$arity$2 = function(rng, f) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2(rng__$1, f);
};
cljs.core.Range.prototype.cljs$core$IReduce$_reduce$arity$3 = function(rng, f, init) {
  var self__ = this;
  var rng__$1 = this;
  var i = self__.start;
  var ret = init;
  while (true) {
    if (self__.step > 0 ? i < self__.end : i > self__.end) {
      var ret__$1 = function() {
        var G__19598 = ret;
        var G__19599 = i;
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__19598, G__19599) : f.call(null, G__19598, G__19599);
      }();
      if (cljs.core.reduced_QMARK_(ret__$1)) {
        var G__19600 = ret__$1;
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__19600) : cljs.core.deref.call(null, G__19600);
      } else {
        var G__19601 = i + self__.step;
        var G__19602 = ret__$1;
        i = G__19601;
        ret = G__19602;
        continue;
      }
    } else {
      return ret;
    }
    break;
  }
};
cljs.core.Range.prototype.cljs$core$ISeq$_first$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (cljs.core._seq(rng__$1) == null) {
    return null;
  } else {
    return self__.start;
  }
};
cljs.core.Range.prototype.cljs$core$ISeq$_rest$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (!(cljs.core._seq(rng__$1) == null)) {
    return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.Range.prototype.cljs$core$ISeqable$_seq$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (self__.step > 0) {
    if (self__.start < self__.end) {
      return rng__$1;
    } else {
      return null;
    }
  } else {
    if (self__.start > self__.end) {
      return rng__$1;
    } else {
      return null;
    }
  }
};
cljs.core.Range.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(rng, meta__$1) {
  var self__ = this;
  var rng__$1 = this;
  return new cljs.core.Range(meta__$1, self__.start, self__.end, self__.step, self__.__hash);
};
cljs.core.Range.prototype.cljs$core$ICollection$_conj$arity$2 = function(rng, o) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.cons(o, rng__$1);
};
cljs.core.Range.cljs$lang$type = true;
cljs.core.Range.cljs$lang$ctorStr = "cljs.core/Range";
cljs.core.Range.cljs$lang$ctorPrWriter = function(this__4914__auto__, writer__4915__auto__, opt__4916__auto__) {
  return cljs.core._write(writer__4915__auto__, "cljs.core/Range");
};
cljs.core.__GT_Range = function cljs$core$__GT_Range(meta, start, end, step, __hash) {
  return new cljs.core.Range(meta, start, end, step, __hash);
};
cljs.core.Range.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5311__auto__ = this;
  return cljs.core.es6_iterator(this__5311__auto__);
};
cljs.core.range = function cljs$core$range() {
  var G__19604 = arguments.length;
  switch(G__19604) {
    case 0:
      return cljs.core.range.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.range.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.range.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.range.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.range.cljs$core$IFn$_invoke$arity$0 = function() {
  return cljs.core.range.cljs$core$IFn$_invoke$arity$3(0, Number.MAX_VALUE, 1);
};
cljs.core.range.cljs$core$IFn$_invoke$arity$1 = function(end) {
  return cljs.core.range.cljs$core$IFn$_invoke$arity$3(0, end, 1);
};
cljs.core.range.cljs$core$IFn$_invoke$arity$2 = function(start, end) {
  return cljs.core.range.cljs$core$IFn$_invoke$arity$3(start, end, 1);
};
cljs.core.range.cljs$core$IFn$_invoke$arity$3 = function(start, end, step) {
  return new cljs.core.Range(null, start, end, step, null);
};
cljs.core.range.cljs$lang$maxFixedArity = 3;
cljs.core.take_nth = function cljs$core$take_nth() {
  var G__19607 = arguments.length;
  switch(G__19607) {
    case 1:
      return cljs.core.take_nth.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.take_nth.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.take_nth.cljs$core$IFn$_invoke$arity$1 = function(n) {
  return function(rf) {
    var ia = cljs.core.volatile_BANG_(-1);
    return function(ia) {
      return function() {
        var G__19612 = null;
        var G__19612__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__19612__1 = function(result) {
          var G__19608 = result;
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__19608) : rf.call(null, G__19608);
        };
        var G__19612__2 = function(result, input) {
          var i = cljs.core._vreset_BANG_(ia, cljs.core._deref(ia) + 1);
          if (cljs.core.rem(i, n) === 0) {
            var G__19609 = result;
            var G__19610 = input;
            return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__19609, G__19610) : rf.call(null, G__19609, G__19610);
          } else {
            return result;
          }
        };
        G__19612 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__19612__0.call(this);
            case 1:
              return G__19612__1.call(this, result);
            case 2:
              return G__19612__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__19612.cljs$core$IFn$_invoke$arity$0 = G__19612__0;
        G__19612.cljs$core$IFn$_invoke$arity$1 = G__19612__1;
        G__19612.cljs$core$IFn$_invoke$arity$2 = G__19612__2;
        return G__19612;
      }();
    }(ia);
  };
};
cljs.core.take_nth.cljs$core$IFn$_invoke$arity$2 = function(n, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4126__auto__ = cljs.core.seq(coll);
    if (temp__4126__auto__) {
      var s = temp__4126__auto__;
      return cljs.core.cons(cljs.core.first(s), cljs.core.take_nth.cljs$core$IFn$_invoke$arity$2(n, cljs.core.drop.cljs$core$IFn$_invoke$arity$2(n, s)));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.take_nth.cljs$lang$maxFixedArity = 2;
cljs.core.split_with = function cljs$core$split_with(pred, coll) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(pred, coll), cljs.core.drop_while.cljs$core$IFn$_invoke$arity$2(pred, coll)], null);
};
cljs.core.partition_by = function cljs$core$partition_by() {
  var G__19615 = arguments.length;
  switch(G__19615) {
    case 1:
      return cljs.core.partition_by.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.partition_by.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.partition_by.cljs$core$IFn$_invoke$arity$1 = function(f) {
  return function(rf) {
    var a = cljs.core.array_list();
    var pa = cljs.core.volatile_BANG_(new cljs.core.Keyword("cljs.core", "none", "cljs.core/none", 926646439));
    return function(a, pa) {
      return function() {
        var G__19626 = null;
        var G__19626__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__19626__1 = function(result) {
          var result__$1 = cljs.core.truth_(a.isEmpty()) ? result : function() {
            var v = cljs.core.vec(a.toArray());
            a.clear();
            return cljs.core.unreduced(function() {
              var G__19616 = result;
              var G__19617 = v;
              return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__19616, G__19617) : rf.call(null, G__19616, G__19617);
            }());
          }();
          var G__19618 = result__$1;
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__19618) : rf.call(null, G__19618);
        };
        var G__19626__2 = function(result, input) {
          var pval = function() {
            var G__19619 = pa;
            return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__19619) : cljs.core.deref.call(null, G__19619);
          }();
          var val = function() {
            var G__19620 = input;
            return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__19620) : f.call(null, G__19620);
          }();
          cljs.core.vreset_BANG_(pa, val);
          if (cljs.core.keyword_identical_QMARK_(pval, new cljs.core.Keyword("cljs.core", "none", "cljs.core/none", 926646439)) || cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(val, pval)) {
            a.add(input);
            return result;
          } else {
            var v = cljs.core.vec(a.toArray());
            a.clear();
            var ret = function() {
              var G__19621 = result;
              var G__19622 = v;
              return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__19621, G__19622) : rf.call(null, G__19621, G__19622);
            }();
            if (cljs.core.reduced_QMARK_(ret)) {
            } else {
              a.add(input);
            }
            return ret;
          }
        };
        G__19626 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__19626__0.call(this);
            case 1:
              return G__19626__1.call(this, result);
            case 2:
              return G__19626__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__19626.cljs$core$IFn$_invoke$arity$0 = G__19626__0;
        G__19626.cljs$core$IFn$_invoke$arity$1 = G__19626__1;
        G__19626.cljs$core$IFn$_invoke$arity$2 = G__19626__2;
        return G__19626;
      }();
    }(a, pa);
  };
};
cljs.core.partition_by.cljs$core$IFn$_invoke$arity$2 = function(f, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4126__auto__ = cljs.core.seq(coll);
    if (temp__4126__auto__) {
      var s = temp__4126__auto__;
      var fst = cljs.core.first(s);
      var fv = function() {
        var G__19623 = fst;
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__19623) : f.call(null, G__19623);
      }();
      var run = cljs.core.cons(fst, cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(function(fst, fv, s, temp__4126__auto__) {
        return function(p1__19613_SHARP_) {
          return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(fv, function() {
            var G__19624 = p1__19613_SHARP_;
            return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__19624) : f.call(null, G__19624);
          }());
        };
      }(fst, fv, s, temp__4126__auto__), cljs.core.next(s)));
      return cljs.core.cons(run, cljs.core.partition_by.cljs$core$IFn$_invoke$arity$2(f, cljs.core.seq(cljs.core.drop.cljs$core$IFn$_invoke$arity$2(cljs.core.count(run), s))));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.partition_by.cljs$lang$maxFixedArity = 2;
cljs.core.frequencies = function cljs$core$frequencies(coll) {
  return cljs.core.persistent_BANG_(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(counts, x) {
    return cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(counts, x, cljs.core.get.cljs$core$IFn$_invoke$arity$3(counts, x, 0) + 1);
  }, cljs.core.transient$(cljs.core.PersistentArrayMap.EMPTY), coll));
};
cljs.core.reductions = function cljs$core$reductions() {
  var G__19628 = arguments.length;
  switch(G__19628) {
    case 2:
      return cljs.core.reductions.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.reductions.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.reductions.cljs$core$IFn$_invoke$arity$2 = function(f, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4124__auto__ = cljs.core.seq(coll);
    if (temp__4124__auto__) {
      var s = temp__4124__auto__;
      return cljs.core.reductions.cljs$core$IFn$_invoke$arity$3(f, cljs.core.first(s), cljs.core.rest(s));
    } else {
      return cljs.core._conj(cljs.core.List.EMPTY, function() {
        return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
      }());
    }
  }, null, null);
};
cljs.core.reductions.cljs$core$IFn$_invoke$arity$3 = function(f, init, coll) {
  return cljs.core.cons(init, new cljs.core.LazySeq(null, function() {
    var temp__4126__auto__ = cljs.core.seq(coll);
    if (temp__4126__auto__) {
      var s = temp__4126__auto__;
      return cljs.core.reductions.cljs$core$IFn$_invoke$arity$3(f, function() {
        var G__19629 = init;
        var G__19630 = cljs.core.first(s);
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__19629, G__19630) : f.call(null, G__19629, G__19630);
      }(), cljs.core.rest(s));
    } else {
      return null;
    }
  }, null, null));
};
cljs.core.reductions.cljs$lang$maxFixedArity = 3;
cljs.core.juxt = function cljs$core$juxt() {
  var G__19647 = arguments.length;
  switch(G__19647) {
    case 1:
      return cljs.core.juxt.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.juxt.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.juxt.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      var argseq__5386__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 3), 0);
      return cljs.core.juxt.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__5386__auto__);
  }
};
cljs.core.juxt.cljs$core$IFn$_invoke$arity$1 = function(f) {
  return function() {
    var G__19691 = null;
    var G__19691__0 = function() {
      return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
        return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
      }()], null);
    };
    var G__19691__1 = function(x) {
      return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
        var G__19648 = x;
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__19648) : f.call(null, G__19648);
      }()], null);
    };
    var G__19691__2 = function(x, y) {
      return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
        var G__19649 = x;
        var G__19650 = y;
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__19649, G__19650) : f.call(null, G__19649, G__19650);
      }()], null);
    };
    var G__19691__3 = function(x, y, z) {
      return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
        var G__19651 = x;
        var G__19652 = y;
        var G__19653 = z;
        return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__19651, G__19652, G__19653) : f.call(null, G__19651, G__19652, G__19653);
      }()], null);
    };
    var G__19691__4 = function() {
      var G__19692__delegate = function(x, y, z, args) {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, x, y, z, args)], null);
      };
      var G__19692 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__19693__i = 0, G__19693__a = new Array(arguments.length - 3);
          while (G__19693__i < G__19693__a.length) {
            G__19693__a[G__19693__i] = arguments[G__19693__i + 3];
            ++G__19693__i;
          }
          args = new cljs.core.IndexedSeq(G__19693__a, 0);
        }
        return G__19692__delegate.call(this, x, y, z, args);
      };
      G__19692.cljs$lang$maxFixedArity = 3;
      G__19692.cljs$lang$applyTo = function(arglist__19694) {
        var x = cljs.core.first(arglist__19694);
        arglist__19694 = cljs.core.next(arglist__19694);
        var y = cljs.core.first(arglist__19694);
        arglist__19694 = cljs.core.next(arglist__19694);
        var z = cljs.core.first(arglist__19694);
        var args = cljs.core.rest(arglist__19694);
        return G__19692__delegate(x, y, z, args);
      };
      G__19692.cljs$core$IFn$_invoke$arity$variadic = G__19692__delegate;
      return G__19692;
    }();
    G__19691 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return G__19691__0.call(this);
        case 1:
          return G__19691__1.call(this, x);
        case 2:
          return G__19691__2.call(this, x, y);
        case 3:
          return G__19691__3.call(this, x, y, z);
        default:
          var G__19695 = null;
          if (arguments.length > 3) {
            var G__19696__i = 0, G__19696__a = new Array(arguments.length - 3);
            while (G__19696__i < G__19696__a.length) {
              G__19696__a[G__19696__i] = arguments[G__19696__i + 3];
              ++G__19696__i;
            }
            G__19695 = new cljs.core.IndexedSeq(G__19696__a, 0);
          }
          return G__19691__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__19695);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__19691.cljs$lang$maxFixedArity = 3;
    G__19691.cljs$lang$applyTo = G__19691__4.cljs$lang$applyTo;
    G__19691.cljs$core$IFn$_invoke$arity$0 = G__19691__0;
    G__19691.cljs$core$IFn$_invoke$arity$1 = G__19691__1;
    G__19691.cljs$core$IFn$_invoke$arity$2 = G__19691__2;
    G__19691.cljs$core$IFn$_invoke$arity$3 = G__19691__3;
    G__19691.cljs$core$IFn$_invoke$arity$variadic = G__19691__4.cljs$core$IFn$_invoke$arity$variadic;
    return G__19691;
  }();
};
cljs.core.juxt.cljs$core$IFn$_invoke$arity$2 = function(f, g) {
  return function() {
    var G__19697 = null;
    var G__19697__0 = function() {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
        return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
      }(), function() {
        return g.cljs$core$IFn$_invoke$arity$0 ? g.cljs$core$IFn$_invoke$arity$0() : g.call(null);
      }()], null);
    };
    var G__19697__1 = function(x) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
        var G__19654 = x;
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__19654) : f.call(null, G__19654);
      }(), function() {
        var G__19655 = x;
        return g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(G__19655) : g.call(null, G__19655);
      }()], null);
    };
    var G__19697__2 = function(x, y) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
        var G__19656 = x;
        var G__19657 = y;
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__19656, G__19657) : f.call(null, G__19656, G__19657);
      }(), function() {
        var G__19658 = x;
        var G__19659 = y;
        return g.cljs$core$IFn$_invoke$arity$2 ? g.cljs$core$IFn$_invoke$arity$2(G__19658, G__19659) : g.call(null, G__19658, G__19659);
      }()], null);
    };
    var G__19697__3 = function(x, y, z) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
        var G__19660 = x;
        var G__19661 = y;
        var G__19662 = z;
        return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__19660, G__19661, G__19662) : f.call(null, G__19660, G__19661, G__19662);
      }(), function() {
        var G__19663 = x;
        var G__19664 = y;
        var G__19665 = z;
        return g.cljs$core$IFn$_invoke$arity$3 ? g.cljs$core$IFn$_invoke$arity$3(G__19663, G__19664, G__19665) : g.call(null, G__19663, G__19664, G__19665);
      }()], null);
    };
    var G__19697__4 = function() {
      var G__19698__delegate = function(x, y, z, args) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, x, y, z, args), cljs.core.apply.cljs$core$IFn$_invoke$arity$5(g, x, y, z, args)], null);
      };
      var G__19698 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__19699__i = 0, G__19699__a = new Array(arguments.length - 3);
          while (G__19699__i < G__19699__a.length) {
            G__19699__a[G__19699__i] = arguments[G__19699__i + 3];
            ++G__19699__i;
          }
          args = new cljs.core.IndexedSeq(G__19699__a, 0);
        }
        return G__19698__delegate.call(this, x, y, z, args);
      };
      G__19698.cljs$lang$maxFixedArity = 3;
      G__19698.cljs$lang$applyTo = function(arglist__19700) {
        var x = cljs.core.first(arglist__19700);
        arglist__19700 = cljs.core.next(arglist__19700);
        var y = cljs.core.first(arglist__19700);
        arglist__19700 = cljs.core.next(arglist__19700);
        var z = cljs.core.first(arglist__19700);
        var args = cljs.core.rest(arglist__19700);
        return G__19698__delegate(x, y, z, args);
      };
      G__19698.cljs$core$IFn$_invoke$arity$variadic = G__19698__delegate;
      return G__19698;
    }();
    G__19697 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return G__19697__0.call(this);
        case 1:
          return G__19697__1.call(this, x);
        case 2:
          return G__19697__2.call(this, x, y);
        case 3:
          return G__19697__3.call(this, x, y, z);
        default:
          var G__19701 = null;
          if (arguments.length > 3) {
            var G__19702__i = 0, G__19702__a = new Array(arguments.length - 3);
            while (G__19702__i < G__19702__a.length) {
              G__19702__a[G__19702__i] = arguments[G__19702__i + 3];
              ++G__19702__i;
            }
            G__19701 = new cljs.core.IndexedSeq(G__19702__a, 0);
          }
          return G__19697__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__19701);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__19697.cljs$lang$maxFixedArity = 3;
    G__19697.cljs$lang$applyTo = G__19697__4.cljs$lang$applyTo;
    G__19697.cljs$core$IFn$_invoke$arity$0 = G__19697__0;
    G__19697.cljs$core$IFn$_invoke$arity$1 = G__19697__1;
    G__19697.cljs$core$IFn$_invoke$arity$2 = G__19697__2;
    G__19697.cljs$core$IFn$_invoke$arity$3 = G__19697__3;
    G__19697.cljs$core$IFn$_invoke$arity$variadic = G__19697__4.cljs$core$IFn$_invoke$arity$variadic;
    return G__19697;
  }();
};
cljs.core.juxt.cljs$core$IFn$_invoke$arity$3 = function(f, g, h) {
  return function() {
    var G__19703 = null;
    var G__19703__0 = function() {
      return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
        return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
      }(), function() {
        return g.cljs$core$IFn$_invoke$arity$0 ? g.cljs$core$IFn$_invoke$arity$0() : g.call(null);
      }(), function() {
        return h.cljs$core$IFn$_invoke$arity$0 ? h.cljs$core$IFn$_invoke$arity$0() : h.call(null);
      }()], null);
    };
    var G__19703__1 = function(x) {
      return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
        var G__19666 = x;
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__19666) : f.call(null, G__19666);
      }(), function() {
        var G__19667 = x;
        return g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(G__19667) : g.call(null, G__19667);
      }(), function() {
        var G__19668 = x;
        return h.cljs$core$IFn$_invoke$arity$1 ? h.cljs$core$IFn$_invoke$arity$1(G__19668) : h.call(null, G__19668);
      }()], null);
    };
    var G__19703__2 = function(x, y) {
      return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
        var G__19669 = x;
        var G__19670 = y;
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__19669, G__19670) : f.call(null, G__19669, G__19670);
      }(), function() {
        var G__19671 = x;
        var G__19672 = y;
        return g.cljs$core$IFn$_invoke$arity$2 ? g.cljs$core$IFn$_invoke$arity$2(G__19671, G__19672) : g.call(null, G__19671, G__19672);
      }(), function() {
        var G__19673 = x;
        var G__19674 = y;
        return h.cljs$core$IFn$_invoke$arity$2 ? h.cljs$core$IFn$_invoke$arity$2(G__19673, G__19674) : h.call(null, G__19673, G__19674);
      }()], null);
    };
    var G__19703__3 = function(x, y, z) {
      return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
        var G__19675 = x;
        var G__19676 = y;
        var G__19677 = z;
        return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__19675, G__19676, G__19677) : f.call(null, G__19675, G__19676, G__19677);
      }(), function() {
        var G__19678 = x;
        var G__19679 = y;
        var G__19680 = z;
        return g.cljs$core$IFn$_invoke$arity$3 ? g.cljs$core$IFn$_invoke$arity$3(G__19678, G__19679, G__19680) : g.call(null, G__19678, G__19679, G__19680);
      }(), function() {
        var G__19681 = x;
        var G__19682 = y;
        var G__19683 = z;
        return h.cljs$core$IFn$_invoke$arity$3 ? h.cljs$core$IFn$_invoke$arity$3(G__19681, G__19682, G__19683) : h.call(null, G__19681, G__19682, G__19683);
      }()], null);
    };
    var G__19703__4 = function() {
      var G__19704__delegate = function(x, y, z, args) {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, x, y, z, args), cljs.core.apply.cljs$core$IFn$_invoke$arity$5(g, x, y, z, args), cljs.core.apply.cljs$core$IFn$_invoke$arity$5(h, x, y, z, args)], null);
      };
      var G__19704 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__19705__i = 0, G__19705__a = new Array(arguments.length - 3);
          while (G__19705__i < G__19705__a.length) {
            G__19705__a[G__19705__i] = arguments[G__19705__i + 3];
            ++G__19705__i;
          }
          args = new cljs.core.IndexedSeq(G__19705__a, 0);
        }
        return G__19704__delegate.call(this, x, y, z, args);
      };
      G__19704.cljs$lang$maxFixedArity = 3;
      G__19704.cljs$lang$applyTo = function(arglist__19706) {
        var x = cljs.core.first(arglist__19706);
        arglist__19706 = cljs.core.next(arglist__19706);
        var y = cljs.core.first(arglist__19706);
        arglist__19706 = cljs.core.next(arglist__19706);
        var z = cljs.core.first(arglist__19706);
        var args = cljs.core.rest(arglist__19706);
        return G__19704__delegate(x, y, z, args);
      };
      G__19704.cljs$core$IFn$_invoke$arity$variadic = G__19704__delegate;
      return G__19704;
    }();
    G__19703 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return G__19703__0.call(this);
        case 1:
          return G__19703__1.call(this, x);
        case 2:
          return G__19703__2.call(this, x, y);
        case 3:
          return G__19703__3.call(this, x, y, z);
        default:
          var G__19707 = null;
          if (arguments.length > 3) {
            var G__19708__i = 0, G__19708__a = new Array(arguments.length - 3);
            while (G__19708__i < G__19708__a.length) {
              G__19708__a[G__19708__i] = arguments[G__19708__i + 3];
              ++G__19708__i;
            }
            G__19707 = new cljs.core.IndexedSeq(G__19708__a, 0);
          }
          return G__19703__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__19707);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__19703.cljs$lang$maxFixedArity = 3;
    G__19703.cljs$lang$applyTo = G__19703__4.cljs$lang$applyTo;
    G__19703.cljs$core$IFn$_invoke$arity$0 = G__19703__0;
    G__19703.cljs$core$IFn$_invoke$arity$1 = G__19703__1;
    G__19703.cljs$core$IFn$_invoke$arity$2 = G__19703__2;
    G__19703.cljs$core$IFn$_invoke$arity$3 = G__19703__3;
    G__19703.cljs$core$IFn$_invoke$arity$variadic = G__19703__4.cljs$core$IFn$_invoke$arity$variadic;
    return G__19703;
  }();
};
cljs.core.juxt.cljs$core$IFn$_invoke$arity$variadic = function(f, g, h, fs) {
  var fs__$1 = cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$4(f, g, h, fs);
  return function(fs__$1) {
    return function() {
      var G__19709 = null;
      var G__19709__0 = function() {
        return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(fs__$1) {
          return function(p1__19632_SHARP_, p2__19633_SHARP_) {
            return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(p1__19632_SHARP_, function() {
              return p2__19633_SHARP_.cljs$core$IFn$_invoke$arity$0 ? p2__19633_SHARP_.cljs$core$IFn$_invoke$arity$0() : p2__19633_SHARP_.call(null);
            }());
          };
        }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
      };
      var G__19709__1 = function(x) {
        return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(fs__$1) {
          return function(p1__19634_SHARP_, p2__19635_SHARP_) {
            return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(p1__19634_SHARP_, function() {
              var G__19684 = x;
              return p2__19635_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p2__19635_SHARP_.cljs$core$IFn$_invoke$arity$1(G__19684) : p2__19635_SHARP_.call(null, G__19684);
            }());
          };
        }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
      };
      var G__19709__2 = function(x, y) {
        return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(fs__$1) {
          return function(p1__19636_SHARP_, p2__19637_SHARP_) {
            return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(p1__19636_SHARP_, function() {
              var G__19685 = x;
              var G__19686 = y;
              return p2__19637_SHARP_.cljs$core$IFn$_invoke$arity$2 ? p2__19637_SHARP_.cljs$core$IFn$_invoke$arity$2(G__19685, G__19686) : p2__19637_SHARP_.call(null, G__19685, G__19686);
            }());
          };
        }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
      };
      var G__19709__3 = function(x, y, z) {
        return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(fs__$1) {
          return function(p1__19638_SHARP_, p2__19639_SHARP_) {
            return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(p1__19638_SHARP_, function() {
              var G__19687 = x;
              var G__19688 = y;
              var G__19689 = z;
              return p2__19639_SHARP_.cljs$core$IFn$_invoke$arity$3 ? p2__19639_SHARP_.cljs$core$IFn$_invoke$arity$3(G__19687, G__19688, G__19689) : p2__19639_SHARP_.call(null, G__19687, G__19688, G__19689);
            }());
          };
        }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
      };
      var G__19709__4 = function() {
        var G__19710__delegate = function(x, y, z, args) {
          return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(fs__$1) {
            return function(p1__19640_SHARP_, p2__19641_SHARP_) {
              return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(p1__19640_SHARP_, cljs.core.apply.cljs$core$IFn$_invoke$arity$5(p2__19641_SHARP_, x, y, z, args));
            };
          }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
        };
        var G__19710 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            var G__19711__i = 0, G__19711__a = new Array(arguments.length - 3);
            while (G__19711__i < G__19711__a.length) {
              G__19711__a[G__19711__i] = arguments[G__19711__i + 3];
              ++G__19711__i;
            }
            args = new cljs.core.IndexedSeq(G__19711__a, 0);
          }
          return G__19710__delegate.call(this, x, y, z, args);
        };
        G__19710.cljs$lang$maxFixedArity = 3;
        G__19710.cljs$lang$applyTo = function(arglist__19712) {
          var x = cljs.core.first(arglist__19712);
          arglist__19712 = cljs.core.next(arglist__19712);
          var y = cljs.core.first(arglist__19712);
          arglist__19712 = cljs.core.next(arglist__19712);
          var z = cljs.core.first(arglist__19712);
          var args = cljs.core.rest(arglist__19712);
          return G__19710__delegate(x, y, z, args);
        };
        G__19710.cljs$core$IFn$_invoke$arity$variadic = G__19710__delegate;
        return G__19710;
      }();
      G__19709 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__19709__0.call(this);
          case 1:
            return G__19709__1.call(this, x);
          case 2:
            return G__19709__2.call(this, x, y);
          case 3:
            return G__19709__3.call(this, x, y, z);
          default:
            var G__19713 = null;
            if (arguments.length > 3) {
              var G__19714__i = 0, G__19714__a = new Array(arguments.length - 3);
              while (G__19714__i < G__19714__a.length) {
                G__19714__a[G__19714__i] = arguments[G__19714__i + 3];
                ++G__19714__i;
              }
              G__19713 = new cljs.core.IndexedSeq(G__19714__a, 0);
            }
            return G__19709__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__19713);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__19709.cljs$lang$maxFixedArity = 3;
      G__19709.cljs$lang$applyTo = G__19709__4.cljs$lang$applyTo;
      G__19709.cljs$core$IFn$_invoke$arity$0 = G__19709__0;
      G__19709.cljs$core$IFn$_invoke$arity$1 = G__19709__1;
      G__19709.cljs$core$IFn$_invoke$arity$2 = G__19709__2;
      G__19709.cljs$core$IFn$_invoke$arity$3 = G__19709__3;
      G__19709.cljs$core$IFn$_invoke$arity$variadic = G__19709__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__19709;
    }();
  }(fs__$1);
};
cljs.core.juxt.cljs$lang$applyTo = function(seq19642) {
  var G__19643 = cljs.core.first(seq19642);
  var seq19642__$1 = cljs.core.next(seq19642);
  var G__19644 = cljs.core.first(seq19642__$1);
  var seq19642__$2 = cljs.core.next(seq19642__$1);
  var G__19645 = cljs.core.first(seq19642__$2);
  var seq19642__$3 = cljs.core.next(seq19642__$2);
  return cljs.core.juxt.cljs$core$IFn$_invoke$arity$variadic(G__19643, G__19644, G__19645, seq19642__$3);
};
cljs.core.juxt.cljs$lang$maxFixedArity = 3;
cljs.core.dorun = function cljs$core$dorun() {
  var G__19716 = arguments.length;
  switch(G__19716) {
    case 1:
      return cljs.core.dorun.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.dorun.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.dorun.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  while (true) {
    if (cljs.core.seq(coll)) {
      var G__19718 = cljs.core.next(coll);
      coll = G__19718;
      continue;
    } else {
      return null;
    }
    break;
  }
};
cljs.core.dorun.cljs$core$IFn$_invoke$arity$2 = function(n, coll) {
  while (true) {
    if (cljs.core.seq(coll) && n > 0) {
      var G__19719 = n - 1;
      var G__19720 = cljs.core.next(coll);
      n = G__19719;
      coll = G__19720;
      continue;
    } else {
      return null;
    }
    break;
  }
};
cljs.core.dorun.cljs$lang$maxFixedArity = 2;
cljs.core.doall = function cljs$core$doall() {
  var G__19722 = arguments.length;
  switch(G__19722) {
    case 1:
      return cljs.core.doall.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.doall.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.doall.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  cljs.core.dorun.cljs$core$IFn$_invoke$arity$1(coll);
  return coll;
};
cljs.core.doall.cljs$core$IFn$_invoke$arity$2 = function(n, coll) {
  cljs.core.dorun.cljs$core$IFn$_invoke$arity$2(n, coll);
  return coll;
};
cljs.core.doall.cljs$lang$maxFixedArity = 2;
cljs.core.regexp_QMARK_ = function cljs$core$regexp_QMARK_(x) {
  return x instanceof RegExp;
};
cljs.core.re_matches = function cljs$core$re_matches(re, s) {
  if (typeof s === "string") {
    var matches = re.exec(s);
    if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.first(matches), s)) {
      if (cljs.core.count(matches) === 1) {
        return cljs.core.first(matches);
      } else {
        return cljs.core.vec(matches);
      }
    } else {
      return null;
    }
  } else {
    throw new TypeError("re-matches must match against a string.");
  }
};
cljs.core.re_find = function cljs$core$re_find(re, s) {
  if (typeof s === "string") {
    var matches = re.exec(s);
    if (matches == null) {
      return null;
    } else {
      if (cljs.core.count(matches) === 1) {
        return cljs.core.first(matches);
      } else {
        return cljs.core.vec(matches);
      }
    }
  } else {
    throw new TypeError("re-find must match against a string.");
  }
};
cljs.core.re_seq = function cljs$core$re_seq(re, s) {
  var match_data = cljs.core.re_find(re, s);
  var match_idx = s.search(re);
  var match_str = cljs.core.coll_QMARK_(match_data) ? cljs.core.first(match_data) : match_data;
  var post_match = cljs.core.subs.cljs$core$IFn$_invoke$arity$2(s, match_idx + cljs.core.count(match_str));
  if (cljs.core.truth_(match_data)) {
    return new cljs.core.LazySeq(null, function(match_data, match_idx, match_str, post_match) {
      return function() {
        return cljs.core.cons(match_data, cljs.core.seq(post_match) ? cljs$core$re_seq(re, post_match) : null);
      };
    }(match_data, match_idx, match_str, post_match), null, null);
  } else {
    return null;
  }
};
cljs.core.re_pattern = function cljs$core$re_pattern(s) {
  if (s instanceof RegExp) {
    return s;
  } else {
    var vec__19727 = cljs.core.re_find(/^\(\?([idmsux]*)\)/, s);
    var prefix = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__19727, 0, null);
    var flags = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__19727, 1, null);
    var pattern = cljs.core.subs.cljs$core$IFn$_invoke$arity$2(s, cljs.core.count(prefix));
    return new RegExp(pattern, function() {
      var or__4335__auto__ = flags;
      if (cljs.core.truth_(or__4335__auto__)) {
        return or__4335__auto__;
      } else {
        return "";
      }
    }());
  }
};
cljs.core.pr_sequential_writer = function cljs$core$pr_sequential_writer(writer, print_one, begin, sep, end, opts, coll) {
  var _STAR_print_level_STAR_19735 = cljs.core._STAR_print_level_STAR_;
  cljs.core._STAR_print_level_STAR_ = cljs.core._STAR_print_level_STAR_ == null ? null : cljs.core._STAR_print_level_STAR_ - 1;
  try {
    if (!(cljs.core._STAR_print_level_STAR_ == null) && cljs.core._STAR_print_level_STAR_ < 0) {
      return cljs.core._write(writer, "#");
    } else {
      cljs.core._write(writer, begin);
      if ((new cljs.core.Keyword(null, "print-length", "print-length", 1931866356)).cljs$core$IFn$_invoke$arity$1(opts) === 0) {
        if (cljs.core.seq(coll)) {
          cljs.core._write(writer, function() {
            var or__4335__auto__ = (new cljs.core.Keyword(null, "more-marker", "more-marker", -14717935)).cljs$core$IFn$_invoke$arity$1(opts);
            if (cljs.core.truth_(or__4335__auto__)) {
              return or__4335__auto__;
            } else {
              return "...";
            }
          }());
        } else {
        }
      } else {
        if (cljs.core.seq(coll)) {
          var G__19736_19742 = cljs.core.first(coll);
          var G__19737_19743 = writer;
          var G__19738_19744 = opts;
          print_one.cljs$core$IFn$_invoke$arity$3 ? print_one.cljs$core$IFn$_invoke$arity$3(G__19736_19742, G__19737_19743, G__19738_19744) : print_one.call(null, G__19736_19742, G__19737_19743, G__19738_19744);
        } else {
        }
        var coll_19745__$1 = cljs.core.next(coll);
        var n_19746 = (new cljs.core.Keyword(null, "print-length", "print-length", 1931866356)).cljs$core$IFn$_invoke$arity$1(opts) - 1;
        while (true) {
          if (coll_19745__$1 && (n_19746 == null || !(n_19746 === 0))) {
            cljs.core._write(writer, sep);
            var G__19739_19747 = cljs.core.first(coll_19745__$1);
            var G__19740_19748 = writer;
            var G__19741_19749 = opts;
            print_one.cljs$core$IFn$_invoke$arity$3 ? print_one.cljs$core$IFn$_invoke$arity$3(G__19739_19747, G__19740_19748, G__19741_19749) : print_one.call(null, G__19739_19747, G__19740_19748, G__19741_19749);
            var G__19750 = cljs.core.next(coll_19745__$1);
            var G__19751 = n_19746 - 1;
            coll_19745__$1 = G__19750;
            n_19746 = G__19751;
            continue;
          } else {
            if (cljs.core.seq(coll_19745__$1) && n_19746 === 0) {
              cljs.core._write(writer, sep);
              cljs.core._write(writer, function() {
                var or__4335__auto__ = (new cljs.core.Keyword(null, "more-marker", "more-marker", -14717935)).cljs$core$IFn$_invoke$arity$1(opts);
                if (cljs.core.truth_(or__4335__auto__)) {
                  return or__4335__auto__;
                } else {
                  return "...";
                }
              }());
            } else {
            }
          }
          break;
        }
      }
      return cljs.core._write(writer, end);
    }
  } finally {
    cljs.core._STAR_print_level_STAR_ = _STAR_print_level_STAR_19735;
  }
};
cljs.core.write_all = function cljs$core$write_all() {
  var argseq__5375__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return cljs.core.write_all.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5375__auto__);
};
cljs.core.write_all.cljs$core$IFn$_invoke$arity$variadic = function(writer, ss) {
  var seq__19754 = cljs.core.seq(ss);
  var chunk__19755 = null;
  var count__19756 = 0;
  var i__19757 = 0;
  while (true) {
    if (i__19757 < count__19756) {
      var s = chunk__19755.cljs$core$IIndexed$_nth$arity$2(null, i__19757);
      cljs.core._write(writer, s);
      var G__19758 = seq__19754;
      var G__19759 = chunk__19755;
      var G__19760 = count__19756;
      var G__19761 = i__19757 + 1;
      seq__19754 = G__19758;
      chunk__19755 = G__19759;
      count__19756 = G__19760;
      i__19757 = G__19761;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq(seq__19754);
      if (temp__4126__auto__) {
        var seq__19754__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__19754__$1)) {
          var c__5120__auto__ = cljs.core.chunk_first(seq__19754__$1);
          var G__19762 = cljs.core.chunk_rest(seq__19754__$1);
          var G__19763 = c__5120__auto__;
          var G__19764 = cljs.core.count(c__5120__auto__);
          var G__19765 = 0;
          seq__19754 = G__19762;
          chunk__19755 = G__19763;
          count__19756 = G__19764;
          i__19757 = G__19765;
          continue;
        } else {
          var s = cljs.core.first(seq__19754__$1);
          cljs.core._write(writer, s);
          var G__19766 = cljs.core.next(seq__19754__$1);
          var G__19767 = null;
          var G__19768 = 0;
          var G__19769 = 0;
          seq__19754 = G__19766;
          chunk__19755 = G__19767;
          count__19756 = G__19768;
          i__19757 = G__19769;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.write_all.cljs$lang$maxFixedArity = 1;
cljs.core.write_all.cljs$lang$applyTo = function(seq19752) {
  var G__19753 = cljs.core.first(seq19752);
  var seq19752__$1 = cljs.core.next(seq19752);
  return cljs.core.write_all.cljs$core$IFn$_invoke$arity$variadic(G__19753, seq19752__$1);
};
cljs.core.string_print = function cljs$core$string_print(x) {
  cljs.core._STAR_print_fn_STAR_.cljs$core$IFn$_invoke$arity$1 ? cljs.core._STAR_print_fn_STAR_.cljs$core$IFn$_invoke$arity$1(x) : cljs.core._STAR_print_fn_STAR_.call(null, x);
  return null;
};
cljs.core.flush = function cljs$core$flush() {
  return null;
};
cljs.core.char_escapes = function() {
  var obj19771 = {'"':'\\"', "\\":"\\\\", "\b":"\\b", "\f":"\\f", "\n":"\\n", "\r":"\\r", "\t":"\\t"};
  return obj19771;
}();
cljs.core.quote_string = function cljs$core$quote_string(s) {
  return[cljs.core.str('"'), cljs.core.str(s.replace(function() {
    var G__19774 = '[\\\\"\b\f\n\r\t]';
    var G__19775 = "g";
    return RegExp(G__19774, G__19775);
  }(), function(match) {
    return cljs.core.char_escapes[match];
  })), cljs.core.str('"')].join("");
};
cljs.core.pr_writer_impl = function cljs$core$pr_writer_impl(obj, writer, opts) {
  if (obj == null) {
    return cljs.core._write(writer, "nil");
  } else {
    if (void 0 === obj) {
      return cljs.core._write(writer, "#\x3cundefined\x3e");
    } else {
      if (cljs.core.truth_(function() {
        var and__4323__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(opts, new cljs.core.Keyword(null, "meta", "meta", 1499536964));
        if (cljs.core.truth_(and__4323__auto__)) {
          var and__4323__auto____$1 = function() {
            var G__19789 = obj;
            if (G__19789) {
              var bit__5009__auto__ = G__19789.cljs$lang$protocol_mask$partition0$ & 131072;
              if (bit__5009__auto__ || G__19789.cljs$core$IMeta$) {
                return true;
              } else {
                if (!G__19789.cljs$lang$protocol_mask$partition0$) {
                  return cljs.core.native_satisfies_QMARK_(cljs.core.IMeta, G__19789);
                } else {
                  return false;
                }
              }
            } else {
              return cljs.core.native_satisfies_QMARK_(cljs.core.IMeta, G__19789);
            }
          }();
          if (and__4323__auto____$1) {
            return cljs.core.meta(obj);
          } else {
            return and__4323__auto____$1;
          }
        } else {
          return and__4323__auto__;
        }
      }())) {
        cljs.core._write(writer, "^");
        var G__19790_19800 = cljs.core.meta(obj);
        var G__19791_19801 = writer;
        var G__19792_19802 = opts;
        cljs.core.pr_writer.cljs$core$IFn$_invoke$arity$3 ? cljs.core.pr_writer.cljs$core$IFn$_invoke$arity$3(G__19790_19800, G__19791_19801, G__19792_19802) : cljs.core.pr_writer.call(null, G__19790_19800, G__19791_19801, G__19792_19802);
        cljs.core._write(writer, " ");
      } else {
      }
      if (obj == null) {
        return cljs.core._write(writer, "nil");
      } else {
        if (obj.cljs$lang$type) {
          return obj.cljs$lang$ctorPrWriter(obj, writer, opts);
        } else {
          if (function() {
            var G__19793 = obj;
            if (G__19793) {
              var bit__5002__auto__ = G__19793.cljs$lang$protocol_mask$partition0$ & 2147483648;
              if (bit__5002__auto__ || G__19793.cljs$core$IPrintWithWriter$) {
                return true;
              } else {
                return false;
              }
            } else {
              return false;
            }
          }()) {
            return obj.cljs$core$IPrintWithWriter$_pr_writer$arity$3(null, writer, opts);
          } else {
            if (cljs.core.type(obj) === Boolean || typeof obj === "number") {
              return cljs.core._write(writer, [cljs.core.str(obj)].join(""));
            } else {
              if (cljs.core.object_QMARK_(obj)) {
                cljs.core._write(writer, "#js ");
                var G__19794 = cljs.core.map.cljs$core$IFn$_invoke$arity$2(function(k) {
                  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.cljs$core$IFn$_invoke$arity$1(k), obj[k]], null);
                }, cljs.core.js_keys(obj));
                var G__19795 = cljs.core.pr_writer;
                var G__19796 = writer;
                var G__19797 = opts;
                return cljs.core.print_map.cljs$core$IFn$_invoke$arity$4 ? cljs.core.print_map.cljs$core$IFn$_invoke$arity$4(G__19794, G__19795, G__19796, G__19797) : cljs.core.print_map.call(null, G__19794, G__19795, G__19796, G__19797);
              } else {
                if (cljs.core.array_QMARK_(obj)) {
                  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "#js [", " ", "]", opts, obj);
                } else {
                  if (cljs.core.truth_(function() {
                    var G__19798 = obj;
                    return goog.isString(G__19798);
                  }())) {
                    if (cljs.core.truth_((new cljs.core.Keyword(null, "readably", "readably", 1129599760)).cljs$core$IFn$_invoke$arity$1(opts))) {
                      return cljs.core._write(writer, cljs.core.quote_string(obj));
                    } else {
                      return cljs.core._write(writer, obj);
                    }
                  } else {
                    if (cljs.core.fn_QMARK_(obj)) {
                      return cljs.core.write_all.cljs$core$IFn$_invoke$arity$variadic(writer, cljs.core.array_seq(["#\x3c", [cljs.core.str(obj)].join(""), "\x3e"], 0));
                    } else {
                      if (obj instanceof Date) {
                        var normalize = function(n, len) {
                          var ns = [cljs.core.str(n)].join("");
                          while (true) {
                            if (cljs.core.count(ns) < len) {
                              var G__19803 = [cljs.core.str("0"), cljs.core.str(ns)].join("");
                              ns = G__19803;
                              continue;
                            } else {
                              return ns;
                            }
                            break;
                          }
                        };
                        return cljs.core.write_all.cljs$core$IFn$_invoke$arity$variadic(writer, cljs.core.array_seq(['#inst "', [cljs.core.str(obj.getUTCFullYear())].join(""), "-", normalize(obj.getUTCMonth() + 1, 2), "-", normalize(obj.getUTCDate(), 2), "T", normalize(obj.getUTCHours(), 2), ":", normalize(obj.getUTCMinutes(), 2), ":", normalize(obj.getUTCSeconds(), 2), ".", normalize(obj.getUTCMilliseconds(), 3), "-", '00:00"'], 0));
                      } else {
                        if (cljs.core.truth_(cljs.core.regexp_QMARK_(obj))) {
                          return cljs.core.write_all.cljs$core$IFn$_invoke$arity$variadic(writer, cljs.core.array_seq(['#"', obj.source, '"'], 0));
                        } else {
                          if (function() {
                            var G__19799 = obj;
                            if (G__19799) {
                              var bit__5009__auto__ = G__19799.cljs$lang$protocol_mask$partition0$ & 2147483648;
                              if (bit__5009__auto__ || G__19799.cljs$core$IPrintWithWriter$) {
                                return true;
                              } else {
                                if (!G__19799.cljs$lang$protocol_mask$partition0$) {
                                  return cljs.core.native_satisfies_QMARK_(cljs.core.IPrintWithWriter, G__19799);
                                } else {
                                  return false;
                                }
                              }
                            } else {
                              return cljs.core.native_satisfies_QMARK_(cljs.core.IPrintWithWriter, G__19799);
                            }
                          }()) {
                            return cljs.core._pr_writer(obj, writer, opts);
                          } else {
                            return cljs.core.write_all.cljs$core$IFn$_invoke$arity$variadic(writer, cljs.core.array_seq(["#\x3c", [cljs.core.str(obj)].join(""), "\x3e"], 0));
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.pr_writer = function cljs$core$pr_writer(obj, writer, opts) {
  var temp__4124__auto__ = (new cljs.core.Keyword(null, "alt-impl", "alt-impl", 670969595)).cljs$core$IFn$_invoke$arity$1(opts);
  if (cljs.core.truth_(temp__4124__auto__)) {
    var alt_impl = temp__4124__auto__;
    var G__19807 = obj;
    var G__19808 = writer;
    var G__19809 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(opts, new cljs.core.Keyword(null, "fallback-impl", "fallback-impl", -1501286995), cljs.core.pr_writer_impl);
    return alt_impl.cljs$core$IFn$_invoke$arity$3 ? alt_impl.cljs$core$IFn$_invoke$arity$3(G__19807, G__19808, G__19809) : alt_impl.call(null, G__19807, G__19808, G__19809);
  } else {
    return cljs.core.pr_writer_impl(obj, writer, opts);
  }
};
cljs.core.pr_seq_writer = function cljs$core$pr_seq_writer(objs, writer, opts) {
  cljs.core.pr_writer(cljs.core.first(objs), writer, opts);
  var seq__19814 = cljs.core.seq(cljs.core.next(objs));
  var chunk__19815 = null;
  var count__19816 = 0;
  var i__19817 = 0;
  while (true) {
    if (i__19817 < count__19816) {
      var obj = chunk__19815.cljs$core$IIndexed$_nth$arity$2(null, i__19817);
      cljs.core._write(writer, " ");
      cljs.core.pr_writer(obj, writer, opts);
      var G__19818 = seq__19814;
      var G__19819 = chunk__19815;
      var G__19820 = count__19816;
      var G__19821 = i__19817 + 1;
      seq__19814 = G__19818;
      chunk__19815 = G__19819;
      count__19816 = G__19820;
      i__19817 = G__19821;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq(seq__19814);
      if (temp__4126__auto__) {
        var seq__19814__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__19814__$1)) {
          var c__5120__auto__ = cljs.core.chunk_first(seq__19814__$1);
          var G__19822 = cljs.core.chunk_rest(seq__19814__$1);
          var G__19823 = c__5120__auto__;
          var G__19824 = cljs.core.count(c__5120__auto__);
          var G__19825 = 0;
          seq__19814 = G__19822;
          chunk__19815 = G__19823;
          count__19816 = G__19824;
          i__19817 = G__19825;
          continue;
        } else {
          var obj = cljs.core.first(seq__19814__$1);
          cljs.core._write(writer, " ");
          cljs.core.pr_writer(obj, writer, opts);
          var G__19826 = cljs.core.next(seq__19814__$1);
          var G__19827 = null;
          var G__19828 = 0;
          var G__19829 = 0;
          seq__19814 = G__19826;
          chunk__19815 = G__19827;
          count__19816 = G__19828;
          i__19817 = G__19829;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.pr_sb_with_opts = function cljs$core$pr_sb_with_opts(objs, opts) {
  var sb = new goog.string.StringBuffer;
  var writer = new cljs.core.StringBufferWriter(sb);
  cljs.core.pr_seq_writer(objs, writer, opts);
  writer.cljs$core$IWriter$_flush$arity$1(null);
  return sb;
};
cljs.core.pr_str_with_opts = function cljs$core$pr_str_with_opts(objs, opts) {
  if (cljs.core.empty_QMARK_(objs)) {
    return "";
  } else {
    return[cljs.core.str(cljs.core.pr_sb_with_opts(objs, opts))].join("");
  }
};
cljs.core.prn_str_with_opts = function cljs$core$prn_str_with_opts(objs, opts) {
  if (cljs.core.empty_QMARK_(objs)) {
    return "\n";
  } else {
    var sb = cljs.core.pr_sb_with_opts(objs, opts);
    sb.append("\n");
    return[cljs.core.str(sb)].join("");
  }
};
cljs.core.pr_with_opts = function cljs$core$pr_with_opts(objs, opts) {
  return cljs.core.string_print(cljs.core.pr_str_with_opts(objs, opts));
};
cljs.core.newline = function cljs$core$newline(opts) {
  cljs.core.string_print("\n");
  if (cljs.core.truth_(cljs.core.get.cljs$core$IFn$_invoke$arity$2(opts, new cljs.core.Keyword(null, "flush-on-newline", "flush-on-newline", -151457939)))) {
    return cljs.core.flush();
  } else {
    return null;
  }
};
cljs.core.pr_str = function cljs$core$pr_str() {
  var argseq__5375__auto__ = 0 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 0), 0) : null;
  return cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(argseq__5375__auto__);
};
cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic = function(objs) {
  return cljs.core.pr_str_with_opts(objs, cljs.core.pr_opts());
};
cljs.core.pr_str.cljs$lang$maxFixedArity = 0;
cljs.core.pr_str.cljs$lang$applyTo = function(seq19830) {
  return cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq19830));
};
cljs.core.prn_str = function cljs$core$prn_str() {
  var argseq__5375__auto__ = 0 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 0), 0) : null;
  return cljs.core.prn_str.cljs$core$IFn$_invoke$arity$variadic(argseq__5375__auto__);
};
cljs.core.prn_str.cljs$core$IFn$_invoke$arity$variadic = function(objs) {
  return cljs.core.prn_str_with_opts(objs, cljs.core.pr_opts());
};
cljs.core.prn_str.cljs$lang$maxFixedArity = 0;
cljs.core.prn_str.cljs$lang$applyTo = function(seq19831) {
  return cljs.core.prn_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq19831));
};
cljs.core.pr = function cljs$core$pr() {
  var argseq__5375__auto__ = 0 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 0), 0) : null;
  return cljs.core.pr.cljs$core$IFn$_invoke$arity$variadic(argseq__5375__auto__);
};
cljs.core.pr.cljs$core$IFn$_invoke$arity$variadic = function(objs) {
  return cljs.core.pr_with_opts(objs, cljs.core.pr_opts());
};
cljs.core.pr.cljs$lang$maxFixedArity = 0;
cljs.core.pr.cljs$lang$applyTo = function(seq19832) {
  return cljs.core.pr.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq19832));
};
cljs.core.print = function() {
  var cljs$core$cljs_core_print__delegate = function(objs) {
    return cljs.core.pr_with_opts(objs, cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(cljs.core.pr_opts(), new cljs.core.Keyword(null, "readably", "readably", 1129599760), false));
  };
  var cljs$core$cljs_core_print = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      var G__19833__i = 0, G__19833__a = new Array(arguments.length - 0);
      while (G__19833__i < G__19833__a.length) {
        G__19833__a[G__19833__i] = arguments[G__19833__i + 0];
        ++G__19833__i;
      }
      objs = new cljs.core.IndexedSeq(G__19833__a, 0);
    }
    return cljs$core$cljs_core_print__delegate.call(this, objs);
  };
  cljs$core$cljs_core_print.cljs$lang$maxFixedArity = 0;
  cljs$core$cljs_core_print.cljs$lang$applyTo = function(arglist__19834) {
    var objs = cljs.core.seq(arglist__19834);
    return cljs$core$cljs_core_print__delegate(objs);
  };
  cljs$core$cljs_core_print.cljs$core$IFn$_invoke$arity$variadic = cljs$core$cljs_core_print__delegate;
  return cljs$core$cljs_core_print;
}();
cljs.core.print_str = function cljs$core$print_str() {
  var argseq__5375__auto__ = 0 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 0), 0) : null;
  return cljs.core.print_str.cljs$core$IFn$_invoke$arity$variadic(argseq__5375__auto__);
};
cljs.core.print_str.cljs$core$IFn$_invoke$arity$variadic = function(objs) {
  return cljs.core.pr_str_with_opts(objs, cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(cljs.core.pr_opts(), new cljs.core.Keyword(null, "readably", "readably", 1129599760), false));
};
cljs.core.print_str.cljs$lang$maxFixedArity = 0;
cljs.core.print_str.cljs$lang$applyTo = function(seq19835) {
  return cljs.core.print_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq19835));
};
cljs.core.println = function cljs$core$println() {
  var argseq__5375__auto__ = 0 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 0), 0) : null;
  return cljs.core.println.cljs$core$IFn$_invoke$arity$variadic(argseq__5375__auto__);
};
cljs.core.println.cljs$core$IFn$_invoke$arity$variadic = function(objs) {
  cljs.core.pr_with_opts(objs, cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(cljs.core.pr_opts(), new cljs.core.Keyword(null, "readably", "readably", 1129599760), false));
  if (cljs.core.truth_(cljs.core._STAR_print_newline_STAR_)) {
    return cljs.core.newline(cljs.core.pr_opts());
  } else {
    return null;
  }
};
cljs.core.println.cljs$lang$maxFixedArity = 0;
cljs.core.println.cljs$lang$applyTo = function(seq19836) {
  return cljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq19836));
};
cljs.core.println_str = function cljs$core$println_str() {
  var argseq__5375__auto__ = 0 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 0), 0) : null;
  return cljs.core.println_str.cljs$core$IFn$_invoke$arity$variadic(argseq__5375__auto__);
};
cljs.core.println_str.cljs$core$IFn$_invoke$arity$variadic = function(objs) {
  return cljs.core.prn_str_with_opts(objs, cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(cljs.core.pr_opts(), new cljs.core.Keyword(null, "readably", "readably", 1129599760), false));
};
cljs.core.println_str.cljs$lang$maxFixedArity = 0;
cljs.core.println_str.cljs$lang$applyTo = function(seq19837) {
  return cljs.core.println_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq19837));
};
cljs.core.prn = function cljs$core$prn() {
  var argseq__5375__auto__ = 0 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 0), 0) : null;
  return cljs.core.prn.cljs$core$IFn$_invoke$arity$variadic(argseq__5375__auto__);
};
cljs.core.prn.cljs$core$IFn$_invoke$arity$variadic = function(objs) {
  cljs.core.pr_with_opts(objs, cljs.core.pr_opts());
  if (cljs.core.truth_(cljs.core._STAR_print_newline_STAR_)) {
    return cljs.core.newline(cljs.core.pr_opts());
  } else {
    return null;
  }
};
cljs.core.prn.cljs$lang$maxFixedArity = 0;
cljs.core.prn.cljs$lang$applyTo = function(seq19838) {
  return cljs.core.prn.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq19838));
};
cljs.core.print_map = function cljs$core$print_map(m, print_one, writer, opts) {
  return cljs.core.pr_sequential_writer(writer, function(e, w, opts__$1) {
    var G__19845_19851 = cljs.core.key(e);
    var G__19846_19852 = w;
    var G__19847_19853 = opts__$1;
    print_one.cljs$core$IFn$_invoke$arity$3 ? print_one.cljs$core$IFn$_invoke$arity$3(G__19845_19851, G__19846_19852, G__19847_19853) : print_one.call(null, G__19845_19851, G__19846_19852, G__19847_19853);
    cljs.core._write(w, " ");
    var G__19848 = cljs.core.val(e);
    var G__19849 = w;
    var G__19850 = opts__$1;
    return print_one.cljs$core$IFn$_invoke$arity$3 ? print_one.cljs$core$IFn$_invoke$arity$3(G__19848, G__19849, G__19850) : print_one.call(null, G__19848, G__19849, G__19850);
  }, "{", ", ", "}", opts, cljs.core.seq(m));
};
cljs.core.Volatile.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Volatile.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(a, writer, opts) {
  var a__$1 = this;
  cljs.core._write(writer, "#\x3cVolatile: ");
  cljs.core.pr_writer(a__$1.state, writer, opts);
  return cljs.core._write(writer, "\x3e");
};
cljs.core.Var.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Var.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(a, writer, opts) {
  var a__$1 = this;
  cljs.core._write(writer, "#'");
  return cljs.core.pr_writer(a__$1.sym, writer, opts);
};
cljs.core.IndexedSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.IndexedSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.LazySeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.LazySeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.NodeSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.NodeSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.BlackNode.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.BlackNode.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.ES6IteratorSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ES6IteratorSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentTreeSet.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "#{", " ", "}", opts, coll__$1);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ChunkedSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.ObjMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ObjMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map(coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.Cons.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Cons.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.RSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.RSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentHashMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map(coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ArrayNodeSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.Subvec.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Subvec.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentTreeMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map(coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentHashSet.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "#{", " ", "}", opts, coll__$1);
};
cljs.core.ChunkedCons.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ChunkedCons.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.Atom.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Atom.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(a, writer, opts) {
  var a__$1 = this;
  cljs.core._write(writer, "#\x3cAtom: ");
  cljs.core.pr_writer(a__$1.state, writer, opts);
  return cljs.core._write(writer, "\x3e");
};
cljs.core.ValSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ValSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.RedNode.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.RedNode.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.PersistentVector.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentVector.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentQueueSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.EmptyList.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.EmptyList.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core._write(writer, "()");
};
cljs.core.LazyTransformer.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.LazyTransformer.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentQueue.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentQueue.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "#queue [", " ", "]", opts, cljs.core.seq(coll__$1));
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentArrayMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map(coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.Range.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Range.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.KeySeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.List.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.List.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentVector.prototype.cljs$core$IComparable$ = true;
cljs.core.PersistentVector.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_indexed.cljs$core$IFn$_invoke$arity$2(x__$1, y);
};
cljs.core.Subvec.prototype.cljs$core$IComparable$ = true;
cljs.core.Subvec.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_indexed.cljs$core$IFn$_invoke$arity$2(x__$1, y);
};
cljs.core.Keyword.prototype.cljs$core$IComparable$ = true;
cljs.core.Keyword.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_keywords(x__$1, y);
};
cljs.core.Symbol.prototype.cljs$core$IComparable$ = true;
cljs.core.Symbol.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_symbols(x__$1, y);
};
cljs.core.alter_meta_BANG_ = function cljs$core$alter_meta_BANG_() {
  var argseq__5375__auto__ = 2 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0) : null;
  return cljs.core.alter_meta_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5375__auto__);
};
cljs.core.alter_meta_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(iref, f, args) {
  return iref.meta = cljs.core.apply.cljs$core$IFn$_invoke$arity$3(f, iref.meta, args);
};
cljs.core.alter_meta_BANG_.cljs$lang$maxFixedArity = 2;
cljs.core.alter_meta_BANG_.cljs$lang$applyTo = function(seq19854) {
  var G__19855 = cljs.core.first(seq19854);
  var seq19854__$1 = cljs.core.next(seq19854);
  var G__19856 = cljs.core.first(seq19854__$1);
  var seq19854__$2 = cljs.core.next(seq19854__$1);
  return cljs.core.alter_meta_BANG_.cljs$core$IFn$_invoke$arity$variadic(G__19855, G__19856, seq19854__$2);
};
cljs.core.reset_meta_BANG_ = function cljs$core$reset_meta_BANG_(iref, m) {
  return iref.meta = m;
};
cljs.core.add_watch = function cljs$core$add_watch(iref, key, f) {
  cljs.core._add_watch(iref, key, f);
  return iref;
};
cljs.core.remove_watch = function cljs$core$remove_watch(iref, key) {
  cljs.core._remove_watch(iref, key);
  return iref;
};
cljs.core.gensym_counter = null;
cljs.core.gensym = function cljs$core$gensym() {
  var G__19858 = arguments.length;
  switch(G__19858) {
    case 0:
      return cljs.core.gensym.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.gensym.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.gensym.cljs$core$IFn$_invoke$arity$0 = function() {
  return cljs.core.gensym.cljs$core$IFn$_invoke$arity$1("G__");
};
cljs.core.gensym.cljs$core$IFn$_invoke$arity$1 = function(prefix_string) {
  if (cljs.core.gensym_counter == null) {
    cljs.core.gensym_counter = function() {
      var G__19859 = 0;
      return cljs.core.atom.cljs$core$IFn$_invoke$arity$1 ? cljs.core.atom.cljs$core$IFn$_invoke$arity$1(G__19859) : cljs.core.atom.call(null, G__19859);
    }();
  } else {
  }
  return cljs.core.symbol.cljs$core$IFn$_invoke$arity$1([cljs.core.str(prefix_string), cljs.core.str(cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(cljs.core.gensym_counter, cljs.core.inc))].join(""));
};
cljs.core.gensym.cljs$lang$maxFixedArity = 1;
cljs.core.fixture1 = 1;
cljs.core.fixture2 = 2;
cljs.core.Delay = function(f, value) {
  this.f = f;
  this.value = value;
  this.cljs$lang$protocol_mask$partition1$ = 1;
  this.cljs$lang$protocol_mask$partition0$ = 32768;
};
cljs.core.Delay.prototype.cljs$core$IPending$_realized_QMARK_$arity$1 = function(d) {
  var self__ = this;
  var d__$1 = this;
  return cljs.core.not(self__.f);
};
cljs.core.Delay.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (cljs.core.truth_(self__.f)) {
    self__.value = function() {
      return self__.f.cljs$core$IFn$_invoke$arity$0 ? self__.f.cljs$core$IFn$_invoke$arity$0() : self__.f.call(null);
    }();
    self__.f = null;
  } else {
  }
  return self__.value;
};
cljs.core.Delay.cljs$lang$type = true;
cljs.core.Delay.cljs$lang$ctorStr = "cljs.core/Delay";
cljs.core.Delay.cljs$lang$ctorPrWriter = function(this__4914__auto__, writer__4915__auto__, opt__4916__auto__) {
  return cljs.core._write(writer__4915__auto__, "cljs.core/Delay");
};
cljs.core.__GT_Delay = function cljs$core$__GT_Delay(f, value) {
  return new cljs.core.Delay(f, value);
};
cljs.core.delay_QMARK_ = function cljs$core$delay_QMARK_(x) {
  return x instanceof cljs.core.Delay;
};
cljs.core.force = function cljs$core$force(x) {
  if (cljs.core.delay_QMARK_(x)) {
    var G__19862 = x;
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__19862) : cljs.core.deref.call(null, G__19862);
  } else {
    return x;
  }
};
cljs.core.realized_QMARK_ = function cljs$core$realized_QMARK_(d) {
  return cljs.core._realized_QMARK_(d);
};
cljs.core.preserving_reduced = function cljs$core$preserving_reduced(rf) {
  return function(p1__19863_SHARP_, p2__19864_SHARP_) {
    var ret = function() {
      var G__19867 = p1__19863_SHARP_;
      var G__19868 = p2__19864_SHARP_;
      return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__19867, G__19868) : rf.call(null, G__19867, G__19868);
    }();
    if (cljs.core.reduced_QMARK_(ret)) {
      return cljs.core.reduced(ret);
    } else {
      return ret;
    }
  };
};
cljs.core.cat = function cljs$core$cat(rf) {
  var rf1 = cljs.core.preserving_reduced(rf);
  return function(rf1) {
    return function() {
      var G__19871 = null;
      var G__19871__0 = function() {
        return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
      };
      var G__19871__1 = function(result) {
        var G__19870 = result;
        return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__19870) : rf.call(null, G__19870);
      };
      var G__19871__2 = function(result, input) {
        return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(rf1, result, input);
      };
      G__19871 = function(result, input) {
        switch(arguments.length) {
          case 0:
            return G__19871__0.call(this);
          case 1:
            return G__19871__1.call(this, result);
          case 2:
            return G__19871__2.call(this, result, input);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__19871.cljs$core$IFn$_invoke$arity$0 = G__19871__0;
      G__19871.cljs$core$IFn$_invoke$arity$1 = G__19871__1;
      G__19871.cljs$core$IFn$_invoke$arity$2 = G__19871__2;
      return G__19871;
    }();
  }(rf1);
};
cljs.core.dedupe = function cljs$core$dedupe() {
  var G__19873 = arguments.length;
  switch(G__19873) {
    case 0:
      return cljs.core.dedupe.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.dedupe.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.dedupe.cljs$core$IFn$_invoke$arity$0 = function() {
  return function(rf) {
    var pa = cljs.core.volatile_BANG_(new cljs.core.Keyword("cljs.core", "none", "cljs.core/none", 926646439));
    return function(pa) {
      return function() {
        var G__19879 = null;
        var G__19879__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__19879__1 = function(result) {
          var G__19874 = result;
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__19874) : rf.call(null, G__19874);
        };
        var G__19879__2 = function(result, input) {
          var prior = function() {
            var G__19875 = pa;
            return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__19875) : cljs.core.deref.call(null, G__19875);
          }();
          cljs.core.vreset_BANG_(pa, input);
          if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(prior, input)) {
            return result;
          } else {
            var G__19876 = result;
            var G__19877 = input;
            return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__19876, G__19877) : rf.call(null, G__19876, G__19877);
          }
        };
        G__19879 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__19879__0.call(this);
            case 1:
              return G__19879__1.call(this, result);
            case 2:
              return G__19879__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__19879.cljs$core$IFn$_invoke$arity$0 = G__19879__0;
        G__19879.cljs$core$IFn$_invoke$arity$1 = G__19879__1;
        G__19879.cljs$core$IFn$_invoke$arity$2 = G__19879__2;
        return G__19879;
      }();
    }(pa);
  };
};
cljs.core.dedupe.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  return cljs.core.sequence.cljs$core$IFn$_invoke$arity$2(cljs.core.dedupe.cljs$core$IFn$_invoke$arity$0(), coll);
};
cljs.core.dedupe.cljs$lang$maxFixedArity = 1;
cljs.core.random_sample = function cljs$core$random_sample() {
  var G__19881 = arguments.length;
  switch(G__19881) {
    case 1:
      return cljs.core.random_sample.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.random_sample.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.random_sample.cljs$core$IFn$_invoke$arity$1 = function(prob) {
  return cljs.core.filter.cljs$core$IFn$_invoke$arity$1(function(_) {
    return function() {
      return cljs.core.rand.cljs$core$IFn$_invoke$arity$0 ? cljs.core.rand.cljs$core$IFn$_invoke$arity$0() : cljs.core.rand.call(null);
    }() < prob;
  });
};
cljs.core.random_sample.cljs$core$IFn$_invoke$arity$2 = function(prob, coll) {
  return cljs.core.filter.cljs$core$IFn$_invoke$arity$2(function(_) {
    return function() {
      return cljs.core.rand.cljs$core$IFn$_invoke$arity$0 ? cljs.core.rand.cljs$core$IFn$_invoke$arity$0() : cljs.core.rand.call(null);
    }() < prob;
  }, coll);
};
cljs.core.random_sample.cljs$lang$maxFixedArity = 2;
cljs.core.Eduction = function(xform, coll) {
  this.xform = xform;
  this.coll = coll;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2173173760;
};
cljs.core.Eduction.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll__$1, writer, opts) {
  var self__ = this;
  var coll__$2 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$2);
};
cljs.core.Eduction.prototype.cljs$core$IReduce$_reduce$arity$3 = function(_, f, init) {
  var self__ = this;
  var ___$1 = this;
  return cljs.core.transduce.cljs$core$IFn$_invoke$arity$4(self__.xform, f, init, self__.coll);
};
cljs.core.Eduction.prototype.cljs$core$ISeqable$_seq$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return cljs.core.seq(cljs.core.sequence.cljs$core$IFn$_invoke$arity$2(self__.xform, self__.coll));
};
cljs.core.Eduction.cljs$lang$type = true;
cljs.core.Eduction.cljs$lang$ctorStr = "cljs.core/Eduction";
cljs.core.Eduction.cljs$lang$ctorPrWriter = function(this__4914__auto__, writer__4915__auto__, opt__4916__auto__) {
  return cljs.core._write(writer__4915__auto__, "cljs.core/Eduction");
};
cljs.core.__GT_Eduction = function cljs$core$__GT_Eduction(xform, coll) {
  return new cljs.core.Eduction(xform, coll);
};
cljs.core.Eduction.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5311__auto__ = this;
  return cljs.core.es6_iterator(this__5311__auto__);
};
cljs.core.eduction = function cljs$core$eduction(xform, coll) {
  return new cljs.core.Eduction(xform, coll);
};
cljs.core.run_BANG_ = function cljs$core$run_BANG_(proc, coll) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(p1__19884_SHARP_, p2__19883_SHARP_) {
    var G__19886 = p2__19883_SHARP_;
    return proc.cljs$core$IFn$_invoke$arity$1 ? proc.cljs$core$IFn$_invoke$arity$1(G__19886) : proc.call(null, G__19886);
  }, null, coll);
};
cljs.core.IEncodeJS = function() {
  var obj19888 = {};
  return obj19888;
}();
cljs.core._clj__GT_js = function cljs$core$_clj__GT_js(x) {
  if (function() {
    var and__4323__auto__ = x;
    if (and__4323__auto__) {
      return x.cljs$core$IEncodeJS$_clj__GT_js$arity$1;
    } else {
      return and__4323__auto__;
    }
  }()) {
    return x.cljs$core$IEncodeJS$_clj__GT_js$arity$1(x);
  } else {
    var x__4971__auto__ = x == null ? null : x;
    return function() {
      var or__4335__auto__ = cljs.core._clj__GT_js[function() {
        var G__19892 = x__4971__auto__;
        return goog.typeOf(G__19892);
      }()];
      if (or__4335__auto__) {
        return or__4335__auto__;
      } else {
        var or__4335__auto____$1 = cljs.core._clj__GT_js["_"];
        if (or__4335__auto____$1) {
          return or__4335__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IEncodeJS.-clj-\x3ejs", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core._key__GT_js = function cljs$core$_key__GT_js(x) {
  if (function() {
    var and__4323__auto__ = x;
    if (and__4323__auto__) {
      return x.cljs$core$IEncodeJS$_key__GT_js$arity$1;
    } else {
      return and__4323__auto__;
    }
  }()) {
    return x.cljs$core$IEncodeJS$_key__GT_js$arity$1(x);
  } else {
    var x__4971__auto__ = x == null ? null : x;
    return function() {
      var or__4335__auto__ = cljs.core._key__GT_js[function() {
        var G__19896 = x__4971__auto__;
        return goog.typeOf(G__19896);
      }()];
      if (or__4335__auto__) {
        return or__4335__auto__;
      } else {
        var or__4335__auto____$1 = cljs.core._key__GT_js["_"];
        if (or__4335__auto____$1) {
          return or__4335__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IEncodeJS.-key-\x3ejs", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core.key__GT_js = function cljs$core$key__GT_js(k) {
  if (function() {
    var G__19899 = k;
    if (G__19899) {
      var bit__5009__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__4335__auto__ = bit__5009__auto__;
        if (cljs.core.truth_(or__4335__auto__)) {
          return or__4335__auto__;
        } else {
          return G__19899.cljs$core$IEncodeJS$;
        }
      }())) {
        return true;
      } else {
        if (!G__19899.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.IEncodeJS, G__19899);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.IEncodeJS, G__19899);
    }
  }()) {
    return cljs.core._clj__GT_js(k);
  } else {
    if (typeof k === "string" || typeof k === "number" || k instanceof cljs.core.Keyword || k instanceof cljs.core.Symbol) {
      var G__19900 = k;
      return cljs.core.clj__GT_js.cljs$core$IFn$_invoke$arity$1 ? cljs.core.clj__GT_js.cljs$core$IFn$_invoke$arity$1(G__19900) : cljs.core.clj__GT_js.call(null, G__19900);
    } else {
      return cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([k], 0));
    }
  }
};
cljs.core.clj__GT_js = function cljs$core$clj__GT_js(x) {
  if (x == null) {
    return null;
  } else {
    if (function() {
      var G__19916 = x;
      if (G__19916) {
        var bit__5009__auto__ = null;
        if (cljs.core.truth_(function() {
          var or__4335__auto__ = bit__5009__auto__;
          if (cljs.core.truth_(or__4335__auto__)) {
            return or__4335__auto__;
          } else {
            return G__19916.cljs$core$IEncodeJS$;
          }
        }())) {
          return true;
        } else {
          if (!G__19916.cljs$lang$protocol_mask$partition$) {
            return cljs.core.native_satisfies_QMARK_(cljs.core.IEncodeJS, G__19916);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IEncodeJS, G__19916);
      }
    }()) {
      return cljs.core._clj__GT_js(x);
    } else {
      if (x instanceof cljs.core.Keyword) {
        return cljs.core.name(x);
      } else {
        if (x instanceof cljs.core.Symbol) {
          return[cljs.core.str(x)].join("");
        } else {
          if (cljs.core.map_QMARK_(x)) {
            var m = function() {
              var obj19918 = {};
              return obj19918;
            }();
            var seq__19919_19929 = cljs.core.seq(x);
            var chunk__19920_19930 = null;
            var count__19921_19931 = 0;
            var i__19922_19932 = 0;
            while (true) {
              if (i__19922_19932 < count__19921_19931) {
                var vec__19923_19933 = chunk__19920_19930.cljs$core$IIndexed$_nth$arity$2(null, i__19922_19932);
                var k_19934 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__19923_19933, 0, null);
                var v_19935 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__19923_19933, 1, null);
                m[cljs.core.key__GT_js(k_19934)] = cljs$core$clj__GT_js(v_19935);
                var G__19936 = seq__19919_19929;
                var G__19937 = chunk__19920_19930;
                var G__19938 = count__19921_19931;
                var G__19939 = i__19922_19932 + 1;
                seq__19919_19929 = G__19936;
                chunk__19920_19930 = G__19937;
                count__19921_19931 = G__19938;
                i__19922_19932 = G__19939;
                continue;
              } else {
                var temp__4126__auto___19940 = cljs.core.seq(seq__19919_19929);
                if (temp__4126__auto___19940) {
                  var seq__19919_19941__$1 = temp__4126__auto___19940;
                  if (cljs.core.chunked_seq_QMARK_(seq__19919_19941__$1)) {
                    var c__5120__auto___19942 = cljs.core.chunk_first(seq__19919_19941__$1);
                    var G__19943 = cljs.core.chunk_rest(seq__19919_19941__$1);
                    var G__19944 = c__5120__auto___19942;
                    var G__19945 = cljs.core.count(c__5120__auto___19942);
                    var G__19946 = 0;
                    seq__19919_19929 = G__19943;
                    chunk__19920_19930 = G__19944;
                    count__19921_19931 = G__19945;
                    i__19922_19932 = G__19946;
                    continue;
                  } else {
                    var vec__19924_19947 = cljs.core.first(seq__19919_19941__$1);
                    var k_19948 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__19924_19947, 0, null);
                    var v_19949 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__19924_19947, 1, null);
                    m[cljs.core.key__GT_js(k_19948)] = cljs$core$clj__GT_js(v_19949);
                    var G__19950 = cljs.core.next(seq__19919_19941__$1);
                    var G__19951 = null;
                    var G__19952 = 0;
                    var G__19953 = 0;
                    seq__19919_19929 = G__19950;
                    chunk__19920_19930 = G__19951;
                    count__19921_19931 = G__19952;
                    i__19922_19932 = G__19953;
                    continue;
                  }
                } else {
                }
              }
              break;
            }
            return m;
          } else {
            if (cljs.core.coll_QMARK_(x)) {
              var arr = [];
              var seq__19925_19954 = cljs.core.seq(cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs$core$clj__GT_js, x));
              var chunk__19926_19955 = null;
              var count__19927_19956 = 0;
              var i__19928_19957 = 0;
              while (true) {
                if (i__19928_19957 < count__19927_19956) {
                  var x_19958__$1 = chunk__19926_19955.cljs$core$IIndexed$_nth$arity$2(null, i__19928_19957);
                  arr.push(x_19958__$1);
                  var G__19959 = seq__19925_19954;
                  var G__19960 = chunk__19926_19955;
                  var G__19961 = count__19927_19956;
                  var G__19962 = i__19928_19957 + 1;
                  seq__19925_19954 = G__19959;
                  chunk__19926_19955 = G__19960;
                  count__19927_19956 = G__19961;
                  i__19928_19957 = G__19962;
                  continue;
                } else {
                  var temp__4126__auto___19963 = cljs.core.seq(seq__19925_19954);
                  if (temp__4126__auto___19963) {
                    var seq__19925_19964__$1 = temp__4126__auto___19963;
                    if (cljs.core.chunked_seq_QMARK_(seq__19925_19964__$1)) {
                      var c__5120__auto___19965 = cljs.core.chunk_first(seq__19925_19964__$1);
                      var G__19966 = cljs.core.chunk_rest(seq__19925_19964__$1);
                      var G__19967 = c__5120__auto___19965;
                      var G__19968 = cljs.core.count(c__5120__auto___19965);
                      var G__19969 = 0;
                      seq__19925_19954 = G__19966;
                      chunk__19926_19955 = G__19967;
                      count__19927_19956 = G__19968;
                      i__19928_19957 = G__19969;
                      continue;
                    } else {
                      var x_19970__$1 = cljs.core.first(seq__19925_19964__$1);
                      arr.push(x_19970__$1);
                      var G__19971 = cljs.core.next(seq__19925_19964__$1);
                      var G__19972 = null;
                      var G__19973 = 0;
                      var G__19974 = 0;
                      seq__19925_19954 = G__19971;
                      chunk__19926_19955 = G__19972;
                      count__19927_19956 = G__19973;
                      i__19928_19957 = G__19974;
                      continue;
                    }
                  } else {
                  }
                }
                break;
              }
              return arr;
            } else {
              return x;
            }
          }
        }
      }
    }
  }
};
cljs.core.IEncodeClojure = function() {
  var obj19976 = {};
  return obj19976;
}();
cljs.core._js__GT_clj = function cljs$core$_js__GT_clj(x, options) {
  if (function() {
    var and__4323__auto__ = x;
    if (and__4323__auto__) {
      return x.cljs$core$IEncodeClojure$_js__GT_clj$arity$2;
    } else {
      return and__4323__auto__;
    }
  }()) {
    return x.cljs$core$IEncodeClojure$_js__GT_clj$arity$2(x, options);
  } else {
    var x__4971__auto__ = x == null ? null : x;
    return function() {
      var or__4335__auto__ = cljs.core._js__GT_clj[function() {
        var G__19980 = x__4971__auto__;
        return goog.typeOf(G__19980);
      }()];
      if (or__4335__auto__) {
        return or__4335__auto__;
      } else {
        var or__4335__auto____$1 = cljs.core._js__GT_clj["_"];
        if (or__4335__auto____$1) {
          return or__4335__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IEncodeClojure.-js-\x3eclj", x);
        }
      }
    }().call(null, x, options);
  }
};
cljs.core.js__GT_clj = function cljs$core$js__GT_clj() {
  var G__19984 = arguments.length;
  switch(G__19984) {
    case 1:
      return cljs.core.js__GT_clj.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      var argseq__5386__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0);
      return cljs.core.js__GT_clj.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5386__auto__);
  }
};
cljs.core.js__GT_clj.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return cljs.core.js__GT_clj.cljs$core$IFn$_invoke$arity$variadic(x, cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 1310784252), false], null)], 0));
};
cljs.core.js__GT_clj.cljs$core$IFn$_invoke$arity$variadic = function(x, opts) {
  var map__19985 = opts;
  var map__19985__$1 = cljs.core.seq_QMARK_(map__19985) ? cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map, map__19985) : map__19985;
  var keywordize_keys = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__19985__$1, new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 1310784252));
  var keyfn = cljs.core.truth_(keywordize_keys) ? cljs.core.keyword : cljs.core.str;
  var f = function(map__19985, map__19985__$1, keywordize_keys, keyfn) {
    return function cljs$core$thisfn(x__$1) {
      if (function() {
        var G__20001 = x__$1;
        if (G__20001) {
          var bit__5009__auto__ = null;
          if (cljs.core.truth_(function() {
            var or__4335__auto__ = bit__5009__auto__;
            if (cljs.core.truth_(or__4335__auto__)) {
              return or__4335__auto__;
            } else {
              return G__20001.cljs$core$IEncodeClojure$;
            }
          }())) {
            return true;
          } else {
            if (!G__20001.cljs$lang$protocol_mask$partition$) {
              return cljs.core.native_satisfies_QMARK_(cljs.core.IEncodeClojure, G__20001);
            } else {
              return false;
            }
          }
        } else {
          return cljs.core.native_satisfies_QMARK_(cljs.core.IEncodeClojure, G__20001);
        }
      }()) {
        return cljs.core._js__GT_clj(x__$1, cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.array_map, opts));
      } else {
        if (cljs.core.seq_QMARK_(x__$1)) {
          return cljs.core.doall.cljs$core$IFn$_invoke$arity$1(cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs$core$thisfn, x__$1));
        } else {
          if (cljs.core.coll_QMARK_(x__$1)) {
            return cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.empty(x__$1), cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs$core$thisfn, x__$1));
          } else {
            if (cljs.core.array_QMARK_(x__$1)) {
              return cljs.core.vec(cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs$core$thisfn, x__$1));
            } else {
              if (cljs.core.type(x__$1) === Object) {
                return cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentArrayMap.EMPTY, function() {
                  var iter__5089__auto__ = function(map__19985, map__19985__$1, keywordize_keys, keyfn) {
                    return function cljs$core$thisfn_$_iter__20002(s__20003) {
                      return new cljs.core.LazySeq(null, function(map__19985, map__19985__$1, keywordize_keys, keyfn) {
                        return function() {
                          var s__20003__$1 = s__20003;
                          while (true) {
                            var temp__4126__auto__ = cljs.core.seq(s__20003__$1);
                            if (temp__4126__auto__) {
                              var s__20003__$2 = temp__4126__auto__;
                              if (cljs.core.chunked_seq_QMARK_(s__20003__$2)) {
                                var c__5087__auto__ = cljs.core.chunk_first(s__20003__$2);
                                var size__5088__auto__ = cljs.core.count(c__5087__auto__);
                                var b__20005 = cljs.core.chunk_buffer(size__5088__auto__);
                                if (function() {
                                  var i__20004 = 0;
                                  while (true) {
                                    if (i__20004 < size__5088__auto__) {
                                      var k = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c__5087__auto__, i__20004);
                                      cljs.core.chunk_append(b__20005, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
                                        var G__20010 = k;
                                        return keyfn.cljs$core$IFn$_invoke$arity$1 ? keyfn.cljs$core$IFn$_invoke$arity$1(G__20010) : keyfn.call(null, G__20010);
                                      }(), cljs$core$thisfn(x__$1[k])], null));
                                      var G__20013 = i__20004 + 1;
                                      i__20004 = G__20013;
                                      continue;
                                    } else {
                                      return true;
                                    }
                                    break;
                                  }
                                }()) {
                                  return cljs.core.chunk_cons(cljs.core.chunk(b__20005), cljs$core$thisfn_$_iter__20002(cljs.core.chunk_rest(s__20003__$2)));
                                } else {
                                  return cljs.core.chunk_cons(cljs.core.chunk(b__20005), null);
                                }
                              } else {
                                var k = cljs.core.first(s__20003__$2);
                                return cljs.core.cons(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
                                  var G__20011 = k;
                                  return keyfn.cljs$core$IFn$_invoke$arity$1 ? keyfn.cljs$core$IFn$_invoke$arity$1(G__20011) : keyfn.call(null, G__20011);
                                }(), cljs$core$thisfn(x__$1[k])], null), cljs$core$thisfn_$_iter__20002(cljs.core.rest(s__20003__$2)));
                              }
                            } else {
                              return null;
                            }
                            break;
                          }
                        };
                      }(map__19985, map__19985__$1, keywordize_keys, keyfn), null, null);
                    };
                  }(map__19985, map__19985__$1, keywordize_keys, keyfn);
                  return iter__5089__auto__(cljs.core.js_keys(x__$1));
                }());
              } else {
                return x__$1;
              }
            }
          }
        }
      }
    };
  }(map__19985, map__19985__$1, keywordize_keys, keyfn);
  return f(x);
};
cljs.core.js__GT_clj.cljs$lang$applyTo = function(seq19981) {
  var G__19982 = cljs.core.first(seq19981);
  var seq19981__$1 = cljs.core.next(seq19981);
  return cljs.core.js__GT_clj.cljs$core$IFn$_invoke$arity$variadic(G__19982, seq19981__$1);
};
cljs.core.js__GT_clj.cljs$lang$maxFixedArity = 1;
cljs.core.memoize = function cljs$core$memoize(f) {
  var mem = function() {
    var G__20016 = cljs.core.PersistentArrayMap.EMPTY;
    return cljs.core.atom.cljs$core$IFn$_invoke$arity$1 ? cljs.core.atom.cljs$core$IFn$_invoke$arity$1(G__20016) : cljs.core.atom.call(null, G__20016);
  }();
  return function(mem) {
    return function() {
      var G__20018__delegate = function(args) {
        var v = cljs.core.get.cljs$core$IFn$_invoke$arity$3(function() {
          var G__20017 = mem;
          return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__20017) : cljs.core.deref.call(null, G__20017);
        }(), args, cljs.core.lookup_sentinel);
        if (v === cljs.core.lookup_sentinel) {
          var ret = cljs.core.apply.cljs$core$IFn$_invoke$arity$2(f, args);
          cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(mem, cljs.core.assoc, args, ret);
          return ret;
        } else {
          return v;
        }
      };
      var G__20018 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          var G__20019__i = 0, G__20019__a = new Array(arguments.length - 0);
          while (G__20019__i < G__20019__a.length) {
            G__20019__a[G__20019__i] = arguments[G__20019__i + 0];
            ++G__20019__i;
          }
          args = new cljs.core.IndexedSeq(G__20019__a, 0);
        }
        return G__20018__delegate.call(this, args);
      };
      G__20018.cljs$lang$maxFixedArity = 0;
      G__20018.cljs$lang$applyTo = function(arglist__20020) {
        var args = cljs.core.seq(arglist__20020);
        return G__20018__delegate(args);
      };
      G__20018.cljs$core$IFn$_invoke$arity$variadic = G__20018__delegate;
      return G__20018;
    }();
  }(mem);
};
cljs.core.trampoline = function cljs$core$trampoline() {
  var G__20024 = arguments.length;
  switch(G__20024) {
    case 1:
      return cljs.core.trampoline.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      var argseq__5386__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0);
      return cljs.core.trampoline.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5386__auto__);
  }
};
cljs.core.trampoline.cljs$core$IFn$_invoke$arity$1 = function(f) {
  while (true) {
    var ret = function() {
      return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
    }();
    if (cljs.core.fn_QMARK_(ret)) {
      var G__20026 = ret;
      f = G__20026;
      continue;
    } else {
      return ret;
    }
    break;
  }
};
cljs.core.trampoline.cljs$core$IFn$_invoke$arity$variadic = function(f, args) {
  return cljs.core.trampoline.cljs$core$IFn$_invoke$arity$1(function() {
    return cljs.core.apply.cljs$core$IFn$_invoke$arity$2(f, args);
  });
};
cljs.core.trampoline.cljs$lang$applyTo = function(seq20021) {
  var G__20022 = cljs.core.first(seq20021);
  var seq20021__$1 = cljs.core.next(seq20021);
  return cljs.core.trampoline.cljs$core$IFn$_invoke$arity$variadic(G__20022, seq20021__$1);
};
cljs.core.trampoline.cljs$lang$maxFixedArity = 1;
cljs.core.rand = function cljs$core$rand() {
  var G__20028 = arguments.length;
  switch(G__20028) {
    case 0:
      return cljs.core.rand.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.rand.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.rand.cljs$core$IFn$_invoke$arity$0 = function() {
  return cljs.core.rand.cljs$core$IFn$_invoke$arity$1(1);
};
cljs.core.rand.cljs$core$IFn$_invoke$arity$1 = function(n) {
  return function() {
    return Math.random.cljs$core$IFn$_invoke$arity$0 ? Math.random.cljs$core$IFn$_invoke$arity$0() : Math.random.call(null);
  }() * n;
};
cljs.core.rand.cljs$lang$maxFixedArity = 1;
cljs.core.rand_int = function cljs$core$rand_int(n) {
  var G__20031 = function() {
    return Math.random.cljs$core$IFn$_invoke$arity$0 ? Math.random.cljs$core$IFn$_invoke$arity$0() : Math.random.call(null);
  }() * n;
  return Math.floor.cljs$core$IFn$_invoke$arity$1 ? Math.floor.cljs$core$IFn$_invoke$arity$1(G__20031) : Math.floor.call(null, G__20031);
};
cljs.core.rand_nth = function cljs$core$rand_nth(coll) {
  return cljs.core.nth.cljs$core$IFn$_invoke$arity$2(coll, cljs.core.rand_int(cljs.core.count(coll)));
};
cljs.core.group_by = function cljs$core$group_by(f, coll) {
  return cljs.core.persistent_BANG_(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(ret, x) {
    var k = function() {
      var G__20033 = x;
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__20033) : f.call(null, G__20033);
    }();
    return cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(ret, k, cljs.core.conj.cljs$core$IFn$_invoke$arity$2(cljs.core.get.cljs$core$IFn$_invoke$arity$3(ret, k, cljs.core.PersistentVector.EMPTY), x));
  }, cljs.core.transient$(cljs.core.PersistentArrayMap.EMPTY), coll));
};
cljs.core.make_hierarchy = function cljs$core$make_hierarchy() {
  return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "parents", "parents", -2027538891), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "descendants", "descendants", 1824886031), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424), cljs.core.PersistentArrayMap.EMPTY], null);
};
cljs.core._global_hierarchy = null;
cljs.core.get_global_hierarchy = function cljs$core$get_global_hierarchy() {
  if (cljs.core._global_hierarchy == null) {
    cljs.core._global_hierarchy = function() {
      var G__20035 = cljs.core.make_hierarchy();
      return cljs.core.atom.cljs$core$IFn$_invoke$arity$1 ? cljs.core.atom.cljs$core$IFn$_invoke$arity$1(G__20035) : cljs.core.atom.call(null, G__20035);
    }();
  } else {
  }
  return cljs.core._global_hierarchy;
};
cljs.core.swap_global_hierarchy_BANG_ = function cljs$core$swap_global_hierarchy_BANG_() {
  var argseq__5375__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return cljs.core.swap_global_hierarchy_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5375__auto__);
};
cljs.core.swap_global_hierarchy_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(f, args) {
  return cljs.core.apply.cljs$core$IFn$_invoke$arity$4(cljs.core.swap_BANG_, cljs.core.get_global_hierarchy(), f, args);
};
cljs.core.swap_global_hierarchy_BANG_.cljs$lang$maxFixedArity = 1;
cljs.core.swap_global_hierarchy_BANG_.cljs$lang$applyTo = function(seq20036) {
  var G__20037 = cljs.core.first(seq20036);
  var seq20036__$1 = cljs.core.next(seq20036);
  return cljs.core.swap_global_hierarchy_BANG_.cljs$core$IFn$_invoke$arity$variadic(G__20037, seq20036__$1);
};
cljs.core.isa_QMARK_ = function cljs$core$isa_QMARK_() {
  var G__20039 = arguments.length;
  switch(G__20039) {
    case 2:
      return cljs.core.isa_QMARK_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.isa_QMARK_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.isa_QMARK_.cljs$core$IFn$_invoke$arity$2 = function(child, parent) {
  return cljs.core.isa_QMARK_.cljs$core$IFn$_invoke$arity$3(function() {
    var G__20040 = cljs.core.get_global_hierarchy();
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__20040) : cljs.core.deref.call(null, G__20040);
  }(), child, parent);
};
cljs.core.isa_QMARK_.cljs$core$IFn$_invoke$arity$3 = function(h, child, parent) {
  var or__4335__auto__ = cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(child, parent);
  if (or__4335__auto__) {
    return or__4335__auto__;
  } else {
    var or__4335__auto____$1 = cljs.core.contains_QMARK_((new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424)).cljs$core$IFn$_invoke$arity$1(h).call(null, child), parent);
    if (or__4335__auto____$1) {
      return or__4335__auto____$1;
    } else {
      var and__4323__auto__ = cljs.core.vector_QMARK_(parent);
      if (and__4323__auto__) {
        var and__4323__auto____$1 = cljs.core.vector_QMARK_(child);
        if (and__4323__auto____$1) {
          var and__4323__auto____$2 = cljs.core.count(parent) === cljs.core.count(child);
          if (and__4323__auto____$2) {
            var ret = true;
            var i = 0;
            while (true) {
              if (!ret || i === cljs.core.count(parent)) {
                return ret;
              } else {
                var G__20066 = cljs.core.isa_QMARK_.cljs$core$IFn$_invoke$arity$3(h, function() {
                  var G__20063 = i;
                  return child.cljs$core$IFn$_invoke$arity$1 ? child.cljs$core$IFn$_invoke$arity$1(G__20063) : child.call(null, G__20063);
                }(), function() {
                  var G__20064 = i;
                  return parent.cljs$core$IFn$_invoke$arity$1 ? parent.cljs$core$IFn$_invoke$arity$1(G__20064) : parent.call(null, G__20064);
                }());
                var G__20067 = i + 1;
                ret = G__20066;
                i = G__20067;
                continue;
              }
              break;
            }
          } else {
            return and__4323__auto____$2;
          }
        } else {
          return and__4323__auto____$1;
        }
      } else {
        return and__4323__auto__;
      }
    }
  }
};
cljs.core.isa_QMARK_.cljs$lang$maxFixedArity = 3;
cljs.core.parents = function cljs$core$parents() {
  var G__20069 = arguments.length;
  switch(G__20069) {
    case 1:
      return cljs.core.parents.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.parents.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.parents.cljs$core$IFn$_invoke$arity$1 = function(tag) {
  return cljs.core.parents.cljs$core$IFn$_invoke$arity$2(function() {
    var G__20070 = cljs.core.get_global_hierarchy();
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__20070) : cljs.core.deref.call(null, G__20070);
  }(), tag);
};
cljs.core.parents.cljs$core$IFn$_invoke$arity$2 = function(h, tag) {
  return cljs.core.not_empty(cljs.core.get.cljs$core$IFn$_invoke$arity$2((new cljs.core.Keyword(null, "parents", "parents", -2027538891)).cljs$core$IFn$_invoke$arity$1(h), tag));
};
cljs.core.parents.cljs$lang$maxFixedArity = 2;
cljs.core.ancestors = function cljs$core$ancestors() {
  var G__20073 = arguments.length;
  switch(G__20073) {
    case 1:
      return cljs.core.ancestors.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.ancestors.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.ancestors.cljs$core$IFn$_invoke$arity$1 = function(tag) {
  return cljs.core.ancestors.cljs$core$IFn$_invoke$arity$2(function() {
    var G__20074 = cljs.core.get_global_hierarchy();
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__20074) : cljs.core.deref.call(null, G__20074);
  }(), tag);
};
cljs.core.ancestors.cljs$core$IFn$_invoke$arity$2 = function(h, tag) {
  return cljs.core.not_empty(cljs.core.get.cljs$core$IFn$_invoke$arity$2((new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424)).cljs$core$IFn$_invoke$arity$1(h), tag));
};
cljs.core.ancestors.cljs$lang$maxFixedArity = 2;
cljs.core.descendants = function cljs$core$descendants() {
  var G__20077 = arguments.length;
  switch(G__20077) {
    case 1:
      return cljs.core.descendants.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.descendants.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.descendants.cljs$core$IFn$_invoke$arity$1 = function(tag) {
  return cljs.core.descendants.cljs$core$IFn$_invoke$arity$2(function() {
    var G__20078 = cljs.core.get_global_hierarchy();
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__20078) : cljs.core.deref.call(null, G__20078);
  }(), tag);
};
cljs.core.descendants.cljs$core$IFn$_invoke$arity$2 = function(h, tag) {
  return cljs.core.not_empty(cljs.core.get.cljs$core$IFn$_invoke$arity$2((new cljs.core.Keyword(null, "descendants", "descendants", 1824886031)).cljs$core$IFn$_invoke$arity$1(h), tag));
};
cljs.core.descendants.cljs$lang$maxFixedArity = 2;
cljs.core.derive = function cljs$core$derive() {
  var G__20081 = arguments.length;
  switch(G__20081) {
    case 2:
      return cljs.core.derive.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.derive.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.derive.cljs$core$IFn$_invoke$arity$2 = function(tag, parent) {
  if (cljs.core.truth_(cljs.core.namespace(parent))) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.list(new cljs.core.Symbol(null, "namespace", "namespace", 1263021155, null), new cljs.core.Symbol(null, "parent", "parent", 761652748, null))], 0)))].join(""));
  }
  cljs.core.swap_global_hierarchy_BANG_.cljs$core$IFn$_invoke$arity$variadic(cljs.core.derive, cljs.core.array_seq([tag, parent], 0));
  return null;
};
cljs.core.derive.cljs$core$IFn$_invoke$arity$3 = function(h, tag, parent) {
  if (cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(tag, parent)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.list(new cljs.core.Symbol(null, "not\x3d", "not\x3d", 1466536204, null), new cljs.core.Symbol(null, "tag", "tag", 350170304, null), new cljs.core.Symbol(null, "parent", "parent", 761652748, null))], 0)))].join(""));
  }
  var tp = (new cljs.core.Keyword(null, "parents", "parents", -2027538891)).cljs$core$IFn$_invoke$arity$1(h);
  var td = (new cljs.core.Keyword(null, "descendants", "descendants", 1824886031)).cljs$core$IFn$_invoke$arity$1(h);
  var ta = (new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424)).cljs$core$IFn$_invoke$arity$1(h);
  var tf = function(tp, td, ta) {
    return function(m, source, sources, target, targets) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(tp, td, ta) {
        return function(ret, k) {
          return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(ret, k, cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.conj, cljs.core.get.cljs$core$IFn$_invoke$arity$3(targets, k, cljs.core.PersistentHashSet.EMPTY), cljs.core.cons(target, function() {
            var G__20082 = target;
            return targets.cljs$core$IFn$_invoke$arity$1 ? targets.cljs$core$IFn$_invoke$arity$1(G__20082) : targets.call(null, G__20082);
          }())));
        };
      }(tp, td, ta), m, cljs.core.cons(source, function() {
        var G__20083 = source;
        return sources.cljs$core$IFn$_invoke$arity$1 ? sources.cljs$core$IFn$_invoke$arity$1(G__20083) : sources.call(null, G__20083);
      }()));
    };
  }(tp, td, ta);
  var or__4335__auto__ = cljs.core.contains_QMARK_(function() {
    var G__20087 = tag;
    return tp.cljs$core$IFn$_invoke$arity$1 ? tp.cljs$core$IFn$_invoke$arity$1(G__20087) : tp.call(null, G__20087);
  }(), parent) ? null : function() {
    if (cljs.core.contains_QMARK_(function() {
      var G__20088 = tag;
      return ta.cljs$core$IFn$_invoke$arity$1 ? ta.cljs$core$IFn$_invoke$arity$1(G__20088) : ta.call(null, G__20088);
    }(), parent)) {
      throw new Error([cljs.core.str(tag), cljs.core.str("already has"), cljs.core.str(parent), cljs.core.str("as ancestor")].join(""));
    } else {
    }
    if (cljs.core.contains_QMARK_(function() {
      var G__20089 = parent;
      return ta.cljs$core$IFn$_invoke$arity$1 ? ta.cljs$core$IFn$_invoke$arity$1(G__20089) : ta.call(null, G__20089);
    }(), tag)) {
      throw new Error([cljs.core.str("Cyclic derivation:"), cljs.core.str(parent), cljs.core.str("has"), cljs.core.str(tag), cljs.core.str("as ancestor")].join(""));
    } else {
    }
    return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "parents", "parents", -2027538891), cljs.core.assoc.cljs$core$IFn$_invoke$arity$3((new cljs.core.Keyword(null, "parents", "parents", -2027538891)).cljs$core$IFn$_invoke$arity$1(h), tag, cljs.core.conj.cljs$core$IFn$_invoke$arity$2(cljs.core.get.cljs$core$IFn$_invoke$arity$3(tp, tag, cljs.core.PersistentHashSet.EMPTY), parent)), new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424), tf((new cljs.core.Keyword(null, 
    "ancestors", "ancestors", -776045424)).cljs$core$IFn$_invoke$arity$1(h), tag, td, parent, ta), new cljs.core.Keyword(null, "descendants", "descendants", 1824886031), tf((new cljs.core.Keyword(null, "descendants", "descendants", 1824886031)).cljs$core$IFn$_invoke$arity$1(h), parent, ta, tag, td)], null);
  }();
  if (cljs.core.truth_(or__4335__auto__)) {
    return or__4335__auto__;
  } else {
    return h;
  }
};
cljs.core.derive.cljs$lang$maxFixedArity = 3;
cljs.core.underive = function cljs$core$underive() {
  var G__20095 = arguments.length;
  switch(G__20095) {
    case 2:
      return cljs.core.underive.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.underive.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.underive.cljs$core$IFn$_invoke$arity$2 = function(tag, parent) {
  cljs.core.swap_global_hierarchy_BANG_.cljs$core$IFn$_invoke$arity$variadic(cljs.core.underive, cljs.core.array_seq([tag, parent], 0));
  return null;
};
cljs.core.underive.cljs$core$IFn$_invoke$arity$3 = function(h, tag, parent) {
  var parentMap = (new cljs.core.Keyword(null, "parents", "parents", -2027538891)).cljs$core$IFn$_invoke$arity$1(h);
  var childsParents = cljs.core.truth_(function() {
    var G__20096 = tag;
    return parentMap.cljs$core$IFn$_invoke$arity$1 ? parentMap.cljs$core$IFn$_invoke$arity$1(G__20096) : parentMap.call(null, G__20096);
  }()) ? cljs.core.disj.cljs$core$IFn$_invoke$arity$2(function() {
    var G__20097 = tag;
    return parentMap.cljs$core$IFn$_invoke$arity$1 ? parentMap.cljs$core$IFn$_invoke$arity$1(G__20097) : parentMap.call(null, G__20097);
  }(), parent) : cljs.core.PersistentHashSet.EMPTY;
  var newParents = cljs.core.truth_(cljs.core.not_empty(childsParents)) ? cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(parentMap, tag, childsParents) : cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(parentMap, tag);
  var deriv_seq = cljs.core.flatten(cljs.core.map.cljs$core$IFn$_invoke$arity$2(function(parentMap, childsParents, newParents) {
    return function(p1__20091_SHARP_) {
      return cljs.core.cons(cljs.core.first(p1__20091_SHARP_), cljs.core.interpose.cljs$core$IFn$_invoke$arity$2(cljs.core.first(p1__20091_SHARP_), cljs.core.second(p1__20091_SHARP_)));
    };
  }(parentMap, childsParents, newParents), cljs.core.seq(newParents)));
  if (cljs.core.contains_QMARK_(function() {
    var G__20098 = tag;
    return parentMap.cljs$core$IFn$_invoke$arity$1 ? parentMap.cljs$core$IFn$_invoke$arity$1(G__20098) : parentMap.call(null, G__20098);
  }(), parent)) {
    return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(parentMap, childsParents, newParents, deriv_seq) {
      return function(p1__20092_SHARP_, p2__20093_SHARP_) {
        return cljs.core.apply.cljs$core$IFn$_invoke$arity$3(cljs.core.derive, p1__20092_SHARP_, p2__20093_SHARP_);
      };
    }(parentMap, childsParents, newParents, deriv_seq), cljs.core.make_hierarchy(), cljs.core.partition.cljs$core$IFn$_invoke$arity$2(2, deriv_seq));
  } else {
    return h;
  }
};
cljs.core.underive.cljs$lang$maxFixedArity = 3;
cljs.core.reset_cache = function cljs$core$reset_cache(method_cache, method_table, cached_hierarchy, hierarchy) {
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(method_cache, function(_) {
    var G__20102 = method_table;
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__20102) : cljs.core.deref.call(null, G__20102);
  });
  return cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(cached_hierarchy, function(_) {
    var G__20103 = hierarchy;
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__20103) : cljs.core.deref.call(null, G__20103);
  });
};
cljs.core.prefers_STAR_ = function cljs$core$prefers_STAR_(x, y, prefer_table) {
  var xprefs = function() {
    var G__20119 = prefer_table;
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__20119) : cljs.core.deref.call(null, G__20119);
  }().call(null, x);
  var or__4335__auto__ = cljs.core.truth_(function() {
    var and__4323__auto__ = xprefs;
    if (cljs.core.truth_(and__4323__auto__)) {
      var G__20121 = y;
      return xprefs.cljs$core$IFn$_invoke$arity$1 ? xprefs.cljs$core$IFn$_invoke$arity$1(G__20121) : xprefs.call(null, G__20121);
    } else {
      return and__4323__auto__;
    }
  }()) ? true : null;
  if (cljs.core.truth_(or__4335__auto__)) {
    return or__4335__auto__;
  } else {
    var or__4335__auto____$1 = function() {
      var ps = cljs.core.parents.cljs$core$IFn$_invoke$arity$1(y);
      while (true) {
        if (cljs.core.count(ps) > 0) {
          if (cljs.core.truth_(cljs$core$prefers_STAR_(x, cljs.core.first(ps), prefer_table))) {
          } else {
          }
          var G__20122 = cljs.core.rest(ps);
          ps = G__20122;
          continue;
        } else {
          return null;
        }
        break;
      }
    }();
    if (cljs.core.truth_(or__4335__auto____$1)) {
      return or__4335__auto____$1;
    } else {
      var or__4335__auto____$2 = function() {
        var ps = cljs.core.parents.cljs$core$IFn$_invoke$arity$1(x);
        while (true) {
          if (cljs.core.count(ps) > 0) {
            if (cljs.core.truth_(cljs$core$prefers_STAR_(cljs.core.first(ps), y, prefer_table))) {
            } else {
            }
            var G__20123 = cljs.core.rest(ps);
            ps = G__20123;
            continue;
          } else {
            return null;
          }
          break;
        }
      }();
      if (cljs.core.truth_(or__4335__auto____$2)) {
        return or__4335__auto____$2;
      } else {
        return false;
      }
    }
  }
};
cljs.core.dominates = function cljs$core$dominates(x, y, prefer_table) {
  var or__4335__auto__ = cljs.core.prefers_STAR_(x, y, prefer_table);
  if (cljs.core.truth_(or__4335__auto__)) {
    return or__4335__auto__;
  } else {
    return cljs.core.isa_QMARK_.cljs$core$IFn$_invoke$arity$2(x, y);
  }
};
cljs.core.find_and_cache_best_method = function cljs$core$find_and_cache_best_method(name, dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  var best_entry = cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(be, p__20137) {
    var vec__20138 = p__20137;
    var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__20138, 0, null);
    var _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__20138, 1, null);
    var e = vec__20138;
    if (cljs.core.isa_QMARK_.cljs$core$IFn$_invoke$arity$3(function() {
      var G__20139 = hierarchy;
      return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__20139) : cljs.core.deref.call(null, G__20139);
    }(), dispatch_val, k)) {
      var be2 = cljs.core.truth_(function() {
        var or__4335__auto__ = be == null;
        if (or__4335__auto__) {
          return or__4335__auto__;
        } else {
          return cljs.core.dominates(k, cljs.core.first(be), prefer_table);
        }
      }()) ? e : be;
      if (cljs.core.truth_(cljs.core.dominates(cljs.core.first(be2), k, prefer_table))) {
      } else {
        throw new Error([cljs.core.str("Multiple methods in multimethod '"), cljs.core.str(name), cljs.core.str("' match dispatch value: "), cljs.core.str(dispatch_val), cljs.core.str(" -\x3e "), cljs.core.str(k), cljs.core.str(" and "), cljs.core.str(cljs.core.first(be2)), cljs.core.str(", and neither is preferred")].join(""));
      }
      return be2;
    } else {
      return be;
    }
  }, null, function() {
    var G__20140 = method_table;
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__20140) : cljs.core.deref.call(null, G__20140);
  }());
  if (cljs.core.truth_(best_entry)) {
    if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(function() {
      var G__20141 = cached_hierarchy;
      return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__20141) : cljs.core.deref.call(null, G__20141);
    }(), function() {
      var G__20142 = hierarchy;
      return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__20142) : cljs.core.deref.call(null, G__20142);
    }())) {
      cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(method_cache, cljs.core.assoc, dispatch_val, cljs.core.second(best_entry));
      return cljs.core.second(best_entry);
    } else {
      cljs.core.reset_cache(method_cache, method_table, cached_hierarchy, hierarchy);
      return cljs$core$find_and_cache_best_method(name, dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy);
    }
  } else {
    return null;
  }
};
cljs.core.IMultiFn = function() {
  var obj20144 = {};
  return obj20144;
}();
cljs.core._reset = function cljs$core$_reset(mf) {
  if (function() {
    var and__4323__auto__ = mf;
    if (and__4323__auto__) {
      return mf.cljs$core$IMultiFn$_reset$arity$1;
    } else {
      return and__4323__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_reset$arity$1(mf);
  } else {
    var x__4971__auto__ = mf == null ? null : mf;
    return function() {
      var or__4335__auto__ = cljs.core._reset[function() {
        var G__20148 = x__4971__auto__;
        return goog.typeOf(G__20148);
      }()];
      if (or__4335__auto__) {
        return or__4335__auto__;
      } else {
        var or__4335__auto____$1 = cljs.core._reset["_"];
        if (or__4335__auto____$1) {
          return or__4335__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IMultiFn.-reset", mf);
        }
      }
    }().call(null, mf);
  }
};
cljs.core._add_method = function cljs$core$_add_method(mf, dispatch_val, method) {
  if (function() {
    var and__4323__auto__ = mf;
    if (and__4323__auto__) {
      return mf.cljs$core$IMultiFn$_add_method$arity$3;
    } else {
      return and__4323__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_add_method$arity$3(mf, dispatch_val, method);
  } else {
    var x__4971__auto__ = mf == null ? null : mf;
    return function() {
      var or__4335__auto__ = cljs.core._add_method[function() {
        var G__20152 = x__4971__auto__;
        return goog.typeOf(G__20152);
      }()];
      if (or__4335__auto__) {
        return or__4335__auto__;
      } else {
        var or__4335__auto____$1 = cljs.core._add_method["_"];
        if (or__4335__auto____$1) {
          return or__4335__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IMultiFn.-add-method", mf);
        }
      }
    }().call(null, mf, dispatch_val, method);
  }
};
cljs.core._remove_method = function cljs$core$_remove_method(mf, dispatch_val) {
  if (function() {
    var and__4323__auto__ = mf;
    if (and__4323__auto__) {
      return mf.cljs$core$IMultiFn$_remove_method$arity$2;
    } else {
      return and__4323__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_remove_method$arity$2(mf, dispatch_val);
  } else {
    var x__4971__auto__ = mf == null ? null : mf;
    return function() {
      var or__4335__auto__ = cljs.core._remove_method[function() {
        var G__20156 = x__4971__auto__;
        return goog.typeOf(G__20156);
      }()];
      if (or__4335__auto__) {
        return or__4335__auto__;
      } else {
        var or__4335__auto____$1 = cljs.core._remove_method["_"];
        if (or__4335__auto____$1) {
          return or__4335__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IMultiFn.-remove-method", mf);
        }
      }
    }().call(null, mf, dispatch_val);
  }
};
cljs.core._prefer_method = function cljs$core$_prefer_method(mf, dispatch_val, dispatch_val_y) {
  if (function() {
    var and__4323__auto__ = mf;
    if (and__4323__auto__) {
      return mf.cljs$core$IMultiFn$_prefer_method$arity$3;
    } else {
      return and__4323__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_prefer_method$arity$3(mf, dispatch_val, dispatch_val_y);
  } else {
    var x__4971__auto__ = mf == null ? null : mf;
    return function() {
      var or__4335__auto__ = cljs.core._prefer_method[function() {
        var G__20160 = x__4971__auto__;
        return goog.typeOf(G__20160);
      }()];
      if (or__4335__auto__) {
        return or__4335__auto__;
      } else {
        var or__4335__auto____$1 = cljs.core._prefer_method["_"];
        if (or__4335__auto____$1) {
          return or__4335__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IMultiFn.-prefer-method", mf);
        }
      }
    }().call(null, mf, dispatch_val, dispatch_val_y);
  }
};
cljs.core._get_method = function cljs$core$_get_method(mf, dispatch_val) {
  if (function() {
    var and__4323__auto__ = mf;
    if (and__4323__auto__) {
      return mf.cljs$core$IMultiFn$_get_method$arity$2;
    } else {
      return and__4323__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_get_method$arity$2(mf, dispatch_val);
  } else {
    var x__4971__auto__ = mf == null ? null : mf;
    return function() {
      var or__4335__auto__ = cljs.core._get_method[function() {
        var G__20164 = x__4971__auto__;
        return goog.typeOf(G__20164);
      }()];
      if (or__4335__auto__) {
        return or__4335__auto__;
      } else {
        var or__4335__auto____$1 = cljs.core._get_method["_"];
        if (or__4335__auto____$1) {
          return or__4335__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IMultiFn.-get-method", mf);
        }
      }
    }().call(null, mf, dispatch_val);
  }
};
cljs.core._methods = function cljs$core$_methods(mf) {
  if (function() {
    var and__4323__auto__ = mf;
    if (and__4323__auto__) {
      return mf.cljs$core$IMultiFn$_methods$arity$1;
    } else {
      return and__4323__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_methods$arity$1(mf);
  } else {
    var x__4971__auto__ = mf == null ? null : mf;
    return function() {
      var or__4335__auto__ = cljs.core._methods[function() {
        var G__20168 = x__4971__auto__;
        return goog.typeOf(G__20168);
      }()];
      if (or__4335__auto__) {
        return or__4335__auto__;
      } else {
        var or__4335__auto____$1 = cljs.core._methods["_"];
        if (or__4335__auto____$1) {
          return or__4335__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IMultiFn.-methods", mf);
        }
      }
    }().call(null, mf);
  }
};
cljs.core._prefers = function cljs$core$_prefers(mf) {
  if (function() {
    var and__4323__auto__ = mf;
    if (and__4323__auto__) {
      return mf.cljs$core$IMultiFn$_prefers$arity$1;
    } else {
      return and__4323__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_prefers$arity$1(mf);
  } else {
    var x__4971__auto__ = mf == null ? null : mf;
    return function() {
      var or__4335__auto__ = cljs.core._prefers[function() {
        var G__20172 = x__4971__auto__;
        return goog.typeOf(G__20172);
      }()];
      if (or__4335__auto__) {
        return or__4335__auto__;
      } else {
        var or__4335__auto____$1 = cljs.core._prefers["_"];
        if (or__4335__auto____$1) {
          return or__4335__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IMultiFn.-prefers", mf);
        }
      }
    }().call(null, mf);
  }
};
cljs.core._default_dispatch_val = function cljs$core$_default_dispatch_val(mf) {
  if (function() {
    var and__4323__auto__ = mf;
    if (and__4323__auto__) {
      return mf.cljs$core$IMultiFn$_default_dispatch_val$arity$1;
    } else {
      return and__4323__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_default_dispatch_val$arity$1(mf);
  } else {
    var x__4971__auto__ = mf == null ? null : mf;
    return function() {
      var or__4335__auto__ = cljs.core._default_dispatch_val[function() {
        var G__20176 = x__4971__auto__;
        return goog.typeOf(G__20176);
      }()];
      if (or__4335__auto__) {
        return or__4335__auto__;
      } else {
        var or__4335__auto____$1 = cljs.core._default_dispatch_val["_"];
        if (or__4335__auto____$1) {
          return or__4335__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IMultiFn.-default-dispatch-val", mf);
        }
      }
    }().call(null, mf);
  }
};
cljs.core._dispatch_fn = function cljs$core$_dispatch_fn(mf) {
  if (function() {
    var and__4323__auto__ = mf;
    if (and__4323__auto__) {
      return mf.cljs$core$IMultiFn$_dispatch_fn$arity$1;
    } else {
      return and__4323__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_dispatch_fn$arity$1(mf);
  } else {
    var x__4971__auto__ = mf == null ? null : mf;
    return function() {
      var or__4335__auto__ = cljs.core._dispatch_fn[function() {
        var G__20180 = x__4971__auto__;
        return goog.typeOf(G__20180);
      }()];
      if (or__4335__auto__) {
        return or__4335__auto__;
      } else {
        var or__4335__auto____$1 = cljs.core._dispatch_fn["_"];
        if (or__4335__auto____$1) {
          return or__4335__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IMultiFn.-dispatch-fn", mf);
        }
      }
    }().call(null, mf);
  }
};
cljs.core.throw_no_method_error = function cljs$core$throw_no_method_error(name, dispatch_val) {
  throw new Error([cljs.core.str("No method in multimethod '"), cljs.core.str(name), cljs.core.str("' for dispatch value: "), cljs.core.str(dispatch_val)].join(""));
};
cljs.core.MultiFn = function(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  this.name = name;
  this.dispatch_fn = dispatch_fn;
  this.default_dispatch_val = default_dispatch_val;
  this.hierarchy = hierarchy;
  this.method_table = method_table;
  this.prefer_table = prefer_table;
  this.method_cache = method_cache;
  this.cached_hierarchy = cached_hierarchy;
  this.cljs$lang$protocol_mask$partition0$ = 4194305;
  this.cljs$lang$protocol_mask$partition1$ = 4352;
};
cljs.core.MultiFn.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var G__20182 = this$__$1;
  return goog.getUid(G__20182);
};
cljs.core.MultiFn.prototype.cljs$core$INamed$_name$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core._name(self__.name);
};
cljs.core.MultiFn.prototype.cljs$core$INamed$_namespace$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core._namespace(self__.name);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_prefer_method$arity$3 = function(mf, dispatch_val_x, dispatch_val_y) {
  var self__ = this;
  var mf__$1 = this;
  if (cljs.core.truth_(cljs.core.prefers_STAR_(dispatch_val_x, dispatch_val_y, self__.prefer_table))) {
    throw new Error([cljs.core.str("Preference conflict in multimethod '"), cljs.core.str(self__.name), cljs.core.str("': "), cljs.core.str(dispatch_val_y), cljs.core.str(" is already preferred to "), cljs.core.str(dispatch_val_x)].join(""));
  } else {
  }
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(self__.prefer_table, function(mf__$1) {
    return function(old) {
      return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(old, dispatch_val_x, cljs.core.conj.cljs$core$IFn$_invoke$arity$2(cljs.core.get.cljs$core$IFn$_invoke$arity$3(old, dispatch_val_x, cljs.core.PersistentHashSet.EMPTY), dispatch_val_y));
    };
  }(mf__$1));
  return cljs.core.reset_cache(self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_default_dispatch_val$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  return self__.default_dispatch_val;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_remove_method$arity$2 = function(mf, dispatch_val) {
  var self__ = this;
  var mf__$1 = this;
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(self__.method_table, cljs.core.dissoc, dispatch_val);
  cljs.core.reset_cache(self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
  return mf__$1;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_methods$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  var G__20183 = self__.method_table;
  return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__20183) : cljs.core.deref.call(null, G__20183);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_prefers$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  var G__20184 = self__.prefer_table;
  return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__20184) : cljs.core.deref.call(null, G__20184);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_dispatch_fn$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  return self__.dispatch_fn;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_add_method$arity$3 = function(mf, dispatch_val, method) {
  var self__ = this;
  var mf__$1 = this;
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(self__.method_table, cljs.core.assoc, dispatch_val, method);
  cljs.core.reset_cache(self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
  return mf__$1;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_reset$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(self__.method_table, function(mf__$1) {
    return function(mf__$2) {
      return cljs.core.PersistentArrayMap.EMPTY;
    };
  }(mf__$1));
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(self__.method_cache, function(mf__$1) {
    return function(mf__$2) {
      return cljs.core.PersistentArrayMap.EMPTY;
    };
  }(mf__$1));
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(self__.prefer_table, function(mf__$1) {
    return function(mf__$2) {
      return cljs.core.PersistentArrayMap.EMPTY;
    };
  }(mf__$1));
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(self__.cached_hierarchy, function(mf__$1) {
    return function(mf__$2) {
      return null;
    };
  }(mf__$1));
  return mf__$1;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_get_method$arity$2 = function(mf, dispatch_val) {
  var self__ = this;
  var mf__$1 = this;
  if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(function() {
    var G__20185 = self__.cached_hierarchy;
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__20185) : cljs.core.deref.call(null, G__20185);
  }(), function() {
    var G__20186 = self__.hierarchy;
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__20186) : cljs.core.deref.call(null, G__20186);
  }())) {
  } else {
    cljs.core.reset_cache(self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
  }
  var temp__4124__auto__ = function() {
    var G__20187 = self__.method_cache;
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__20187) : cljs.core.deref.call(null, G__20187);
  }().call(null, dispatch_val);
  if (cljs.core.truth_(temp__4124__auto__)) {
    var target_fn = temp__4124__auto__;
    return target_fn;
  } else {
    var temp__4124__auto____$1 = cljs.core.find_and_cache_best_method(self__.name, dispatch_val, self__.hierarchy, self__.method_table, self__.prefer_table, self__.method_cache, self__.cached_hierarchy);
    if (cljs.core.truth_(temp__4124__auto____$1)) {
      var target_fn = temp__4124__auto____$1;
      return target_fn;
    } else {
      return function() {
        var G__20188 = self__.method_table;
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__20188) : cljs.core.deref.call(null, G__20188);
      }().call(null, self__.default_dispatch_val);
    }
  }
};
cljs.core.MultiFn.prototype.call = function() {
  var G__21029 = null;
  var G__21029__1 = function(self__) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$0 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$0() : self__.dispatch_fn.call(null);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$0 ? target_fn.cljs$core$IFn$_invoke$arity$0() : target_fn.call(null);
  };
  var G__21029__2 = function(self__, a) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__20189 = a;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$1 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$1(G__20189) : self__.dispatch_fn.call(null, G__20189);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__20190 = a;
    return target_fn.cljs$core$IFn$_invoke$arity$1 ? target_fn.cljs$core$IFn$_invoke$arity$1(G__20190) : target_fn.call(null, G__20190);
  };
  var G__21029__3 = function(self__, a, b) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__20191 = a;
      var G__20192 = b;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$2 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$2(G__20191, G__20192) : self__.dispatch_fn.call(null, G__20191, G__20192);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__20193 = a;
    var G__20194 = b;
    return target_fn.cljs$core$IFn$_invoke$arity$2 ? target_fn.cljs$core$IFn$_invoke$arity$2(G__20193, G__20194) : target_fn.call(null, G__20193, G__20194);
  };
  var G__21029__4 = function(self__, a, b, c) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__20195 = a;
      var G__20196 = b;
      var G__20197 = c;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$3 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$3(G__20195, G__20196, G__20197) : self__.dispatch_fn.call(null, G__20195, G__20196, G__20197);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__20198 = a;
    var G__20199 = b;
    var G__20200 = c;
    return target_fn.cljs$core$IFn$_invoke$arity$3 ? target_fn.cljs$core$IFn$_invoke$arity$3(G__20198, G__20199, G__20200) : target_fn.call(null, G__20198, G__20199, G__20200);
  };
  var G__21029__5 = function(self__, a, b, c, d) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__20201 = a;
      var G__20202 = b;
      var G__20203 = c;
      var G__20204 = d;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$4 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$4(G__20201, G__20202, G__20203, G__20204) : self__.dispatch_fn.call(null, G__20201, G__20202, G__20203, G__20204);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__20205 = a;
    var G__20206 = b;
    var G__20207 = c;
    var G__20208 = d;
    return target_fn.cljs$core$IFn$_invoke$arity$4 ? target_fn.cljs$core$IFn$_invoke$arity$4(G__20205, G__20206, G__20207, G__20208) : target_fn.call(null, G__20205, G__20206, G__20207, G__20208);
  };
  var G__21029__6 = function(self__, a, b, c, d, e) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__20209 = a;
      var G__20210 = b;
      var G__20211 = c;
      var G__20212 = d;
      var G__20213 = e;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$5 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$5(G__20209, G__20210, G__20211, G__20212, G__20213) : self__.dispatch_fn.call(null, G__20209, G__20210, G__20211, G__20212, G__20213);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__20214 = a;
    var G__20215 = b;
    var G__20216 = c;
    var G__20217 = d;
    var G__20218 = e;
    return target_fn.cljs$core$IFn$_invoke$arity$5 ? target_fn.cljs$core$IFn$_invoke$arity$5(G__20214, G__20215, G__20216, G__20217, G__20218) : target_fn.call(null, G__20214, G__20215, G__20216, G__20217, G__20218);
  };
  var G__21029__7 = function(self__, a, b, c, d, e, f) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__20219 = a;
      var G__20220 = b;
      var G__20221 = c;
      var G__20222 = d;
      var G__20223 = e;
      var G__20224 = f;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$6 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$6(G__20219, G__20220, G__20221, G__20222, G__20223, G__20224) : self__.dispatch_fn.call(null, G__20219, G__20220, G__20221, G__20222, G__20223, G__20224);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__20225 = a;
    var G__20226 = b;
    var G__20227 = c;
    var G__20228 = d;
    var G__20229 = e;
    var G__20230 = f;
    return target_fn.cljs$core$IFn$_invoke$arity$6 ? target_fn.cljs$core$IFn$_invoke$arity$6(G__20225, G__20226, G__20227, G__20228, G__20229, G__20230) : target_fn.call(null, G__20225, G__20226, G__20227, G__20228, G__20229, G__20230);
  };
  var G__21029__8 = function(self__, a, b, c, d, e, f, g) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__20231 = a;
      var G__20232 = b;
      var G__20233 = c;
      var G__20234 = d;
      var G__20235 = e;
      var G__20236 = f;
      var G__20237 = g;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$7 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$7(G__20231, G__20232, G__20233, G__20234, G__20235, G__20236, G__20237) : self__.dispatch_fn.call(null, G__20231, G__20232, G__20233, G__20234, G__20235, G__20236, G__20237);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__20238 = a;
    var G__20239 = b;
    var G__20240 = c;
    var G__20241 = d;
    var G__20242 = e;
    var G__20243 = f;
    var G__20244 = g;
    return target_fn.cljs$core$IFn$_invoke$arity$7 ? target_fn.cljs$core$IFn$_invoke$arity$7(G__20238, G__20239, G__20240, G__20241, G__20242, G__20243, G__20244) : target_fn.call(null, G__20238, G__20239, G__20240, G__20241, G__20242, G__20243, G__20244);
  };
  var G__21029__9 = function(self__, a, b, c, d, e, f, g, h) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__20245 = a;
      var G__20246 = b;
      var G__20247 = c;
      var G__20248 = d;
      var G__20249 = e;
      var G__20250 = f;
      var G__20251 = g;
      var G__20252 = h;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$8 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$8(G__20245, G__20246, G__20247, G__20248, G__20249, G__20250, G__20251, G__20252) : self__.dispatch_fn.call(null, G__20245, G__20246, G__20247, G__20248, G__20249, G__20250, G__20251, G__20252);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__20253 = a;
    var G__20254 = b;
    var G__20255 = c;
    var G__20256 = d;
    var G__20257 = e;
    var G__20258 = f;
    var G__20259 = g;
    var G__20260 = h;
    return target_fn.cljs$core$IFn$_invoke$arity$8 ? target_fn.cljs$core$IFn$_invoke$arity$8(G__20253, G__20254, G__20255, G__20256, G__20257, G__20258, G__20259, G__20260) : target_fn.call(null, G__20253, G__20254, G__20255, G__20256, G__20257, G__20258, G__20259, G__20260);
  };
  var G__21029__10 = function(self__, a, b, c, d, e, f, g, h, i) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__20261 = a;
      var G__20262 = b;
      var G__20263 = c;
      var G__20264 = d;
      var G__20265 = e;
      var G__20266 = f;
      var G__20267 = g;
      var G__20268 = h;
      var G__20269 = i;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$9 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$9(G__20261, G__20262, G__20263, G__20264, G__20265, G__20266, G__20267, G__20268, G__20269) : self__.dispatch_fn.call(null, G__20261, G__20262, G__20263, G__20264, G__20265, G__20266, G__20267, G__20268, G__20269);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__20270 = a;
    var G__20271 = b;
    var G__20272 = c;
    var G__20273 = d;
    var G__20274 = e;
    var G__20275 = f;
    var G__20276 = g;
    var G__20277 = h;
    var G__20278 = i;
    return target_fn.cljs$core$IFn$_invoke$arity$9 ? target_fn.cljs$core$IFn$_invoke$arity$9(G__20270, G__20271, G__20272, G__20273, G__20274, G__20275, G__20276, G__20277, G__20278) : target_fn.call(null, G__20270, G__20271, G__20272, G__20273, G__20274, G__20275, G__20276, G__20277, G__20278);
  };
  var G__21029__11 = function(self__, a, b, c, d, e, f, g, h, i, j) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__20279 = a;
      var G__20280 = b;
      var G__20281 = c;
      var G__20282 = d;
      var G__20283 = e;
      var G__20284 = f;
      var G__20285 = g;
      var G__20286 = h;
      var G__20287 = i;
      var G__20288 = j;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$10 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$10(G__20279, G__20280, G__20281, G__20282, G__20283, G__20284, G__20285, G__20286, G__20287, G__20288) : self__.dispatch_fn.call(null, G__20279, G__20280, G__20281, G__20282, G__20283, G__20284, G__20285, G__20286, G__20287, G__20288);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__20289 = a;
    var G__20290 = b;
    var G__20291 = c;
    var G__20292 = d;
    var G__20293 = e;
    var G__20294 = f;
    var G__20295 = g;
    var G__20296 = h;
    var G__20297 = i;
    var G__20298 = j;
    return target_fn.cljs$core$IFn$_invoke$arity$10 ? target_fn.cljs$core$IFn$_invoke$arity$10(G__20289, G__20290, G__20291, G__20292, G__20293, G__20294, G__20295, G__20296, G__20297, G__20298) : target_fn.call(null, G__20289, G__20290, G__20291, G__20292, G__20293, G__20294, G__20295, G__20296, G__20297, G__20298);
  };
  var G__21029__12 = function(self__, a, b, c, d, e, f, g, h, i, j, k) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__20299 = a;
      var G__20300 = b;
      var G__20301 = c;
      var G__20302 = d;
      var G__20303 = e;
      var G__20304 = f;
      var G__20305 = g;
      var G__20306 = h;
      var G__20307 = i;
      var G__20308 = j;
      var G__20309 = k;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$11 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$11(G__20299, G__20300, G__20301, G__20302, G__20303, G__20304, G__20305, G__20306, G__20307, G__20308, G__20309) : self__.dispatch_fn.call(null, G__20299, G__20300, G__20301, G__20302, G__20303, G__20304, G__20305, G__20306, G__20307, G__20308, G__20309);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__20310 = a;
    var G__20311 = b;
    var G__20312 = c;
    var G__20313 = d;
    var G__20314 = e;
    var G__20315 = f;
    var G__20316 = g;
    var G__20317 = h;
    var G__20318 = i;
    var G__20319 = j;
    var G__20320 = k;
    return target_fn.cljs$core$IFn$_invoke$arity$11 ? target_fn.cljs$core$IFn$_invoke$arity$11(G__20310, G__20311, G__20312, G__20313, G__20314, G__20315, G__20316, G__20317, G__20318, G__20319, G__20320) : target_fn.call(null, G__20310, G__20311, G__20312, G__20313, G__20314, G__20315, G__20316, G__20317, G__20318, G__20319, G__20320);
  };
  var G__21029__13 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__20321 = a;
      var G__20322 = b;
      var G__20323 = c;
      var G__20324 = d;
      var G__20325 = e;
      var G__20326 = f;
      var G__20327 = g;
      var G__20328 = h;
      var G__20329 = i;
      var G__20330 = j;
      var G__20331 = k;
      var G__20332 = l;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$12 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$12(G__20321, G__20322, G__20323, G__20324, G__20325, G__20326, G__20327, G__20328, G__20329, G__20330, G__20331, G__20332) : self__.dispatch_fn.call(null, G__20321, G__20322, G__20323, G__20324, G__20325, G__20326, G__20327, G__20328, G__20329, G__20330, G__20331, G__20332);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__20333 = a;
    var G__20334 = b;
    var G__20335 = c;
    var G__20336 = d;
    var G__20337 = e;
    var G__20338 = f;
    var G__20339 = g;
    var G__20340 = h;
    var G__20341 = i;
    var G__20342 = j;
    var G__20343 = k;
    var G__20344 = l;
    return target_fn.cljs$core$IFn$_invoke$arity$12 ? target_fn.cljs$core$IFn$_invoke$arity$12(G__20333, G__20334, G__20335, G__20336, G__20337, G__20338, G__20339, G__20340, G__20341, G__20342, G__20343, G__20344) : target_fn.call(null, G__20333, G__20334, G__20335, G__20336, G__20337, G__20338, G__20339, G__20340, G__20341, G__20342, G__20343, G__20344);
  };
  var G__21029__14 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__20345 = a;
      var G__20346 = b;
      var G__20347 = c;
      var G__20348 = d;
      var G__20349 = e;
      var G__20350 = f;
      var G__20351 = g;
      var G__20352 = h;
      var G__20353 = i;
      var G__20354 = j;
      var G__20355 = k;
      var G__20356 = l;
      var G__20357 = m;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$13 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$13(G__20345, G__20346, G__20347, G__20348, G__20349, G__20350, G__20351, G__20352, G__20353, G__20354, G__20355, G__20356, G__20357) : self__.dispatch_fn.call(null, G__20345, G__20346, G__20347, G__20348, G__20349, G__20350, G__20351, G__20352, G__20353, G__20354, G__20355, G__20356, G__20357);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__20358 = a;
    var G__20359 = b;
    var G__20360 = c;
    var G__20361 = d;
    var G__20362 = e;
    var G__20363 = f;
    var G__20364 = g;
    var G__20365 = h;
    var G__20366 = i;
    var G__20367 = j;
    var G__20368 = k;
    var G__20369 = l;
    var G__20370 = m;
    return target_fn.cljs$core$IFn$_invoke$arity$13 ? target_fn.cljs$core$IFn$_invoke$arity$13(G__20358, G__20359, G__20360, G__20361, G__20362, G__20363, G__20364, G__20365, G__20366, G__20367, G__20368, G__20369, G__20370) : target_fn.call(null, G__20358, G__20359, G__20360, G__20361, G__20362, G__20363, G__20364, G__20365, G__20366, G__20367, G__20368, G__20369, G__20370);
  };
  var G__21029__15 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__20371 = a;
      var G__20372 = b;
      var G__20373 = c;
      var G__20374 = d;
      var G__20375 = e;
      var G__20376 = f;
      var G__20377 = g;
      var G__20378 = h;
      var G__20379 = i;
      var G__20380 = j;
      var G__20381 = k;
      var G__20382 = l;
      var G__20383 = m;
      var G__20384 = n;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$14 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$14(G__20371, G__20372, G__20373, G__20374, G__20375, G__20376, G__20377, G__20378, G__20379, G__20380, G__20381, G__20382, G__20383, G__20384) : self__.dispatch_fn.call(null, G__20371, G__20372, G__20373, G__20374, G__20375, G__20376, G__20377, G__20378, G__20379, G__20380, G__20381, G__20382, G__20383, G__20384);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__20385 = a;
    var G__20386 = b;
    var G__20387 = c;
    var G__20388 = d;
    var G__20389 = e;
    var G__20390 = f;
    var G__20391 = g;
    var G__20392 = h;
    var G__20393 = i;
    var G__20394 = j;
    var G__20395 = k;
    var G__20396 = l;
    var G__20397 = m;
    var G__20398 = n;
    return target_fn.cljs$core$IFn$_invoke$arity$14 ? target_fn.cljs$core$IFn$_invoke$arity$14(G__20385, G__20386, G__20387, G__20388, G__20389, G__20390, G__20391, G__20392, G__20393, G__20394, G__20395, G__20396, G__20397, G__20398) : target_fn.call(null, G__20385, G__20386, G__20387, G__20388, G__20389, G__20390, G__20391, G__20392, G__20393, G__20394, G__20395, G__20396, G__20397, G__20398);
  };
  var G__21029__16 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__20399 = a;
      var G__20400 = b;
      var G__20401 = c;
      var G__20402 = d;
      var G__20403 = e;
      var G__20404 = f;
      var G__20405 = g;
      var G__20406 = h;
      var G__20407 = i;
      var G__20408 = j;
      var G__20409 = k;
      var G__20410 = l;
      var G__20411 = m;
      var G__20412 = n;
      var G__20413 = o;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$15 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$15(G__20399, G__20400, G__20401, G__20402, G__20403, G__20404, G__20405, G__20406, G__20407, G__20408, G__20409, G__20410, G__20411, G__20412, G__20413) : self__.dispatch_fn.call(null, G__20399, G__20400, G__20401, G__20402, G__20403, G__20404, G__20405, G__20406, G__20407, G__20408, G__20409, G__20410, G__20411, G__20412, G__20413);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__20414 = a;
    var G__20415 = b;
    var G__20416 = c;
    var G__20417 = d;
    var G__20418 = e;
    var G__20419 = f;
    var G__20420 = g;
    var G__20421 = h;
    var G__20422 = i;
    var G__20423 = j;
    var G__20424 = k;
    var G__20425 = l;
    var G__20426 = m;
    var G__20427 = n;
    var G__20428 = o;
    return target_fn.cljs$core$IFn$_invoke$arity$15 ? target_fn.cljs$core$IFn$_invoke$arity$15(G__20414, G__20415, G__20416, G__20417, G__20418, G__20419, G__20420, G__20421, G__20422, G__20423, G__20424, G__20425, G__20426, G__20427, G__20428) : target_fn.call(null, G__20414, G__20415, G__20416, G__20417, G__20418, G__20419, G__20420, G__20421, G__20422, G__20423, G__20424, G__20425, G__20426, G__20427, G__20428);
  };
  var G__21029__17 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__20429 = a;
      var G__20430 = b;
      var G__20431 = c;
      var G__20432 = d;
      var G__20433 = e;
      var G__20434 = f;
      var G__20435 = g;
      var G__20436 = h;
      var G__20437 = i;
      var G__20438 = j;
      var G__20439 = k;
      var G__20440 = l;
      var G__20441 = m;
      var G__20442 = n;
      var G__20443 = o;
      var G__20444 = p;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$16 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$16(G__20429, G__20430, G__20431, G__20432, G__20433, G__20434, G__20435, G__20436, G__20437, G__20438, G__20439, G__20440, G__20441, G__20442, G__20443, G__20444) : self__.dispatch_fn.call(null, G__20429, G__20430, G__20431, G__20432, G__20433, G__20434, G__20435, G__20436, G__20437, G__20438, G__20439, G__20440, G__20441, G__20442, G__20443, G__20444);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__20445 = a;
    var G__20446 = b;
    var G__20447 = c;
    var G__20448 = d;
    var G__20449 = e;
    var G__20450 = f;
    var G__20451 = g;
    var G__20452 = h;
    var G__20453 = i;
    var G__20454 = j;
    var G__20455 = k;
    var G__20456 = l;
    var G__20457 = m;
    var G__20458 = n;
    var G__20459 = o;
    var G__20460 = p;
    return target_fn.cljs$core$IFn$_invoke$arity$16 ? target_fn.cljs$core$IFn$_invoke$arity$16(G__20445, G__20446, G__20447, G__20448, G__20449, G__20450, G__20451, G__20452, G__20453, G__20454, G__20455, G__20456, G__20457, G__20458, G__20459, G__20460) : target_fn.call(null, G__20445, G__20446, G__20447, G__20448, G__20449, G__20450, G__20451, G__20452, G__20453, G__20454, G__20455, G__20456, G__20457, G__20458, G__20459, G__20460);
  };
  var G__21029__18 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__20461 = a;
      var G__20462 = b;
      var G__20463 = c;
      var G__20464 = d;
      var G__20465 = e;
      var G__20466 = f;
      var G__20467 = g;
      var G__20468 = h;
      var G__20469 = i;
      var G__20470 = j;
      var G__20471 = k;
      var G__20472 = l;
      var G__20473 = m;
      var G__20474 = n;
      var G__20475 = o;
      var G__20476 = p;
      var G__20477 = q;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$17 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$17(G__20461, G__20462, G__20463, G__20464, G__20465, G__20466, G__20467, G__20468, G__20469, G__20470, G__20471, G__20472, G__20473, G__20474, G__20475, G__20476, G__20477) : self__.dispatch_fn.call(null, G__20461, G__20462, G__20463, G__20464, G__20465, G__20466, G__20467, G__20468, G__20469, G__20470, G__20471, G__20472, G__20473, G__20474, G__20475, G__20476, G__20477);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__20478 = a;
    var G__20479 = b;
    var G__20480 = c;
    var G__20481 = d;
    var G__20482 = e;
    var G__20483 = f;
    var G__20484 = g;
    var G__20485 = h;
    var G__20486 = i;
    var G__20487 = j;
    var G__20488 = k;
    var G__20489 = l;
    var G__20490 = m;
    var G__20491 = n;
    var G__20492 = o;
    var G__20493 = p;
    var G__20494 = q;
    return target_fn.cljs$core$IFn$_invoke$arity$17 ? target_fn.cljs$core$IFn$_invoke$arity$17(G__20478, G__20479, G__20480, G__20481, G__20482, G__20483, G__20484, G__20485, G__20486, G__20487, G__20488, G__20489, G__20490, G__20491, G__20492, G__20493, G__20494) : target_fn.call(null, G__20478, G__20479, G__20480, G__20481, G__20482, G__20483, G__20484, G__20485, G__20486, G__20487, G__20488, G__20489, G__20490, G__20491, G__20492, G__20493, G__20494);
  };
  var G__21029__19 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__20495 = a;
      var G__20496 = b;
      var G__20497 = c;
      var G__20498 = d;
      var G__20499 = e;
      var G__20500 = f;
      var G__20501 = g;
      var G__20502 = h;
      var G__20503 = i;
      var G__20504 = j;
      var G__20505 = k;
      var G__20506 = l;
      var G__20507 = m;
      var G__20508 = n;
      var G__20509 = o;
      var G__20510 = p;
      var G__20511 = q;
      var G__20512 = r;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$18 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$18(G__20495, G__20496, G__20497, G__20498, G__20499, G__20500, G__20501, G__20502, G__20503, G__20504, G__20505, G__20506, G__20507, G__20508, G__20509, G__20510, G__20511, G__20512) : self__.dispatch_fn.call(null, G__20495, G__20496, G__20497, G__20498, G__20499, G__20500, G__20501, G__20502, G__20503, G__20504, G__20505, G__20506, G__20507, G__20508, G__20509, G__20510, G__20511, G__20512);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__20513 = a;
    var G__20514 = b;
    var G__20515 = c;
    var G__20516 = d;
    var G__20517 = e;
    var G__20518 = f;
    var G__20519 = g;
    var G__20520 = h;
    var G__20521 = i;
    var G__20522 = j;
    var G__20523 = k;
    var G__20524 = l;
    var G__20525 = m;
    var G__20526 = n;
    var G__20527 = o;
    var G__20528 = p;
    var G__20529 = q;
    var G__20530 = r;
    return target_fn.cljs$core$IFn$_invoke$arity$18 ? target_fn.cljs$core$IFn$_invoke$arity$18(G__20513, G__20514, G__20515, G__20516, G__20517, G__20518, G__20519, G__20520, G__20521, G__20522, G__20523, G__20524, G__20525, G__20526, G__20527, G__20528, G__20529, G__20530) : target_fn.call(null, G__20513, G__20514, G__20515, G__20516, G__20517, G__20518, G__20519, G__20520, G__20521, G__20522, G__20523, G__20524, G__20525, G__20526, G__20527, G__20528, G__20529, G__20530);
  };
  var G__21029__20 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__20531 = a;
      var G__20532 = b;
      var G__20533 = c;
      var G__20534 = d;
      var G__20535 = e;
      var G__20536 = f;
      var G__20537 = g;
      var G__20538 = h;
      var G__20539 = i;
      var G__20540 = j;
      var G__20541 = k;
      var G__20542 = l;
      var G__20543 = m;
      var G__20544 = n;
      var G__20545 = o;
      var G__20546 = p;
      var G__20547 = q;
      var G__20548 = r;
      var G__20549 = s;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$19 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$19(G__20531, G__20532, G__20533, G__20534, G__20535, G__20536, G__20537, G__20538, G__20539, G__20540, G__20541, G__20542, G__20543, G__20544, G__20545, G__20546, G__20547, G__20548, G__20549) : self__.dispatch_fn.call(null, G__20531, G__20532, G__20533, G__20534, G__20535, G__20536, G__20537, G__20538, G__20539, G__20540, G__20541, G__20542, G__20543, G__20544, G__20545, G__20546, G__20547, 
      G__20548, G__20549);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__20550 = a;
    var G__20551 = b;
    var G__20552 = c;
    var G__20553 = d;
    var G__20554 = e;
    var G__20555 = f;
    var G__20556 = g;
    var G__20557 = h;
    var G__20558 = i;
    var G__20559 = j;
    var G__20560 = k;
    var G__20561 = l;
    var G__20562 = m;
    var G__20563 = n;
    var G__20564 = o;
    var G__20565 = p;
    var G__20566 = q;
    var G__20567 = r;
    var G__20568 = s;
    return target_fn.cljs$core$IFn$_invoke$arity$19 ? target_fn.cljs$core$IFn$_invoke$arity$19(G__20550, G__20551, G__20552, G__20553, G__20554, G__20555, G__20556, G__20557, G__20558, G__20559, G__20560, G__20561, G__20562, G__20563, G__20564, G__20565, G__20566, G__20567, G__20568) : target_fn.call(null, G__20550, G__20551, G__20552, G__20553, G__20554, G__20555, G__20556, G__20557, G__20558, G__20559, G__20560, G__20561, G__20562, G__20563, G__20564, G__20565, G__20566, G__20567, G__20568);
  };
  var G__21029__21 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__20569 = a;
      var G__20570 = b;
      var G__20571 = c;
      var G__20572 = d;
      var G__20573 = e;
      var G__20574 = f;
      var G__20575 = g;
      var G__20576 = h;
      var G__20577 = i;
      var G__20578 = j;
      var G__20579 = k;
      var G__20580 = l;
      var G__20581 = m;
      var G__20582 = n;
      var G__20583 = o;
      var G__20584 = p;
      var G__20585 = q;
      var G__20586 = r;
      var G__20587 = s;
      var G__20588 = t;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$20 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$20(G__20569, G__20570, G__20571, G__20572, G__20573, G__20574, G__20575, G__20576, G__20577, G__20578, G__20579, G__20580, G__20581, G__20582, G__20583, G__20584, G__20585, G__20586, G__20587, G__20588) : self__.dispatch_fn.call(null, G__20569, G__20570, G__20571, G__20572, G__20573, G__20574, G__20575, G__20576, G__20577, G__20578, G__20579, G__20580, G__20581, G__20582, G__20583, G__20584, 
      G__20585, G__20586, G__20587, G__20588);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__20589 = a;
    var G__20590 = b;
    var G__20591 = c;
    var G__20592 = d;
    var G__20593 = e;
    var G__20594 = f;
    var G__20595 = g;
    var G__20596 = h;
    var G__20597 = i;
    var G__20598 = j;
    var G__20599 = k;
    var G__20600 = l;
    var G__20601 = m;
    var G__20602 = n;
    var G__20603 = o;
    var G__20604 = p;
    var G__20605 = q;
    var G__20606 = r;
    var G__20607 = s;
    var G__20608 = t;
    return target_fn.cljs$core$IFn$_invoke$arity$20 ? target_fn.cljs$core$IFn$_invoke$arity$20(G__20589, G__20590, G__20591, G__20592, G__20593, G__20594, G__20595, G__20596, G__20597, G__20598, G__20599, G__20600, G__20601, G__20602, G__20603, G__20604, G__20605, G__20606, G__20607, G__20608) : target_fn.call(null, G__20589, G__20590, G__20591, G__20592, G__20593, G__20594, G__20595, G__20596, G__20597, G__20598, G__20599, G__20600, G__20601, G__20602, G__20603, G__20604, G__20605, G__20606, G__20607, 
    G__20608);
  };
  var G__21029__22 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(self__.dispatch_fn, a, b, c, d, cljs.core.array_seq([e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest], 0));
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(target_fn, a, b, c, d, cljs.core.array_seq([e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest], 0));
  };
  G__21029 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    switch(arguments.length) {
      case 1:
        return G__21029__1.call(this, self__);
      case 2:
        return G__21029__2.call(this, self__, a);
      case 3:
        return G__21029__3.call(this, self__, a, b);
      case 4:
        return G__21029__4.call(this, self__, a, b, c);
      case 5:
        return G__21029__5.call(this, self__, a, b, c, d);
      case 6:
        return G__21029__6.call(this, self__, a, b, c, d, e);
      case 7:
        return G__21029__7.call(this, self__, a, b, c, d, e, f);
      case 8:
        return G__21029__8.call(this, self__, a, b, c, d, e, f, g);
      case 9:
        return G__21029__9.call(this, self__, a, b, c, d, e, f, g, h);
      case 10:
        return G__21029__10.call(this, self__, a, b, c, d, e, f, g, h, i);
      case 11:
        return G__21029__11.call(this, self__, a, b, c, d, e, f, g, h, i, j);
      case 12:
        return G__21029__12.call(this, self__, a, b, c, d, e, f, g, h, i, j, k);
      case 13:
        return G__21029__13.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l);
      case 14:
        return G__21029__14.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m);
      case 15:
        return G__21029__15.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
      case 16:
        return G__21029__16.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
      case 17:
        return G__21029__17.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
      case 18:
        return G__21029__18.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
      case 19:
        return G__21029__19.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
      case 20:
        return G__21029__20.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
      case 21:
        return G__21029__21.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
      case 22:
        return G__21029__22.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__21029.cljs$core$IFn$_invoke$arity$1 = G__21029__1;
  G__21029.cljs$core$IFn$_invoke$arity$2 = G__21029__2;
  G__21029.cljs$core$IFn$_invoke$arity$3 = G__21029__3;
  G__21029.cljs$core$IFn$_invoke$arity$4 = G__21029__4;
  G__21029.cljs$core$IFn$_invoke$arity$5 = G__21029__5;
  G__21029.cljs$core$IFn$_invoke$arity$6 = G__21029__6;
  G__21029.cljs$core$IFn$_invoke$arity$7 = G__21029__7;
  G__21029.cljs$core$IFn$_invoke$arity$8 = G__21029__8;
  G__21029.cljs$core$IFn$_invoke$arity$9 = G__21029__9;
  G__21029.cljs$core$IFn$_invoke$arity$10 = G__21029__10;
  G__21029.cljs$core$IFn$_invoke$arity$11 = G__21029__11;
  G__21029.cljs$core$IFn$_invoke$arity$12 = G__21029__12;
  G__21029.cljs$core$IFn$_invoke$arity$13 = G__21029__13;
  G__21029.cljs$core$IFn$_invoke$arity$14 = G__21029__14;
  G__21029.cljs$core$IFn$_invoke$arity$15 = G__21029__15;
  G__21029.cljs$core$IFn$_invoke$arity$16 = G__21029__16;
  G__21029.cljs$core$IFn$_invoke$arity$17 = G__21029__17;
  G__21029.cljs$core$IFn$_invoke$arity$18 = G__21029__18;
  G__21029.cljs$core$IFn$_invoke$arity$19 = G__21029__19;
  G__21029.cljs$core$IFn$_invoke$arity$20 = G__21029__20;
  G__21029.cljs$core$IFn$_invoke$arity$21 = G__21029__21;
  G__21029.cljs$core$IFn$_invoke$arity$22 = G__21029__22;
  return G__21029;
}();
cljs.core.MultiFn.prototype.apply = function(self__, args20181) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args20181)));
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$0 = function() {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$0 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$0() : self__.dispatch_fn.call(null);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$0 ? target_fn.cljs$core$IFn$_invoke$arity$0() : target_fn.call(null);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$1 = function(a) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__20609 = a;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$1 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$1(G__20609) : self__.dispatch_fn.call(null, G__20609);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__20610 = a;
  return target_fn.cljs$core$IFn$_invoke$arity$1 ? target_fn.cljs$core$IFn$_invoke$arity$1(G__20610) : target_fn.call(null, G__20610);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$2 = function(a, b) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__20611 = a;
    var G__20612 = b;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$2 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$2(G__20611, G__20612) : self__.dispatch_fn.call(null, G__20611, G__20612);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__20613 = a;
  var G__20614 = b;
  return target_fn.cljs$core$IFn$_invoke$arity$2 ? target_fn.cljs$core$IFn$_invoke$arity$2(G__20613, G__20614) : target_fn.call(null, G__20613, G__20614);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$3 = function(a, b, c) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__20615 = a;
    var G__20616 = b;
    var G__20617 = c;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$3 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$3(G__20615, G__20616, G__20617) : self__.dispatch_fn.call(null, G__20615, G__20616, G__20617);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__20618 = a;
  var G__20619 = b;
  var G__20620 = c;
  return target_fn.cljs$core$IFn$_invoke$arity$3 ? target_fn.cljs$core$IFn$_invoke$arity$3(G__20618, G__20619, G__20620) : target_fn.call(null, G__20618, G__20619, G__20620);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$4 = function(a, b, c, d) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__20621 = a;
    var G__20622 = b;
    var G__20623 = c;
    var G__20624 = d;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$4 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$4(G__20621, G__20622, G__20623, G__20624) : self__.dispatch_fn.call(null, G__20621, G__20622, G__20623, G__20624);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__20625 = a;
  var G__20626 = b;
  var G__20627 = c;
  var G__20628 = d;
  return target_fn.cljs$core$IFn$_invoke$arity$4 ? target_fn.cljs$core$IFn$_invoke$arity$4(G__20625, G__20626, G__20627, G__20628) : target_fn.call(null, G__20625, G__20626, G__20627, G__20628);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$5 = function(a, b, c, d, e) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__20629 = a;
    var G__20630 = b;
    var G__20631 = c;
    var G__20632 = d;
    var G__20633 = e;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$5 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$5(G__20629, G__20630, G__20631, G__20632, G__20633) : self__.dispatch_fn.call(null, G__20629, G__20630, G__20631, G__20632, G__20633);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__20634 = a;
  var G__20635 = b;
  var G__20636 = c;
  var G__20637 = d;
  var G__20638 = e;
  return target_fn.cljs$core$IFn$_invoke$arity$5 ? target_fn.cljs$core$IFn$_invoke$arity$5(G__20634, G__20635, G__20636, G__20637, G__20638) : target_fn.call(null, G__20634, G__20635, G__20636, G__20637, G__20638);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$6 = function(a, b, c, d, e, f) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__20639 = a;
    var G__20640 = b;
    var G__20641 = c;
    var G__20642 = d;
    var G__20643 = e;
    var G__20644 = f;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$6 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$6(G__20639, G__20640, G__20641, G__20642, G__20643, G__20644) : self__.dispatch_fn.call(null, G__20639, G__20640, G__20641, G__20642, G__20643, G__20644);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__20645 = a;
  var G__20646 = b;
  var G__20647 = c;
  var G__20648 = d;
  var G__20649 = e;
  var G__20650 = f;
  return target_fn.cljs$core$IFn$_invoke$arity$6 ? target_fn.cljs$core$IFn$_invoke$arity$6(G__20645, G__20646, G__20647, G__20648, G__20649, G__20650) : target_fn.call(null, G__20645, G__20646, G__20647, G__20648, G__20649, G__20650);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$7 = function(a, b, c, d, e, f, g) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__20651 = a;
    var G__20652 = b;
    var G__20653 = c;
    var G__20654 = d;
    var G__20655 = e;
    var G__20656 = f;
    var G__20657 = g;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$7 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$7(G__20651, G__20652, G__20653, G__20654, G__20655, G__20656, G__20657) : self__.dispatch_fn.call(null, G__20651, G__20652, G__20653, G__20654, G__20655, G__20656, G__20657);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__20658 = a;
  var G__20659 = b;
  var G__20660 = c;
  var G__20661 = d;
  var G__20662 = e;
  var G__20663 = f;
  var G__20664 = g;
  return target_fn.cljs$core$IFn$_invoke$arity$7 ? target_fn.cljs$core$IFn$_invoke$arity$7(G__20658, G__20659, G__20660, G__20661, G__20662, G__20663, G__20664) : target_fn.call(null, G__20658, G__20659, G__20660, G__20661, G__20662, G__20663, G__20664);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$8 = function(a, b, c, d, e, f, g, h) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__20665 = a;
    var G__20666 = b;
    var G__20667 = c;
    var G__20668 = d;
    var G__20669 = e;
    var G__20670 = f;
    var G__20671 = g;
    var G__20672 = h;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$8 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$8(G__20665, G__20666, G__20667, G__20668, G__20669, G__20670, G__20671, G__20672) : self__.dispatch_fn.call(null, G__20665, G__20666, G__20667, G__20668, G__20669, G__20670, G__20671, G__20672);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__20673 = a;
  var G__20674 = b;
  var G__20675 = c;
  var G__20676 = d;
  var G__20677 = e;
  var G__20678 = f;
  var G__20679 = g;
  var G__20680 = h;
  return target_fn.cljs$core$IFn$_invoke$arity$8 ? target_fn.cljs$core$IFn$_invoke$arity$8(G__20673, G__20674, G__20675, G__20676, G__20677, G__20678, G__20679, G__20680) : target_fn.call(null, G__20673, G__20674, G__20675, G__20676, G__20677, G__20678, G__20679, G__20680);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$9 = function(a, b, c, d, e, f, g, h, i) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__20681 = a;
    var G__20682 = b;
    var G__20683 = c;
    var G__20684 = d;
    var G__20685 = e;
    var G__20686 = f;
    var G__20687 = g;
    var G__20688 = h;
    var G__20689 = i;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$9 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$9(G__20681, G__20682, G__20683, G__20684, G__20685, G__20686, G__20687, G__20688, G__20689) : self__.dispatch_fn.call(null, G__20681, G__20682, G__20683, G__20684, G__20685, G__20686, G__20687, G__20688, G__20689);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__20690 = a;
  var G__20691 = b;
  var G__20692 = c;
  var G__20693 = d;
  var G__20694 = e;
  var G__20695 = f;
  var G__20696 = g;
  var G__20697 = h;
  var G__20698 = i;
  return target_fn.cljs$core$IFn$_invoke$arity$9 ? target_fn.cljs$core$IFn$_invoke$arity$9(G__20690, G__20691, G__20692, G__20693, G__20694, G__20695, G__20696, G__20697, G__20698) : target_fn.call(null, G__20690, G__20691, G__20692, G__20693, G__20694, G__20695, G__20696, G__20697, G__20698);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$10 = function(a, b, c, d, e, f, g, h, i, j) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__20699 = a;
    var G__20700 = b;
    var G__20701 = c;
    var G__20702 = d;
    var G__20703 = e;
    var G__20704 = f;
    var G__20705 = g;
    var G__20706 = h;
    var G__20707 = i;
    var G__20708 = j;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$10 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$10(G__20699, G__20700, G__20701, G__20702, G__20703, G__20704, G__20705, G__20706, G__20707, G__20708) : self__.dispatch_fn.call(null, G__20699, G__20700, G__20701, G__20702, G__20703, G__20704, G__20705, G__20706, G__20707, G__20708);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__20709 = a;
  var G__20710 = b;
  var G__20711 = c;
  var G__20712 = d;
  var G__20713 = e;
  var G__20714 = f;
  var G__20715 = g;
  var G__20716 = h;
  var G__20717 = i;
  var G__20718 = j;
  return target_fn.cljs$core$IFn$_invoke$arity$10 ? target_fn.cljs$core$IFn$_invoke$arity$10(G__20709, G__20710, G__20711, G__20712, G__20713, G__20714, G__20715, G__20716, G__20717, G__20718) : target_fn.call(null, G__20709, G__20710, G__20711, G__20712, G__20713, G__20714, G__20715, G__20716, G__20717, G__20718);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$11 = function(a, b, c, d, e, f, g, h, i, j, k) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__20719 = a;
    var G__20720 = b;
    var G__20721 = c;
    var G__20722 = d;
    var G__20723 = e;
    var G__20724 = f;
    var G__20725 = g;
    var G__20726 = h;
    var G__20727 = i;
    var G__20728 = j;
    var G__20729 = k;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$11 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$11(G__20719, G__20720, G__20721, G__20722, G__20723, G__20724, G__20725, G__20726, G__20727, G__20728, G__20729) : self__.dispatch_fn.call(null, G__20719, G__20720, G__20721, G__20722, G__20723, G__20724, G__20725, G__20726, G__20727, G__20728, G__20729);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__20730 = a;
  var G__20731 = b;
  var G__20732 = c;
  var G__20733 = d;
  var G__20734 = e;
  var G__20735 = f;
  var G__20736 = g;
  var G__20737 = h;
  var G__20738 = i;
  var G__20739 = j;
  var G__20740 = k;
  return target_fn.cljs$core$IFn$_invoke$arity$11 ? target_fn.cljs$core$IFn$_invoke$arity$11(G__20730, G__20731, G__20732, G__20733, G__20734, G__20735, G__20736, G__20737, G__20738, G__20739, G__20740) : target_fn.call(null, G__20730, G__20731, G__20732, G__20733, G__20734, G__20735, G__20736, G__20737, G__20738, G__20739, G__20740);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$12 = function(a, b, c, d, e, f, g, h, i, j, k, l) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__20741 = a;
    var G__20742 = b;
    var G__20743 = c;
    var G__20744 = d;
    var G__20745 = e;
    var G__20746 = f;
    var G__20747 = g;
    var G__20748 = h;
    var G__20749 = i;
    var G__20750 = j;
    var G__20751 = k;
    var G__20752 = l;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$12 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$12(G__20741, G__20742, G__20743, G__20744, G__20745, G__20746, G__20747, G__20748, G__20749, G__20750, G__20751, G__20752) : self__.dispatch_fn.call(null, G__20741, G__20742, G__20743, G__20744, G__20745, G__20746, G__20747, G__20748, G__20749, G__20750, G__20751, G__20752);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__20753 = a;
  var G__20754 = b;
  var G__20755 = c;
  var G__20756 = d;
  var G__20757 = e;
  var G__20758 = f;
  var G__20759 = g;
  var G__20760 = h;
  var G__20761 = i;
  var G__20762 = j;
  var G__20763 = k;
  var G__20764 = l;
  return target_fn.cljs$core$IFn$_invoke$arity$12 ? target_fn.cljs$core$IFn$_invoke$arity$12(G__20753, G__20754, G__20755, G__20756, G__20757, G__20758, G__20759, G__20760, G__20761, G__20762, G__20763, G__20764) : target_fn.call(null, G__20753, G__20754, G__20755, G__20756, G__20757, G__20758, G__20759, G__20760, G__20761, G__20762, G__20763, G__20764);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$13 = function(a, b, c, d, e, f, g, h, i, j, k, l, m) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__20765 = a;
    var G__20766 = b;
    var G__20767 = c;
    var G__20768 = d;
    var G__20769 = e;
    var G__20770 = f;
    var G__20771 = g;
    var G__20772 = h;
    var G__20773 = i;
    var G__20774 = j;
    var G__20775 = k;
    var G__20776 = l;
    var G__20777 = m;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$13 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$13(G__20765, G__20766, G__20767, G__20768, G__20769, G__20770, G__20771, G__20772, G__20773, G__20774, G__20775, G__20776, G__20777) : self__.dispatch_fn.call(null, G__20765, G__20766, G__20767, G__20768, G__20769, G__20770, G__20771, G__20772, G__20773, G__20774, G__20775, G__20776, G__20777);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__20778 = a;
  var G__20779 = b;
  var G__20780 = c;
  var G__20781 = d;
  var G__20782 = e;
  var G__20783 = f;
  var G__20784 = g;
  var G__20785 = h;
  var G__20786 = i;
  var G__20787 = j;
  var G__20788 = k;
  var G__20789 = l;
  var G__20790 = m;
  return target_fn.cljs$core$IFn$_invoke$arity$13 ? target_fn.cljs$core$IFn$_invoke$arity$13(G__20778, G__20779, G__20780, G__20781, G__20782, G__20783, G__20784, G__20785, G__20786, G__20787, G__20788, G__20789, G__20790) : target_fn.call(null, G__20778, G__20779, G__20780, G__20781, G__20782, G__20783, G__20784, G__20785, G__20786, G__20787, G__20788, G__20789, G__20790);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$14 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__20791 = a;
    var G__20792 = b;
    var G__20793 = c;
    var G__20794 = d;
    var G__20795 = e;
    var G__20796 = f;
    var G__20797 = g;
    var G__20798 = h;
    var G__20799 = i;
    var G__20800 = j;
    var G__20801 = k;
    var G__20802 = l;
    var G__20803 = m;
    var G__20804 = n;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$14 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$14(G__20791, G__20792, G__20793, G__20794, G__20795, G__20796, G__20797, G__20798, G__20799, G__20800, G__20801, G__20802, G__20803, G__20804) : self__.dispatch_fn.call(null, G__20791, G__20792, G__20793, G__20794, G__20795, G__20796, G__20797, G__20798, G__20799, G__20800, G__20801, G__20802, G__20803, G__20804);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__20805 = a;
  var G__20806 = b;
  var G__20807 = c;
  var G__20808 = d;
  var G__20809 = e;
  var G__20810 = f;
  var G__20811 = g;
  var G__20812 = h;
  var G__20813 = i;
  var G__20814 = j;
  var G__20815 = k;
  var G__20816 = l;
  var G__20817 = m;
  var G__20818 = n;
  return target_fn.cljs$core$IFn$_invoke$arity$14 ? target_fn.cljs$core$IFn$_invoke$arity$14(G__20805, G__20806, G__20807, G__20808, G__20809, G__20810, G__20811, G__20812, G__20813, G__20814, G__20815, G__20816, G__20817, G__20818) : target_fn.call(null, G__20805, G__20806, G__20807, G__20808, G__20809, G__20810, G__20811, G__20812, G__20813, G__20814, G__20815, G__20816, G__20817, G__20818);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$15 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__20819 = a;
    var G__20820 = b;
    var G__20821 = c;
    var G__20822 = d;
    var G__20823 = e;
    var G__20824 = f;
    var G__20825 = g;
    var G__20826 = h;
    var G__20827 = i;
    var G__20828 = j;
    var G__20829 = k;
    var G__20830 = l;
    var G__20831 = m;
    var G__20832 = n;
    var G__20833 = o;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$15 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$15(G__20819, G__20820, G__20821, G__20822, G__20823, G__20824, G__20825, G__20826, G__20827, G__20828, G__20829, G__20830, G__20831, G__20832, G__20833) : self__.dispatch_fn.call(null, G__20819, G__20820, G__20821, G__20822, G__20823, G__20824, G__20825, G__20826, G__20827, G__20828, G__20829, G__20830, G__20831, G__20832, G__20833);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__20834 = a;
  var G__20835 = b;
  var G__20836 = c;
  var G__20837 = d;
  var G__20838 = e;
  var G__20839 = f;
  var G__20840 = g;
  var G__20841 = h;
  var G__20842 = i;
  var G__20843 = j;
  var G__20844 = k;
  var G__20845 = l;
  var G__20846 = m;
  var G__20847 = n;
  var G__20848 = o;
  return target_fn.cljs$core$IFn$_invoke$arity$15 ? target_fn.cljs$core$IFn$_invoke$arity$15(G__20834, G__20835, G__20836, G__20837, G__20838, G__20839, G__20840, G__20841, G__20842, G__20843, G__20844, G__20845, G__20846, G__20847, G__20848) : target_fn.call(null, G__20834, G__20835, G__20836, G__20837, G__20838, G__20839, G__20840, G__20841, G__20842, G__20843, G__20844, G__20845, G__20846, G__20847, G__20848);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$16 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__20849 = a;
    var G__20850 = b;
    var G__20851 = c;
    var G__20852 = d;
    var G__20853 = e;
    var G__20854 = f;
    var G__20855 = g;
    var G__20856 = h;
    var G__20857 = i;
    var G__20858 = j;
    var G__20859 = k;
    var G__20860 = l;
    var G__20861 = m;
    var G__20862 = n;
    var G__20863 = o;
    var G__20864 = p;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$16 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$16(G__20849, G__20850, G__20851, G__20852, G__20853, G__20854, G__20855, G__20856, G__20857, G__20858, G__20859, G__20860, G__20861, G__20862, G__20863, G__20864) : self__.dispatch_fn.call(null, G__20849, G__20850, G__20851, G__20852, G__20853, G__20854, G__20855, G__20856, G__20857, G__20858, G__20859, G__20860, G__20861, G__20862, G__20863, G__20864);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__20865 = a;
  var G__20866 = b;
  var G__20867 = c;
  var G__20868 = d;
  var G__20869 = e;
  var G__20870 = f;
  var G__20871 = g;
  var G__20872 = h;
  var G__20873 = i;
  var G__20874 = j;
  var G__20875 = k;
  var G__20876 = l;
  var G__20877 = m;
  var G__20878 = n;
  var G__20879 = o;
  var G__20880 = p;
  return target_fn.cljs$core$IFn$_invoke$arity$16 ? target_fn.cljs$core$IFn$_invoke$arity$16(G__20865, G__20866, G__20867, G__20868, G__20869, G__20870, G__20871, G__20872, G__20873, G__20874, G__20875, G__20876, G__20877, G__20878, G__20879, G__20880) : target_fn.call(null, G__20865, G__20866, G__20867, G__20868, G__20869, G__20870, G__20871, G__20872, G__20873, G__20874, G__20875, G__20876, G__20877, G__20878, G__20879, G__20880);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$17 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__20881 = a;
    var G__20882 = b;
    var G__20883 = c;
    var G__20884 = d;
    var G__20885 = e;
    var G__20886 = f;
    var G__20887 = g;
    var G__20888 = h;
    var G__20889 = i;
    var G__20890 = j;
    var G__20891 = k;
    var G__20892 = l;
    var G__20893 = m;
    var G__20894 = n;
    var G__20895 = o;
    var G__20896 = p;
    var G__20897 = q;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$17 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$17(G__20881, G__20882, G__20883, G__20884, G__20885, G__20886, G__20887, G__20888, G__20889, G__20890, G__20891, G__20892, G__20893, G__20894, G__20895, G__20896, G__20897) : self__.dispatch_fn.call(null, G__20881, G__20882, G__20883, G__20884, G__20885, G__20886, G__20887, G__20888, G__20889, G__20890, G__20891, G__20892, G__20893, G__20894, G__20895, G__20896, G__20897);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__20898 = a;
  var G__20899 = b;
  var G__20900 = c;
  var G__20901 = d;
  var G__20902 = e;
  var G__20903 = f;
  var G__20904 = g;
  var G__20905 = h;
  var G__20906 = i;
  var G__20907 = j;
  var G__20908 = k;
  var G__20909 = l;
  var G__20910 = m;
  var G__20911 = n;
  var G__20912 = o;
  var G__20913 = p;
  var G__20914 = q;
  return target_fn.cljs$core$IFn$_invoke$arity$17 ? target_fn.cljs$core$IFn$_invoke$arity$17(G__20898, G__20899, G__20900, G__20901, G__20902, G__20903, G__20904, G__20905, G__20906, G__20907, G__20908, G__20909, G__20910, G__20911, G__20912, G__20913, G__20914) : target_fn.call(null, G__20898, G__20899, G__20900, G__20901, G__20902, G__20903, G__20904, G__20905, G__20906, G__20907, G__20908, G__20909, G__20910, G__20911, G__20912, G__20913, G__20914);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$18 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__20915 = a;
    var G__20916 = b;
    var G__20917 = c;
    var G__20918 = d;
    var G__20919 = e;
    var G__20920 = f;
    var G__20921 = g;
    var G__20922 = h;
    var G__20923 = i;
    var G__20924 = j;
    var G__20925 = k;
    var G__20926 = l;
    var G__20927 = m;
    var G__20928 = n;
    var G__20929 = o;
    var G__20930 = p;
    var G__20931 = q;
    var G__20932 = r;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$18 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$18(G__20915, G__20916, G__20917, G__20918, G__20919, G__20920, G__20921, G__20922, G__20923, G__20924, G__20925, G__20926, G__20927, G__20928, G__20929, G__20930, G__20931, G__20932) : self__.dispatch_fn.call(null, G__20915, G__20916, G__20917, G__20918, G__20919, G__20920, G__20921, G__20922, G__20923, G__20924, G__20925, G__20926, G__20927, G__20928, G__20929, G__20930, G__20931, G__20932);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__20933 = a;
  var G__20934 = b;
  var G__20935 = c;
  var G__20936 = d;
  var G__20937 = e;
  var G__20938 = f;
  var G__20939 = g;
  var G__20940 = h;
  var G__20941 = i;
  var G__20942 = j;
  var G__20943 = k;
  var G__20944 = l;
  var G__20945 = m;
  var G__20946 = n;
  var G__20947 = o;
  var G__20948 = p;
  var G__20949 = q;
  var G__20950 = r;
  return target_fn.cljs$core$IFn$_invoke$arity$18 ? target_fn.cljs$core$IFn$_invoke$arity$18(G__20933, G__20934, G__20935, G__20936, G__20937, G__20938, G__20939, G__20940, G__20941, G__20942, G__20943, G__20944, G__20945, G__20946, G__20947, G__20948, G__20949, G__20950) : target_fn.call(null, G__20933, G__20934, G__20935, G__20936, G__20937, G__20938, G__20939, G__20940, G__20941, G__20942, G__20943, G__20944, G__20945, G__20946, G__20947, G__20948, G__20949, G__20950);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$19 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__20951 = a;
    var G__20952 = b;
    var G__20953 = c;
    var G__20954 = d;
    var G__20955 = e;
    var G__20956 = f;
    var G__20957 = g;
    var G__20958 = h;
    var G__20959 = i;
    var G__20960 = j;
    var G__20961 = k;
    var G__20962 = l;
    var G__20963 = m;
    var G__20964 = n;
    var G__20965 = o;
    var G__20966 = p;
    var G__20967 = q;
    var G__20968 = r;
    var G__20969 = s;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$19 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$19(G__20951, G__20952, G__20953, G__20954, G__20955, G__20956, G__20957, G__20958, G__20959, G__20960, G__20961, G__20962, G__20963, G__20964, G__20965, G__20966, G__20967, G__20968, G__20969) : self__.dispatch_fn.call(null, G__20951, G__20952, G__20953, G__20954, G__20955, G__20956, G__20957, G__20958, G__20959, G__20960, G__20961, G__20962, G__20963, G__20964, G__20965, G__20966, G__20967, 
    G__20968, G__20969);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__20970 = a;
  var G__20971 = b;
  var G__20972 = c;
  var G__20973 = d;
  var G__20974 = e;
  var G__20975 = f;
  var G__20976 = g;
  var G__20977 = h;
  var G__20978 = i;
  var G__20979 = j;
  var G__20980 = k;
  var G__20981 = l;
  var G__20982 = m;
  var G__20983 = n;
  var G__20984 = o;
  var G__20985 = p;
  var G__20986 = q;
  var G__20987 = r;
  var G__20988 = s;
  return target_fn.cljs$core$IFn$_invoke$arity$19 ? target_fn.cljs$core$IFn$_invoke$arity$19(G__20970, G__20971, G__20972, G__20973, G__20974, G__20975, G__20976, G__20977, G__20978, G__20979, G__20980, G__20981, G__20982, G__20983, G__20984, G__20985, G__20986, G__20987, G__20988) : target_fn.call(null, G__20970, G__20971, G__20972, G__20973, G__20974, G__20975, G__20976, G__20977, G__20978, G__20979, G__20980, G__20981, G__20982, G__20983, G__20984, G__20985, G__20986, G__20987, G__20988);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$20 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__20989 = a;
    var G__20990 = b;
    var G__20991 = c;
    var G__20992 = d;
    var G__20993 = e;
    var G__20994 = f;
    var G__20995 = g;
    var G__20996 = h;
    var G__20997 = i;
    var G__20998 = j;
    var G__20999 = k;
    var G__21000 = l;
    var G__21001 = m;
    var G__21002 = n;
    var G__21003 = o;
    var G__21004 = p;
    var G__21005 = q;
    var G__21006 = r;
    var G__21007 = s;
    var G__21008 = t;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$20 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$20(G__20989, G__20990, G__20991, G__20992, G__20993, G__20994, G__20995, G__20996, G__20997, G__20998, G__20999, G__21000, G__21001, G__21002, G__21003, G__21004, G__21005, G__21006, G__21007, G__21008) : self__.dispatch_fn.call(null, G__20989, G__20990, G__20991, G__20992, G__20993, G__20994, G__20995, G__20996, G__20997, G__20998, G__20999, G__21000, G__21001, G__21002, G__21003, G__21004, 
    G__21005, G__21006, G__21007, G__21008);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__21009 = a;
  var G__21010 = b;
  var G__21011 = c;
  var G__21012 = d;
  var G__21013 = e;
  var G__21014 = f;
  var G__21015 = g;
  var G__21016 = h;
  var G__21017 = i;
  var G__21018 = j;
  var G__21019 = k;
  var G__21020 = l;
  var G__21021 = m;
  var G__21022 = n;
  var G__21023 = o;
  var G__21024 = p;
  var G__21025 = q;
  var G__21026 = r;
  var G__21027 = s;
  var G__21028 = t;
  return target_fn.cljs$core$IFn$_invoke$arity$20 ? target_fn.cljs$core$IFn$_invoke$arity$20(G__21009, G__21010, G__21011, G__21012, G__21013, G__21014, G__21015, G__21016, G__21017, G__21018, G__21019, G__21020, G__21021, G__21022, G__21023, G__21024, G__21025, G__21026, G__21027, G__21028) : target_fn.call(null, G__21009, G__21010, G__21011, G__21012, G__21013, G__21014, G__21015, G__21016, G__21017, G__21018, G__21019, G__21020, G__21021, G__21022, G__21023, G__21024, G__21025, G__21026, G__21027, 
  G__21028);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$21 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
  var self__ = this;
  var mf = this;
  var dispatch_val = cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(self__.dispatch_fn, a, b, c, d, cljs.core.array_seq([e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest], 0));
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(target_fn, a, b, c, d, cljs.core.array_seq([e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest], 0));
};
cljs.core.MultiFn.cljs$lang$type = true;
cljs.core.MultiFn.cljs$lang$ctorStr = "cljs.core/MultiFn";
cljs.core.MultiFn.cljs$lang$ctorPrWriter = function(this__4914__auto__, writer__4915__auto__, opt__4916__auto__) {
  return cljs.core._write(writer__4915__auto__, "cljs.core/MultiFn");
};
cljs.core.__GT_MultiFn = function cljs$core$__GT_MultiFn(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  return new cljs.core.MultiFn(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy);
};
cljs.core.remove_all_methods = function cljs$core$remove_all_methods(multifn) {
  return cljs.core._reset(multifn);
};
cljs.core.remove_method = function cljs$core$remove_method(multifn, dispatch_val) {
  return cljs.core._remove_method(multifn, dispatch_val);
};
cljs.core.prefer_method = function cljs$core$prefer_method(multifn, dispatch_val_x, dispatch_val_y) {
  return cljs.core._prefer_method(multifn, dispatch_val_x, dispatch_val_y);
};
cljs.core.methods$ = function cljs$core$methods(multifn) {
  return cljs.core._methods(multifn);
};
cljs.core.get_method = function cljs$core$get_method(multifn, dispatch_val) {
  return cljs.core._get_method(multifn, dispatch_val);
};
cljs.core.prefers = function cljs$core$prefers(multifn) {
  return cljs.core._prefers(multifn);
};
cljs.core.default_dispatch_val = function cljs$core$default_dispatch_val(multifn) {
  return cljs.core._default_dispatch_val(multifn);
};
cljs.core.dispatch_fn = function cljs$core$dispatch_fn(multifn) {
  return cljs.core._dispatch_fn(multifn);
};
cljs.core.UUID = function(uuid) {
  this.uuid = uuid;
  this.cljs$lang$protocol_mask$partition1$ = 2048;
  this.cljs$lang$protocol_mask$partition0$ = 2153775104;
};
cljs.core.UUID.prototype.cljs$core$IComparable$_compare$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  var G__21030 = self__.uuid;
  var G__21031 = other.uuid;
  return goog.array.defaultCompare(G__21030, G__21031);
};
cljs.core.UUID.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var G__21032 = cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([this$__$1], 0));
  return goog.string.hashCode(G__21032);
};
cljs.core.UUID.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(_, writer, ___$1) {
  var self__ = this;
  var ___$2 = this;
  return cljs.core._write(writer, [cljs.core.str('#uuid "'), cljs.core.str(self__.uuid), cljs.core.str('"')].join(""));
};
cljs.core.UUID.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  return other instanceof cljs.core.UUID && self__.uuid === other.uuid;
};
cljs.core.UUID.prototype.toString = function() {
  var self__ = this;
  var _ = this;
  return self__.uuid;
};
cljs.core.UUID.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.UUID.cljs$lang$type = true;
cljs.core.UUID.cljs$lang$ctorStr = "cljs.core/UUID";
cljs.core.UUID.cljs$lang$ctorPrWriter = function(this__4914__auto__, writer__4915__auto__, opt__4916__auto__) {
  return cljs.core._write(writer__4915__auto__, "cljs.core/UUID");
};
cljs.core.__GT_UUID = function cljs$core$__GT_UUID(uuid) {
  return new cljs.core.UUID(uuid);
};
cljs.core.pr_writer_ex_info = function cljs$core$pr_writer_ex_info(obj, writer, opts) {
  cljs.core._write(writer, "#ExceptionInfo{:message ");
  cljs.core.pr_writer(obj.message, writer, opts);
  if (cljs.core.truth_(obj.data)) {
    cljs.core._write(writer, ", :data ");
    cljs.core.pr_writer(obj.data, writer, opts);
  } else {
  }
  if (cljs.core.truth_(obj.cause)) {
    cljs.core._write(writer, ", :cause ");
    cljs.core.pr_writer(obj.cause, writer, opts);
  } else {
  }
  return cljs.core._write(writer, "}");
};
cljs.core.ExceptionInfo = function cljs$core$ExceptionInfo(message, data, cause) {
  var e = new Error;
  var this$ = this;
  this$.message = message;
  this$.data = data;
  this$.cause = cause;
  this$.name = e.name;
  this$.description = e.description;
  this$.number = e.number;
  this$.fileName = e.fileName;
  this$.lineNumber = e.lineNumber;
  this$.columnNumber = e.columnNumber;
  this$.stack = e.stack;
  return this$;
};
cljs.core.ExceptionInfo.prototype.__proto__ = Error.prototype;
cljs.core.ExceptionInfo.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ExceptionInfo.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(obj, writer, opts) {
  var obj__$1 = this;
  return cljs.core.pr_writer_ex_info(obj__$1, writer, opts);
};
cljs.core.ExceptionInfo.prototype.toString = function() {
  var this$ = this;
  return cljs.core.pr_str_STAR_(this$);
};
cljs.core.ex_info = function cljs$core$ex_info() {
  var G__21034 = arguments.length;
  switch(G__21034) {
    case 2:
      return cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.ex_info.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2 = function(msg, data) {
  return cljs.core.ex_info.cljs$core$IFn$_invoke$arity$3(msg, data, null);
};
cljs.core.ex_info.cljs$core$IFn$_invoke$arity$3 = function(msg, data, cause) {
  return new cljs.core.ExceptionInfo(msg, data, cause);
};
cljs.core.ex_info.cljs$lang$maxFixedArity = 3;
cljs.core.ex_data = function cljs$core$ex_data(ex) {
  if (ex instanceof cljs.core.ExceptionInfo) {
    return ex.data;
  } else {
    return null;
  }
};
cljs.core.ex_message = function cljs$core$ex_message(ex) {
  if (ex instanceof Error) {
    return ex.message;
  } else {
    return null;
  }
};
cljs.core.ex_cause = function cljs$core$ex_cause(ex) {
  if (ex instanceof cljs.core.ExceptionInfo) {
    return ex.cause;
  } else {
    return null;
  }
};
cljs.core.comparator = function cljs$core$comparator(pred) {
  return function(x, y) {
    if (cljs.core.truth_(function() {
      var G__21040 = x;
      var G__21041 = y;
      return pred.cljs$core$IFn$_invoke$arity$2 ? pred.cljs$core$IFn$_invoke$arity$2(G__21040, G__21041) : pred.call(null, G__21040, G__21041);
    }())) {
      return-1;
    } else {
      if (cljs.core.truth_(function() {
        var G__21042 = y;
        var G__21043 = x;
        return pred.cljs$core$IFn$_invoke$arity$2 ? pred.cljs$core$IFn$_invoke$arity$2(G__21042, G__21043) : pred.call(null, G__21042, G__21043);
      }())) {
        return 1;
      } else {
        return 0;
      }
    }
  };
};
cljs.core.special_symbol_QMARK_ = function cljs$core$special_symbol_QMARK_(x) {
  return cljs.core.contains_QMARK_(new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 19, [new cljs.core.Symbol(null, "\x26", "\x26", -2144855648, null), null, new cljs.core.Symbol(null, "defrecord*", "defrecord*", -1936366207, null), null, new cljs.core.Symbol(null, "try", "try", -1273693247, null), null, new cljs.core.Symbol(null, "loop*", "loop*", 615029416, null), null, new cljs.core.Symbol(null, "do", "do", 1686842252, null), null, new cljs.core.Symbol(null, "letfn*", 
  "letfn*", -110097810, null), null, new cljs.core.Symbol(null, "if", "if", 1181717262, null), null, new cljs.core.Symbol(null, "new", "new", -444906321, null), null, new cljs.core.Symbol(null, "ns", "ns", 2082130287, null), null, new cljs.core.Symbol(null, "deftype*", "deftype*", 962659890, null), null, new cljs.core.Symbol(null, "let*", "let*", 1920721458, null), null, new cljs.core.Symbol(null, "js*", "js*", -1134233646, null), null, new cljs.core.Symbol(null, "fn*", "fn*", -752876845, null), 
  null, new cljs.core.Symbol(null, "recur", "recur", 1202958259, null), null, new cljs.core.Symbol(null, "set!", "set!", 250714521, null), null, new cljs.core.Symbol(null, ".", ".", 1975675962, null), null, new cljs.core.Symbol(null, "quote", "quote", 1377916282, null), null, new cljs.core.Symbol(null, "throw", "throw", 595905694, null), null, new cljs.core.Symbol(null, "def", "def", 597100991, null), null], null), null), x);
};
cljs.core.test = function cljs$core$test(v) {
  var f = v.cljs$lang$test;
  if (cljs.core.truth_(f)) {
    f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
    return new cljs.core.Keyword(null, "ok", "ok", 967785236);
  } else {
    return new cljs.core.Keyword(null, "no-test", "no-test", -1679482642);
  }
};
goog.provide("goog.history.EventType");
goog.history.EventType = {NAVIGATE:"navigate"};
goog.provide("goog.disposable.IDisposable");
goog.disposable.IDisposable = function() {
};
goog.disposable.IDisposable.prototype.dispose = goog.abstractMethod;
goog.disposable.IDisposable.prototype.isDisposed = goog.abstractMethod;
goog.provide("goog.Disposable");
goog.provide("goog.dispose");
goog.provide("goog.disposeAll");
goog.require("goog.disposable.IDisposable");
goog.Disposable = function() {
  if (goog.Disposable.MONITORING_MODE != goog.Disposable.MonitoringMode.OFF) {
    if (goog.Disposable.INCLUDE_STACK_ON_CREATION) {
      this.creationStack = (new Error).stack;
    }
    goog.Disposable.instances_[goog.getUid(this)] = this;
  }
};
goog.Disposable.MonitoringMode = {OFF:0, PERMANENT:1, INTERACTIVE:2};
goog.define("goog.Disposable.MONITORING_MODE", 0);
goog.define("goog.Disposable.INCLUDE_STACK_ON_CREATION", true);
goog.Disposable.instances_ = {};
goog.Disposable.getUndisposedObjects = function() {
  var ret = [];
  for (var id in goog.Disposable.instances_) {
    if (goog.Disposable.instances_.hasOwnProperty(id)) {
      ret.push(goog.Disposable.instances_[Number(id)]);
    }
  }
  return ret;
};
goog.Disposable.clearUndisposedObjects = function() {
  goog.Disposable.instances_ = {};
};
goog.Disposable.prototype.disposed_ = false;
goog.Disposable.prototype.onDisposeCallbacks_;
goog.Disposable.prototype.creationStack;
goog.Disposable.prototype.isDisposed = function() {
  return this.disposed_;
};
goog.Disposable.prototype.getDisposed = goog.Disposable.prototype.isDisposed;
goog.Disposable.prototype.dispose = function() {
  if (!this.disposed_) {
    this.disposed_ = true;
    this.disposeInternal();
    if (goog.Disposable.MONITORING_MODE != goog.Disposable.MonitoringMode.OFF) {
      var uid = goog.getUid(this);
      if (goog.Disposable.MONITORING_MODE == goog.Disposable.MonitoringMode.PERMANENT && !goog.Disposable.instances_.hasOwnProperty(uid)) {
        throw Error(this + " did not call the goog.Disposable base " + "constructor or was disposed of after a clearUndisposedObjects " + "call");
      }
      delete goog.Disposable.instances_[uid];
    }
  }
};
goog.Disposable.prototype.registerDisposable = function(disposable) {
  this.addOnDisposeCallback(goog.partial(goog.dispose, disposable));
};
goog.Disposable.prototype.addOnDisposeCallback = function(callback, opt_scope) {
  if (!this.onDisposeCallbacks_) {
    this.onDisposeCallbacks_ = [];
  }
  this.onDisposeCallbacks_.push(goog.isDef(opt_scope) ? goog.bind(callback, opt_scope) : callback);
};
goog.Disposable.prototype.disposeInternal = function() {
  if (this.onDisposeCallbacks_) {
    while (this.onDisposeCallbacks_.length) {
      this.onDisposeCallbacks_.shift()();
    }
  }
};
goog.Disposable.isDisposed = function(obj) {
  if (obj && typeof obj.isDisposed == "function") {
    return obj.isDisposed();
  }
  return false;
};
goog.dispose = function(obj) {
  if (obj && typeof obj.dispose == "function") {
    obj.dispose();
  }
};
goog.disposeAll = function(var_args) {
  for (var i = 0, len = arguments.length;i < len;++i) {
    var disposable = arguments[i];
    if (goog.isArrayLike(disposable)) {
      goog.disposeAll.apply(null, disposable);
    } else {
      goog.dispose(disposable);
    }
  }
};
goog.provide("goog.debug.EntryPointMonitor");
goog.provide("goog.debug.entryPointRegistry");
goog.require("goog.asserts");
goog.debug.EntryPointMonitor = function() {
};
goog.debug.EntryPointMonitor.prototype.wrap;
goog.debug.EntryPointMonitor.prototype.unwrap;
goog.debug.entryPointRegistry.refList_ = [];
goog.debug.entryPointRegistry.monitors_ = [];
goog.debug.entryPointRegistry.monitorsMayExist_ = false;
goog.debug.entryPointRegistry.register = function(callback) {
  goog.debug.entryPointRegistry.refList_[goog.debug.entryPointRegistry.refList_.length] = callback;
  if (goog.debug.entryPointRegistry.monitorsMayExist_) {
    var monitors = goog.debug.entryPointRegistry.monitors_;
    for (var i = 0;i < monitors.length;i++) {
      callback(goog.bind(monitors[i].wrap, monitors[i]));
    }
  }
};
goog.debug.entryPointRegistry.monitorAll = function(monitor) {
  goog.debug.entryPointRegistry.monitorsMayExist_ = true;
  var transformer = goog.bind(monitor.wrap, monitor);
  for (var i = 0;i < goog.debug.entryPointRegistry.refList_.length;i++) {
    goog.debug.entryPointRegistry.refList_[i](transformer);
  }
  goog.debug.entryPointRegistry.monitors_.push(monitor);
};
goog.debug.entryPointRegistry.unmonitorAllIfPossible = function(monitor) {
  var monitors = goog.debug.entryPointRegistry.monitors_;
  goog.asserts.assert(monitor == monitors[monitors.length - 1], "Only the most recent monitor can be unwrapped.");
  var transformer = goog.bind(monitor.unwrap, monitor);
  for (var i = 0;i < goog.debug.entryPointRegistry.refList_.length;i++) {
    goog.debug.entryPointRegistry.refList_[i](transformer);
  }
  monitors.length--;
};
goog.provide("goog.labs.userAgent.util");
goog.require("goog.string");
goog.labs.userAgent.util.getNativeUserAgentString_ = function() {
  var navigator = goog.labs.userAgent.util.getNavigator_();
  if (navigator) {
    var userAgent = navigator.userAgent;
    if (userAgent) {
      return userAgent;
    }
  }
  return "";
};
goog.labs.userAgent.util.getNavigator_ = function() {
  return goog.global.navigator;
};
goog.labs.userAgent.util.userAgent_ = goog.labs.userAgent.util.getNativeUserAgentString_();
goog.labs.userAgent.util.setUserAgent = function(opt_userAgent) {
  goog.labs.userAgent.util.userAgent_ = opt_userAgent || goog.labs.userAgent.util.getNativeUserAgentString_();
};
goog.labs.userAgent.util.getUserAgent = function() {
  return goog.labs.userAgent.util.userAgent_;
};
goog.labs.userAgent.util.matchUserAgent = function(str) {
  var userAgent = goog.labs.userAgent.util.getUserAgent();
  return goog.string.contains(userAgent, str);
};
goog.labs.userAgent.util.matchUserAgentIgnoreCase = function(str) {
  var userAgent = goog.labs.userAgent.util.getUserAgent();
  return goog.string.caseInsensitiveContains(userAgent, str);
};
goog.labs.userAgent.util.extractVersionTuples = function(userAgent) {
  var versionRegExp = new RegExp("(\\w[\\w ]+)" + "/" + "([^\\s]+)" + "\\s*" + "(?:\\((.*?)\\))?", "g");
  var data = [];
  var match;
  while (match = versionRegExp.exec(userAgent)) {
    data.push([match[1], match[2], match[3] || undefined]);
  }
  return data;
};
goog.provide("goog.labs.userAgent.browser");
goog.require("goog.array");
goog.require("goog.asserts");
goog.require("goog.labs.userAgent.util");
goog.require("goog.string");
goog.labs.userAgent.browser.matchOpera_ = function() {
  return goog.labs.userAgent.util.matchUserAgent("Opera") || goog.labs.userAgent.util.matchUserAgent("OPR");
};
goog.labs.userAgent.browser.matchIE_ = function() {
  return goog.labs.userAgent.util.matchUserAgent("Trident") || goog.labs.userAgent.util.matchUserAgent("MSIE");
};
goog.labs.userAgent.browser.matchFirefox_ = function() {
  return goog.labs.userAgent.util.matchUserAgent("Firefox");
};
goog.labs.userAgent.browser.matchSafari_ = function() {
  return goog.labs.userAgent.util.matchUserAgent("Safari") && !goog.labs.userAgent.util.matchUserAgent("Chrome") && !goog.labs.userAgent.util.matchUserAgent("CriOS") && !goog.labs.userAgent.util.matchUserAgent("Android");
};
goog.labs.userAgent.browser.matchChrome_ = function() {
  return goog.labs.userAgent.util.matchUserAgent("Chrome") || goog.labs.userAgent.util.matchUserAgent("CriOS");
};
goog.labs.userAgent.browser.matchAndroidBrowser_ = function() {
  return goog.labs.userAgent.util.matchUserAgent("Android") && !goog.labs.userAgent.util.matchUserAgent("Chrome") && !goog.labs.userAgent.util.matchUserAgent("CriOS");
};
goog.labs.userAgent.browser.isOpera = goog.labs.userAgent.browser.matchOpera_;
goog.labs.userAgent.browser.isIE = goog.labs.userAgent.browser.matchIE_;
goog.labs.userAgent.browser.isFirefox = goog.labs.userAgent.browser.matchFirefox_;
goog.labs.userAgent.browser.isSafari = goog.labs.userAgent.browser.matchSafari_;
goog.labs.userAgent.browser.isChrome = goog.labs.userAgent.browser.matchChrome_;
goog.labs.userAgent.browser.isAndroidBrowser = goog.labs.userAgent.browser.matchAndroidBrowser_;
goog.labs.userAgent.browser.isSilk = function() {
  return goog.labs.userAgent.util.matchUserAgent("Silk");
};
goog.labs.userAgent.browser.getVersion = function() {
  var userAgentString = goog.labs.userAgent.util.getUserAgent();
  if (goog.labs.userAgent.browser.isIE()) {
    return goog.labs.userAgent.browser.getIEVersion_(userAgentString);
  }
  if (goog.labs.userAgent.browser.isOpera()) {
    return goog.labs.userAgent.browser.getOperaVersion_(userAgentString);
  }
  var versionTuples = goog.labs.userAgent.util.extractVersionTuples(userAgentString);
  return goog.labs.userAgent.browser.getVersionFromTuples_(versionTuples);
};
goog.labs.userAgent.browser.isVersionOrHigher = function(version) {
  return goog.string.compareVersions(goog.labs.userAgent.browser.getVersion(), version) >= 0;
};
goog.labs.userAgent.browser.getIEVersion_ = function(userAgent) {
  var rv = /rv: *([\d\.]*)/.exec(userAgent);
  if (rv && rv[1]) {
    return rv[1];
  }
  var version = "";
  var msie = /MSIE +([\d\.]+)/.exec(userAgent);
  if (msie && msie[1]) {
    var tridentVersion = /Trident\/(\d.\d)/.exec(userAgent);
    if (msie[1] == "7.0") {
      if (tridentVersion && tridentVersion[1]) {
        switch(tridentVersion[1]) {
          case "4.0":
            version = "8.0";
            break;
          case "5.0":
            version = "9.0";
            break;
          case "6.0":
            version = "10.0";
            break;
          case "7.0":
            version = "11.0";
            break;
        }
      } else {
        version = "7.0";
      }
    } else {
      version = msie[1];
    }
  }
  return version;
};
goog.labs.userAgent.browser.getOperaVersion_ = function(userAgent) {
  var versionTuples = goog.labs.userAgent.util.extractVersionTuples(userAgent);
  var lastTuple = goog.array.peek(versionTuples);
  if (lastTuple[0] == "OPR" && lastTuple[1]) {
    return lastTuple[1];
  }
  return goog.labs.userAgent.browser.getVersionFromTuples_(versionTuples);
};
goog.labs.userAgent.browser.getVersionFromTuples_ = function(versionTuples) {
  goog.asserts.assert(versionTuples.length > 2, "Couldn't extract version tuple from user agent string");
  return versionTuples[2] && versionTuples[2][1] ? versionTuples[2][1] : "";
};
goog.provide("goog.labs.userAgent.engine");
goog.require("goog.array");
goog.require("goog.labs.userAgent.util");
goog.require("goog.string");
goog.labs.userAgent.engine.isPresto = function() {
  return goog.labs.userAgent.util.matchUserAgent("Presto");
};
goog.labs.userAgent.engine.isTrident = function() {
  return goog.labs.userAgent.util.matchUserAgent("Trident") || goog.labs.userAgent.util.matchUserAgent("MSIE");
};
goog.labs.userAgent.engine.isWebKit = function() {
  return goog.labs.userAgent.util.matchUserAgentIgnoreCase("WebKit");
};
goog.labs.userAgent.engine.isGecko = function() {
  return goog.labs.userAgent.util.matchUserAgent("Gecko") && !goog.labs.userAgent.engine.isWebKit() && !goog.labs.userAgent.engine.isTrident();
};
goog.labs.userAgent.engine.getVersion = function() {
  var userAgentString = goog.labs.userAgent.util.getUserAgent();
  if (userAgentString) {
    var tuples = goog.labs.userAgent.util.extractVersionTuples(userAgentString);
    var engineTuple = tuples[1];
    if (engineTuple) {
      if (engineTuple[0] == "Gecko") {
        return goog.labs.userAgent.engine.getVersionForKey_(tuples, "Firefox");
      }
      return engineTuple[1];
    }
    var browserTuple = tuples[0];
    var info;
    if (browserTuple && (info = browserTuple[2])) {
      var match = /Trident\/([^\s;]+)/.exec(info);
      if (match) {
        return match[1];
      }
    }
  }
  return "";
};
goog.labs.userAgent.engine.isVersionOrHigher = function(version) {
  return goog.string.compareVersions(goog.labs.userAgent.engine.getVersion(), version) >= 0;
};
goog.labs.userAgent.engine.getVersionForKey_ = function(tuples, key) {
  var pair = goog.array.find(tuples, function(pair) {
    return key == pair[0];
  });
  return pair && pair[1] || "";
};
goog.provide("goog.userAgent");
goog.require("goog.labs.userAgent.browser");
goog.require("goog.labs.userAgent.engine");
goog.require("goog.labs.userAgent.util");
goog.require("goog.string");
goog.define("goog.userAgent.ASSUME_IE", false);
goog.define("goog.userAgent.ASSUME_GECKO", false);
goog.define("goog.userAgent.ASSUME_WEBKIT", false);
goog.define("goog.userAgent.ASSUME_MOBILE_WEBKIT", false);
goog.define("goog.userAgent.ASSUME_OPERA", false);
goog.define("goog.userAgent.ASSUME_ANY_VERSION", false);
goog.userAgent.BROWSER_KNOWN_ = goog.userAgent.ASSUME_IE || goog.userAgent.ASSUME_GECKO || goog.userAgent.ASSUME_MOBILE_WEBKIT || goog.userAgent.ASSUME_WEBKIT || goog.userAgent.ASSUME_OPERA;
goog.userAgent.getUserAgentString = function() {
  return goog.labs.userAgent.util.getUserAgent();
};
goog.userAgent.getNavigator = function() {
  return goog.global["navigator"] || null;
};
goog.userAgent.OPERA = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_OPERA : goog.labs.userAgent.browser.isOpera();
goog.userAgent.IE = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_IE : goog.labs.userAgent.browser.isIE();
goog.userAgent.GECKO = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_GECKO : goog.labs.userAgent.engine.isGecko();
goog.userAgent.WEBKIT = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_WEBKIT || goog.userAgent.ASSUME_MOBILE_WEBKIT : goog.labs.userAgent.engine.isWebKit();
goog.userAgent.isMobile_ = function() {
  return goog.userAgent.WEBKIT && goog.labs.userAgent.util.matchUserAgent("Mobile");
};
goog.userAgent.MOBILE = goog.userAgent.ASSUME_MOBILE_WEBKIT || goog.userAgent.isMobile_();
goog.userAgent.SAFARI = goog.userAgent.WEBKIT;
goog.userAgent.determinePlatform_ = function() {
  var navigator = goog.userAgent.getNavigator();
  return navigator && navigator.platform || "";
};
goog.userAgent.PLATFORM = goog.userAgent.determinePlatform_();
goog.define("goog.userAgent.ASSUME_MAC", false);
goog.define("goog.userAgent.ASSUME_WINDOWS", false);
goog.define("goog.userAgent.ASSUME_LINUX", false);
goog.define("goog.userAgent.ASSUME_X11", false);
goog.define("goog.userAgent.ASSUME_ANDROID", false);
goog.define("goog.userAgent.ASSUME_IPHONE", false);
goog.define("goog.userAgent.ASSUME_IPAD", false);
goog.userAgent.PLATFORM_KNOWN_ = goog.userAgent.ASSUME_MAC || goog.userAgent.ASSUME_WINDOWS || goog.userAgent.ASSUME_LINUX || goog.userAgent.ASSUME_X11 || goog.userAgent.ASSUME_ANDROID || goog.userAgent.ASSUME_IPHONE || goog.userAgent.ASSUME_IPAD;
goog.userAgent.initPlatform_ = function() {
  goog.userAgent.detectedMac_ = goog.string.contains(goog.userAgent.PLATFORM, "Mac");
  goog.userAgent.detectedWindows_ = goog.string.contains(goog.userAgent.PLATFORM, "Win");
  goog.userAgent.detectedLinux_ = goog.string.contains(goog.userAgent.PLATFORM, "Linux");
  goog.userAgent.detectedX11_ = !!goog.userAgent.getNavigator() && goog.string.contains(goog.userAgent.getNavigator()["appVersion"] || "", "X11");
  var ua = goog.userAgent.getUserAgentString();
  goog.userAgent.detectedAndroid_ = !!ua && goog.string.contains(ua, "Android");
  goog.userAgent.detectedIPhone_ = !!ua && goog.string.contains(ua, "iPhone");
  goog.userAgent.detectedIPad_ = !!ua && goog.string.contains(ua, "iPad");
};
if (!goog.userAgent.PLATFORM_KNOWN_) {
  goog.userAgent.initPlatform_();
}
goog.userAgent.MAC = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_MAC : goog.userAgent.detectedMac_;
goog.userAgent.WINDOWS = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_WINDOWS : goog.userAgent.detectedWindows_;
goog.userAgent.LINUX = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_LINUX : goog.userAgent.detectedLinux_;
goog.userAgent.X11 = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_X11 : goog.userAgent.detectedX11_;
goog.userAgent.ANDROID = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_ANDROID : goog.userAgent.detectedAndroid_;
goog.userAgent.IPHONE = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_IPHONE : goog.userAgent.detectedIPhone_;
goog.userAgent.IPAD = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_IPAD : goog.userAgent.detectedIPad_;
goog.userAgent.determineVersion_ = function() {
  var version = "", re;
  if (goog.userAgent.OPERA && goog.global["opera"]) {
    var operaVersion = goog.global["opera"].version;
    return goog.isFunction(operaVersion) ? operaVersion() : operaVersion;
  }
  if (goog.userAgent.GECKO) {
    re = /rv\:([^\);]+)(\)|;)/;
  } else {
    if (goog.userAgent.IE) {
      re = /\b(?:MSIE|rv)[: ]([^\);]+)(\)|;)/;
    } else {
      if (goog.userAgent.WEBKIT) {
        re = /WebKit\/(\S+)/;
      }
    }
  }
  if (re) {
    var arr = re.exec(goog.userAgent.getUserAgentString());
    version = arr ? arr[1] : "";
  }
  if (goog.userAgent.IE) {
    var docMode = goog.userAgent.getDocumentMode_();
    if (docMode > parseFloat(version)) {
      return String(docMode);
    }
  }
  return version;
};
goog.userAgent.getDocumentMode_ = function() {
  var doc = goog.global["document"];
  return doc ? doc["documentMode"] : undefined;
};
goog.userAgent.VERSION = goog.userAgent.determineVersion_();
goog.userAgent.compare = function(v1, v2) {
  return goog.string.compareVersions(v1, v2);
};
goog.userAgent.isVersionOrHigherCache_ = {};
goog.userAgent.isVersionOrHigher = function(version) {
  return goog.userAgent.ASSUME_ANY_VERSION || goog.userAgent.isVersionOrHigherCache_[version] || (goog.userAgent.isVersionOrHigherCache_[version] = goog.string.compareVersions(goog.userAgent.VERSION, version) >= 0);
};
goog.userAgent.isVersion = goog.userAgent.isVersionOrHigher;
goog.userAgent.isDocumentModeOrHigher = function(documentMode) {
  return goog.userAgent.IE && goog.userAgent.DOCUMENT_MODE >= documentMode;
};
goog.userAgent.isDocumentMode = goog.userAgent.isDocumentModeOrHigher;
goog.userAgent.DOCUMENT_MODE = function() {
  var doc = goog.global["document"];
  if (!doc || !goog.userAgent.IE) {
    return undefined;
  }
  var mode = goog.userAgent.getDocumentMode_();
  return mode || (doc["compatMode"] == "CSS1Compat" ? parseInt(goog.userAgent.VERSION, 10) : 5);
}();
goog.provide("goog.events.BrowserFeature");
goog.require("goog.userAgent");
goog.events.BrowserFeature = {HAS_W3C_BUTTON:!goog.userAgent.IE || goog.userAgent.isDocumentModeOrHigher(9), HAS_W3C_EVENT_SUPPORT:!goog.userAgent.IE || goog.userAgent.isDocumentModeOrHigher(9), SET_KEY_CODE_TO_PREVENT_DEFAULT:goog.userAgent.IE && !goog.userAgent.isVersionOrHigher("9"), HAS_NAVIGATOR_ONLINE_PROPERTY:!goog.userAgent.WEBKIT || goog.userAgent.isVersionOrHigher("528"), HAS_HTML5_NETWORK_EVENT_SUPPORT:goog.userAgent.GECKO && goog.userAgent.isVersionOrHigher("1.9b") || goog.userAgent.IE && 
goog.userAgent.isVersionOrHigher("8") || goog.userAgent.OPERA && goog.userAgent.isVersionOrHigher("9.5") || goog.userAgent.WEBKIT && goog.userAgent.isVersionOrHigher("528"), HTML5_NETWORK_EVENTS_FIRE_ON_BODY:goog.userAgent.GECKO && !goog.userAgent.isVersionOrHigher("8") || goog.userAgent.IE && !goog.userAgent.isVersionOrHigher("9"), TOUCH_ENABLED:"ontouchstart" in goog.global || !!(goog.global["document"] && document.documentElement && "ontouchstart" in document.documentElement) || !!(goog.global["navigator"] && 
goog.global["navigator"]["msMaxTouchPoints"])};
goog.provide("goog.events.EventId");
goog.events.EventId = function(eventId) {
  this.id = eventId;
};
goog.events.EventId.prototype.toString = function() {
  return this.id;
};
goog.provide("goog.events.Event");
goog.provide("goog.events.EventLike");
goog.require("goog.Disposable");
goog.require("goog.events.EventId");
goog.events.EventLike;
goog.events.Event = function(type, opt_target) {
  this.type = type instanceof goog.events.EventId ? String(type) : type;
  this.target = opt_target;
  this.currentTarget = this.target;
  this.propagationStopped_ = false;
  this.defaultPrevented = false;
  this.returnValue_ = true;
};
goog.events.Event.prototype.disposeInternal = function() {
};
goog.events.Event.prototype.dispose = function() {
};
goog.events.Event.prototype.stopPropagation = function() {
  this.propagationStopped_ = true;
};
goog.events.Event.prototype.preventDefault = function() {
  this.defaultPrevented = true;
  this.returnValue_ = false;
};
goog.events.Event.stopPropagation = function(e) {
  e.stopPropagation();
};
goog.events.Event.preventDefault = function(e) {
  e.preventDefault();
};
goog.provide("goog.events.EventType");
goog.require("goog.userAgent");
goog.events.getVendorPrefixedName_ = function(eventName) {
  return goog.userAgent.WEBKIT ? "webkit" + eventName : goog.userAgent.OPERA ? "o" + eventName.toLowerCase() : eventName.toLowerCase();
};
goog.events.EventType = {CLICK:"click", RIGHTCLICK:"rightclick", DBLCLICK:"dblclick", MOUSEDOWN:"mousedown", MOUSEUP:"mouseup", MOUSEOVER:"mouseover", MOUSEOUT:"mouseout", MOUSEMOVE:"mousemove", MOUSEENTER:"mouseenter", MOUSELEAVE:"mouseleave", SELECTSTART:"selectstart", KEYPRESS:"keypress", KEYDOWN:"keydown", KEYUP:"keyup", BLUR:"blur", FOCUS:"focus", DEACTIVATE:"deactivate", FOCUSIN:goog.userAgent.IE ? "focusin" : "DOMFocusIn", FOCUSOUT:goog.userAgent.IE ? "focusout" : "DOMFocusOut", CHANGE:"change", 
SELECT:"select", SUBMIT:"submit", INPUT:"input", PROPERTYCHANGE:"propertychange", DRAGSTART:"dragstart", DRAG:"drag", DRAGENTER:"dragenter", DRAGOVER:"dragover", DRAGLEAVE:"dragleave", DROP:"drop", DRAGEND:"dragend", TOUCHSTART:"touchstart", TOUCHMOVE:"touchmove", TOUCHEND:"touchend", TOUCHCANCEL:"touchcancel", BEFOREUNLOAD:"beforeunload", CONSOLEMESSAGE:"consolemessage", CONTEXTMENU:"contextmenu", DOMCONTENTLOADED:"DOMContentLoaded", ERROR:"error", HELP:"help", LOAD:"load", LOSECAPTURE:"losecapture", 
ORIENTATIONCHANGE:"orientationchange", READYSTATECHANGE:"readystatechange", RESIZE:"resize", SCROLL:"scroll", UNLOAD:"unload", HASHCHANGE:"hashchange", PAGEHIDE:"pagehide", PAGESHOW:"pageshow", POPSTATE:"popstate", COPY:"copy", PASTE:"paste", CUT:"cut", BEFORECOPY:"beforecopy", BEFORECUT:"beforecut", BEFOREPASTE:"beforepaste", ONLINE:"online", OFFLINE:"offline", MESSAGE:"message", CONNECT:"connect", ANIMATIONSTART:goog.events.getVendorPrefixedName_("AnimationStart"), ANIMATIONEND:goog.events.getVendorPrefixedName_("AnimationEnd"), 
ANIMATIONITERATION:goog.events.getVendorPrefixedName_("AnimationIteration"), TRANSITIONEND:goog.events.getVendorPrefixedName_("TransitionEnd"), POINTERDOWN:"pointerdown", POINTERUP:"pointerup", POINTERCANCEL:"pointercancel", POINTERMOVE:"pointermove", POINTEROVER:"pointerover", POINTEROUT:"pointerout", POINTERENTER:"pointerenter", POINTERLEAVE:"pointerleave", GOTPOINTERCAPTURE:"gotpointercapture", LOSTPOINTERCAPTURE:"lostpointercapture", MSGESTURECHANGE:"MSGestureChange", MSGESTUREEND:"MSGestureEnd", 
MSGESTUREHOLD:"MSGestureHold", MSGESTURESTART:"MSGestureStart", MSGESTURETAP:"MSGestureTap", MSGOTPOINTERCAPTURE:"MSGotPointerCapture", MSINERTIASTART:"MSInertiaStart", MSLOSTPOINTERCAPTURE:"MSLostPointerCapture", MSPOINTERCANCEL:"MSPointerCancel", MSPOINTERDOWN:"MSPointerDown", MSPOINTERENTER:"MSPointerEnter", MSPOINTERHOVER:"MSPointerHover", MSPOINTERLEAVE:"MSPointerLeave", MSPOINTERMOVE:"MSPointerMove", MSPOINTEROUT:"MSPointerOut", MSPOINTEROVER:"MSPointerOver", MSPOINTERUP:"MSPointerUp", TEXTINPUT:"textinput", 
COMPOSITIONSTART:"compositionstart", COMPOSITIONUPDATE:"compositionupdate", COMPOSITIONEND:"compositionend", EXIT:"exit", LOADABORT:"loadabort", LOADCOMMIT:"loadcommit", LOADREDIRECT:"loadredirect", LOADSTART:"loadstart", LOADSTOP:"loadstop", RESPONSIVE:"responsive", SIZECHANGED:"sizechanged", UNRESPONSIVE:"unresponsive", VISIBILITYCHANGE:"visibilitychange", STORAGE:"storage", DOMSUBTREEMODIFIED:"DOMSubtreeModified", DOMNODEINSERTED:"DOMNodeInserted", DOMNODEREMOVED:"DOMNodeRemoved", DOMNODEREMOVEDFROMDOCUMENT:"DOMNodeRemovedFromDocument", 
DOMNODEINSERTEDINTODOCUMENT:"DOMNodeInsertedIntoDocument", DOMATTRMODIFIED:"DOMAttrModified", DOMCHARACTERDATAMODIFIED:"DOMCharacterDataModified"};
goog.provide("goog.reflect");
goog.reflect.object = function(type, object) {
  return object;
};
goog.reflect.sinkValue = function(x) {
  goog.reflect.sinkValue[" "](x);
  return x;
};
goog.reflect.sinkValue[" "] = goog.nullFunction;
goog.reflect.canAccessProperty = function(obj, prop) {
  try {
    goog.reflect.sinkValue(obj[prop]);
    return true;
  } catch (e) {
  }
  return false;
};
goog.provide("goog.events.BrowserEvent");
goog.provide("goog.events.BrowserEvent.MouseButton");
goog.require("goog.events.BrowserFeature");
goog.require("goog.events.Event");
goog.require("goog.events.EventType");
goog.require("goog.reflect");
goog.require("goog.userAgent");
goog.events.BrowserEvent = function(opt_e, opt_currentTarget) {
  goog.events.BrowserEvent.base(this, "constructor", opt_e ? opt_e.type : "");
  this.target = null;
  this.currentTarget = null;
  this.relatedTarget = null;
  this.offsetX = 0;
  this.offsetY = 0;
  this.clientX = 0;
  this.clientY = 0;
  this.screenX = 0;
  this.screenY = 0;
  this.button = 0;
  this.keyCode = 0;
  this.charCode = 0;
  this.ctrlKey = false;
  this.altKey = false;
  this.shiftKey = false;
  this.metaKey = false;
  this.state = null;
  this.platformModifierKey = false;
  this.event_ = null;
  if (opt_e) {
    this.init(opt_e, opt_currentTarget);
  }
};
goog.inherits(goog.events.BrowserEvent, goog.events.Event);
goog.events.BrowserEvent.MouseButton = {LEFT:0, MIDDLE:1, RIGHT:2};
goog.events.BrowserEvent.IEButtonMap = [1, 4, 2];
goog.events.BrowserEvent.prototype.init = function(e, opt_currentTarget) {
  var type = this.type = e.type;
  this.target = (e.target) || e.srcElement;
  this.currentTarget = (opt_currentTarget);
  var relatedTarget = (e.relatedTarget);
  if (relatedTarget) {
    if (goog.userAgent.GECKO) {
      if (!goog.reflect.canAccessProperty(relatedTarget, "nodeName")) {
        relatedTarget = null;
      }
    }
  } else {
    if (type == goog.events.EventType.MOUSEOVER) {
      relatedTarget = e.fromElement;
    } else {
      if (type == goog.events.EventType.MOUSEOUT) {
        relatedTarget = e.toElement;
      }
    }
  }
  this.relatedTarget = relatedTarget;
  this.offsetX = goog.userAgent.WEBKIT || e.offsetX !== undefined ? e.offsetX : e.layerX;
  this.offsetY = goog.userAgent.WEBKIT || e.offsetY !== undefined ? e.offsetY : e.layerY;
  this.clientX = e.clientX !== undefined ? e.clientX : e.pageX;
  this.clientY = e.clientY !== undefined ? e.clientY : e.pageY;
  this.screenX = e.screenX || 0;
  this.screenY = e.screenY || 0;
  this.button = e.button;
  this.keyCode = e.keyCode || 0;
  this.charCode = e.charCode || (type == "keypress" ? e.keyCode : 0);
  this.ctrlKey = e.ctrlKey;
  this.altKey = e.altKey;
  this.shiftKey = e.shiftKey;
  this.metaKey = e.metaKey;
  this.platformModifierKey = goog.userAgent.MAC ? e.metaKey : e.ctrlKey;
  this.state = e.state;
  this.event_ = e;
  if (e.defaultPrevented) {
    this.preventDefault();
  }
};
goog.events.BrowserEvent.prototype.isButton = function(button) {
  if (!goog.events.BrowserFeature.HAS_W3C_BUTTON) {
    if (this.type == "click") {
      return button == goog.events.BrowserEvent.MouseButton.LEFT;
    } else {
      return!!(this.event_.button & goog.events.BrowserEvent.IEButtonMap[button]);
    }
  } else {
    return this.event_.button == button;
  }
};
goog.events.BrowserEvent.prototype.isMouseActionButton = function() {
  return this.isButton(goog.events.BrowserEvent.MouseButton.LEFT) && !(goog.userAgent.WEBKIT && goog.userAgent.MAC && this.ctrlKey);
};
goog.events.BrowserEvent.prototype.stopPropagation = function() {
  goog.events.BrowserEvent.superClass_.stopPropagation.call(this);
  if (this.event_.stopPropagation) {
    this.event_.stopPropagation();
  } else {
    this.event_.cancelBubble = true;
  }
};
goog.events.BrowserEvent.prototype.preventDefault = function() {
  goog.events.BrowserEvent.superClass_.preventDefault.call(this);
  var be = this.event_;
  if (!be.preventDefault) {
    be.returnValue = false;
    if (goog.events.BrowserFeature.SET_KEY_CODE_TO_PREVENT_DEFAULT) {
      try {
        var VK_F1 = 112;
        var VK_F12 = 123;
        if (be.ctrlKey || be.keyCode >= VK_F1 && be.keyCode <= VK_F12) {
          be.keyCode = -1;
        }
      } catch (ex) {
      }
    }
  } else {
    be.preventDefault();
  }
};
goog.events.BrowserEvent.prototype.getBrowserEvent = function() {
  return this.event_;
};
goog.events.BrowserEvent.prototype.disposeInternal = function() {
};
goog.provide("goog.events.Listenable");
goog.provide("goog.events.ListenableKey");
goog.require("goog.events.EventId");
goog.events.Listenable = function() {
};
goog.events.Listenable.IMPLEMENTED_BY_PROP = "closure_listenable_" + (Math.random() * 1E6 | 0);
goog.events.Listenable.addImplementation = function(cls) {
  cls.prototype[goog.events.Listenable.IMPLEMENTED_BY_PROP] = true;
};
goog.events.Listenable.isImplementedBy = function(obj) {
  return!!(obj && obj[goog.events.Listenable.IMPLEMENTED_BY_PROP]);
};
goog.events.Listenable.prototype.listen;
goog.events.Listenable.prototype.listenOnce;
goog.events.Listenable.prototype.unlisten;
goog.events.Listenable.prototype.unlistenByKey;
goog.events.Listenable.prototype.dispatchEvent;
goog.events.Listenable.prototype.removeAllListeners;
goog.events.Listenable.prototype.getParentEventTarget;
goog.events.Listenable.prototype.fireListeners;
goog.events.Listenable.prototype.getListeners;
goog.events.Listenable.prototype.getListener;
goog.events.Listenable.prototype.hasListener;
goog.events.ListenableKey = function() {
};
goog.events.ListenableKey.counter_ = 0;
goog.events.ListenableKey.reserveKey = function() {
  return++goog.events.ListenableKey.counter_;
};
goog.events.ListenableKey.prototype.src;
goog.events.ListenableKey.prototype.type;
goog.events.ListenableKey.prototype.listener;
goog.events.ListenableKey.prototype.capture;
goog.events.ListenableKey.prototype.handler;
goog.events.ListenableKey.prototype.key;
goog.provide("goog.events.Listener");
goog.require("goog.events.ListenableKey");
goog.events.Listener = function(listener, proxy, src, type, capture, opt_handler) {
  if (goog.events.Listener.ENABLE_MONITORING) {
    this.creationStack = (new Error).stack;
  }
  this.listener = listener;
  this.proxy = proxy;
  this.src = src;
  this.type = type;
  this.capture = !!capture;
  this.handler = opt_handler;
  this.key = goog.events.ListenableKey.reserveKey();
  this.callOnce = false;
  this.removed = false;
};
goog.define("goog.events.Listener.ENABLE_MONITORING", false);
goog.events.Listener.prototype.creationStack;
goog.events.Listener.prototype.markAsRemoved = function() {
  this.removed = true;
  this.listener = null;
  this.proxy = null;
  this.src = null;
  this.handler = null;
};
goog.provide("goog.events.ListenerMap");
goog.require("goog.array");
goog.require("goog.events.Listener");
goog.require("goog.object");
goog.events.ListenerMap = function(src) {
  this.src = src;
  this.listeners = {};
  this.typeCount_ = 0;
};
goog.events.ListenerMap.prototype.getTypeCount = function() {
  return this.typeCount_;
};
goog.events.ListenerMap.prototype.getListenerCount = function() {
  var count = 0;
  for (var type in this.listeners) {
    count += this.listeners[type].length;
  }
  return count;
};
goog.events.ListenerMap.prototype.add = function(type, listener, callOnce, opt_useCapture, opt_listenerScope) {
  var typeStr = type.toString();
  var listenerArray = this.listeners[typeStr];
  if (!listenerArray) {
    listenerArray = this.listeners[typeStr] = [];
    this.typeCount_++;
  }
  var listenerObj;
  var index = goog.events.ListenerMap.findListenerIndex_(listenerArray, listener, opt_useCapture, opt_listenerScope);
  if (index > -1) {
    listenerObj = listenerArray[index];
    if (!callOnce) {
      listenerObj.callOnce = false;
    }
  } else {
    listenerObj = new goog.events.Listener(listener, null, this.src, typeStr, !!opt_useCapture, opt_listenerScope);
    listenerObj.callOnce = callOnce;
    listenerArray.push(listenerObj);
  }
  return listenerObj;
};
goog.events.ListenerMap.prototype.remove = function(type, listener, opt_useCapture, opt_listenerScope) {
  var typeStr = type.toString();
  if (!(typeStr in this.listeners)) {
    return false;
  }
  var listenerArray = this.listeners[typeStr];
  var index = goog.events.ListenerMap.findListenerIndex_(listenerArray, listener, opt_useCapture, opt_listenerScope);
  if (index > -1) {
    var listenerObj = listenerArray[index];
    listenerObj.markAsRemoved();
    goog.array.removeAt(listenerArray, index);
    if (listenerArray.length == 0) {
      delete this.listeners[typeStr];
      this.typeCount_--;
    }
    return true;
  }
  return false;
};
goog.events.ListenerMap.prototype.removeByKey = function(listener) {
  var type = listener.type;
  if (!(type in this.listeners)) {
    return false;
  }
  var removed = goog.array.remove(this.listeners[type], listener);
  if (removed) {
    listener.markAsRemoved();
    if (this.listeners[type].length == 0) {
      delete this.listeners[type];
      this.typeCount_--;
    }
  }
  return removed;
};
goog.events.ListenerMap.prototype.removeAll = function(opt_type) {
  var typeStr = opt_type && opt_type.toString();
  var count = 0;
  for (var type in this.listeners) {
    if (!typeStr || type == typeStr) {
      var listenerArray = this.listeners[type];
      for (var i = 0;i < listenerArray.length;i++) {
        ++count;
        listenerArray[i].markAsRemoved();
      }
      delete this.listeners[type];
      this.typeCount_--;
    }
  }
  return count;
};
goog.events.ListenerMap.prototype.getListeners = function(type, capture) {
  var listenerArray = this.listeners[type.toString()];
  var rv = [];
  if (listenerArray) {
    for (var i = 0;i < listenerArray.length;++i) {
      var listenerObj = listenerArray[i];
      if (listenerObj.capture == capture) {
        rv.push(listenerObj);
      }
    }
  }
  return rv;
};
goog.events.ListenerMap.prototype.getListener = function(type, listener, capture, opt_listenerScope) {
  var listenerArray = this.listeners[type.toString()];
  var i = -1;
  if (listenerArray) {
    i = goog.events.ListenerMap.findListenerIndex_(listenerArray, listener, capture, opt_listenerScope);
  }
  return i > -1 ? listenerArray[i] : null;
};
goog.events.ListenerMap.prototype.hasListener = function(opt_type, opt_capture) {
  var hasType = goog.isDef(opt_type);
  var typeStr = hasType ? opt_type.toString() : "";
  var hasCapture = goog.isDef(opt_capture);
  return goog.object.some(this.listeners, function(listenerArray, type) {
    for (var i = 0;i < listenerArray.length;++i) {
      if ((!hasType || listenerArray[i].type == typeStr) && (!hasCapture || listenerArray[i].capture == opt_capture)) {
        return true;
      }
    }
    return false;
  });
};
goog.events.ListenerMap.findListenerIndex_ = function(listenerArray, listener, opt_useCapture, opt_listenerScope) {
  for (var i = 0;i < listenerArray.length;++i) {
    var listenerObj = listenerArray[i];
    if (!listenerObj.removed && listenerObj.listener == listener && listenerObj.capture == !!opt_useCapture && listenerObj.handler == opt_listenerScope) {
      return i;
    }
  }
  return-1;
};
goog.provide("goog.events");
goog.provide("goog.events.CaptureSimulationMode");
goog.provide("goog.events.Key");
goog.provide("goog.events.ListenableType");
goog.require("goog.asserts");
goog.require("goog.debug.entryPointRegistry");
goog.require("goog.events.BrowserEvent");
goog.require("goog.events.BrowserFeature");
goog.require("goog.events.Listenable");
goog.require("goog.events.ListenerMap");
goog.forwardDeclare("goog.debug.ErrorHandler");
goog.forwardDeclare("goog.events.EventWrapper");
goog.events.Key;
goog.events.ListenableType;
goog.events.LISTENER_MAP_PROP_ = "closure_lm_" + (Math.random() * 1E6 | 0);
goog.events.onString_ = "on";
goog.events.onStringMap_ = {};
goog.events.CaptureSimulationMode = {OFF_AND_FAIL:0, OFF_AND_SILENT:1, ON:2};
goog.define("goog.events.CAPTURE_SIMULATION_MODE", 2);
goog.events.listenerCountEstimate_ = 0;
goog.events.listen = function(src, type, listener, opt_capt, opt_handler) {
  if (goog.isArray(type)) {
    for (var i = 0;i < type.length;i++) {
      goog.events.listen(src, type[i], listener, opt_capt, opt_handler);
    }
    return null;
  }
  listener = goog.events.wrapListener(listener);
  if (goog.events.Listenable.isImplementedBy(src)) {
    return src.listen((type), listener, opt_capt, opt_handler);
  } else {
    return goog.events.listen_((src), (type), listener, false, opt_capt, opt_handler);
  }
};
goog.events.listen_ = function(src, type, listener, callOnce, opt_capt, opt_handler) {
  if (!type) {
    throw Error("Invalid event type");
  }
  var capture = !!opt_capt;
  if (capture && !goog.events.BrowserFeature.HAS_W3C_EVENT_SUPPORT) {
    if (goog.events.CAPTURE_SIMULATION_MODE == goog.events.CaptureSimulationMode.OFF_AND_FAIL) {
      goog.asserts.fail("Can not register capture listener in IE8-.");
      return null;
    } else {
      if (goog.events.CAPTURE_SIMULATION_MODE == goog.events.CaptureSimulationMode.OFF_AND_SILENT) {
        return null;
      }
    }
  }
  var listenerMap = goog.events.getListenerMap_(src);
  if (!listenerMap) {
    src[goog.events.LISTENER_MAP_PROP_] = listenerMap = new goog.events.ListenerMap(src);
  }
  var listenerObj = listenerMap.add(type, listener, callOnce, opt_capt, opt_handler);
  if (listenerObj.proxy) {
    return listenerObj;
  }
  var proxy = goog.events.getProxy();
  listenerObj.proxy = proxy;
  proxy.src = src;
  proxy.listener = listenerObj;
  if (src.addEventListener) {
    src.addEventListener(type.toString(), proxy, capture);
  } else {
    src.attachEvent(goog.events.getOnString_(type.toString()), proxy);
  }
  goog.events.listenerCountEstimate_++;
  return listenerObj;
};
goog.events.getProxy = function() {
  var proxyCallbackFunction = goog.events.handleBrowserEvent_;
  var f = goog.events.BrowserFeature.HAS_W3C_EVENT_SUPPORT ? function(eventObject) {
    return proxyCallbackFunction.call(f.src, f.listener, eventObject);
  } : function(eventObject) {
    var v = proxyCallbackFunction.call(f.src, f.listener, eventObject);
    if (!v) {
      return v;
    }
  };
  return f;
};
goog.events.listenOnce = function(src, type, listener, opt_capt, opt_handler) {
  if (goog.isArray(type)) {
    for (var i = 0;i < type.length;i++) {
      goog.events.listenOnce(src, type[i], listener, opt_capt, opt_handler);
    }
    return null;
  }
  listener = goog.events.wrapListener(listener);
  if (goog.events.Listenable.isImplementedBy(src)) {
    return src.listenOnce((type), listener, opt_capt, opt_handler);
  } else {
    return goog.events.listen_((src), (type), listener, true, opt_capt, opt_handler);
  }
};
goog.events.listenWithWrapper = function(src, wrapper, listener, opt_capt, opt_handler) {
  wrapper.listen(src, listener, opt_capt, opt_handler);
};
goog.events.unlisten = function(src, type, listener, opt_capt, opt_handler) {
  if (goog.isArray(type)) {
    for (var i = 0;i < type.length;i++) {
      goog.events.unlisten(src, type[i], listener, opt_capt, opt_handler);
    }
    return null;
  }
  listener = goog.events.wrapListener(listener);
  if (goog.events.Listenable.isImplementedBy(src)) {
    return src.unlisten((type), listener, opt_capt, opt_handler);
  }
  if (!src) {
    return false;
  }
  var capture = !!opt_capt;
  var listenerMap = goog.events.getListenerMap_((src));
  if (listenerMap) {
    var listenerObj = listenerMap.getListener((type), listener, capture, opt_handler);
    if (listenerObj) {
      return goog.events.unlistenByKey(listenerObj);
    }
  }
  return false;
};
goog.events.unlistenByKey = function(key) {
  if (goog.isNumber(key)) {
    return false;
  }
  var listener = (key);
  if (!listener || listener.removed) {
    return false;
  }
  var src = listener.src;
  if (goog.events.Listenable.isImplementedBy(src)) {
    return src.unlistenByKey(listener);
  }
  var type = listener.type;
  var proxy = listener.proxy;
  if (src.removeEventListener) {
    src.removeEventListener(type, proxy, listener.capture);
  } else {
    if (src.detachEvent) {
      src.detachEvent(goog.events.getOnString_(type), proxy);
    }
  }
  goog.events.listenerCountEstimate_--;
  var listenerMap = goog.events.getListenerMap_((src));
  if (listenerMap) {
    listenerMap.removeByKey(listener);
    if (listenerMap.getTypeCount() == 0) {
      listenerMap.src = null;
      src[goog.events.LISTENER_MAP_PROP_] = null;
    }
  } else {
    listener.markAsRemoved();
  }
  return true;
};
goog.events.unlistenWithWrapper = function(src, wrapper, listener, opt_capt, opt_handler) {
  wrapper.unlisten(src, listener, opt_capt, opt_handler);
};
goog.events.removeAll = function(obj, opt_type) {
  if (!obj) {
    return 0;
  }
  if (goog.events.Listenable.isImplementedBy(obj)) {
    return obj.removeAllListeners(opt_type);
  }
  var listenerMap = goog.events.getListenerMap_((obj));
  if (!listenerMap) {
    return 0;
  }
  var count = 0;
  var typeStr = opt_type && opt_type.toString();
  for (var type in listenerMap.listeners) {
    if (!typeStr || type == typeStr) {
      var listeners = listenerMap.listeners[type].concat();
      for (var i = 0;i < listeners.length;++i) {
        if (goog.events.unlistenByKey(listeners[i])) {
          ++count;
        }
      }
    }
  }
  return count;
};
goog.events.removeAllNativeListeners = function() {
  goog.events.listenerCountEstimate_ = 0;
  return 0;
};
goog.events.getListeners = function(obj, type, capture) {
  if (goog.events.Listenable.isImplementedBy(obj)) {
    return obj.getListeners(type, capture);
  } else {
    if (!obj) {
      return[];
    }
    var listenerMap = goog.events.getListenerMap_((obj));
    return listenerMap ? listenerMap.getListeners(type, capture) : [];
  }
};
goog.events.getListener = function(src, type, listener, opt_capt, opt_handler) {
  type = (type);
  listener = goog.events.wrapListener(listener);
  var capture = !!opt_capt;
  if (goog.events.Listenable.isImplementedBy(src)) {
    return src.getListener(type, listener, capture, opt_handler);
  }
  if (!src) {
    return null;
  }
  var listenerMap = goog.events.getListenerMap_((src));
  if (listenerMap) {
    return listenerMap.getListener(type, listener, capture, opt_handler);
  }
  return null;
};
goog.events.hasListener = function(obj, opt_type, opt_capture) {
  if (goog.events.Listenable.isImplementedBy(obj)) {
    return obj.hasListener(opt_type, opt_capture);
  }
  var listenerMap = goog.events.getListenerMap_((obj));
  return!!listenerMap && listenerMap.hasListener(opt_type, opt_capture);
};
goog.events.expose = function(e) {
  var str = [];
  for (var key in e) {
    if (e[key] && e[key].id) {
      str.push(key + " \x3d " + e[key] + " (" + e[key].id + ")");
    } else {
      str.push(key + " \x3d " + e[key]);
    }
  }
  return str.join("\n");
};
goog.events.getOnString_ = function(type) {
  if (type in goog.events.onStringMap_) {
    return goog.events.onStringMap_[type];
  }
  return goog.events.onStringMap_[type] = goog.events.onString_ + type;
};
goog.events.fireListeners = function(obj, type, capture, eventObject) {
  if (goog.events.Listenable.isImplementedBy(obj)) {
    return obj.fireListeners(type, capture, eventObject);
  }
  return goog.events.fireListeners_(obj, type, capture, eventObject);
};
goog.events.fireListeners_ = function(obj, type, capture, eventObject) {
  var retval = 1;
  var listenerMap = goog.events.getListenerMap_((obj));
  if (listenerMap) {
    var listenerArray = listenerMap.listeners[type.toString()];
    if (listenerArray) {
      listenerArray = listenerArray.concat();
      for (var i = 0;i < listenerArray.length;i++) {
        var listener = listenerArray[i];
        if (listener && listener.capture == capture && !listener.removed) {
          retval &= goog.events.fireListener(listener, eventObject) !== false;
        }
      }
    }
  }
  return Boolean(retval);
};
goog.events.fireListener = function(listener, eventObject) {
  var listenerFn = listener.listener;
  var listenerHandler = listener.handler || listener.src;
  if (listener.callOnce) {
    goog.events.unlistenByKey(listener);
  }
  return listenerFn.call(listenerHandler, eventObject);
};
goog.events.getTotalListenerCount = function() {
  return goog.events.listenerCountEstimate_;
};
goog.events.dispatchEvent = function(src, e) {
  goog.asserts.assert(goog.events.Listenable.isImplementedBy(src), "Can not use goog.events.dispatchEvent with " + "non-goog.events.Listenable instance.");
  return src.dispatchEvent(e);
};
goog.events.protectBrowserEventEntryPoint = function(errorHandler) {
  goog.events.handleBrowserEvent_ = errorHandler.protectEntryPoint(goog.events.handleBrowserEvent_);
};
goog.events.handleBrowserEvent_ = function(listener, opt_evt) {
  if (listener.removed) {
    return true;
  }
  if (!goog.events.BrowserFeature.HAS_W3C_EVENT_SUPPORT) {
    var ieEvent = opt_evt || (goog.getObjectByName("window.event"));
    var evt = new goog.events.BrowserEvent(ieEvent, this);
    var retval = true;
    if (goog.events.CAPTURE_SIMULATION_MODE == goog.events.CaptureSimulationMode.ON) {
      if (!goog.events.isMarkedIeEvent_(ieEvent)) {
        goog.events.markIeEvent_(ieEvent);
        var ancestors = [];
        for (var parent = evt.currentTarget;parent;parent = parent.parentNode) {
          ancestors.push(parent);
        }
        var type = listener.type;
        for (var i = ancestors.length - 1;!evt.propagationStopped_ && i >= 0;i--) {
          evt.currentTarget = ancestors[i];
          retval &= goog.events.fireListeners_(ancestors[i], type, true, evt);
        }
        for (var i = 0;!evt.propagationStopped_ && i < ancestors.length;i++) {
          evt.currentTarget = ancestors[i];
          retval &= goog.events.fireListeners_(ancestors[i], type, false, evt);
        }
      }
    } else {
      retval = goog.events.fireListener(listener, evt);
    }
    return retval;
  }
  return goog.events.fireListener(listener, new goog.events.BrowserEvent(opt_evt, this));
};
goog.events.markIeEvent_ = function(e) {
  var useReturnValue = false;
  if (e.keyCode == 0) {
    try {
      e.keyCode = -1;
      return;
    } catch (ex) {
      useReturnValue = true;
    }
  }
  if (useReturnValue || (e.returnValue) == undefined) {
    e.returnValue = true;
  }
};
goog.events.isMarkedIeEvent_ = function(e) {
  return e.keyCode < 0 || e.returnValue != undefined;
};
goog.events.uniqueIdCounter_ = 0;
goog.events.getUniqueId = function(identifier) {
  return identifier + "_" + goog.events.uniqueIdCounter_++;
};
goog.events.getListenerMap_ = function(src) {
  var listenerMap = src[goog.events.LISTENER_MAP_PROP_];
  return listenerMap instanceof goog.events.ListenerMap ? listenerMap : null;
};
goog.events.LISTENER_WRAPPER_PROP_ = "__closure_events_fn_" + (Math.random() * 1E9 >>> 0);
goog.events.wrapListener = function(listener) {
  goog.asserts.assert(listener, "Listener can not be null.");
  if (goog.isFunction(listener)) {
    return listener;
  }
  goog.asserts.assert(listener.handleEvent, "An object listener must have handleEvent method.");
  if (!listener[goog.events.LISTENER_WRAPPER_PROP_]) {
    listener[goog.events.LISTENER_WRAPPER_PROP_] = function(e) {
      return listener.handleEvent(e);
    };
  }
  return listener[goog.events.LISTENER_WRAPPER_PROP_];
};
goog.debug.entryPointRegistry.register(function(transformer) {
  goog.events.handleBrowserEvent_ = transformer(goog.events.handleBrowserEvent_);
});
goog.provide("goog.events.EventTarget");
goog.require("goog.Disposable");
goog.require("goog.asserts");
goog.require("goog.events");
goog.require("goog.events.Event");
goog.require("goog.events.Listenable");
goog.require("goog.events.ListenerMap");
goog.require("goog.object");
goog.events.EventTarget = function() {
  goog.Disposable.call(this);
  this.eventTargetListeners_ = new goog.events.ListenerMap(this);
  this.actualEventTarget_ = this;
  this.parentEventTarget_ = null;
};
goog.inherits(goog.events.EventTarget, goog.Disposable);
goog.events.Listenable.addImplementation(goog.events.EventTarget);
goog.events.EventTarget.MAX_ANCESTORS_ = 1E3;
goog.events.EventTarget.prototype.getParentEventTarget = function() {
  return this.parentEventTarget_;
};
goog.events.EventTarget.prototype.setParentEventTarget = function(parent) {
  this.parentEventTarget_ = parent;
};
goog.events.EventTarget.prototype.addEventListener = function(type, handler, opt_capture, opt_handlerScope) {
  goog.events.listen(this, type, handler, opt_capture, opt_handlerScope);
};
goog.events.EventTarget.prototype.removeEventListener = function(type, handler, opt_capture, opt_handlerScope) {
  goog.events.unlisten(this, type, handler, opt_capture, opt_handlerScope);
};
goog.events.EventTarget.prototype.dispatchEvent = function(e) {
  this.assertInitialized_();
  var ancestorsTree, ancestor = this.getParentEventTarget();
  if (ancestor) {
    ancestorsTree = [];
    var ancestorCount = 1;
    for (;ancestor;ancestor = ancestor.getParentEventTarget()) {
      ancestorsTree.push(ancestor);
      goog.asserts.assert(++ancestorCount < goog.events.EventTarget.MAX_ANCESTORS_, "infinite loop");
    }
  }
  return goog.events.EventTarget.dispatchEventInternal_(this.actualEventTarget_, e, ancestorsTree);
};
goog.events.EventTarget.prototype.disposeInternal = function() {
  goog.events.EventTarget.superClass_.disposeInternal.call(this);
  this.removeAllListeners();
  this.parentEventTarget_ = null;
};
goog.events.EventTarget.prototype.listen = function(type, listener, opt_useCapture, opt_listenerScope) {
  this.assertInitialized_();
  return this.eventTargetListeners_.add(String(type), listener, false, opt_useCapture, opt_listenerScope);
};
goog.events.EventTarget.prototype.listenOnce = function(type, listener, opt_useCapture, opt_listenerScope) {
  return this.eventTargetListeners_.add(String(type), listener, true, opt_useCapture, opt_listenerScope);
};
goog.events.EventTarget.prototype.unlisten = function(type, listener, opt_useCapture, opt_listenerScope) {
  return this.eventTargetListeners_.remove(String(type), listener, opt_useCapture, opt_listenerScope);
};
goog.events.EventTarget.prototype.unlistenByKey = function(key) {
  return this.eventTargetListeners_.removeByKey(key);
};
goog.events.EventTarget.prototype.removeAllListeners = function(opt_type) {
  if (!this.eventTargetListeners_) {
    return 0;
  }
  return this.eventTargetListeners_.removeAll(opt_type);
};
goog.events.EventTarget.prototype.fireListeners = function(type, capture, eventObject) {
  var listenerArray = this.eventTargetListeners_.listeners[String(type)];
  if (!listenerArray) {
    return true;
  }
  listenerArray = listenerArray.concat();
  var rv = true;
  for (var i = 0;i < listenerArray.length;++i) {
    var listener = listenerArray[i];
    if (listener && !listener.removed && listener.capture == capture) {
      var listenerFn = listener.listener;
      var listenerHandler = listener.handler || listener.src;
      if (listener.callOnce) {
        this.unlistenByKey(listener);
      }
      rv = listenerFn.call(listenerHandler, eventObject) !== false && rv;
    }
  }
  return rv && eventObject.returnValue_ != false;
};
goog.events.EventTarget.prototype.getListeners = function(type, capture) {
  return this.eventTargetListeners_.getListeners(String(type), capture);
};
goog.events.EventTarget.prototype.getListener = function(type, listener, capture, opt_listenerScope) {
  return this.eventTargetListeners_.getListener(String(type), listener, capture, opt_listenerScope);
};
goog.events.EventTarget.prototype.hasListener = function(opt_type, opt_capture) {
  var id = goog.isDef(opt_type) ? String(opt_type) : undefined;
  return this.eventTargetListeners_.hasListener(id, opt_capture);
};
goog.events.EventTarget.prototype.setTargetForTesting = function(target) {
  this.actualEventTarget_ = target;
};
goog.events.EventTarget.prototype.assertInitialized_ = function() {
  goog.asserts.assert(this.eventTargetListeners_, "Event target is not initialized. Did you call the superclass " + "(goog.events.EventTarget) constructor?");
};
goog.events.EventTarget.dispatchEventInternal_ = function(target, e, opt_ancestorsTree) {
  var type = e.type || (e);
  if (goog.isString(e)) {
    e = new goog.events.Event(e, target);
  } else {
    if (!(e instanceof goog.events.Event)) {
      var oldEvent = e;
      e = new goog.events.Event(type, target);
      goog.object.extend(e, oldEvent);
    } else {
      e.target = e.target || target;
    }
  }
  var rv = true, currentTarget;
  if (opt_ancestorsTree) {
    for (var i = opt_ancestorsTree.length - 1;!e.propagationStopped_ && i >= 0;i--) {
      currentTarget = e.currentTarget = opt_ancestorsTree[i];
      rv = currentTarget.fireListeners(type, true, e) && rv;
    }
  }
  if (!e.propagationStopped_) {
    currentTarget = e.currentTarget = target;
    rv = currentTarget.fireListeners(type, true, e) && rv;
    if (!e.propagationStopped_) {
      rv = currentTarget.fireListeners(type, false, e) && rv;
    }
  }
  if (opt_ancestorsTree) {
    for (i = 0;!e.propagationStopped_ && i < opt_ancestorsTree.length;i++) {
      currentTarget = e.currentTarget = opt_ancestorsTree[i];
      rv = currentTarget.fireListeners(type, false, e) && rv;
    }
  }
  return rv;
};
goog.provide("goog.Timer");
goog.require("goog.events.EventTarget");
goog.Timer = function(opt_interval, opt_timerObject) {
  goog.events.EventTarget.call(this);
  this.interval_ = opt_interval || 1;
  this.timerObject_ = opt_timerObject || goog.Timer.defaultTimerObject;
  this.boundTick_ = goog.bind(this.tick_, this);
  this.last_ = goog.now();
};
goog.inherits(goog.Timer, goog.events.EventTarget);
goog.Timer.MAX_TIMEOUT_ = 2147483647;
goog.Timer.prototype.enabled = false;
goog.Timer.defaultTimerObject = goog.global;
goog.Timer.intervalScale = .8;
goog.Timer.prototype.timer_ = null;
goog.Timer.prototype.getInterval = function() {
  return this.interval_;
};
goog.Timer.prototype.setInterval = function(interval) {
  this.interval_ = interval;
  if (this.timer_ && this.enabled) {
    this.stop();
    this.start();
  } else {
    if (this.timer_) {
      this.stop();
    }
  }
};
goog.Timer.prototype.tick_ = function() {
  if (this.enabled) {
    var elapsed = goog.now() - this.last_;
    if (elapsed > 0 && elapsed < this.interval_ * goog.Timer.intervalScale) {
      this.timer_ = this.timerObject_.setTimeout(this.boundTick_, this.interval_ - elapsed);
      return;
    }
    if (this.timer_) {
      this.timerObject_.clearTimeout(this.timer_);
      this.timer_ = null;
    }
    this.dispatchTick();
    if (this.enabled) {
      this.timer_ = this.timerObject_.setTimeout(this.boundTick_, this.interval_);
      this.last_ = goog.now();
    }
  }
};
goog.Timer.prototype.dispatchTick = function() {
  this.dispatchEvent(goog.Timer.TICK);
};
goog.Timer.prototype.start = function() {
  this.enabled = true;
  if (!this.timer_) {
    this.timer_ = this.timerObject_.setTimeout(this.boundTick_, this.interval_);
    this.last_ = goog.now();
  }
};
goog.Timer.prototype.stop = function() {
  this.enabled = false;
  if (this.timer_) {
    this.timerObject_.clearTimeout(this.timer_);
    this.timer_ = null;
  }
};
goog.Timer.prototype.disposeInternal = function() {
  goog.Timer.superClass_.disposeInternal.call(this);
  this.stop();
  delete this.timerObject_;
};
goog.Timer.TICK = "tick";
goog.Timer.callOnce = function(listener, opt_delay, opt_handler) {
  if (goog.isFunction(listener)) {
    if (opt_handler) {
      listener = goog.bind(listener, opt_handler);
    }
  } else {
    if (listener && typeof listener.handleEvent == "function") {
      listener = goog.bind(listener.handleEvent, listener);
    } else {
      throw Error("Invalid listener argument");
    }
  }
  if (opt_delay > goog.Timer.MAX_TIMEOUT_) {
    return-1;
  } else {
    return goog.Timer.defaultTimerObject.setTimeout(listener, opt_delay || 0);
  }
};
goog.Timer.clear = function(timerId) {
  goog.Timer.defaultTimerObject.clearTimeout(timerId);
};
goog.provide("goog.dom.BrowserFeature");
goog.require("goog.userAgent");
goog.dom.BrowserFeature = {CAN_ADD_NAME_OR_TYPE_ATTRIBUTES:!goog.userAgent.IE || goog.userAgent.isDocumentModeOrHigher(9), CAN_USE_CHILDREN_ATTRIBUTE:!goog.userAgent.GECKO && !goog.userAgent.IE || goog.userAgent.IE && goog.userAgent.isDocumentModeOrHigher(9) || goog.userAgent.GECKO && goog.userAgent.isVersionOrHigher("1.9.1"), CAN_USE_INNER_TEXT:goog.userAgent.IE && !goog.userAgent.isVersionOrHigher("9"), CAN_USE_PARENT_ELEMENT_PROPERTY:goog.userAgent.IE || goog.userAgent.OPERA || goog.userAgent.WEBKIT, 
INNER_HTML_NEEDS_SCOPED_ELEMENT:goog.userAgent.IE, LEGACY_IE_RANGES:goog.userAgent.IE && !goog.userAgent.isDocumentModeOrHigher(9)};
goog.provide("goog.dom.TagName");
goog.dom.TagName = {A:"A", ABBR:"ABBR", ACRONYM:"ACRONYM", ADDRESS:"ADDRESS", APPLET:"APPLET", AREA:"AREA", ARTICLE:"ARTICLE", ASIDE:"ASIDE", AUDIO:"AUDIO", B:"B", BASE:"BASE", BASEFONT:"BASEFONT", BDI:"BDI", BDO:"BDO", BIG:"BIG", BLOCKQUOTE:"BLOCKQUOTE", BODY:"BODY", BR:"BR", BUTTON:"BUTTON", CANVAS:"CANVAS", CAPTION:"CAPTION", CENTER:"CENTER", CITE:"CITE", CODE:"CODE", COL:"COL", COLGROUP:"COLGROUP", COMMAND:"COMMAND", DATA:"DATA", DATALIST:"DATALIST", DD:"DD", DEL:"DEL", DETAILS:"DETAILS", DFN:"DFN", 
DIALOG:"DIALOG", DIR:"DIR", DIV:"DIV", DL:"DL", DT:"DT", EM:"EM", EMBED:"EMBED", FIELDSET:"FIELDSET", FIGCAPTION:"FIGCAPTION", FIGURE:"FIGURE", FONT:"FONT", FOOTER:"FOOTER", FORM:"FORM", FRAME:"FRAME", FRAMESET:"FRAMESET", H1:"H1", H2:"H2", H3:"H3", H4:"H4", H5:"H5", H6:"H6", HEAD:"HEAD", HEADER:"HEADER", HGROUP:"HGROUP", HR:"HR", HTML:"HTML", I:"I", IFRAME:"IFRAME", IMG:"IMG", INPUT:"INPUT", INS:"INS", ISINDEX:"ISINDEX", KBD:"KBD", KEYGEN:"KEYGEN", LABEL:"LABEL", LEGEND:"LEGEND", LI:"LI", LINK:"LINK", 
MAP:"MAP", MARK:"MARK", MATH:"MATH", MENU:"MENU", META:"META", METER:"METER", NAV:"NAV", NOFRAMES:"NOFRAMES", NOSCRIPT:"NOSCRIPT", OBJECT:"OBJECT", OL:"OL", OPTGROUP:"OPTGROUP", OPTION:"OPTION", OUTPUT:"OUTPUT", P:"P", PARAM:"PARAM", PRE:"PRE", PROGRESS:"PROGRESS", Q:"Q", RP:"RP", RT:"RT", RUBY:"RUBY", S:"S", SAMP:"SAMP", SCRIPT:"SCRIPT", SECTION:"SECTION", SELECT:"SELECT", SMALL:"SMALL", SOURCE:"SOURCE", SPAN:"SPAN", STRIKE:"STRIKE", STRONG:"STRONG", STYLE:"STYLE", SUB:"SUB", SUMMARY:"SUMMARY", 
SUP:"SUP", SVG:"SVG", TABLE:"TABLE", TBODY:"TBODY", TD:"TD", TEXTAREA:"TEXTAREA", TFOOT:"TFOOT", TH:"TH", THEAD:"THEAD", TIME:"TIME", TITLE:"TITLE", TR:"TR", TRACK:"TRACK", TT:"TT", U:"U", UL:"UL", VAR:"VAR", VIDEO:"VIDEO", WBR:"WBR"};
goog.provide("goog.functions");
goog.functions.constant = function(retValue) {
  return function() {
    return retValue;
  };
};
goog.functions.FALSE = goog.functions.constant(false);
goog.functions.TRUE = goog.functions.constant(true);
goog.functions.NULL = goog.functions.constant(null);
goog.functions.identity = function(opt_returnValue, var_args) {
  return opt_returnValue;
};
goog.functions.error = function(message) {
  return function() {
    throw Error(message);
  };
};
goog.functions.fail = function(err) {
  return function() {
    throw err;
  };
};
goog.functions.lock = function(f, opt_numArgs) {
  opt_numArgs = opt_numArgs || 0;
  return function() {
    return f.apply(this, Array.prototype.slice.call(arguments, 0, opt_numArgs));
  };
};
goog.functions.nth = function(n) {
  return function() {
    return arguments[n];
  };
};
goog.functions.withReturnValue = function(f, retValue) {
  return goog.functions.sequence(f, goog.functions.constant(retValue));
};
goog.functions.compose = function(fn, var_args) {
  var functions = arguments;
  var length = functions.length;
  return function() {
    var result;
    if (length) {
      result = functions[length - 1].apply(this, arguments);
    }
    for (var i = length - 2;i >= 0;i--) {
      result = functions[i].call(this, result);
    }
    return result;
  };
};
goog.functions.sequence = function(var_args) {
  var functions = arguments;
  var length = functions.length;
  return function() {
    var result;
    for (var i = 0;i < length;i++) {
      result = functions[i].apply(this, arguments);
    }
    return result;
  };
};
goog.functions.and = function(var_args) {
  var functions = arguments;
  var length = functions.length;
  return function() {
    for (var i = 0;i < length;i++) {
      if (!functions[i].apply(this, arguments)) {
        return false;
      }
    }
    return true;
  };
};
goog.functions.or = function(var_args) {
  var functions = arguments;
  var length = functions.length;
  return function() {
    for (var i = 0;i < length;i++) {
      if (functions[i].apply(this, arguments)) {
        return true;
      }
    }
    return false;
  };
};
goog.functions.not = function(f) {
  return function() {
    return!f.apply(this, arguments);
  };
};
goog.functions.create = function(constructor, var_args) {
  var temp = function() {
  };
  temp.prototype = constructor.prototype;
  var obj = new temp;
  constructor.apply(obj, Array.prototype.slice.call(arguments, 1));
  return obj;
};
goog.define("goog.functions.CACHE_RETURN_VALUE", true);
goog.functions.cacheReturnValue = function(fn) {
  var called = false;
  var value;
  return function() {
    if (!goog.functions.CACHE_RETURN_VALUE) {
      return fn();
    }
    if (!called) {
      value = fn();
      called = true;
    }
    return value;
  };
};
goog.provide("goog.math");
goog.require("goog.array");
goog.require("goog.asserts");
goog.math.randomInt = function(a) {
  return Math.floor(Math.random() * a);
};
goog.math.uniformRandom = function(a, b) {
  return a + Math.random() * (b - a);
};
goog.math.clamp = function(value, min, max) {
  return Math.min(Math.max(value, min), max);
};
goog.math.modulo = function(a, b) {
  var r = a % b;
  return r * b < 0 ? r + b : r;
};
goog.math.lerp = function(a, b, x) {
  return a + x * (b - a);
};
goog.math.nearlyEquals = function(a, b, opt_tolerance) {
  return Math.abs(a - b) <= (opt_tolerance || 1E-6);
};
goog.math.standardAngle = function(angle) {
  return goog.math.modulo(angle, 360);
};
goog.math.standardAngleInRadians = function(angle) {
  return goog.math.modulo(angle, 2 * Math.PI);
};
goog.math.toRadians = function(angleDegrees) {
  return angleDegrees * Math.PI / 180;
};
goog.math.toDegrees = function(angleRadians) {
  return angleRadians * 180 / Math.PI;
};
goog.math.angleDx = function(degrees, radius) {
  return radius * Math.cos(goog.math.toRadians(degrees));
};
goog.math.angleDy = function(degrees, radius) {
  return radius * Math.sin(goog.math.toRadians(degrees));
};
goog.math.angle = function(x1, y1, x2, y2) {
  return goog.math.standardAngle(goog.math.toDegrees(Math.atan2(y2 - y1, x2 - x1)));
};
goog.math.angleDifference = function(startAngle, endAngle) {
  var d = goog.math.standardAngle(endAngle) - goog.math.standardAngle(startAngle);
  if (d > 180) {
    d = d - 360;
  } else {
    if (d <= -180) {
      d = 360 + d;
    }
  }
  return d;
};
goog.math.sign = function(x) {
  return x == 0 ? 0 : x < 0 ? -1 : 1;
};
goog.math.longestCommonSubsequence = function(array1, array2, opt_compareFn, opt_collectorFn) {
  var compare = opt_compareFn || function(a, b) {
    return a == b;
  };
  var collect = opt_collectorFn || function(i1, i2) {
    return array1[i1];
  };
  var length1 = array1.length;
  var length2 = array2.length;
  var arr = [];
  for (var i = 0;i < length1 + 1;i++) {
    arr[i] = [];
    arr[i][0] = 0;
  }
  for (var j = 0;j < length2 + 1;j++) {
    arr[0][j] = 0;
  }
  for (i = 1;i <= length1;i++) {
    for (j = 1;j <= length2;j++) {
      if (compare(array1[i - 1], array2[j - 1])) {
        arr[i][j] = arr[i - 1][j - 1] + 1;
      } else {
        arr[i][j] = Math.max(arr[i - 1][j], arr[i][j - 1]);
      }
    }
  }
  var result = [];
  var i = length1, j = length2;
  while (i > 0 && j > 0) {
    if (compare(array1[i - 1], array2[j - 1])) {
      result.unshift(collect(i - 1, j - 1));
      i--;
      j--;
    } else {
      if (arr[i - 1][j] > arr[i][j - 1]) {
        i--;
      } else {
        j--;
      }
    }
  }
  return result;
};
goog.math.sum = function(var_args) {
  return(goog.array.reduce(arguments, function(sum, value) {
    return sum + value;
  }, 0));
};
goog.math.average = function(var_args) {
  return goog.math.sum.apply(null, arguments) / arguments.length;
};
goog.math.sampleVariance = function(var_args) {
  var sampleSize = arguments.length;
  if (sampleSize < 2) {
    return 0;
  }
  var mean = goog.math.average.apply(null, arguments);
  var variance = goog.math.sum.apply(null, goog.array.map(arguments, function(val) {
    return Math.pow(val - mean, 2);
  })) / (sampleSize - 1);
  return variance;
};
goog.math.standardDeviation = function(var_args) {
  return Math.sqrt(goog.math.sampleVariance.apply(null, arguments));
};
goog.math.isInt = function(num) {
  return isFinite(num) && num % 1 == 0;
};
goog.math.isFiniteNumber = function(num) {
  return isFinite(num) && !isNaN(num);
};
goog.math.log10Floor = function(num) {
  if (num > 0) {
    var x = Math.round(Math.log(num) * Math.LOG10E);
    return x - (parseFloat("1e" + x) > num);
  }
  return num == 0 ? -Infinity : NaN;
};
goog.math.safeFloor = function(num, opt_epsilon) {
  goog.asserts.assert(!goog.isDef(opt_epsilon) || opt_epsilon > 0);
  return Math.floor(num + (opt_epsilon || 2E-15));
};
goog.math.safeCeil = function(num, opt_epsilon) {
  goog.asserts.assert(!goog.isDef(opt_epsilon) || opt_epsilon > 0);
  return Math.ceil(num - (opt_epsilon || 2E-15));
};
goog.provide("goog.math.Coordinate");
goog.require("goog.math");
goog.math.Coordinate = function(opt_x, opt_y) {
  this.x = goog.isDef(opt_x) ? opt_x : 0;
  this.y = goog.isDef(opt_y) ? opt_y : 0;
};
goog.math.Coordinate.prototype.clone = function() {
  return new goog.math.Coordinate(this.x, this.y);
};
if (goog.DEBUG) {
  goog.math.Coordinate.prototype.toString = function() {
    return "(" + this.x + ", " + this.y + ")";
  };
}
goog.math.Coordinate.equals = function(a, b) {
  if (a == b) {
    return true;
  }
  if (!a || !b) {
    return false;
  }
  return a.x == b.x && a.y == b.y;
};
goog.math.Coordinate.distance = function(a, b) {
  var dx = a.x - b.x;
  var dy = a.y - b.y;
  return Math.sqrt(dx * dx + dy * dy);
};
goog.math.Coordinate.magnitude = function(a) {
  return Math.sqrt(a.x * a.x + a.y * a.y);
};
goog.math.Coordinate.azimuth = function(a) {
  return goog.math.angle(0, 0, a.x, a.y);
};
goog.math.Coordinate.squaredDistance = function(a, b) {
  var dx = a.x - b.x;
  var dy = a.y - b.y;
  return dx * dx + dy * dy;
};
goog.math.Coordinate.difference = function(a, b) {
  return new goog.math.Coordinate(a.x - b.x, a.y - b.y);
};
goog.math.Coordinate.sum = function(a, b) {
  return new goog.math.Coordinate(a.x + b.x, a.y + b.y);
};
goog.math.Coordinate.prototype.ceil = function() {
  this.x = Math.ceil(this.x);
  this.y = Math.ceil(this.y);
  return this;
};
goog.math.Coordinate.prototype.floor = function() {
  this.x = Math.floor(this.x);
  this.y = Math.floor(this.y);
  return this;
};
goog.math.Coordinate.prototype.round = function() {
  this.x = Math.round(this.x);
  this.y = Math.round(this.y);
  return this;
};
goog.math.Coordinate.prototype.translate = function(tx, opt_ty) {
  if (tx instanceof goog.math.Coordinate) {
    this.x += tx.x;
    this.y += tx.y;
  } else {
    this.x += tx;
    if (goog.isNumber(opt_ty)) {
      this.y += opt_ty;
    }
  }
  return this;
};
goog.math.Coordinate.prototype.scale = function(sx, opt_sy) {
  var sy = goog.isNumber(opt_sy) ? opt_sy : sx;
  this.x *= sx;
  this.y *= sy;
  return this;
};
goog.math.Coordinate.prototype.rotateRadians = function(radians, opt_center) {
  var center = opt_center || new goog.math.Coordinate(0, 0);
  var x = this.x;
  var y = this.y;
  var cos = Math.cos(radians);
  var sin = Math.sin(radians);
  this.x = (x - center.x) * cos - (y - center.y) * sin + center.x;
  this.y = (x - center.x) * sin + (y - center.y) * cos + center.y;
};
goog.math.Coordinate.prototype.rotateDegrees = function(degrees, opt_center) {
  this.rotateRadians(goog.math.toRadians(degrees), opt_center);
};
goog.provide("goog.math.Size");
goog.math.Size = function(width, height) {
  this.width = width;
  this.height = height;
};
goog.math.Size.equals = function(a, b) {
  if (a == b) {
    return true;
  }
  if (!a || !b) {
    return false;
  }
  return a.width == b.width && a.height == b.height;
};
goog.math.Size.prototype.clone = function() {
  return new goog.math.Size(this.width, this.height);
};
if (goog.DEBUG) {
  goog.math.Size.prototype.toString = function() {
    return "(" + this.width + " x " + this.height + ")";
  };
}
goog.math.Size.prototype.getLongest = function() {
  return Math.max(this.width, this.height);
};
goog.math.Size.prototype.getShortest = function() {
  return Math.min(this.width, this.height);
};
goog.math.Size.prototype.area = function() {
  return this.width * this.height;
};
goog.math.Size.prototype.perimeter = function() {
  return(this.width + this.height) * 2;
};
goog.math.Size.prototype.aspectRatio = function() {
  return this.width / this.height;
};
goog.math.Size.prototype.isEmpty = function() {
  return!this.area();
};
goog.math.Size.prototype.ceil = function() {
  this.width = Math.ceil(this.width);
  this.height = Math.ceil(this.height);
  return this;
};
goog.math.Size.prototype.fitsInside = function(target) {
  return this.width <= target.width && this.height <= target.height;
};
goog.math.Size.prototype.floor = function() {
  this.width = Math.floor(this.width);
  this.height = Math.floor(this.height);
  return this;
};
goog.math.Size.prototype.round = function() {
  this.width = Math.round(this.width);
  this.height = Math.round(this.height);
  return this;
};
goog.math.Size.prototype.scale = function(sx, opt_sy) {
  var sy = goog.isNumber(opt_sy) ? opt_sy : sx;
  this.width *= sx;
  this.height *= sy;
  return this;
};
goog.math.Size.prototype.scaleToFit = function(target) {
  var s = this.aspectRatio() > target.aspectRatio() ? target.width / this.width : target.height / this.height;
  return this.scale(s);
};
goog.provide("goog.dom");
goog.provide("goog.dom.Appendable");
goog.provide("goog.dom.DomHelper");
goog.require("goog.array");
goog.require("goog.asserts");
goog.require("goog.dom.BrowserFeature");
goog.require("goog.dom.NodeType");
goog.require("goog.dom.TagName");
goog.require("goog.functions");
goog.require("goog.math.Coordinate");
goog.require("goog.math.Size");
goog.require("goog.object");
goog.require("goog.string");
goog.require("goog.userAgent");
goog.define("goog.dom.ASSUME_QUIRKS_MODE", false);
goog.define("goog.dom.ASSUME_STANDARDS_MODE", false);
goog.dom.COMPAT_MODE_KNOWN_ = goog.dom.ASSUME_QUIRKS_MODE || goog.dom.ASSUME_STANDARDS_MODE;
goog.dom.getDomHelper = function(opt_element) {
  return opt_element ? new goog.dom.DomHelper(goog.dom.getOwnerDocument(opt_element)) : goog.dom.defaultDomHelper_ || (goog.dom.defaultDomHelper_ = new goog.dom.DomHelper);
};
goog.dom.defaultDomHelper_;
goog.dom.getDocument = function() {
  return document;
};
goog.dom.getElement = function(element) {
  return goog.dom.getElementHelper_(document, element);
};
goog.dom.getElementHelper_ = function(doc, element) {
  return goog.isString(element) ? doc.getElementById(element) : element;
};
goog.dom.getRequiredElement = function(id) {
  return goog.dom.getRequiredElementHelper_(document, id);
};
goog.dom.getRequiredElementHelper_ = function(doc, id) {
  goog.asserts.assertString(id);
  var element = goog.dom.getElementHelper_(doc, id);
  element = goog.asserts.assertElement(element, "No element found with id: " + id);
  return element;
};
goog.dom.$ = goog.dom.getElement;
goog.dom.getElementsByTagNameAndClass = function(opt_tag, opt_class, opt_el) {
  return goog.dom.getElementsByTagNameAndClass_(document, opt_tag, opt_class, opt_el);
};
goog.dom.getElementsByClass = function(className, opt_el) {
  var parent = opt_el || document;
  if (goog.dom.canUseQuerySelector_(parent)) {
    return parent.querySelectorAll("." + className);
  }
  return goog.dom.getElementsByTagNameAndClass_(document, "*", className, opt_el);
};
goog.dom.getElementByClass = function(className, opt_el) {
  var parent = opt_el || document;
  var retVal = null;
  if (goog.dom.canUseQuerySelector_(parent)) {
    retVal = parent.querySelector("." + className);
  } else {
    retVal = goog.dom.getElementsByTagNameAndClass_(document, "*", className, opt_el)[0];
  }
  return retVal || null;
};
goog.dom.getRequiredElementByClass = function(className, opt_root) {
  var retValue = goog.dom.getElementByClass(className, opt_root);
  return goog.asserts.assert(retValue, "No element found with className: " + className);
};
goog.dom.canUseQuerySelector_ = function(parent) {
  return!!(parent.querySelectorAll && parent.querySelector);
};
goog.dom.getElementsByTagNameAndClass_ = function(doc, opt_tag, opt_class, opt_el) {
  var parent = opt_el || doc;
  var tagName = opt_tag && opt_tag != "*" ? opt_tag.toUpperCase() : "";
  if (goog.dom.canUseQuerySelector_(parent) && (tagName || opt_class)) {
    var query = tagName + (opt_class ? "." + opt_class : "");
    return parent.querySelectorAll(query);
  }
  if (opt_class && parent.getElementsByClassName) {
    var els = parent.getElementsByClassName(opt_class);
    if (tagName) {
      var arrayLike = {};
      var len = 0;
      for (var i = 0, el;el = els[i];i++) {
        if (tagName == el.nodeName) {
          arrayLike[len++] = el;
        }
      }
      arrayLike.length = len;
      return arrayLike;
    } else {
      return els;
    }
  }
  var els = parent.getElementsByTagName(tagName || "*");
  if (opt_class) {
    var arrayLike = {};
    var len = 0;
    for (var i = 0, el;el = els[i];i++) {
      var className = el.className;
      if (typeof className.split == "function" && goog.array.contains(className.split(/\s+/), opt_class)) {
        arrayLike[len++] = el;
      }
    }
    arrayLike.length = len;
    return arrayLike;
  } else {
    return els;
  }
};
goog.dom.$$ = goog.dom.getElementsByTagNameAndClass;
goog.dom.setProperties = function(element, properties) {
  goog.object.forEach(properties, function(val, key) {
    if (key == "style") {
      element.style.cssText = val;
    } else {
      if (key == "class") {
        element.className = val;
      } else {
        if (key == "for") {
          element.htmlFor = val;
        } else {
          if (key in goog.dom.DIRECT_ATTRIBUTE_MAP_) {
            element.setAttribute(goog.dom.DIRECT_ATTRIBUTE_MAP_[key], val);
          } else {
            if (goog.string.startsWith(key, "aria-") || goog.string.startsWith(key, "data-")) {
              element.setAttribute(key, val);
            } else {
              element[key] = val;
            }
          }
        }
      }
    }
  });
};
goog.dom.DIRECT_ATTRIBUTE_MAP_ = {"cellpadding":"cellPadding", "cellspacing":"cellSpacing", "colspan":"colSpan", "frameborder":"frameBorder", "height":"height", "maxlength":"maxLength", "role":"role", "rowspan":"rowSpan", "type":"type", "usemap":"useMap", "valign":"vAlign", "width":"width"};
goog.dom.getViewportSize = function(opt_window) {
  return goog.dom.getViewportSize_(opt_window || window);
};
goog.dom.getViewportSize_ = function(win) {
  var doc = win.document;
  var el = goog.dom.isCss1CompatMode_(doc) ? doc.documentElement : doc.body;
  return new goog.math.Size(el.clientWidth, el.clientHeight);
};
goog.dom.getDocumentHeight = function() {
  return goog.dom.getDocumentHeight_(window);
};
goog.dom.getDocumentHeight_ = function(win) {
  var doc = win.document;
  var height = 0;
  if (doc) {
    var body = doc.body;
    var docEl = doc.documentElement;
    if (!body && !docEl) {
      return 0;
    }
    var vh = goog.dom.getViewportSize_(win).height;
    if (goog.dom.isCss1CompatMode_(doc) && docEl.scrollHeight) {
      height = docEl.scrollHeight != vh ? docEl.scrollHeight : docEl.offsetHeight;
    } else {
      var sh = docEl.scrollHeight;
      var oh = docEl.offsetHeight;
      if (docEl.clientHeight != oh) {
        sh = body.scrollHeight;
        oh = body.offsetHeight;
      }
      if (sh > vh) {
        height = sh > oh ? sh : oh;
      } else {
        height = sh < oh ? sh : oh;
      }
    }
  }
  return height;
};
goog.dom.getPageScroll = function(opt_window) {
  var win = opt_window || goog.global || window;
  return goog.dom.getDomHelper(win.document).getDocumentScroll();
};
goog.dom.getDocumentScroll = function() {
  return goog.dom.getDocumentScroll_(document);
};
goog.dom.getDocumentScroll_ = function(doc) {
  var el = goog.dom.getDocumentScrollElement_(doc);
  var win = goog.dom.getWindow_(doc);
  if (goog.userAgent.IE && goog.userAgent.isVersionOrHigher("10") && win.pageYOffset != el.scrollTop) {
    return new goog.math.Coordinate(el.scrollLeft, el.scrollTop);
  }
  return new goog.math.Coordinate(win.pageXOffset || el.scrollLeft, win.pageYOffset || el.scrollTop);
};
goog.dom.getDocumentScrollElement = function() {
  return goog.dom.getDocumentScrollElement_(document);
};
goog.dom.getDocumentScrollElement_ = function(doc) {
  if (!goog.userAgent.WEBKIT && goog.dom.isCss1CompatMode_(doc)) {
    return doc.documentElement;
  }
  return doc.body || doc.documentElement;
};
goog.dom.getWindow = function(opt_doc) {
  return opt_doc ? goog.dom.getWindow_(opt_doc) : window;
};
goog.dom.getWindow_ = function(doc) {
  return doc.parentWindow || doc.defaultView;
};
goog.dom.createDom = function(tagName, opt_attributes, var_args) {
  return goog.dom.createDom_(document, arguments);
};
goog.dom.createDom_ = function(doc, args) {
  var tagName = args[0];
  var attributes = args[1];
  if (!goog.dom.BrowserFeature.CAN_ADD_NAME_OR_TYPE_ATTRIBUTES && attributes && (attributes.name || attributes.type)) {
    var tagNameArr = ["\x3c", tagName];
    if (attributes.name) {
      tagNameArr.push(' name\x3d"', goog.string.htmlEscape(attributes.name), '"');
    }
    if (attributes.type) {
      tagNameArr.push(' type\x3d"', goog.string.htmlEscape(attributes.type), '"');
      var clone = {};
      goog.object.extend(clone, attributes);
      delete clone["type"];
      attributes = clone;
    }
    tagNameArr.push("\x3e");
    tagName = tagNameArr.join("");
  }
  var element = doc.createElement(tagName);
  if (attributes) {
    if (goog.isString(attributes)) {
      element.className = attributes;
    } else {
      if (goog.isArray(attributes)) {
        element.className = attributes.join(" ");
      } else {
        goog.dom.setProperties(element, attributes);
      }
    }
  }
  if (args.length > 2) {
    goog.dom.append_(doc, element, args, 2);
  }
  return element;
};
goog.dom.append_ = function(doc, parent, args, startIndex) {
  function childHandler(child) {
    if (child) {
      parent.appendChild(goog.isString(child) ? doc.createTextNode(child) : child);
    }
  }
  for (var i = startIndex;i < args.length;i++) {
    var arg = args[i];
    if (goog.isArrayLike(arg) && !goog.dom.isNodeLike(arg)) {
      goog.array.forEach(goog.dom.isNodeList(arg) ? goog.array.toArray(arg) : arg, childHandler);
    } else {
      childHandler(arg);
    }
  }
};
goog.dom.$dom = goog.dom.createDom;
goog.dom.createElement = function(name) {
  return document.createElement(name);
};
goog.dom.createTextNode = function(content) {
  return document.createTextNode(String(content));
};
goog.dom.createTable = function(rows, columns, opt_fillWithNbsp) {
  return goog.dom.createTable_(document, rows, columns, !!opt_fillWithNbsp);
};
goog.dom.createTable_ = function(doc, rows, columns, fillWithNbsp) {
  var rowHtml = ["\x3ctr\x3e"];
  for (var i = 0;i < columns;i++) {
    rowHtml.push(fillWithNbsp ? "\x3ctd\x3e\x26nbsp;\x3c/td\x3e" : "\x3ctd\x3e\x3c/td\x3e");
  }
  rowHtml.push("\x3c/tr\x3e");
  rowHtml = rowHtml.join("");
  var totalHtml = ["\x3ctable\x3e"];
  for (i = 0;i < rows;i++) {
    totalHtml.push(rowHtml);
  }
  totalHtml.push("\x3c/table\x3e");
  var elem = doc.createElement(goog.dom.TagName.DIV);
  elem.innerHTML = totalHtml.join("");
  return(elem.removeChild(elem.firstChild));
};
goog.dom.htmlToDocumentFragment = function(htmlString) {
  return goog.dom.htmlToDocumentFragment_(document, htmlString);
};
goog.dom.htmlToDocumentFragment_ = function(doc, htmlString) {
  var tempDiv = doc.createElement("div");
  if (goog.dom.BrowserFeature.INNER_HTML_NEEDS_SCOPED_ELEMENT) {
    tempDiv.innerHTML = "\x3cbr\x3e" + htmlString;
    tempDiv.removeChild(tempDiv.firstChild);
  } else {
    tempDiv.innerHTML = htmlString;
  }
  if (tempDiv.childNodes.length == 1) {
    return(tempDiv.removeChild(tempDiv.firstChild));
  } else {
    var fragment = doc.createDocumentFragment();
    while (tempDiv.firstChild) {
      fragment.appendChild(tempDiv.firstChild);
    }
    return fragment;
  }
};
goog.dom.isCss1CompatMode = function() {
  return goog.dom.isCss1CompatMode_(document);
};
goog.dom.isCss1CompatMode_ = function(doc) {
  if (goog.dom.COMPAT_MODE_KNOWN_) {
    return goog.dom.ASSUME_STANDARDS_MODE;
  }
  return doc.compatMode == "CSS1Compat";
};
goog.dom.canHaveChildren = function(node) {
  if (node.nodeType != goog.dom.NodeType.ELEMENT) {
    return false;
  }
  switch(node.tagName) {
    case goog.dom.TagName.APPLET:
    ;
    case goog.dom.TagName.AREA:
    ;
    case goog.dom.TagName.BASE:
    ;
    case goog.dom.TagName.BR:
    ;
    case goog.dom.TagName.COL:
    ;
    case goog.dom.TagName.COMMAND:
    ;
    case goog.dom.TagName.EMBED:
    ;
    case goog.dom.TagName.FRAME:
    ;
    case goog.dom.TagName.HR:
    ;
    case goog.dom.TagName.IMG:
    ;
    case goog.dom.TagName.INPUT:
    ;
    case goog.dom.TagName.IFRAME:
    ;
    case goog.dom.TagName.ISINDEX:
    ;
    case goog.dom.TagName.KEYGEN:
    ;
    case goog.dom.TagName.LINK:
    ;
    case goog.dom.TagName.NOFRAMES:
    ;
    case goog.dom.TagName.NOSCRIPT:
    ;
    case goog.dom.TagName.META:
    ;
    case goog.dom.TagName.OBJECT:
    ;
    case goog.dom.TagName.PARAM:
    ;
    case goog.dom.TagName.SCRIPT:
    ;
    case goog.dom.TagName.SOURCE:
    ;
    case goog.dom.TagName.STYLE:
    ;
    case goog.dom.TagName.TRACK:
    ;
    case goog.dom.TagName.WBR:
      return false;
  }
  return true;
};
goog.dom.appendChild = function(parent, child) {
  parent.appendChild(child);
};
goog.dom.append = function(parent, var_args) {
  goog.dom.append_(goog.dom.getOwnerDocument(parent), parent, arguments, 1);
};
goog.dom.removeChildren = function(node) {
  var child;
  while (child = node.firstChild) {
    node.removeChild(child);
  }
};
goog.dom.insertSiblingBefore = function(newNode, refNode) {
  if (refNode.parentNode) {
    refNode.parentNode.insertBefore(newNode, refNode);
  }
};
goog.dom.insertSiblingAfter = function(newNode, refNode) {
  if (refNode.parentNode) {
    refNode.parentNode.insertBefore(newNode, refNode.nextSibling);
  }
};
goog.dom.insertChildAt = function(parent, child, index) {
  parent.insertBefore(child, parent.childNodes[index] || null);
};
goog.dom.removeNode = function(node) {
  return node && node.parentNode ? node.parentNode.removeChild(node) : null;
};
goog.dom.replaceNode = function(newNode, oldNode) {
  var parent = oldNode.parentNode;
  if (parent) {
    parent.replaceChild(newNode, oldNode);
  }
};
goog.dom.flattenElement = function(element) {
  var child, parent = element.parentNode;
  if (parent && parent.nodeType != goog.dom.NodeType.DOCUMENT_FRAGMENT) {
    if (element.removeNode) {
      return(element.removeNode(false));
    } else {
      while (child = element.firstChild) {
        parent.insertBefore(child, element);
      }
      return(goog.dom.removeNode(element));
    }
  }
};
goog.dom.getChildren = function(element) {
  if (goog.dom.BrowserFeature.CAN_USE_CHILDREN_ATTRIBUTE && element.children != undefined) {
    return element.children;
  }
  return goog.array.filter(element.childNodes, function(node) {
    return node.nodeType == goog.dom.NodeType.ELEMENT;
  });
};
goog.dom.getFirstElementChild = function(node) {
  if (node.firstElementChild != undefined) {
    return(node).firstElementChild;
  }
  return goog.dom.getNextElementNode_(node.firstChild, true);
};
goog.dom.getLastElementChild = function(node) {
  if (node.lastElementChild != undefined) {
    return(node).lastElementChild;
  }
  return goog.dom.getNextElementNode_(node.lastChild, false);
};
goog.dom.getNextElementSibling = function(node) {
  if (node.nextElementSibling != undefined) {
    return(node).nextElementSibling;
  }
  return goog.dom.getNextElementNode_(node.nextSibling, true);
};
goog.dom.getPreviousElementSibling = function(node) {
  if (node.previousElementSibling != undefined) {
    return(node).previousElementSibling;
  }
  return goog.dom.getNextElementNode_(node.previousSibling, false);
};
goog.dom.getNextElementNode_ = function(node, forward) {
  while (node && node.nodeType != goog.dom.NodeType.ELEMENT) {
    node = forward ? node.nextSibling : node.previousSibling;
  }
  return(node);
};
goog.dom.getNextNode = function(node) {
  if (!node) {
    return null;
  }
  if (node.firstChild) {
    return node.firstChild;
  }
  while (node && !node.nextSibling) {
    node = node.parentNode;
  }
  return node ? node.nextSibling : null;
};
goog.dom.getPreviousNode = function(node) {
  if (!node) {
    return null;
  }
  if (!node.previousSibling) {
    return node.parentNode;
  }
  node = node.previousSibling;
  while (node && node.lastChild) {
    node = node.lastChild;
  }
  return node;
};
goog.dom.isNodeLike = function(obj) {
  return goog.isObject(obj) && obj.nodeType > 0;
};
goog.dom.isElement = function(obj) {
  return goog.isObject(obj) && obj.nodeType == goog.dom.NodeType.ELEMENT;
};
goog.dom.isWindow = function(obj) {
  return goog.isObject(obj) && obj["window"] == obj;
};
goog.dom.getParentElement = function(element) {
  var parent;
  if (goog.dom.BrowserFeature.CAN_USE_PARENT_ELEMENT_PROPERTY) {
    var isIe9 = goog.userAgent.IE && goog.userAgent.isVersionOrHigher("9") && !goog.userAgent.isVersionOrHigher("10");
    if (!(isIe9 && goog.global["SVGElement"] && element instanceof goog.global["SVGElement"])) {
      parent = element.parentElement;
      if (parent) {
        return parent;
      }
    }
  }
  parent = element.parentNode;
  return goog.dom.isElement(parent) ? (parent) : null;
};
goog.dom.contains = function(parent, descendant) {
  if (parent.contains && descendant.nodeType == goog.dom.NodeType.ELEMENT) {
    return parent == descendant || parent.contains(descendant);
  }
  if (typeof parent.compareDocumentPosition != "undefined") {
    return parent == descendant || Boolean(parent.compareDocumentPosition(descendant) & 16);
  }
  while (descendant && parent != descendant) {
    descendant = descendant.parentNode;
  }
  return descendant == parent;
};
goog.dom.compareNodeOrder = function(node1, node2) {
  if (node1 == node2) {
    return 0;
  }
  if (node1.compareDocumentPosition) {
    return node1.compareDocumentPosition(node2) & 2 ? 1 : -1;
  }
  if (goog.userAgent.IE && !goog.userAgent.isDocumentModeOrHigher(9)) {
    if (node1.nodeType == goog.dom.NodeType.DOCUMENT) {
      return-1;
    }
    if (node2.nodeType == goog.dom.NodeType.DOCUMENT) {
      return 1;
    }
  }
  if ("sourceIndex" in node1 || node1.parentNode && "sourceIndex" in node1.parentNode) {
    var isElement1 = node1.nodeType == goog.dom.NodeType.ELEMENT;
    var isElement2 = node2.nodeType == goog.dom.NodeType.ELEMENT;
    if (isElement1 && isElement2) {
      return node1.sourceIndex - node2.sourceIndex;
    } else {
      var parent1 = node1.parentNode;
      var parent2 = node2.parentNode;
      if (parent1 == parent2) {
        return goog.dom.compareSiblingOrder_(node1, node2);
      }
      if (!isElement1 && goog.dom.contains(parent1, node2)) {
        return-1 * goog.dom.compareParentsDescendantNodeIe_(node1, node2);
      }
      if (!isElement2 && goog.dom.contains(parent2, node1)) {
        return goog.dom.compareParentsDescendantNodeIe_(node2, node1);
      }
      return(isElement1 ? node1.sourceIndex : parent1.sourceIndex) - (isElement2 ? node2.sourceIndex : parent2.sourceIndex);
    }
  }
  var doc = goog.dom.getOwnerDocument(node1);
  var range1, range2;
  range1 = doc.createRange();
  range1.selectNode(node1);
  range1.collapse(true);
  range2 = doc.createRange();
  range2.selectNode(node2);
  range2.collapse(true);
  return range1.compareBoundaryPoints(goog.global["Range"].START_TO_END, range2);
};
goog.dom.compareParentsDescendantNodeIe_ = function(textNode, node) {
  var parent = textNode.parentNode;
  if (parent == node) {
    return-1;
  }
  var sibling = node;
  while (sibling.parentNode != parent) {
    sibling = sibling.parentNode;
  }
  return goog.dom.compareSiblingOrder_(sibling, textNode);
};
goog.dom.compareSiblingOrder_ = function(node1, node2) {
  var s = node2;
  while (s = s.previousSibling) {
    if (s == node1) {
      return-1;
    }
  }
  return 1;
};
goog.dom.findCommonAncestor = function(var_args) {
  var i, count = arguments.length;
  if (!count) {
    return null;
  } else {
    if (count == 1) {
      return arguments[0];
    }
  }
  var paths = [];
  var minLength = Infinity;
  for (i = 0;i < count;i++) {
    var ancestors = [];
    var node = arguments[i];
    while (node) {
      ancestors.unshift(node);
      node = node.parentNode;
    }
    paths.push(ancestors);
    minLength = Math.min(minLength, ancestors.length);
  }
  var output = null;
  for (i = 0;i < minLength;i++) {
    var first = paths[0][i];
    for (var j = 1;j < count;j++) {
      if (first != paths[j][i]) {
        return output;
      }
    }
    output = first;
  }
  return output;
};
goog.dom.getOwnerDocument = function(node) {
  goog.asserts.assert(node, "Node cannot be null or undefined.");
  return(node.nodeType == goog.dom.NodeType.DOCUMENT ? node : node.ownerDocument || node.document);
};
goog.dom.getFrameContentDocument = function(frame) {
  var doc = frame.contentDocument || frame.contentWindow.document;
  return doc;
};
goog.dom.getFrameContentWindow = function(frame) {
  return frame.contentWindow || goog.dom.getWindow(goog.dom.getFrameContentDocument(frame));
};
goog.dom.setTextContent = function(node, text) {
  goog.asserts.assert(node != null, "goog.dom.setTextContent expects a non-null value for node");
  if ("textContent" in node) {
    node.textContent = text;
  } else {
    if (node.nodeType == goog.dom.NodeType.TEXT) {
      node.data = text;
    } else {
      if (node.firstChild && node.firstChild.nodeType == goog.dom.NodeType.TEXT) {
        while (node.lastChild != node.firstChild) {
          node.removeChild(node.lastChild);
        }
        node.firstChild.data = text;
      } else {
        goog.dom.removeChildren(node);
        var doc = goog.dom.getOwnerDocument(node);
        node.appendChild(doc.createTextNode(String(text)));
      }
    }
  }
};
goog.dom.getOuterHtml = function(element) {
  if ("outerHTML" in element) {
    return element.outerHTML;
  } else {
    var doc = goog.dom.getOwnerDocument(element);
    var div = doc.createElement("div");
    div.appendChild(element.cloneNode(true));
    return div.innerHTML;
  }
};
goog.dom.findNode = function(root, p) {
  var rv = [];
  var found = goog.dom.findNodes_(root, p, rv, true);
  return found ? rv[0] : undefined;
};
goog.dom.findNodes = function(root, p) {
  var rv = [];
  goog.dom.findNodes_(root, p, rv, false);
  return rv;
};
goog.dom.findNodes_ = function(root, p, rv, findOne) {
  if (root != null) {
    var child = root.firstChild;
    while (child) {
      if (p(child)) {
        rv.push(child);
        if (findOne) {
          return true;
        }
      }
      if (goog.dom.findNodes_(child, p, rv, findOne)) {
        return true;
      }
      child = child.nextSibling;
    }
  }
  return false;
};
goog.dom.TAGS_TO_IGNORE_ = {"SCRIPT":1, "STYLE":1, "HEAD":1, "IFRAME":1, "OBJECT":1};
goog.dom.PREDEFINED_TAG_VALUES_ = {"IMG":" ", "BR":"\n"};
goog.dom.isFocusableTabIndex = function(element) {
  return goog.dom.hasSpecifiedTabIndex_(element) && goog.dom.isTabIndexFocusable_(element);
};
goog.dom.setFocusableTabIndex = function(element, enable) {
  if (enable) {
    element.tabIndex = 0;
  } else {
    element.tabIndex = -1;
    element.removeAttribute("tabIndex");
  }
};
goog.dom.isFocusable = function(element) {
  var focusable;
  if (goog.dom.nativelySupportsFocus_(element)) {
    focusable = !element.disabled && (!goog.dom.hasSpecifiedTabIndex_(element) || goog.dom.isTabIndexFocusable_(element));
  } else {
    focusable = goog.dom.isFocusableTabIndex(element);
  }
  return focusable && goog.userAgent.IE ? goog.dom.hasNonZeroBoundingRect_(element) : focusable;
};
goog.dom.hasSpecifiedTabIndex_ = function(element) {
  var attrNode = element.getAttributeNode("tabindex");
  return goog.isDefAndNotNull(attrNode) && attrNode.specified;
};
goog.dom.isTabIndexFocusable_ = function(element) {
  var index = element.tabIndex;
  return goog.isNumber(index) && index >= 0 && index < 32768;
};
goog.dom.nativelySupportsFocus_ = function(element) {
  return element.tagName == goog.dom.TagName.A || element.tagName == goog.dom.TagName.INPUT || element.tagName == goog.dom.TagName.TEXTAREA || element.tagName == goog.dom.TagName.SELECT || element.tagName == goog.dom.TagName.BUTTON;
};
goog.dom.hasNonZeroBoundingRect_ = function(element) {
  var rect = goog.isFunction(element["getBoundingClientRect"]) ? element.getBoundingClientRect() : {"height":element.offsetHeight, "width":element.offsetWidth};
  return goog.isDefAndNotNull(rect) && rect.height > 0 && rect.width > 0;
};
goog.dom.getTextContent = function(node) {
  var textContent;
  if (goog.dom.BrowserFeature.CAN_USE_INNER_TEXT && "innerText" in node) {
    textContent = goog.string.canonicalizeNewlines(node.innerText);
  } else {
    var buf = [];
    goog.dom.getTextContent_(node, buf, true);
    textContent = buf.join("");
  }
  textContent = textContent.replace(/ \xAD /g, " ").replace(/\xAD/g, "");
  textContent = textContent.replace(/\u200B/g, "");
  if (!goog.dom.BrowserFeature.CAN_USE_INNER_TEXT) {
    textContent = textContent.replace(/ +/g, " ");
  }
  if (textContent != " ") {
    textContent = textContent.replace(/^\s*/, "");
  }
  return textContent;
};
goog.dom.getRawTextContent = function(node) {
  var buf = [];
  goog.dom.getTextContent_(node, buf, false);
  return buf.join("");
};
goog.dom.getTextContent_ = function(node, buf, normalizeWhitespace) {
  if (node.nodeName in goog.dom.TAGS_TO_IGNORE_) {
  } else {
    if (node.nodeType == goog.dom.NodeType.TEXT) {
      if (normalizeWhitespace) {
        buf.push(String(node.nodeValue).replace(/(\r\n|\r|\n)/g, ""));
      } else {
        buf.push(node.nodeValue);
      }
    } else {
      if (node.nodeName in goog.dom.PREDEFINED_TAG_VALUES_) {
        buf.push(goog.dom.PREDEFINED_TAG_VALUES_[node.nodeName]);
      } else {
        var child = node.firstChild;
        while (child) {
          goog.dom.getTextContent_(child, buf, normalizeWhitespace);
          child = child.nextSibling;
        }
      }
    }
  }
};
goog.dom.getNodeTextLength = function(node) {
  return goog.dom.getTextContent(node).length;
};
goog.dom.getNodeTextOffset = function(node, opt_offsetParent) {
  var root = opt_offsetParent || goog.dom.getOwnerDocument(node).body;
  var buf = [];
  while (node && node != root) {
    var cur = node;
    while (cur = cur.previousSibling) {
      buf.unshift(goog.dom.getTextContent(cur));
    }
    node = node.parentNode;
  }
  return goog.string.trimLeft(buf.join("")).replace(/ +/g, " ").length;
};
goog.dom.getNodeAtOffset = function(parent, offset, opt_result) {
  var stack = [parent], pos = 0, cur = null;
  while (stack.length > 0 && pos < offset) {
    cur = stack.pop();
    if (cur.nodeName in goog.dom.TAGS_TO_IGNORE_) {
    } else {
      if (cur.nodeType == goog.dom.NodeType.TEXT) {
        var text = cur.nodeValue.replace(/(\r\n|\r|\n)/g, "").replace(/ +/g, " ");
        pos += text.length;
      } else {
        if (cur.nodeName in goog.dom.PREDEFINED_TAG_VALUES_) {
          pos += goog.dom.PREDEFINED_TAG_VALUES_[cur.nodeName].length;
        } else {
          for (var i = cur.childNodes.length - 1;i >= 0;i--) {
            stack.push(cur.childNodes[i]);
          }
        }
      }
    }
  }
  if (goog.isObject(opt_result)) {
    opt_result.remainder = cur ? cur.nodeValue.length + offset - pos - 1 : 0;
    opt_result.node = cur;
  }
  return cur;
};
goog.dom.isNodeList = function(val) {
  if (val && typeof val.length == "number") {
    if (goog.isObject(val)) {
      return typeof val.item == "function" || typeof val.item == "string";
    } else {
      if (goog.isFunction(val)) {
        return typeof val.item == "function";
      }
    }
  }
  return false;
};
goog.dom.getAncestorByTagNameAndClass = function(element, opt_tag, opt_class) {
  if (!opt_tag && !opt_class) {
    return null;
  }
  var tagName = opt_tag ? opt_tag.toUpperCase() : null;
  return(goog.dom.getAncestor(element, function(node) {
    return(!tagName || node.nodeName == tagName) && (!opt_class || goog.isString(node.className) && goog.array.contains(node.className.split(/\s+/), opt_class));
  }, true));
};
goog.dom.getAncestorByClass = function(element, className) {
  return goog.dom.getAncestorByTagNameAndClass(element, null, className);
};
goog.dom.getAncestor = function(element, matcher, opt_includeNode, opt_maxSearchSteps) {
  if (!opt_includeNode) {
    element = element.parentNode;
  }
  var ignoreSearchSteps = opt_maxSearchSteps == null;
  var steps = 0;
  while (element && (ignoreSearchSteps || steps <= opt_maxSearchSteps)) {
    if (matcher(element)) {
      return element;
    }
    element = element.parentNode;
    steps++;
  }
  return null;
};
goog.dom.getActiveElement = function(doc) {
  try {
    return doc && doc.activeElement;
  } catch (e) {
  }
  return null;
};
goog.dom.devicePixelRatio_;
goog.dom.getPixelRatio = goog.functions.cacheReturnValue(function() {
  var win = goog.dom.getWindow();
  var isFirefoxMobile = goog.userAgent.GECKO && goog.userAgent.MOBILE;
  if (goog.isDef(win.devicePixelRatio) && !isFirefoxMobile) {
    return win.devicePixelRatio;
  } else {
    if (win.matchMedia) {
      return goog.dom.matchesPixelRatio_(.75) || goog.dom.matchesPixelRatio_(1.5) || goog.dom.matchesPixelRatio_(2) || goog.dom.matchesPixelRatio_(3) || 1;
    }
  }
  return 1;
});
goog.dom.matchesPixelRatio_ = function(pixelRatio) {
  var win = goog.dom.getWindow();
  var query = "(-webkit-min-device-pixel-ratio: " + pixelRatio + ")," + "(min--moz-device-pixel-ratio: " + pixelRatio + ")," + "(min-resolution: " + pixelRatio + "dppx)";
  return win.matchMedia(query).matches ? pixelRatio : 0;
};
goog.dom.DomHelper = function(opt_document) {
  this.document_ = opt_document || goog.global.document || document;
};
goog.dom.DomHelper.prototype.getDomHelper = goog.dom.getDomHelper;
goog.dom.DomHelper.prototype.setDocument = function(document) {
  this.document_ = document;
};
goog.dom.DomHelper.prototype.getDocument = function() {
  return this.document_;
};
goog.dom.DomHelper.prototype.getElement = function(element) {
  return goog.dom.getElementHelper_(this.document_, element);
};
goog.dom.DomHelper.prototype.getRequiredElement = function(id) {
  return goog.dom.getRequiredElementHelper_(this.document_, id);
};
goog.dom.DomHelper.prototype.$ = goog.dom.DomHelper.prototype.getElement;
goog.dom.DomHelper.prototype.getElementsByTagNameAndClass = function(opt_tag, opt_class, opt_el) {
  return goog.dom.getElementsByTagNameAndClass_(this.document_, opt_tag, opt_class, opt_el);
};
goog.dom.DomHelper.prototype.getElementsByClass = function(className, opt_el) {
  var doc = opt_el || this.document_;
  return goog.dom.getElementsByClass(className, doc);
};
goog.dom.DomHelper.prototype.getElementByClass = function(className, opt_el) {
  var doc = opt_el || this.document_;
  return goog.dom.getElementByClass(className, doc);
};
goog.dom.DomHelper.prototype.getRequiredElementByClass = function(className, opt_root) {
  var root = opt_root || this.document_;
  return goog.dom.getRequiredElementByClass(className, root);
};
goog.dom.DomHelper.prototype.$$ = goog.dom.DomHelper.prototype.getElementsByTagNameAndClass;
goog.dom.DomHelper.prototype.setProperties = goog.dom.setProperties;
goog.dom.DomHelper.prototype.getViewportSize = function(opt_window) {
  return goog.dom.getViewportSize(opt_window || this.getWindow());
};
goog.dom.DomHelper.prototype.getDocumentHeight = function() {
  return goog.dom.getDocumentHeight_(this.getWindow());
};
goog.dom.Appendable;
goog.dom.DomHelper.prototype.createDom = function(tagName, opt_attributes, var_args) {
  return goog.dom.createDom_(this.document_, arguments);
};
goog.dom.DomHelper.prototype.$dom = goog.dom.DomHelper.prototype.createDom;
goog.dom.DomHelper.prototype.createElement = function(name) {
  return this.document_.createElement(name);
};
goog.dom.DomHelper.prototype.createTextNode = function(content) {
  return this.document_.createTextNode(String(content));
};
goog.dom.DomHelper.prototype.createTable = function(rows, columns, opt_fillWithNbsp) {
  return goog.dom.createTable_(this.document_, rows, columns, !!opt_fillWithNbsp);
};
goog.dom.DomHelper.prototype.htmlToDocumentFragment = function(htmlString) {
  return goog.dom.htmlToDocumentFragment_(this.document_, htmlString);
};
goog.dom.DomHelper.prototype.isCss1CompatMode = function() {
  return goog.dom.isCss1CompatMode_(this.document_);
};
goog.dom.DomHelper.prototype.getWindow = function() {
  return goog.dom.getWindow_(this.document_);
};
goog.dom.DomHelper.prototype.getDocumentScrollElement = function() {
  return goog.dom.getDocumentScrollElement_(this.document_);
};
goog.dom.DomHelper.prototype.getDocumentScroll = function() {
  return goog.dom.getDocumentScroll_(this.document_);
};
goog.dom.DomHelper.prototype.getActiveElement = function(opt_doc) {
  return goog.dom.getActiveElement(opt_doc || this.document_);
};
goog.dom.DomHelper.prototype.appendChild = goog.dom.appendChild;
goog.dom.DomHelper.prototype.append = goog.dom.append;
goog.dom.DomHelper.prototype.canHaveChildren = goog.dom.canHaveChildren;
goog.dom.DomHelper.prototype.removeChildren = goog.dom.removeChildren;
goog.dom.DomHelper.prototype.insertSiblingBefore = goog.dom.insertSiblingBefore;
goog.dom.DomHelper.prototype.insertSiblingAfter = goog.dom.insertSiblingAfter;
goog.dom.DomHelper.prototype.insertChildAt = goog.dom.insertChildAt;
goog.dom.DomHelper.prototype.removeNode = goog.dom.removeNode;
goog.dom.DomHelper.prototype.replaceNode = goog.dom.replaceNode;
goog.dom.DomHelper.prototype.flattenElement = goog.dom.flattenElement;
goog.dom.DomHelper.prototype.getChildren = goog.dom.getChildren;
goog.dom.DomHelper.prototype.getFirstElementChild = goog.dom.getFirstElementChild;
goog.dom.DomHelper.prototype.getLastElementChild = goog.dom.getLastElementChild;
goog.dom.DomHelper.prototype.getNextElementSibling = goog.dom.getNextElementSibling;
goog.dom.DomHelper.prototype.getPreviousElementSibling = goog.dom.getPreviousElementSibling;
goog.dom.DomHelper.prototype.getNextNode = goog.dom.getNextNode;
goog.dom.DomHelper.prototype.getPreviousNode = goog.dom.getPreviousNode;
goog.dom.DomHelper.prototype.isNodeLike = goog.dom.isNodeLike;
goog.dom.DomHelper.prototype.isElement = goog.dom.isElement;
goog.dom.DomHelper.prototype.isWindow = goog.dom.isWindow;
goog.dom.DomHelper.prototype.getParentElement = goog.dom.getParentElement;
goog.dom.DomHelper.prototype.contains = goog.dom.contains;
goog.dom.DomHelper.prototype.compareNodeOrder = goog.dom.compareNodeOrder;
goog.dom.DomHelper.prototype.findCommonAncestor = goog.dom.findCommonAncestor;
goog.dom.DomHelper.prototype.getOwnerDocument = goog.dom.getOwnerDocument;
goog.dom.DomHelper.prototype.getFrameContentDocument = goog.dom.getFrameContentDocument;
goog.dom.DomHelper.prototype.getFrameContentWindow = goog.dom.getFrameContentWindow;
goog.dom.DomHelper.prototype.setTextContent = goog.dom.setTextContent;
goog.dom.DomHelper.prototype.getOuterHtml = goog.dom.getOuterHtml;
goog.dom.DomHelper.prototype.findNode = goog.dom.findNode;
goog.dom.DomHelper.prototype.findNodes = goog.dom.findNodes;
goog.dom.DomHelper.prototype.isFocusableTabIndex = goog.dom.isFocusableTabIndex;
goog.dom.DomHelper.prototype.setFocusableTabIndex = goog.dom.setFocusableTabIndex;
goog.dom.DomHelper.prototype.isFocusable = goog.dom.isFocusable;
goog.dom.DomHelper.prototype.getTextContent = goog.dom.getTextContent;
goog.dom.DomHelper.prototype.getNodeTextLength = goog.dom.getNodeTextLength;
goog.dom.DomHelper.prototype.getNodeTextOffset = goog.dom.getNodeTextOffset;
goog.dom.DomHelper.prototype.getNodeAtOffset = goog.dom.getNodeAtOffset;
goog.dom.DomHelper.prototype.isNodeList = goog.dom.isNodeList;
goog.dom.DomHelper.prototype.getAncestorByTagNameAndClass = goog.dom.getAncestorByTagNameAndClass;
goog.dom.DomHelper.prototype.getAncestorByClass = goog.dom.getAncestorByClass;
goog.dom.DomHelper.prototype.getAncestor = goog.dom.getAncestor;
goog.provide("goog.events.EventHandler");
goog.require("goog.Disposable");
goog.require("goog.events");
goog.require("goog.object");
goog.forwardDeclare("goog.events.EventWrapper");
goog.events.EventHandler = function(opt_scope) {
  goog.Disposable.call(this);
  this.handler_ = opt_scope;
  this.keys_ = {};
};
goog.inherits(goog.events.EventHandler, goog.Disposable);
goog.events.EventHandler.typeArray_ = [];
goog.events.EventHandler.prototype.listen = function(src, type, opt_fn, opt_capture) {
  return this.listen_(src, type, opt_fn, opt_capture);
};
goog.events.EventHandler.prototype.listenWithScope = function(src, type, fn, capture, scope) {
  return this.listen_(src, type, fn, capture, scope);
};
goog.events.EventHandler.prototype.listen_ = function(src, type, opt_fn, opt_capture, opt_scope) {
  if (!goog.isArray(type)) {
    if (type) {
      goog.events.EventHandler.typeArray_[0] = type.toString();
    }
    type = goog.events.EventHandler.typeArray_;
  }
  for (var i = 0;i < type.length;i++) {
    var listenerObj = goog.events.listen(src, type[i], opt_fn || this.handleEvent, opt_capture || false, opt_scope || this.handler_ || this);
    if (!listenerObj) {
      return this;
    }
    var key = listenerObj.key;
    this.keys_[key] = listenerObj;
  }
  return this;
};
goog.events.EventHandler.prototype.listenOnce = function(src, type, opt_fn, opt_capture) {
  return this.listenOnce_(src, type, opt_fn, opt_capture);
};
goog.events.EventHandler.prototype.listenOnceWithScope = function(src, type, fn, capture, scope) {
  return this.listenOnce_(src, type, fn, capture, scope);
};
goog.events.EventHandler.prototype.listenOnce_ = function(src, type, opt_fn, opt_capture, opt_scope) {
  if (goog.isArray(type)) {
    for (var i = 0;i < type.length;i++) {
      this.listenOnce_(src, type[i], opt_fn, opt_capture, opt_scope);
    }
  } else {
    var listenerObj = goog.events.listenOnce(src, type, opt_fn || this.handleEvent, opt_capture, opt_scope || this.handler_ || this);
    if (!listenerObj) {
      return this;
    }
    var key = listenerObj.key;
    this.keys_[key] = listenerObj;
  }
  return this;
};
goog.events.EventHandler.prototype.listenWithWrapper = function(src, wrapper, listener, opt_capt) {
  return this.listenWithWrapper_(src, wrapper, listener, opt_capt);
};
goog.events.EventHandler.prototype.listenWithWrapperAndScope = function(src, wrapper, listener, capture, scope) {
  return this.listenWithWrapper_(src, wrapper, listener, capture, scope);
};
goog.events.EventHandler.prototype.listenWithWrapper_ = function(src, wrapper, listener, opt_capt, opt_scope) {
  wrapper.listen(src, listener, opt_capt, opt_scope || this.handler_ || this, this);
  return this;
};
goog.events.EventHandler.prototype.getListenerCount = function() {
  var count = 0;
  for (var key in this.keys_) {
    if (Object.prototype.hasOwnProperty.call(this.keys_, key)) {
      count++;
    }
  }
  return count;
};
goog.events.EventHandler.prototype.unlisten = function(src, type, opt_fn, opt_capture, opt_scope) {
  if (goog.isArray(type)) {
    for (var i = 0;i < type.length;i++) {
      this.unlisten(src, type[i], opt_fn, opt_capture, opt_scope);
    }
  } else {
    var listener = goog.events.getListener(src, type, opt_fn || this.handleEvent, opt_capture, opt_scope || this.handler_ || this);
    if (listener) {
      goog.events.unlistenByKey(listener);
      delete this.keys_[listener.key];
    }
  }
  return this;
};
goog.events.EventHandler.prototype.unlistenWithWrapper = function(src, wrapper, listener, opt_capt, opt_scope) {
  wrapper.unlisten(src, listener, opt_capt, opt_scope || this.handler_ || this, this);
  return this;
};
goog.events.EventHandler.prototype.removeAll = function() {
  goog.object.forEach(this.keys_, goog.events.unlistenByKey);
  this.keys_ = {};
};
goog.events.EventHandler.prototype.disposeInternal = function() {
  goog.events.EventHandler.superClass_.disposeInternal.call(this);
  this.removeAll();
};
goog.events.EventHandler.prototype.handleEvent = function(e) {
  throw Error("EventHandler.handleEvent not implemented");
};
goog.provide("goog.history.Event");
goog.require("goog.events.Event");
goog.require("goog.history.EventType");
goog.history.Event = function(token, isNavigation) {
  goog.events.Event.call(this, goog.history.EventType.NAVIGATE);
  this.token = token;
  this.isNavigation = isNavigation;
};
goog.inherits(goog.history.Event, goog.events.Event);
goog.provide("goog.labs.userAgent.device");
goog.require("goog.labs.userAgent.util");
goog.labs.userAgent.device.isMobile = function() {
  return!goog.labs.userAgent.device.isTablet() && (goog.labs.userAgent.util.matchUserAgent("iPod") || goog.labs.userAgent.util.matchUserAgent("iPhone") || goog.labs.userAgent.util.matchUserAgent("Android") || goog.labs.userAgent.util.matchUserAgent("IEMobile"));
};
goog.labs.userAgent.device.isTablet = function() {
  return goog.labs.userAgent.util.matchUserAgent("iPad") || goog.labs.userAgent.util.matchUserAgent("Android") && !goog.labs.userAgent.util.matchUserAgent("Mobile") || goog.labs.userAgent.util.matchUserAgent("Silk");
};
goog.labs.userAgent.device.isDesktop = function() {
  return!goog.labs.userAgent.device.isMobile() && !goog.labs.userAgent.device.isTablet();
};
goog.provide("goog.memoize");
goog.memoize = function(f, opt_serializer) {
  var serializer = opt_serializer || goog.memoize.simpleSerializer;
  return function() {
    if (goog.memoize.ENABLE_MEMOIZE) {
      var thisOrGlobal = this || goog.global;
      var cache = thisOrGlobal[goog.memoize.CACHE_PROPERTY_] || (thisOrGlobal[goog.memoize.CACHE_PROPERTY_] = {});
      var key = serializer(goog.getUid(f), arguments);
      return cache.hasOwnProperty(key) ? cache[key] : cache[key] = f.apply(this, arguments);
    } else {
      return f.apply(this, arguments);
    }
  };
};
goog.define("goog.memoize.ENABLE_MEMOIZE", true);
goog.memoize.clearCache = function(cacheOwner) {
  cacheOwner[goog.memoize.CACHE_PROPERTY_] = {};
};
goog.memoize.CACHE_PROPERTY_ = "closure_memoize_cache_";
goog.memoize.simpleSerializer = function(functionUid, args) {
  var context = [functionUid];
  for (var i = args.length - 1;i >= 0;--i) {
    context.push(typeof args[i], args[i]);
  }
  return context.join("\x0B");
};
goog.provide("goog.History");
goog.provide("goog.History.Event");
goog.provide("goog.History.EventType");
goog.require("goog.Timer");
goog.require("goog.dom");
goog.require("goog.events.EventHandler");
goog.require("goog.events.EventTarget");
goog.require("goog.events.EventType");
goog.require("goog.history.Event");
goog.require("goog.history.EventType");
goog.require("goog.labs.userAgent.device");
goog.require("goog.memoize");
goog.require("goog.string");
goog.require("goog.userAgent");
goog.History = function(opt_invisible, opt_blankPageUrl, opt_input, opt_iframe) {
  goog.events.EventTarget.call(this);
  if (opt_invisible && !opt_blankPageUrl) {
    throw Error("Can't use invisible history without providing a blank page.");
  }
  var input;
  if (opt_input) {
    input = opt_input;
  } else {
    var inputId = "history_state" + goog.History.historyCount_;
    document.write(goog.string.subs(goog.History.INPUT_TEMPLATE_, inputId, inputId));
    input = goog.dom.getElement(inputId);
  }
  this.hiddenInput_ = (input);
  this.window_ = opt_input ? goog.dom.getWindow(goog.dom.getOwnerDocument(opt_input)) : window;
  this.iframeSrc_ = opt_blankPageUrl;
  if (goog.userAgent.IE && !opt_blankPageUrl) {
    this.iframeSrc_ = window.location.protocol == "https" ? "https:///" : 'javascript:""';
  }
  this.timer_ = new goog.Timer(goog.History.PollingType.NORMAL);
  this.registerDisposable(this.timer_);
  this.userVisible_ = !opt_invisible;
  this.eventHandler_ = new goog.events.EventHandler(this);
  if (opt_invisible || goog.History.LEGACY_IE) {
    var iframe;
    if (opt_iframe) {
      iframe = opt_iframe;
    } else {
      var iframeId = "history_iframe" + goog.History.historyCount_;
      var srcAttribute = this.iframeSrc_ ? 'src\x3d"' + goog.string.htmlEscape(this.iframeSrc_) + '"' : "";
      document.write(goog.string.subs(goog.History.IFRAME_TEMPLATE_, iframeId, srcAttribute));
      iframe = goog.dom.getElement(iframeId);
    }
    this.iframe_ = (iframe);
    this.unsetIframe_ = true;
  }
  if (goog.History.LEGACY_IE) {
    this.eventHandler_.listen(this.window_, goog.events.EventType.LOAD, this.onDocumentLoaded);
    this.documentLoaded = false;
    this.shouldEnable_ = false;
  }
  if (this.userVisible_) {
    this.setHash_(this.getToken(), true);
  } else {
    this.setIframeToken_(this.hiddenInput_.value);
  }
  goog.History.historyCount_++;
};
goog.inherits(goog.History, goog.events.EventTarget);
goog.History.prototype.enabled_ = false;
goog.History.prototype.longerPolling_ = false;
goog.History.prototype.lastToken_ = null;
goog.History.isOnHashChangeSupported = goog.memoize(function() {
  return goog.userAgent.IE ? document.documentMode >= 8 : "onhashchange" in goog.global;
});
goog.History.LEGACY_IE = goog.userAgent.IE && !goog.userAgent.isDocumentModeOrHigher(8);
goog.History.HASH_ALWAYS_REQUIRED = goog.History.LEGACY_IE;
goog.History.prototype.lockedToken_ = null;
goog.History.prototype.disposeInternal = function() {
  goog.History.superClass_.disposeInternal.call(this);
  this.eventHandler_.dispose();
  this.setEnabled(false);
};
goog.History.prototype.setEnabled = function(enable) {
  if (enable == this.enabled_) {
    return;
  }
  if (goog.History.LEGACY_IE && !this.documentLoaded) {
    this.shouldEnable_ = enable;
    return;
  }
  if (enable) {
    if (goog.userAgent.OPERA) {
      this.eventHandler_.listen(this.window_.document, goog.History.INPUT_EVENTS_, this.operaDefibrillator_);
    } else {
      if (goog.userAgent.GECKO) {
        this.eventHandler_.listen(this.window_, "pageshow", this.onShow_);
      }
    }
    if (goog.History.isOnHashChangeSupported() && this.userVisible_) {
      this.eventHandler_.listen(this.window_, goog.events.EventType.HASHCHANGE, this.onHashChange_);
      this.enabled_ = true;
      this.dispatchEvent(new goog.history.Event(this.getToken(), false));
    } else {
      if (!(goog.userAgent.IE && !goog.labs.userAgent.device.isMobile()) || this.documentLoaded) {
        this.eventHandler_.listen(this.timer_, goog.Timer.TICK, goog.bind(this.check_, this, true));
        this.enabled_ = true;
        if (!goog.History.LEGACY_IE) {
          this.lastToken_ = this.getToken();
          this.dispatchEvent(new goog.history.Event(this.getToken(), false));
        }
        this.timer_.start();
      }
    }
  } else {
    this.enabled_ = false;
    this.eventHandler_.removeAll();
    this.timer_.stop();
  }
};
goog.History.prototype.onDocumentLoaded = function() {
  this.documentLoaded = true;
  if (this.hiddenInput_.value) {
    this.setIframeToken_(this.hiddenInput_.value, true);
  }
  this.setEnabled(this.shouldEnable_);
};
goog.History.prototype.onShow_ = function(e) {
  if (e.getBrowserEvent()["persisted"]) {
    this.setEnabled(false);
    this.setEnabled(true);
  }
};
goog.History.prototype.onHashChange_ = function(e) {
  var hash = this.getLocationFragment_(this.window_);
  if (hash != this.lastToken_) {
    this.update_(hash, true);
  }
};
goog.History.prototype.getToken = function() {
  if (this.lockedToken_ != null) {
    return this.lockedToken_;
  } else {
    if (this.userVisible_) {
      return this.getLocationFragment_(this.window_);
    } else {
      return this.getIframeToken_() || "";
    }
  }
};
goog.History.prototype.setToken = function(token, opt_title) {
  this.setHistoryState_(token, false, opt_title);
};
goog.History.prototype.replaceToken = function(token, opt_title) {
  this.setHistoryState_(token, true, opt_title);
};
goog.History.prototype.getLocationFragment_ = function(win) {
  var href = win.location.href;
  var index = href.indexOf("#");
  return index < 0 ? "" : href.substring(index + 1);
};
goog.History.prototype.setHistoryState_ = function(token, replace, opt_title) {
  if (this.getToken() != token) {
    if (this.userVisible_) {
      this.setHash_(token, replace);
      if (!goog.History.isOnHashChangeSupported()) {
        if (goog.userAgent.IE && !goog.labs.userAgent.device.isMobile()) {
          this.setIframeToken_(token, replace, opt_title);
        }
      }
      if (this.enabled_) {
        this.check_(false);
      }
    } else {
      this.setIframeToken_(token, replace);
      this.lockedToken_ = this.lastToken_ = this.hiddenInput_.value = token;
      this.dispatchEvent(new goog.history.Event(token, false));
    }
  }
};
goog.History.prototype.setHash_ = function(token, opt_replace) {
  var loc = this.window_.location;
  var url = loc.href.split("#")[0];
  var hasHash = goog.string.contains(loc.href, "#");
  if (goog.History.HASH_ALWAYS_REQUIRED || hasHash || token) {
    url += "#" + token;
  }
  if (url != loc.href) {
    if (opt_replace) {
      loc.replace(url);
    } else {
      loc.href = url;
    }
  }
};
goog.History.prototype.setIframeToken_ = function(token, opt_replace, opt_title) {
  if (this.unsetIframe_ || token != this.getIframeToken_()) {
    this.unsetIframe_ = false;
    token = goog.string.urlEncode(token);
    if (goog.userAgent.IE) {
      var doc = goog.dom.getFrameContentDocument(this.iframe_);
      doc.open("text/html", opt_replace ? "replace" : undefined);
      doc.write(goog.string.subs(goog.History.IFRAME_SOURCE_TEMPLATE_, goog.string.htmlEscape((opt_title || this.window_.document.title)), token));
      doc.close();
    } else {
      var url = this.iframeSrc_ + "#" + token;
      var contentWindow = this.iframe_.contentWindow;
      if (contentWindow) {
        if (opt_replace) {
          contentWindow.location.replace(url);
        } else {
          contentWindow.location.href = url;
        }
      }
    }
  }
};
goog.History.prototype.getIframeToken_ = function() {
  if (goog.userAgent.IE) {
    var doc = goog.dom.getFrameContentDocument(this.iframe_);
    return doc.body ? goog.string.urlDecode(doc.body.innerHTML) : null;
  } else {
    var contentWindow = this.iframe_.contentWindow;
    if (contentWindow) {
      var hash;
      try {
        hash = goog.string.urlDecode(this.getLocationFragment_(contentWindow));
      } catch (e) {
        if (!this.longerPolling_) {
          this.setLongerPolling_(true);
        }
        return null;
      }
      if (this.longerPolling_) {
        this.setLongerPolling_(false);
      }
      return hash || null;
    } else {
      return null;
    }
  }
};
goog.History.prototype.check_ = function(isNavigation) {
  if (this.userVisible_) {
    var hash = this.getLocationFragment_(this.window_);
    if (hash != this.lastToken_) {
      this.update_(hash, isNavigation);
    }
  }
  if (!this.userVisible_ || goog.History.LEGACY_IE) {
    var token = this.getIframeToken_() || "";
    if (this.lockedToken_ == null || token == this.lockedToken_) {
      this.lockedToken_ = null;
      if (token != this.lastToken_) {
        this.update_(token, isNavigation);
      }
    }
  }
};
goog.History.prototype.update_ = function(token, isNavigation) {
  this.lastToken_ = this.hiddenInput_.value = token;
  if (this.userVisible_) {
    if (goog.History.LEGACY_IE) {
      this.setIframeToken_(token);
    }
    this.setHash_(token);
  } else {
    this.setIframeToken_(token);
  }
  this.dispatchEvent(new goog.history.Event(this.getToken(), isNavigation));
};
goog.History.prototype.setLongerPolling_ = function(longerPolling) {
  if (this.longerPolling_ != longerPolling) {
    this.timer_.setInterval(longerPolling ? goog.History.PollingType.LONG : goog.History.PollingType.NORMAL);
  }
  this.longerPolling_ = longerPolling;
};
goog.History.prototype.operaDefibrillator_ = function() {
  this.timer_.stop();
  this.timer_.start();
};
goog.History.INPUT_EVENTS_ = [goog.events.EventType.MOUSEDOWN, goog.events.EventType.KEYDOWN, goog.events.EventType.MOUSEMOVE];
goog.History.IFRAME_SOURCE_TEMPLATE_ = "\x3ctitle\x3e%s\x3c/title\x3e\x3cbody\x3e%s\x3c/body\x3e";
goog.History.IFRAME_TEMPLATE_ = '\x3ciframe id\x3d"%s" style\x3d"display:none" %s\x3e\x3c/iframe\x3e';
goog.History.INPUT_TEMPLATE_ = '\x3cinput type\x3d"text" name\x3d"%s" id\x3d"%s" style\x3d"display:none"\x3e';
goog.History.historyCount_ = 0;
goog.History.PollingType = {NORMAL:150, LONG:1E4};
goog.History.EventType = goog.history.EventType;
goog.History.Event = goog.history.Event;
goog.provide("clojure.string");
goog.require("cljs.core");
goog.require("goog.string.StringBuffer");
goog.require("goog.string");
clojure.string.seq_reverse = function clojure$string$seq_reverse(coll) {
  return cljs.core.reduce.call(null, cljs.core.conj, cljs.core.List.EMPTY, coll);
};
clojure.string.re_surrogate_pair = new RegExp("([\\uD800-\\uDBFF])([\\uDC00-\\uDFFF])", "g");
clojure.string.reverse = function clojure$string$reverse(s) {
  return s.replace(clojure.string.re_surrogate_pair, "$2$1").split("").reverse().join("");
};
clojure.string.replace = function clojure$string$replace(s, match, replacement) {
  if (typeof match === "string") {
    return s.replace(new RegExp(goog.string.regExpEscape(match), "g"), replacement);
  } else {
    if (match instanceof RegExp) {
      return s.replace(new RegExp(match.source, "g"), replacement);
    } else {
      throw[cljs.core.str("Invalid match arg: "), cljs.core.str(match)].join("");
    }
  }
};
clojure.string.replace_first = function clojure$string$replace_first(s, match, replacement) {
  return s.replace(match, replacement);
};
clojure.string.join = function clojure$string$join() {
  var G__11966 = arguments.length;
  switch(G__11966) {
    case 1:
      return clojure.string.join.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return clojure.string.join.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
clojure.string.join.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  var sb = new goog.string.StringBuffer;
  var coll__$1 = cljs.core.seq.call(null, coll);
  while (true) {
    if (coll__$1) {
      var G__11968 = sb.append([cljs.core.str(cljs.core.first.call(null, coll__$1))].join(""));
      var G__11969 = cljs.core.next.call(null, coll__$1);
      sb = G__11968;
      coll__$1 = G__11969;
      continue;
    } else {
      return sb.toString();
    }
    break;
  }
};
clojure.string.join.cljs$core$IFn$_invoke$arity$2 = function(separator, coll) {
  var sb = new goog.string.StringBuffer;
  var coll__$1 = cljs.core.seq.call(null, coll);
  while (true) {
    if (coll__$1) {
      sb.append([cljs.core.str(cljs.core.first.call(null, coll__$1))].join(""));
      var coll__$2 = cljs.core.next.call(null, coll__$1);
      if (coll__$2 == null) {
      } else {
        sb.append(separator);
      }
      var G__11970 = sb;
      var G__11971 = coll__$2;
      sb = G__11970;
      coll__$1 = G__11971;
      continue;
    } else {
      return sb.toString();
    }
    break;
  }
};
clojure.string.join.cljs$lang$maxFixedArity = 2;
clojure.string.upper_case = function clojure$string$upper_case(s) {
  return s.toUpperCase();
};
clojure.string.lower_case = function clojure$string$lower_case(s) {
  return s.toLowerCase();
};
clojure.string.capitalize = function clojure$string$capitalize(s) {
  if (cljs.core.count.call(null, s) < 2) {
    return clojure.string.upper_case.call(null, s);
  } else {
    return[cljs.core.str(clojure.string.upper_case.call(null, cljs.core.subs.call(null, s, 0, 1))), cljs.core.str(clojure.string.lower_case.call(null, cljs.core.subs.call(null, s, 1)))].join("");
  }
};
clojure.string.pop_last_while_empty = function clojure$string$pop_last_while_empty(v) {
  var v__$1 = v;
  while (true) {
    if (cljs.core._EQ_.call(null, "", cljs.core.peek.call(null, v__$1))) {
      var G__11972 = cljs.core.pop.call(null, v__$1);
      v__$1 = G__11972;
      continue;
    } else {
      return v__$1;
    }
    break;
  }
};
clojure.string.discard_trailing_if_needed = function clojure$string$discard_trailing_if_needed(limit, v) {
  if (cljs.core._EQ_.call(null, 0, limit)) {
    return clojure.string.pop_last_while_empty.call(null, v);
  } else {
    return v;
  }
};
clojure.string.split_with_empty_regex = function clojure$string$split_with_empty_regex(s, limit) {
  if (limit <= 0 || limit >= 2 + cljs.core.count.call(null, s)) {
    return cljs.core.conj.call(null, cljs.core.vec.call(null, cljs.core.cons.call(null, "", cljs.core.map.call(null, cljs.core.str, cljs.core.seq.call(null, s)))), "");
  } else {
    var pred__11976 = cljs.core._EQ_;
    var expr__11977 = limit;
    if (cljs.core.truth_(pred__11976.call(null, 1, expr__11977))) {
      return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [s], null);
    } else {
      if (cljs.core.truth_(pred__11976.call(null, 2, expr__11977))) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["", s], null);
      } else {
        var c = limit - 2;
        return cljs.core.conj.call(null, cljs.core.vec.call(null, cljs.core.cons.call(null, "", cljs.core.subvec.call(null, cljs.core.vec.call(null, cljs.core.map.call(null, cljs.core.str, cljs.core.seq.call(null, s))), 0, c))), cljs.core.subs.call(null, s, c));
      }
    }
  }
};
clojure.string.split = function clojure$string$split() {
  var G__11980 = arguments.length;
  switch(G__11980) {
    case 2:
      return clojure.string.split.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return clojure.string.split.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
clojure.string.split.cljs$core$IFn$_invoke$arity$2 = function(s, re) {
  return clojure.string.split.call(null, s, re, 0);
};
clojure.string.split.cljs$core$IFn$_invoke$arity$3 = function(s, re, limit) {
  return clojure.string.discard_trailing_if_needed.call(null, limit, cljs.core._EQ_.call(null, [cljs.core.str(re)].join(""), "/(?:)/") ? clojure.string.split_with_empty_regex.call(null, s, limit) : limit < 1 ? cljs.core.vec.call(null, [cljs.core.str(s)].join("").split(re)) : function() {
    var s__$1 = s;
    var limit__$1 = limit;
    var parts = cljs.core.PersistentVector.EMPTY;
    while (true) {
      if (cljs.core._EQ_.call(null, limit__$1, 1)) {
        return cljs.core.conj.call(null, parts, s__$1);
      } else {
        var temp__4124__auto__ = cljs.core.re_find.call(null, re, s__$1);
        if (cljs.core.truth_(temp__4124__auto__)) {
          var m = temp__4124__auto__;
          var index = s__$1.indexOf(m);
          var G__11982 = s__$1.substring(index + cljs.core.count.call(null, m));
          var G__11983 = limit__$1 - 1;
          var G__11984 = cljs.core.conj.call(null, parts, s__$1.substring(0, index));
          s__$1 = G__11982;
          limit__$1 = G__11983;
          parts = G__11984;
          continue;
        } else {
          return cljs.core.conj.call(null, parts, s__$1);
        }
      }
      break;
    }
  }());
};
clojure.string.split.cljs$lang$maxFixedArity = 3;
clojure.string.split_lines = function clojure$string$split_lines(s) {
  return clojure.string.split.call(null, s, /\n|\r\n/);
};
clojure.string.trim = function clojure$string$trim(s) {
  return goog.string.trim(s);
};
clojure.string.triml = function clojure$string$triml(s) {
  return goog.string.trimLeft(s);
};
clojure.string.trimr = function clojure$string$trimr(s) {
  return goog.string.trimRight(s);
};
clojure.string.trim_newline = function clojure$string$trim_newline(s) {
  var index = s.length;
  while (true) {
    if (index === 0) {
      return "";
    } else {
      var ch = cljs.core.get.call(null, s, index - 1);
      if (cljs.core._EQ_.call(null, ch, "\n") || cljs.core._EQ_.call(null, ch, "\r")) {
        var G__11985 = index - 1;
        index = G__11985;
        continue;
      } else {
        return s.substring(0, index);
      }
    }
    break;
  }
};
clojure.string.blank_QMARK_ = function clojure$string$blank_QMARK_(s) {
  return goog.string.isEmptySafe(s);
};
clojure.string.escape = function clojure$string$escape(s, cmap) {
  var buffer = new goog.string.StringBuffer;
  var length = s.length;
  var index = 0;
  while (true) {
    if (cljs.core._EQ_.call(null, length, index)) {
      return buffer.toString();
    } else {
      var ch = s.charAt(index);
      var temp__4124__auto___11986 = cljs.core.get.call(null, cmap, ch);
      if (cljs.core.truth_(temp__4124__auto___11986)) {
        var replacement_11987 = temp__4124__auto___11986;
        buffer.append([cljs.core.str(replacement_11987)].join(""));
      } else {
        buffer.append(ch);
      }
      var G__11988 = index + 1;
      index = G__11988;
      continue;
    }
    break;
  }
};
goog.provide("clojure.walk");
goog.require("cljs.core");
clojure.walk.walk = function clojure$walk$walk(inner, outer, form) {
  if (cljs.core.seq_QMARK_.call(null, form)) {
    return outer.call(null, cljs.core.doall.call(null, cljs.core.map.call(null, inner, form)));
  } else {
    if (cljs.core.coll_QMARK_.call(null, form)) {
      return outer.call(null, cljs.core.into.call(null, cljs.core.empty.call(null, form), cljs.core.map.call(null, inner, form)));
    } else {
      return outer.call(null, form);
    }
  }
};
clojure.walk.postwalk = function clojure$walk$postwalk(f, form) {
  return clojure.walk.walk.call(null, cljs.core.partial.call(null, clojure$walk$postwalk, f), f, form);
};
clojure.walk.prewalk = function clojure$walk$prewalk(f, form) {
  return clojure.walk.walk.call(null, cljs.core.partial.call(null, clojure$walk$prewalk, f), cljs.core.identity, f.call(null, form));
};
clojure.walk.keywordize_keys = function clojure$walk$keywordize_keys(m) {
  var f = function(p__12361) {
    var vec__12362 = p__12361;
    var k = cljs.core.nth.call(null, vec__12362, 0, null);
    var v = cljs.core.nth.call(null, vec__12362, 1, null);
    if (typeof k === "string") {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.call(null, k), v], null);
    } else {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, v], null);
    }
  };
  return clojure.walk.postwalk.call(null, function(f) {
    return function(x) {
      if (cljs.core.map_QMARK_.call(null, x)) {
        return cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.map.call(null, f, x));
      } else {
        return x;
      }
    };
  }(f), m);
};
clojure.walk.stringify_keys = function clojure$walk$stringify_keys(m) {
  var f = function(p__12365) {
    var vec__12366 = p__12365;
    var k = cljs.core.nth.call(null, vec__12366, 0, null);
    var v = cljs.core.nth.call(null, vec__12366, 1, null);
    if (k instanceof cljs.core.Keyword) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.name.call(null, k), v], null);
    } else {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, v], null);
    }
  };
  return clojure.walk.postwalk.call(null, function(f) {
    return function(x) {
      if (cljs.core.map_QMARK_.call(null, x)) {
        return cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.map.call(null, f, x));
      } else {
        return x;
      }
    };
  }(f), m);
};
clojure.walk.prewalk_replace = function clojure$walk$prewalk_replace(smap, form) {
  return clojure.walk.prewalk.call(null, function(x) {
    if (cljs.core.contains_QMARK_.call(null, smap, x)) {
      return smap.call(null, x);
    } else {
      return x;
    }
  }, form);
};
clojure.walk.postwalk_replace = function clojure$walk$postwalk_replace(smap, form) {
  return clojure.walk.postwalk.call(null, function(x) {
    if (cljs.core.contains_QMARK_.call(null, smap, x)) {
      return smap.call(null, x);
    } else {
      return x;
    }
  }, form);
};
goog.provide("secretary.core");
goog.require("cljs.core");
goog.require("clojure.walk");
goog.require("clojure.string");
secretary.core.IRouteMatches = function() {
  var obj12272 = {};
  return obj12272;
}();
secretary.core.route_matches = function secretary$core$route_matches(this$, route) {
  if (function() {
    var and__4323__auto__ = this$;
    if (and__4323__auto__) {
      return this$.secretary$core$IRouteMatches$route_matches$arity$2;
    } else {
      return and__4323__auto__;
    }
  }()) {
    return this$.secretary$core$IRouteMatches$route_matches$arity$2(this$, route);
  } else {
    var x__4971__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4335__auto__ = secretary.core.route_matches[goog.typeOf(x__4971__auto__)];
      if (or__4335__auto__) {
        return or__4335__auto__;
      } else {
        var or__4335__auto____$1 = secretary.core.route_matches["_"];
        if (or__4335__auto____$1) {
          return or__4335__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IRouteMatches.route-matches", this$);
        }
      }
    }().call(null, this$, route);
  }
};
secretary.core.IRouteValue = function() {
  var obj12274 = {};
  return obj12274;
}();
secretary.core.route_value = function secretary$core$route_value(this$) {
  if (function() {
    var and__4323__auto__ = this$;
    if (and__4323__auto__) {
      return this$.secretary$core$IRouteValue$route_value$arity$1;
    } else {
      return and__4323__auto__;
    }
  }()) {
    return this$.secretary$core$IRouteValue$route_value$arity$1(this$);
  } else {
    var x__4971__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4335__auto__ = secretary.core.route_value[goog.typeOf(x__4971__auto__)];
      if (or__4335__auto__) {
        return or__4335__auto__;
      } else {
        var or__4335__auto____$1 = secretary.core.route_value["_"];
        if (or__4335__auto____$1) {
          return or__4335__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IRouteValue.route-value", this$);
        }
      }
    }().call(null, this$);
  }
};
secretary.core.IRenderRoute = function() {
  var obj12276 = {};
  return obj12276;
}();
secretary.core.render_route = function secretary$core$render_route() {
  var G__12278 = arguments.length;
  switch(G__12278) {
    case 1:
      return secretary.core.render_route.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return secretary.core.render_route.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
secretary.core.render_route.cljs$core$IFn$_invoke$arity$1 = function(this$) {
  if (function() {
    var and__4323__auto__ = this$;
    if (and__4323__auto__) {
      return this$.secretary$core$IRenderRoute$render_route$arity$1;
    } else {
      return and__4323__auto__;
    }
  }()) {
    return this$.secretary$core$IRenderRoute$render_route$arity$1(this$);
  } else {
    var x__4971__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4335__auto__ = secretary.core.render_route[goog.typeOf(x__4971__auto__)];
      if (or__4335__auto__) {
        return or__4335__auto__;
      } else {
        var or__4335__auto____$1 = secretary.core.render_route["_"];
        if (or__4335__auto____$1) {
          return or__4335__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IRenderRoute.render-route", this$);
        }
      }
    }().call(null, this$);
  }
};
secretary.core.render_route.cljs$core$IFn$_invoke$arity$2 = function(this$, params) {
  if (function() {
    var and__4323__auto__ = this$;
    if (and__4323__auto__) {
      return this$.secretary$core$IRenderRoute$render_route$arity$2;
    } else {
      return and__4323__auto__;
    }
  }()) {
    return this$.secretary$core$IRenderRoute$render_route$arity$2(this$, params);
  } else {
    var x__4971__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4335__auto__ = secretary.core.render_route[goog.typeOf(x__4971__auto__)];
      if (or__4335__auto__) {
        return or__4335__auto__;
      } else {
        var or__4335__auto____$1 = secretary.core.render_route["_"];
        if (or__4335__auto____$1) {
          return or__4335__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IRenderRoute.render-route", this$);
        }
      }
    }().call(null, this$, params);
  }
};
secretary.core.render_route.cljs$lang$maxFixedArity = 2;
secretary.core._STAR_config_STAR_ = cljs.core.atom.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "prefix", "prefix", -265908465), ""], null));
secretary.core.get_config = function secretary$core$get_config(path) {
  var path__$1 = cljs.core.sequential_QMARK_.call(null, path) ? path : new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [path], null);
  return cljs.core.get_in.call(null, cljs.core.deref.call(null, secretary.core._STAR_config_STAR_), path__$1);
};
secretary.core.set_config_BANG_ = function secretary$core$set_config_BANG_(path, val) {
  var path__$1 = cljs.core.sequential_QMARK_.call(null, path) ? path : new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [path], null);
  return cljs.core.swap_BANG_.call(null, secretary.core._STAR_config_STAR_, cljs.core.assoc_in, path__$1, val);
};
secretary.core.encode = encodeURIComponent;
if (typeof secretary.core.encode_pair !== "undefined") {
} else {
  secretary.core.encode_pair = function() {
    var method_table__5230__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var prefer_table__5231__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var method_cache__5232__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var cached_hierarchy__5233__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var hierarchy__5234__auto__ = cljs.core.get.call(null, cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "hierarchy", "hierarchy", -1053470341), cljs.core.get_global_hierarchy.call(null));
    return new cljs.core.MultiFn(cljs.core.symbol.call(null, "secretary.core", "encode-pair"), function(method_table__5230__auto__, prefer_table__5231__auto__, method_cache__5232__auto__, cached_hierarchy__5233__auto__, hierarchy__5234__auto__) {
      return function(p__12280) {
        var vec__12281 = p__12280;
        var k = cljs.core.nth.call(null, vec__12281, 0, null);
        var v = cljs.core.nth.call(null, vec__12281, 1, null);
        if (cljs.core.sequential_QMARK_.call(null, v) || cljs.core.set_QMARK_.call(null, v)) {
          return new cljs.core.Keyword("secretary.core", "sequential", "secretary.core/sequential", -347187207);
        } else {
          if (function() {
            var or__4335__auto__ = cljs.core.map_QMARK_.call(null, v);
            if (or__4335__auto__) {
              return or__4335__auto__;
            } else {
              var G__12283 = v;
              if (G__12283) {
                var bit__5009__auto__ = G__12283.cljs$lang$protocol_mask$partition0$ & 67108864;
                if (bit__5009__auto__ || G__12283.cljs$core$IRecord$) {
                  return true;
                } else {
                  if (!G__12283.cljs$lang$protocol_mask$partition0$) {
                    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IRecord, G__12283);
                  } else {
                    return false;
                  }
                }
              } else {
                return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IRecord, G__12283);
              }
            }
          }()) {
            return new cljs.core.Keyword("secretary.core", "map", "secretary.core/map", -31086646);
          } else {
            return null;
          }
        }
      };
    }(method_table__5230__auto__, prefer_table__5231__auto__, method_cache__5232__auto__, cached_hierarchy__5233__auto__, hierarchy__5234__auto__), new cljs.core.Keyword(null, "default", "default", -1987822328), hierarchy__5234__auto__, method_table__5230__auto__, prefer_table__5231__auto__, method_cache__5232__auto__, cached_hierarchy__5233__auto__);
  }();
}
secretary.core.key_index = function secretary$core$key_index() {
  var G__12285 = arguments.length;
  switch(G__12285) {
    case 1:
      return secretary.core.key_index.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return secretary.core.key_index.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
secretary.core.key_index.cljs$core$IFn$_invoke$arity$1 = function(k) {
  return[cljs.core.str(cljs.core.name.call(null, k)), cljs.core.str("[]")].join("");
};
secretary.core.key_index.cljs$core$IFn$_invoke$arity$2 = function(k, index) {
  return[cljs.core.str(cljs.core.name.call(null, k)), cljs.core.str("["), cljs.core.str(index), cljs.core.str("]")].join("");
};
secretary.core.key_index.cljs$lang$maxFixedArity = 2;
cljs.core._add_method.call(null, secretary.core.encode_pair, new cljs.core.Keyword("secretary.core", "sequential", "secretary.core/sequential", -347187207), function(p__12287) {
  var vec__12288 = p__12287;
  var k = cljs.core.nth.call(null, vec__12288, 0, null);
  var v = cljs.core.nth.call(null, vec__12288, 1, null);
  var encoded = cljs.core.map_indexed.call(null, function(vec__12288, k, v) {
    return function(i, x) {
      var pair = cljs.core.coll_QMARK_.call(null, x) ? new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [secretary.core.key_index.call(null, k, i), x], null) : new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [secretary.core.key_index.call(null, k), x], null);
      return secretary.core.encode_pair.call(null, pair);
    };
  }(vec__12288, k, v), v);
  return clojure.string.join.call(null, "\x26", encoded);
});
cljs.core._add_method.call(null, secretary.core.encode_pair, new cljs.core.Keyword("secretary.core", "map", "secretary.core/map", -31086646), function(p__12289) {
  var vec__12290 = p__12289;
  var k = cljs.core.nth.call(null, vec__12290, 0, null);
  var v = cljs.core.nth.call(null, vec__12290, 1, null);
  var encoded = cljs.core.map.call(null, function(vec__12290, k, v) {
    return function(p__12291) {
      var vec__12292 = p__12291;
      var ik = cljs.core.nth.call(null, vec__12292, 0, null);
      var iv = cljs.core.nth.call(null, vec__12292, 1, null);
      return secretary.core.encode_pair.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [secretary.core.key_index.call(null, k, cljs.core.name.call(null, ik)), iv], null));
    };
  }(vec__12290, k, v), v);
  return clojure.string.join.call(null, "\x26", encoded);
});
cljs.core._add_method.call(null, secretary.core.encode_pair, new cljs.core.Keyword(null, "default", "default", -1987822328), function(p__12293) {
  var vec__12294 = p__12293;
  var k = cljs.core.nth.call(null, vec__12294, 0, null);
  var v = cljs.core.nth.call(null, vec__12294, 1, null);
  return[cljs.core.str(cljs.core.name.call(null, k)), cljs.core.str("\x3d"), cljs.core.str(secretary.core.encode.call(null, [cljs.core.str(v)].join("")))].join("");
});
secretary.core.encode_query_params = function secretary$core$encode_query_params(query_params) {
  return clojure.string.join.call(null, "\x26", cljs.core.map.call(null, secretary.core.encode_pair, query_params));
};
secretary.core.encode_uri = function secretary$core$encode_uri(uri) {
  return clojure.string.join.call(null, "/", cljs.core.map.call(null, secretary.core.encode, clojure.string.split.call(null, uri, /\//)));
};
secretary.core.decode = decodeURIComponent;
secretary.core.parse_path = function secretary$core$parse_path(path) {
  var index_re = /\[([^\]]*)\]*/;
  var parts = cljs.core.re_seq.call(null, index_re, path);
  return cljs.core.map.call(null, function(index_re, parts) {
    return function(p__12297) {
      var vec__12298 = p__12297;
      var _ = cljs.core.nth.call(null, vec__12298, 0, null);
      var part = cljs.core.nth.call(null, vec__12298, 1, null);
      if (cljs.core.empty_QMARK_.call(null, part)) {
        return 0;
      } else {
        if (cljs.core.truth_(cljs.core.re_matches.call(null, /\d+/, part))) {
          return parseInt(part);
        } else {
          return part;
        }
      }
    };
  }(index_re, parts), parts);
};
secretary.core.key_parse = function secretary$core$key_parse(k) {
  var re = /([^\[\]]+)((?:\[[^\]]*\])*)?/;
  var vec__12300 = cljs.core.re_matches.call(null, re, k);
  var _ = cljs.core.nth.call(null, vec__12300, 0, null);
  var key = cljs.core.nth.call(null, vec__12300, 1, null);
  var path = cljs.core.nth.call(null, vec__12300, 2, null);
  var parsed_path = cljs.core.truth_(path) ? secretary.core.parse_path.call(null, path) : null;
  return cljs.core.cons.call(null, key, parsed_path);
};
secretary.core.assoc_in_query_params = function secretary$core$assoc_in_query_params(m, path, v) {
  var heads = function(xs) {
    return cljs.core.map_indexed.call(null, function(i, _) {
      return cljs.core.take.call(null, i + 1, xs);
    }, xs);
  };
  var hs = heads.call(null, path);
  var m__$1 = cljs.core.reduce.call(null, function(heads, hs) {
    return function(m__$1, h) {
      if (typeof cljs.core.last.call(null, h) === "number" && !cljs.core.vector_QMARK_.call(null, cljs.core.get_in.call(null, m__$1, cljs.core.butlast.call(null, h)))) {
        return cljs.core.assoc_in.call(null, m__$1, cljs.core.butlast.call(null, h), cljs.core.PersistentVector.EMPTY);
      } else {
        return m__$1;
      }
    };
  }(heads, hs), m, hs);
  if (cljs.core.last.call(null, path) === 0) {
    return cljs.core.update_in.call(null, m__$1, cljs.core.butlast.call(null, path), cljs.core.conj, v);
  } else {
    return cljs.core.assoc_in.call(null, m__$1, path, v);
  }
};
secretary.core.decode_query_params = function secretary$core$decode_query_params(query_string) {
  var parts = clojure.string.split.call(null, query_string, /&/);
  var params = cljs.core.reduce.call(null, function(parts) {
    return function(m, part) {
      var vec__12302 = clojure.string.split.call(null, part, /=/, 2);
      var k = cljs.core.nth.call(null, vec__12302, 0, null);
      var v = cljs.core.nth.call(null, vec__12302, 1, null);
      return secretary.core.assoc_in_query_params.call(null, m, secretary.core.key_parse.call(null, k), secretary.core.decode.call(null, v));
    };
  }(parts), cljs.core.PersistentArrayMap.EMPTY, parts);
  var params__$1 = clojure.walk.keywordize_keys.call(null, params);
  return params__$1;
};
secretary.core.re_matches_STAR_ = function secretary$core$re_matches_STAR_(re, s) {
  var ms = cljs.core.re_matches.call(null, re, s);
  if (cljs.core.truth_(ms)) {
    if (cljs.core.sequential_QMARK_.call(null, ms)) {
      return ms;
    } else {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [ms, ms], null);
    }
  } else {
    return null;
  }
};
secretary.core.re_escape_chars = cljs.core.set.call(null, "\\.*+|?()[]{}$^");
secretary.core.re_escape = function secretary$core$re_escape(s) {
  return cljs.core.reduce.call(null, function(s__$1, c) {
    if (cljs.core.truth_(secretary.core.re_escape_chars.call(null, c))) {
      return[cljs.core.str(s__$1), cljs.core.str("\\"), cljs.core.str(c)].join("");
    } else {
      return[cljs.core.str(s__$1), cljs.core.str(c)].join("");
    }
  }, "", s);
};
secretary.core.lex_STAR_ = function secretary$core$lex_STAR_(s, clauses) {
  return cljs.core.some.call(null, function(p__12306) {
    var vec__12307 = p__12306;
    var re = cljs.core.nth.call(null, vec__12307, 0, null);
    var action = cljs.core.nth.call(null, vec__12307, 1, null);
    var temp__4126__auto__ = cljs.core.re_find.call(null, re, s);
    if (cljs.core.truth_(temp__4126__auto__)) {
      var vec__12308 = temp__4126__auto__;
      var m = cljs.core.nth.call(null, vec__12308, 0, null);
      var c = cljs.core.nth.call(null, vec__12308, 1, null);
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.subs.call(null, s, cljs.core.count.call(null, m)), action.call(null, c)], null);
    } else {
      return null;
    }
  }, clauses);
};
secretary.core.lex_route = function secretary$core$lex_route(s, clauses) {
  var s__$1 = s;
  var pattern = "";
  var params = cljs.core.PersistentVector.EMPTY;
  while (true) {
    if (cljs.core.seq.call(null, s__$1)) {
      var vec__12311 = secretary.core.lex_STAR_.call(null, s__$1, clauses);
      var s__$2 = cljs.core.nth.call(null, vec__12311, 0, null);
      var vec__12312 = cljs.core.nth.call(null, vec__12311, 1, null);
      var r = cljs.core.nth.call(null, vec__12312, 0, null);
      var p = cljs.core.nth.call(null, vec__12312, 1, null);
      var G__12313 = s__$2;
      var G__12314 = [cljs.core.str(pattern), cljs.core.str(r)].join("");
      var G__12315 = cljs.core.conj.call(null, params, p);
      s__$1 = G__12313;
      pattern = G__12314;
      params = G__12315;
      continue;
    } else {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.re_pattern.call(null, [cljs.core.str("^"), cljs.core.str(pattern), cljs.core.str("$")].join("")), cljs.core.remove.call(null, cljs.core.nil_QMARK_, params)], null);
    }
    break;
  }
};
secretary.core.compile_route = function secretary$core$compile_route(orig_route) {
  var clauses = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [/^\*([^\s.:*\/]*)/, function(v) {
    var r = "(.*?)";
    var p = cljs.core.seq.call(null, v) ? cljs.core.keyword.call(null, v) : new cljs.core.Keyword(null, "*", "*", -1294732318);
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [r, p], null);
  }], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [/^\:([^\s.:*\/]+)/, function(v) {
    var r = "([^,;?/]+)";
    var p = cljs.core.keyword.call(null, v);
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [r, p], null);
  }], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [/^([^:*]+)/, function(v) {
    var r = secretary.core.re_escape.call(null, v);
    return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [r], null);
  }], null)], null);
  var vec__12321 = secretary.core.lex_route.call(null, orig_route, clauses);
  var re = cljs.core.nth.call(null, vec__12321, 0, null);
  var params = cljs.core.nth.call(null, vec__12321, 1, null);
  if (typeof secretary.core.t12322 !== "undefined") {
  } else {
    secretary.core.t12322 = function(params, re, vec__12321, clauses, orig_route, compile_route, meta12323) {
      this.params = params;
      this.re = re;
      this.vec__12321 = vec__12321;
      this.clauses = clauses;
      this.orig_route = orig_route;
      this.compile_route = compile_route;
      this.meta12323 = meta12323;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    secretary.core.t12322.prototype.secretary$core$IRouteMatches$ = true;
    secretary.core.t12322.prototype.secretary$core$IRouteMatches$route_matches$arity$2 = function(clauses, vec__12321, re, params) {
      return function(_, route) {
        var self__ = this;
        var ___$1 = this;
        var temp__4126__auto__ = secretary.core.re_matches_STAR_.call(null, self__.re, route);
        if (cljs.core.truth_(temp__4126__auto__)) {
          var vec__12325 = temp__4126__auto__;
          var ___$2 = cljs.core.nth.call(null, vec__12325, 0, null);
          var ms = cljs.core.nthnext.call(null, vec__12325, 1);
          return cljs.core.merge_with.call(null, cljs.core.vector, cljs.core.PersistentArrayMap.EMPTY, cljs.core.partition.call(null, 2, cljs.core.interleave.call(null, self__.params, cljs.core.map.call(null, secretary.core.decode, ms))));
        } else {
          return null;
        }
      };
    }(clauses, vec__12321, re, params);
    secretary.core.t12322.prototype.secretary$core$IRouteValue$ = true;
    secretary.core.t12322.prototype.secretary$core$IRouteValue$route_value$arity$1 = function(clauses, vec__12321, re, params) {
      return function(this$) {
        var self__ = this;
        var this$__$1 = this;
        return self__.orig_route;
      };
    }(clauses, vec__12321, re, params);
    secretary.core.t12322.prototype.cljs$core$IMeta$_meta$arity$1 = function(clauses, vec__12321, re, params) {
      return function(_12324) {
        var self__ = this;
        var _12324__$1 = this;
        return self__.meta12323;
      };
    }(clauses, vec__12321, re, params);
    secretary.core.t12322.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(clauses, vec__12321, re, params) {
      return function(_12324, meta12323__$1) {
        var self__ = this;
        var _12324__$1 = this;
        return new secretary.core.t12322(self__.params, self__.re, self__.vec__12321, self__.clauses, self__.orig_route, self__.compile_route, meta12323__$1);
      };
    }(clauses, vec__12321, re, params);
    secretary.core.t12322.cljs$lang$type = true;
    secretary.core.t12322.cljs$lang$ctorStr = "secretary.core/t12322";
    secretary.core.t12322.cljs$lang$ctorPrWriter = function(clauses, vec__12321, re, params) {
      return function(this__4914__auto__, writer__4915__auto__, opt__4916__auto__) {
        return cljs.core._write.call(null, writer__4915__auto__, "secretary.core/t12322");
      };
    }(clauses, vec__12321, re, params);
    secretary.core.__GT_t12322 = function(clauses, vec__12321, re, params) {
      return function secretary$core$compile_route_$___GT_t12322(params__$1, re__$1, vec__12321__$1, clauses__$1, orig_route__$1, compile_route__$1, meta12323) {
        return new secretary.core.t12322(params__$1, re__$1, vec__12321__$1, clauses__$1, orig_route__$1, compile_route__$1, meta12323);
      };
    }(clauses, vec__12321, re, params);
  }
  return new secretary.core.t12322(params, re, vec__12321, clauses, orig_route, secretary$core$compile_route, cljs.core.PersistentArrayMap.EMPTY);
};
secretary.core.render_route_STAR_ = function secretary$core$render_route_STAR_() {
  var argseq__5375__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return secretary.core.render_route_STAR_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5375__auto__);
};
secretary.core.render_route_STAR_.cljs$core$IFn$_invoke$arity$variadic = function(obj, args) {
  if (function() {
    var G__12328 = obj;
    if (G__12328) {
      var bit__5009__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__4335__auto__ = bit__5009__auto__;
        if (cljs.core.truth_(or__4335__auto__)) {
          return or__4335__auto__;
        } else {
          return G__12328.secretary$core$IRenderRoute$;
        }
      }())) {
        return true;
      } else {
        if (!G__12328.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, secretary.core.IRenderRoute, G__12328);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, secretary.core.IRenderRoute, G__12328);
    }
  }()) {
    return cljs.core.apply.call(null, secretary.core.render_route, obj, args);
  } else {
    return null;
  }
};
secretary.core.render_route_STAR_.cljs$lang$maxFixedArity = 1;
secretary.core.render_route_STAR_.cljs$lang$applyTo = function(seq12326) {
  var G__12327 = cljs.core.first.call(null, seq12326);
  var seq12326__$1 = cljs.core.next.call(null, seq12326);
  return secretary.core.render_route_STAR_.cljs$core$IFn$_invoke$arity$variadic(G__12327, seq12326__$1);
};
secretary.core._STAR_routes_STAR_ = cljs.core.atom.call(null, cljs.core.PersistentVector.EMPTY);
secretary.core.add_route_BANG_ = function secretary$core$add_route_BANG_(obj, action) {
  var obj__$1 = typeof obj === "string" ? secretary.core.compile_route.call(null, obj) : obj;
  return cljs.core.swap_BANG_.call(null, secretary.core._STAR_routes_STAR_, cljs.core.conj, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [obj__$1, action], null));
};
secretary.core.remove_route_BANG_ = function secretary$core$remove_route_BANG_(obj) {
  return cljs.core.swap_BANG_.call(null, secretary.core._STAR_routes_STAR_, function(rs) {
    return cljs.core.filterv.call(null, function(p__12331) {
      var vec__12332 = p__12331;
      var x = cljs.core.nth.call(null, vec__12332, 0, null);
      var _ = cljs.core.nth.call(null, vec__12332, 1, null);
      return cljs.core.not_EQ_.call(null, x, obj);
    }, rs);
  });
};
secretary.core.reset_routes_BANG_ = function secretary$core$reset_routes_BANG_() {
  return cljs.core.reset_BANG_.call(null, secretary.core._STAR_routes_STAR_, cljs.core.PersistentVector.EMPTY);
};
secretary.core.locate_route = function secretary$core$locate_route(route) {
  return cljs.core.some.call(null, function(p__12335) {
    var vec__12336 = p__12335;
    var compiled_route = cljs.core.nth.call(null, vec__12336, 0, null);
    var action = cljs.core.nth.call(null, vec__12336, 1, null);
    var temp__4126__auto__ = secretary.core.route_matches.call(null, compiled_route, route);
    if (cljs.core.truth_(temp__4126__auto__)) {
      var params = temp__4126__auto__;
      return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "action", "action", -811238024), action, new cljs.core.Keyword(null, "params", "params", 710516235), params, new cljs.core.Keyword(null, "route", "route", 329891309), compiled_route], null);
    } else {
      return null;
    }
  }, cljs.core.deref.call(null, secretary.core._STAR_routes_STAR_));
};
secretary.core.locate_route_value = function secretary$core$locate_route_value(uri) {
  return secretary.core.route_value.call(null, (new cljs.core.Keyword(null, "route", "route", 329891309)).cljs$core$IFn$_invoke$arity$1(secretary.core.locate_route.call(null, uri)));
};
secretary.core.prefix = function secretary$core$prefix() {
  return[cljs.core.str(secretary.core.get_config.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "prefix", "prefix", -265908465)], null)))].join("");
};
secretary.core.uri_without_prefix = function secretary$core$uri_without_prefix(uri) {
  return clojure.string.replace.call(null, uri, cljs.core.re_pattern.call(null, [cljs.core.str("^"), cljs.core.str(secretary.core.prefix.call(null))].join("")), "");
};
secretary.core.uri_with_leading_slash = function secretary$core$uri_with_leading_slash(uri) {
  if (cljs.core._EQ_.call(null, "/", cljs.core.first.call(null, uri))) {
    return uri;
  } else {
    return[cljs.core.str("/"), cljs.core.str(uri)].join("");
  }
};
secretary.core.dispatch_BANG_ = function secretary$core$dispatch_BANG_(uri) {
  var vec__12339 = clojure.string.split.call(null, secretary.core.uri_without_prefix.call(null, uri), /\?/);
  var uri_path = cljs.core.nth.call(null, vec__12339, 0, null);
  var query_string = cljs.core.nth.call(null, vec__12339, 1, null);
  var uri_path__$1 = secretary.core.uri_with_leading_slash.call(null, uri_path);
  var query_params = cljs.core.truth_(query_string) ? new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "query-params", "query-params", 900640534), secretary.core.decode_query_params.call(null, query_string)], null) : null;
  var map__12340 = secretary.core.locate_route.call(null, uri_path__$1);
  var map__12340__$1 = cljs.core.seq_QMARK_.call(null, map__12340) ? cljs.core.apply.call(null, cljs.core.hash_map, map__12340) : map__12340;
  var params = cljs.core.get.call(null, map__12340__$1, new cljs.core.Keyword(null, "params", "params", 710516235));
  var action = cljs.core.get.call(null, map__12340__$1, new cljs.core.Keyword(null, "action", "action", -811238024));
  var action__$1 = function() {
    var or__4335__auto__ = action;
    if (cljs.core.truth_(or__4335__auto__)) {
      return or__4335__auto__;
    } else {
      return cljs.core.identity;
    }
  }();
  var params__$1 = cljs.core.merge.call(null, params, query_params);
  return action__$1.call(null, params__$1);
};
secretary.core.invalid_params = function secretary$core$invalid_params(params, validations) {
  return cljs.core.reduce.call(null, function(m, p__12343) {
    var vec__12344 = p__12343;
    var key = cljs.core.nth.call(null, vec__12344, 0, null);
    var validation = cljs.core.nth.call(null, vec__12344, 1, null);
    var value = cljs.core.get.call(null, params, key);
    if (cljs.core.truth_(cljs.core.re_matches.call(null, validation, value))) {
      return m;
    } else {
      return cljs.core.assoc.call(null, m, key, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [value, validation], null));
    }
  }, cljs.core.PersistentArrayMap.EMPTY, cljs.core.partition.call(null, 2, validations));
};
secretary.core.params_valid_QMARK_ = function secretary$core$params_valid_QMARK_(params, validations) {
  return cljs.core.empty_QMARK_.call(null, secretary.core.invalid_params.call(null, params, validations));
};
cljs.core.PersistentVector.prototype.secretary$core$IRouteMatches$ = true;
cljs.core.PersistentVector.prototype.secretary$core$IRouteMatches$route_matches$arity$2 = function(p__12345, route) {
  var vec__12346 = p__12345;
  var route_string = cljs.core.nth.call(null, vec__12346, 0, null);
  var validations = cljs.core.nthnext.call(null, vec__12346, 1);
  var vec__12347 = this;
  var route_string__$1 = cljs.core.nth.call(null, vec__12347, 0, null);
  var validations__$1 = cljs.core.nthnext.call(null, vec__12347, 1);
  var params = secretary.core.route_matches.call(null, secretary.core.compile_route.call(null, route_string__$1), route);
  if (cljs.core.truth_(secretary.core.params_valid_QMARK_.call(null, params, validations__$1))) {
    return params;
  } else {
    return null;
  }
};
RegExp.prototype.secretary$core$IRouteMatches$ = true;
RegExp.prototype.secretary$core$IRouteMatches$route_matches$arity$2 = function(this$, route) {
  var this$__$1 = this;
  var temp__4126__auto__ = secretary.core.re_matches_STAR_.call(null, this$__$1, route);
  if (cljs.core.truth_(temp__4126__auto__)) {
    var vec__12348 = temp__4126__auto__;
    var _ = cljs.core.nth.call(null, vec__12348, 0, null);
    var ms = cljs.core.nthnext.call(null, vec__12348, 1);
    return cljs.core.vec.call(null, ms);
  } else {
    return null;
  }
};
secretary.core.IRouteMatches["string"] = true;
secretary.core.route_matches["string"] = function(this$, route) {
  return secretary.core.route_matches.call(null, secretary.core.compile_route.call(null, this$), route);
};
cljs.core.PersistentVector.prototype.secretary$core$IRouteValue$ = true;
cljs.core.PersistentVector.prototype.secretary$core$IRouteValue$route_value$arity$1 = function(p__12349) {
  var vec__12350 = p__12349;
  var route_string = cljs.core.nth.call(null, vec__12350, 0, null);
  var validations = cljs.core.nthnext.call(null, vec__12350, 1);
  var vec__12351 = this;
  var route_string__$1 = cljs.core.nth.call(null, vec__12351, 0, null);
  var validations__$1 = cljs.core.nthnext.call(null, vec__12351, 1);
  return cljs.core.vec.call(null, cljs.core.cons.call(null, secretary.core.route_value.call(null, route_string__$1), validations__$1));
};
RegExp.prototype.secretary$core$IRouteValue$ = true;
RegExp.prototype.secretary$core$IRouteValue$route_value$arity$1 = function(this$) {
  var this$__$1 = this;
  return this$__$1;
};
secretary.core.IRouteValue["string"] = true;
secretary.core.route_value["string"] = function(this$) {
  return secretary.core.route_value.call(null, secretary.core.compile_route.call(null, this$));
};
cljs.core.PersistentVector.prototype.secretary$core$IRenderRoute$ = true;
cljs.core.PersistentVector.prototype.secretary$core$IRenderRoute$render_route$arity$1 = function(this$) {
  var this$__$1 = this;
  return secretary.core.render_route.call(null, this$__$1, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.core.PersistentVector.prototype.secretary$core$IRenderRoute$render_route$arity$2 = function(p__12352, params) {
  var vec__12353 = p__12352;
  var route_string = cljs.core.nth.call(null, vec__12353, 0, null);
  var validations = cljs.core.nthnext.call(null, vec__12353, 1);
  var vec__12354 = this;
  var route_string__$1 = cljs.core.nth.call(null, vec__12354, 0, null);
  var validations__$1 = cljs.core.nthnext.call(null, vec__12354, 1);
  var invalid = secretary.core.invalid_params.call(null, params, validations__$1);
  if (cljs.core.empty_QMARK_.call(null, invalid)) {
    return secretary.core.render_route.call(null, route_string__$1, params);
  } else {
    throw cljs.core.ex_info.call(null, "Could not build route: invalid params", invalid);
  }
};
secretary.core.IRenderRoute["string"] = true;
secretary.core.render_route["string"] = function() {
  var G__12356 = null;
  var G__12356__1 = function(this$) {
    return secretary.core.render_route.call(null, this$, cljs.core.PersistentArrayMap.EMPTY);
  };
  var G__12356__2 = function(this$, params) {
    var map__12355 = params;
    var map__12355__$1 = cljs.core.seq_QMARK_.call(null, map__12355) ? cljs.core.apply.call(null, cljs.core.hash_map, map__12355) : map__12355;
    var m = map__12355__$1;
    var query_params = cljs.core.get.call(null, map__12355__$1, new cljs.core.Keyword(null, "query-params", "query-params", 900640534));
    var a = cljs.core.atom.call(null, m);
    var path = this$.replace(new RegExp(":[^\\s.:*/]+|\\*[^\\s.:*/]*", "g"), function(map__12355, map__12355__$1, m, query_params, a) {
      return function($1) {
        var lookup = cljs.core.keyword.call(null, cljs.core._EQ_.call(null, $1, "*") ? $1 : cljs.core.subs.call(null, $1, 1));
        var v = cljs.core.get.call(null, cljs.core.deref.call(null, a), lookup);
        var replacement = cljs.core.sequential_QMARK_.call(null, v) ? function() {
          cljs.core.swap_BANG_.call(null, a, cljs.core.assoc, lookup, cljs.core.next.call(null, v));
          return secretary.core.encode_uri.call(null, cljs.core.first.call(null, v));
        }() : cljs.core.truth_(v) ? secretary.core.encode_uri.call(null, v) : $1;
        return replacement;
      };
    }(map__12355, map__12355__$1, m, query_params, a));
    var path__$1 = [cljs.core.str(secretary.core.get_config.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "prefix", "prefix", -265908465)], null))), cljs.core.str(path)].join("");
    var temp__4124__auto__ = function() {
      var and__4323__auto__ = query_params;
      if (cljs.core.truth_(and__4323__auto__)) {
        return secretary.core.encode_query_params.call(null, query_params);
      } else {
        return and__4323__auto__;
      }
    }();
    if (cljs.core.truth_(temp__4124__auto__)) {
      var query_string = temp__4124__auto__;
      return[cljs.core.str(path__$1), cljs.core.str("?"), cljs.core.str(query_string)].join("");
    } else {
      return path__$1;
    }
  };
  G__12356 = function(this$, params) {
    switch(arguments.length) {
      case 1:
        return G__12356__1.call(this, this$);
      case 2:
        return G__12356__2.call(this, this$, params);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__12356.cljs$core$IFn$_invoke$arity$1 = G__12356__1;
  G__12356.cljs$core$IFn$_invoke$arity$2 = G__12356__2;
  return G__12356;
}();
goog.provide("reagent.interop");
goog.require("cljs.core");
goog.provide("reagent.debug");
goog.require("cljs.core");
goog.provide("reagent.impl.util");
goog.require("cljs.core");
goog.require("clojure.string");
goog.require("reagent.interop");
goog.require("reagent.debug");
reagent.impl.util.is_client = typeof window !== "undefined" && !(window["document"] == null);
reagent.impl.util.extract_props = function reagent$impl$util$extract_props(v) {
  var p = cljs.core.nth.call(null, v, 1, null);
  if (cljs.core.map_QMARK_.call(null, p)) {
    return p;
  } else {
    return null;
  }
};
reagent.impl.util.extract_children = function reagent$impl$util$extract_children(v) {
  var p = cljs.core.nth.call(null, v, 1, null);
  var first_child = p == null || cljs.core.map_QMARK_.call(null, p) ? 2 : 1;
  if (cljs.core.count.call(null, v) > first_child) {
    return cljs.core.subvec.call(null, v, first_child);
  } else {
    return null;
  }
};
reagent.impl.util.get_argv = function reagent$impl$util$get_argv(c) {
  return c["props"]["argv"];
};
reagent.impl.util.get_props = function reagent$impl$util$get_props(c) {
  return reagent.impl.util.extract_props.call(null, c["props"]["argv"]);
};
reagent.impl.util.get_children = function reagent$impl$util$get_children(c) {
  return reagent.impl.util.extract_children.call(null, c["props"]["argv"]);
};
reagent.impl.util.reagent_component_QMARK_ = function reagent$impl$util$reagent_component_QMARK_(c) {
  return!(c["props"]["argv"] == null);
};
reagent.impl.util.cached_react_class = function reagent$impl$util$cached_react_class(c) {
  return c["cljsReactClass"];
};
reagent.impl.util.cache_react_class = function reagent$impl$util$cache_react_class(c, constructor) {
  return c["cljsReactClass"] = constructor;
};
reagent.impl.util.memoize_1 = function reagent$impl$util$memoize_1(f) {
  var mem = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  return function(mem) {
    return function(arg) {
      var v = cljs.core.get.call(null, cljs.core.deref.call(null, mem), arg);
      if (!(v == null)) {
        return v;
      } else {
        var ret = f.call(null, arg);
        cljs.core.swap_BANG_.call(null, mem, cljs.core.assoc, arg, ret);
        return ret;
      }
    };
  }(mem);
};
reagent.impl.util.dont_camel_case = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, ["aria", null, "data", null], null), null);
reagent.impl.util.capitalize = function reagent$impl$util$capitalize(s) {
  if (cljs.core.count.call(null, s) < 2) {
    return clojure.string.upper_case.call(null, s);
  } else {
    return[cljs.core.str(clojure.string.upper_case.call(null, cljs.core.subs.call(null, s, 0, 1))), cljs.core.str(cljs.core.subs.call(null, s, 1))].join("");
  }
};
reagent.impl.util.dash_to_camel = function reagent$impl$util$dash_to_camel(dashed) {
  if (typeof dashed === "string") {
    return dashed;
  } else {
    var name_str = cljs.core.name.call(null, dashed);
    var vec__12222 = clojure.string.split.call(null, name_str, /-/);
    var start = cljs.core.nth.call(null, vec__12222, 0, null);
    var parts = cljs.core.nthnext.call(null, vec__12222, 1);
    if (cljs.core.truth_(reagent.impl.util.dont_camel_case.call(null, start))) {
      return name_str;
    } else {
      return cljs.core.apply.call(null, cljs.core.str, start, cljs.core.map.call(null, reagent.impl.util.capitalize, parts));
    }
  }
};
reagent.impl.util.partial_ifn = function(f, args, p) {
  this.f = f;
  this.args = args;
  this.p = p;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 6291457;
};
reagent.impl.util.partial_ifn.prototype.cljs$core$IHash$_hash$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return cljs.core.hash.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.f, self__.args], null));
};
reagent.impl.util.partial_ifn.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  return cljs.core._EQ_.call(null, self__.f, other.f) && cljs.core._EQ_.call(null, self__.args, other.args);
};
reagent.impl.util.partial_ifn.prototype.call = function() {
  var G__12224__delegate = function(self__, a) {
    var self____$1 = this;
    var _ = self____$1;
    var or__4335__auto___12225 = self__.p;
    if (cljs.core.truth_(or__4335__auto___12225)) {
    } else {
      self__.p = cljs.core.apply.call(null, cljs.core.partial, self__.f, self__.args);
    }
    return cljs.core.apply.call(null, self__.p, a);
  };
  var G__12224 = function(self__, var_args) {
    var self__ = this;
    var a = null;
    if (arguments.length > 1) {
      var G__12226__i = 0, G__12226__a = new Array(arguments.length - 1);
      while (G__12226__i < G__12226__a.length) {
        G__12226__a[G__12226__i] = arguments[G__12226__i + 1];
        ++G__12226__i;
      }
      a = new cljs.core.IndexedSeq(G__12226__a, 0);
    }
    return G__12224__delegate.call(this, self__, a);
  };
  G__12224.cljs$lang$maxFixedArity = 1;
  G__12224.cljs$lang$applyTo = function(arglist__12227) {
    var self__ = cljs.core.first(arglist__12227);
    var a = cljs.core.rest(arglist__12227);
    return G__12224__delegate(self__, a);
  };
  G__12224.cljs$core$IFn$_invoke$arity$variadic = G__12224__delegate;
  return G__12224;
}();
reagent.impl.util.partial_ifn.prototype.apply = function(self__, args12223) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args12223)));
};
reagent.impl.util.partial_ifn.prototype.cljs$core$IFn$_invoke$arity$2 = function() {
  var G__12228__delegate = function(a) {
    var _ = this;
    var or__4335__auto___12229 = self__.p;
    if (cljs.core.truth_(or__4335__auto___12229)) {
    } else {
      self__.p = cljs.core.apply.call(null, cljs.core.partial, self__.f, self__.args);
    }
    return cljs.core.apply.call(null, self__.p, a);
  };
  var G__12228 = function(var_args) {
    var self__ = this;
    var a = null;
    if (arguments.length > 0) {
      var G__12230__i = 0, G__12230__a = new Array(arguments.length - 0);
      while (G__12230__i < G__12230__a.length) {
        G__12230__a[G__12230__i] = arguments[G__12230__i + 0];
        ++G__12230__i;
      }
      a = new cljs.core.IndexedSeq(G__12230__a, 0);
    }
    return G__12228__delegate.call(this, a);
  };
  G__12228.cljs$lang$maxFixedArity = 0;
  G__12228.cljs$lang$applyTo = function(arglist__12231) {
    var a = cljs.core.seq(arglist__12231);
    return G__12228__delegate(a);
  };
  G__12228.cljs$core$IFn$_invoke$arity$variadic = G__12228__delegate;
  return G__12228;
}();
reagent.impl.util.partial_ifn.cljs$lang$type = true;
reagent.impl.util.partial_ifn.cljs$lang$ctorStr = "reagent.impl.util/partial-ifn";
reagent.impl.util.partial_ifn.cljs$lang$ctorPrWriter = function(this__4914__auto__, writer__4915__auto__, opt__4916__auto__) {
  return cljs.core._write.call(null, writer__4915__auto__, "reagent.impl.util/partial-ifn");
};
reagent.impl.util.__GT_partial_ifn = function reagent$impl$util$__GT_partial_ifn(f, args, p) {
  return new reagent.impl.util.partial_ifn(f, args, p);
};
reagent.impl.util.merge_class = function reagent$impl$util$merge_class(p1, p2) {
  var class$ = function() {
    var temp__4126__auto__ = (new cljs.core.Keyword(null, "class", "class", -2030961996)).cljs$core$IFn$_invoke$arity$1(p1);
    if (cljs.core.truth_(temp__4126__auto__)) {
      var c1 = temp__4126__auto__;
      var temp__4126__auto____$1 = (new cljs.core.Keyword(null, "class", "class", -2030961996)).cljs$core$IFn$_invoke$arity$1(p2);
      if (cljs.core.truth_(temp__4126__auto____$1)) {
        var c2 = temp__4126__auto____$1;
        return[cljs.core.str(c1), cljs.core.str(" "), cljs.core.str(c2)].join("");
      } else {
        return null;
      }
    } else {
      return null;
    }
  }();
  if (class$ == null) {
    return p2;
  } else {
    return cljs.core.assoc.call(null, p2, new cljs.core.Keyword(null, "class", "class", -2030961996), class$);
  }
};
reagent.impl.util.merge_style = function reagent$impl$util$merge_style(p1, p2) {
  var style = function() {
    var temp__4126__auto__ = (new cljs.core.Keyword(null, "style", "style", -496642736)).cljs$core$IFn$_invoke$arity$1(p1);
    if (cljs.core.truth_(temp__4126__auto__)) {
      var s1 = temp__4126__auto__;
      var temp__4126__auto____$1 = (new cljs.core.Keyword(null, "style", "style", -496642736)).cljs$core$IFn$_invoke$arity$1(p2);
      if (cljs.core.truth_(temp__4126__auto____$1)) {
        var s2 = temp__4126__auto____$1;
        return cljs.core.merge.call(null, s1, s2);
      } else {
        return null;
      }
    } else {
      return null;
    }
  }();
  if (style == null) {
    return p2;
  } else {
    return cljs.core.assoc.call(null, p2, new cljs.core.Keyword(null, "style", "style", -496642736), style);
  }
};
reagent.impl.util.merge_props = function reagent$impl$util$merge_props(p1, p2) {
  if (p1 == null) {
    return p2;
  } else {
    if (cljs.core.map_QMARK_.call(null, p1)) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "map?", "map?", -1780568534, null), new cljs.core.Symbol(null, "p1", "p1", 703771573, null))))].join(""));
    }
    return reagent.impl.util.merge_style.call(null, p1, reagent.impl.util.merge_class.call(null, p1, cljs.core.merge.call(null, p1, p2)));
  }
};
reagent.impl.util._STAR_always_update_STAR_ = false;
if (typeof reagent.impl.util.roots !== "undefined") {
} else {
  reagent.impl.util.roots = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
}
reagent.impl.util.clear_container = function reagent$impl$util$clear_container(node) {
  try {
    return React["unmountComponentAtNode"](node);
  } catch (e12233) {
    if (e12233 instanceof Object) {
      var e = e12233;
      if (typeof console !== "undefined") {
        console.warn([cljs.core.str("Warning: "), cljs.core.str("Error unmounting:")].join(""));
      } else {
      }
      if (typeof console !== "undefined") {
        return console.log(e);
      } else {
        return null;
      }
    } else {
      throw e12233;
    }
  }
};
reagent.impl.util.render_component = function reagent$impl$util$render_component(comp, container, callback) {
  try {
    var _STAR_always_update_STAR_12238 = reagent.impl.util._STAR_always_update_STAR_;
    reagent.impl.util._STAR_always_update_STAR_ = true;
    try {
      return React["render"](comp.call(null), container, function(_STAR_always_update_STAR_12238) {
        return function() {
          var _STAR_always_update_STAR_12239 = reagent.impl.util._STAR_always_update_STAR_;
          reagent.impl.util._STAR_always_update_STAR_ = false;
          try {
            cljs.core.swap_BANG_.call(null, reagent.impl.util.roots, cljs.core.assoc, container, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [comp, container], null));
            if (cljs.core.some_QMARK_.call(null, callback)) {
              return callback.call(null);
            } else {
              return null;
            }
          } finally {
            reagent.impl.util._STAR_always_update_STAR_ = _STAR_always_update_STAR_12239;
          }
        };
      }(_STAR_always_update_STAR_12238));
    } finally {
      reagent.impl.util._STAR_always_update_STAR_ = _STAR_always_update_STAR_12238;
    }
  } catch (e12237) {
    if (e12237 instanceof Object) {
      var e = e12237;
      reagent.impl.util.clear_container.call(null, container);
      throw e;
    } else {
      throw e12237;
    }
  }
};
reagent.impl.util.re_render_component = function reagent$impl$util$re_render_component(comp, container) {
  return reagent.impl.util.render_component.call(null, comp, container, null);
};
reagent.impl.util.unmount_component_at_node = function reagent$impl$util$unmount_component_at_node(container) {
  cljs.core.swap_BANG_.call(null, reagent.impl.util.roots, cljs.core.dissoc, container);
  return React["unmountComponentAtNode"](container);
};
reagent.impl.util.force_update_all = function reagent$impl$util$force_update_all() {
  var seq__12244_12248 = cljs.core.seq.call(null, cljs.core.vals.call(null, cljs.core.deref.call(null, reagent.impl.util.roots)));
  var chunk__12245_12249 = null;
  var count__12246_12250 = 0;
  var i__12247_12251 = 0;
  while (true) {
    if (i__12247_12251 < count__12246_12250) {
      var v_12252 = cljs.core._nth.call(null, chunk__12245_12249, i__12247_12251);
      cljs.core.apply.call(null, reagent.impl.util.re_render_component, v_12252);
      var G__12253 = seq__12244_12248;
      var G__12254 = chunk__12245_12249;
      var G__12255 = count__12246_12250;
      var G__12256 = i__12247_12251 + 1;
      seq__12244_12248 = G__12253;
      chunk__12245_12249 = G__12254;
      count__12246_12250 = G__12255;
      i__12247_12251 = G__12256;
      continue;
    } else {
      var temp__4126__auto___12257 = cljs.core.seq.call(null, seq__12244_12248);
      if (temp__4126__auto___12257) {
        var seq__12244_12258__$1 = temp__4126__auto___12257;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__12244_12258__$1)) {
          var c__5120__auto___12259 = cljs.core.chunk_first.call(null, seq__12244_12258__$1);
          var G__12260 = cljs.core.chunk_rest.call(null, seq__12244_12258__$1);
          var G__12261 = c__5120__auto___12259;
          var G__12262 = cljs.core.count.call(null, c__5120__auto___12259);
          var G__12263 = 0;
          seq__12244_12248 = G__12260;
          chunk__12245_12249 = G__12261;
          count__12246_12250 = G__12262;
          i__12247_12251 = G__12263;
          continue;
        } else {
          var v_12264 = cljs.core.first.call(null, seq__12244_12258__$1);
          cljs.core.apply.call(null, reagent.impl.util.re_render_component, v_12264);
          var G__12265 = cljs.core.next.call(null, seq__12244_12258__$1);
          var G__12266 = null;
          var G__12267 = 0;
          var G__12268 = 0;
          seq__12244_12248 = G__12265;
          chunk__12245_12249 = G__12266;
          count__12246_12250 = G__12267;
          i__12247_12251 = G__12268;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return "Updated";
};
goog.provide("reagent.ratom");
goog.require("cljs.core");
goog.require("reagent.impl.util");
if (typeof reagent.ratom.debug !== "undefined") {
} else {
  reagent.ratom.debug = false;
}
if (typeof reagent.ratom._running !== "undefined") {
} else {
  reagent.ratom._running = cljs.core.atom.call(null, 0);
}
reagent.ratom.running = function reagent$ratom$running() {
  return cljs.core.deref.call(null, reagent.ratom._running);
};
reagent.ratom.capture_derefed = function reagent$ratom$capture_derefed(f, obj) {
  obj.cljsCaptured = null;
  var _STAR_ratom_context_STAR_12104 = reagent.ratom._STAR_ratom_context_STAR_;
  reagent.ratom._STAR_ratom_context_STAR_ = obj;
  try {
    return f.call(null);
  } finally {
    reagent.ratom._STAR_ratom_context_STAR_ = _STAR_ratom_context_STAR_12104;
  }
};
reagent.ratom.captured = function reagent$ratom$captured(obj) {
  var c = obj.cljsCaptured;
  obj.cljsCaptured = null;
  return c;
};
reagent.ratom.notify_deref_watcher_BANG_ = function reagent$ratom$notify_deref_watcher_BANG_(derefable) {
  var obj = reagent.ratom._STAR_ratom_context_STAR_;
  if (obj == null) {
    return null;
  } else {
    var captured = obj.cljsCaptured;
    return obj.cljsCaptured = cljs.core.conj.call(null, captured == null ? cljs.core.PersistentHashSet.EMPTY : captured, derefable);
  }
};
reagent.ratom.IReactiveAtom = function() {
  var obj12106 = {};
  return obj12106;
}();
reagent.ratom.RAtom = function(state, meta, validator, watches) {
  this.state = state;
  this.meta = meta;
  this.validator = validator;
  this.watches = watches;
  this.cljs$lang$protocol_mask$partition0$ = 2153938944;
  this.cljs$lang$protocol_mask$partition1$ = 114690;
};
reagent.ratom.RAtom.prototype.reagent$ratom$IReactiveAtom$ = true;
reagent.ratom.RAtom.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(a, writer, opts) {
  var self__ = this;
  var a__$1 = this;
  cljs.core._write.call(null, writer, "#\x3cAtom: ");
  cljs.core.pr_writer.call(null, self__.state, writer, opts);
  return cljs.core._write.call(null, writer, "\x3e");
};
reagent.ratom.RAtom.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.meta;
};
reagent.ratom.RAtom.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return goog.getUid(this$__$1);
};
reagent.ratom.RAtom.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var self__ = this;
  var o__$1 = this;
  return o__$1 === other;
};
reagent.ratom.RAtom.prototype.cljs$core$IReset$_reset_BANG_$arity$2 = function(a, new_value) {
  var self__ = this;
  var a__$1 = this;
  if (self__.validator == null) {
  } else {
    if (cljs.core.truth_(self__.validator.call(null, new_value))) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("Validator rejected reference state"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "validator", "validator", -325659154, null), new cljs.core.Symbol(null, "new-value", "new-value", -1567397401, null))))].join(""));
    }
  }
  var old_value = self__.state;
  self__.state = new_value;
  if (self__.watches == null) {
  } else {
    cljs.core._notify_watches.call(null, a__$1, old_value, new_value);
  }
  return new_value;
};
reagent.ratom.RAtom.prototype.cljs$core$ISwap$_swap_BANG_$arity$2 = function(a, f) {
  var self__ = this;
  var a__$1 = this;
  return cljs.core._reset_BANG_.call(null, a__$1, f.call(null, self__.state));
};
reagent.ratom.RAtom.prototype.cljs$core$ISwap$_swap_BANG_$arity$3 = function(a, f, x) {
  var self__ = this;
  var a__$1 = this;
  return cljs.core._reset_BANG_.call(null, a__$1, f.call(null, self__.state, x));
};
reagent.ratom.RAtom.prototype.cljs$core$ISwap$_swap_BANG_$arity$4 = function(a, f, x, y) {
  var self__ = this;
  var a__$1 = this;
  return cljs.core._reset_BANG_.call(null, a__$1, f.call(null, self__.state, x, y));
};
reagent.ratom.RAtom.prototype.cljs$core$ISwap$_swap_BANG_$arity$5 = function(a, f, x, y, more) {
  var self__ = this;
  var a__$1 = this;
  return cljs.core._reset_BANG_.call(null, a__$1, cljs.core.apply.call(null, f, self__.state, x, y, more));
};
reagent.ratom.RAtom.prototype.cljs$core$IWatchable$_notify_watches$arity$3 = function(this$, oldval, newval) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.reduce_kv.call(null, function(this$__$1) {
    return function(_, key, f) {
      f.call(null, key, this$__$1, oldval, newval);
      return null;
    };
  }(this$__$1), null, self__.watches);
};
reagent.ratom.RAtom.prototype.cljs$core$IWatchable$_add_watch$arity$3 = function(this$, key, f) {
  var self__ = this;
  var this$__$1 = this;
  return self__.watches = cljs.core.assoc.call(null, self__.watches, key, f);
};
reagent.ratom.RAtom.prototype.cljs$core$IWatchable$_remove_watch$arity$2 = function(this$, key) {
  var self__ = this;
  var this$__$1 = this;
  return self__.watches = cljs.core.dissoc.call(null, self__.watches, key);
};
reagent.ratom.RAtom.prototype.cljs$core$IDeref$_deref$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  reagent.ratom.notify_deref_watcher_BANG_.call(null, this$__$1);
  return self__.state;
};
reagent.ratom.RAtom.cljs$lang$type = true;
reagent.ratom.RAtom.cljs$lang$ctorStr = "reagent.ratom/RAtom";
reagent.ratom.RAtom.cljs$lang$ctorPrWriter = function(this__4914__auto__, writer__4915__auto__, opt__4916__auto__) {
  return cljs.core._write.call(null, writer__4915__auto__, "reagent.ratom/RAtom");
};
reagent.ratom.__GT_RAtom = function reagent$ratom$__GT_RAtom(state, meta, validator, watches) {
  return new reagent.ratom.RAtom(state, meta, validator, watches);
};
reagent.ratom.atom = function reagent$ratom$atom() {
  var G__12110 = arguments.length;
  switch(G__12110) {
    case 1:
      return reagent.ratom.atom.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      var argseq__5386__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0);
      return reagent.ratom.atom.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5386__auto__);
  }
};
reagent.ratom.atom.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return new reagent.ratom.RAtom(x, null, null, null);
};
reagent.ratom.atom.cljs$core$IFn$_invoke$arity$variadic = function(x, p__12111) {
  var map__12112 = p__12111;
  var map__12112__$1 = cljs.core.seq_QMARK_.call(null, map__12112) ? cljs.core.apply.call(null, cljs.core.hash_map, map__12112) : map__12112;
  var validator = cljs.core.get.call(null, map__12112__$1, new cljs.core.Keyword(null, "validator", "validator", -1966190681));
  var meta = cljs.core.get.call(null, map__12112__$1, new cljs.core.Keyword(null, "meta", "meta", 1499536964));
  return new reagent.ratom.RAtom(x, meta, validator, null);
};
reagent.ratom.atom.cljs$lang$applyTo = function(seq12107) {
  var G__12108 = cljs.core.first.call(null, seq12107);
  var seq12107__$1 = cljs.core.next.call(null, seq12107);
  return reagent.ratom.atom.cljs$core$IFn$_invoke$arity$variadic(G__12108, seq12107__$1);
};
reagent.ratom.atom.cljs$lang$maxFixedArity = 1;
reagent.ratom.RCursor = function(ratom, path, reaction) {
  this.ratom = ratom;
  this.path = path;
  this.reaction = reaction;
  this.cljs$lang$protocol_mask$partition0$ = 2153807872;
  this.cljs$lang$protocol_mask$partition1$ = 114690;
};
reagent.ratom.RCursor.prototype._reaction = function() {
  var self__ = this;
  var this$ = this;
  if (self__.reaction == null) {
    return self__.reaction = function() {
      var G__12120 = self__.ratom;
      if (G__12120) {
        var bit__5009__auto__ = G__12120.cljs$lang$protocol_mask$partition0$ & 32768;
        if (bit__5009__auto__ || G__12120.cljs$core$IDeref$) {
          return true;
        } else {
          if (!G__12120.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IDeref, G__12120);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IDeref, G__12120);
      }
    }() ? reagent.ratom.make_reaction.call(null, function(this$) {
      return function() {
        return cljs.core.get_in.call(null, cljs.core.deref.call(null, self__.ratom), self__.path);
      };
    }(this$), new cljs.core.Keyword(null, "on-set", "on-set", -140953470), cljs.core._EQ_.call(null, self__.path, cljs.core.PersistentVector.EMPTY) ? function(this$) {
      return function(p1__12115_SHARP_, p2__12114_SHARP_) {
        return cljs.core.reset_BANG_.call(null, self__.ratom, p2__12114_SHARP_);
      };
    }(this$) : function(this$) {
      return function(p1__12117_SHARP_, p2__12116_SHARP_) {
        return cljs.core.swap_BANG_.call(null, self__.ratom, cljs.core.assoc_in, self__.path, p2__12116_SHARP_);
      };
    }(this$)) : reagent.ratom.make_reaction.call(null, function(this$) {
      return function() {
        return self__.ratom.call(null, self__.path);
      };
    }(this$), new cljs.core.Keyword(null, "on-set", "on-set", -140953470), function(this$) {
      return function(p1__12119_SHARP_, p2__12118_SHARP_) {
        return self__.ratom.call(null, self__.path, p2__12118_SHARP_);
      };
    }(this$));
  } else {
    return self__.reaction;
  }
};
reagent.ratom.RCursor.prototype._peek = function() {
  var self__ = this;
  var this$ = this;
  var _STAR_ratom_context_STAR_12121 = reagent.ratom._STAR_ratom_context_STAR_;
  reagent.ratom._STAR_ratom_context_STAR_ = null;
  try {
    return cljs.core._deref.call(null, this$._reaction());
  } finally {
    reagent.ratom._STAR_ratom_context_STAR_ = _STAR_ratom_context_STAR_12121;
  }
};
reagent.ratom.RCursor.prototype.reagent$ratom$IReactiveAtom$ = true;
reagent.ratom.RCursor.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(a, writer, opts) {
  var self__ = this;
  var a__$1 = this;
  cljs.core._write.call(null, writer, [cljs.core.str("#\x3cCursor: "), cljs.core.str(self__.path), cljs.core.str(" ")].join(""));
  cljs.core.pr_writer.call(null, a__$1._peek(), writer, opts);
  return cljs.core._write.call(null, writer, "\x3e");
};
reagent.ratom.RCursor.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.hash.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.ratom, self__.path], null));
};
reagent.ratom.RCursor.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var self__ = this;
  var o__$1 = this;
  return other instanceof reagent.ratom.RCursor && cljs.core._EQ_.call(null, self__.path, other.path) && cljs.core._EQ_.call(null, self__.ratom, other.ratom);
};
reagent.ratom.RCursor.prototype.cljs$core$IReset$_reset_BANG_$arity$2 = function(this$, new_value) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core._reset_BANG_.call(null, this$__$1._reaction(), new_value);
};
reagent.ratom.RCursor.prototype.cljs$core$ISwap$_swap_BANG_$arity$2 = function(a, f) {
  var self__ = this;
  var a__$1 = this;
  return cljs.core._swap_BANG_.call(null, a__$1._reaction(), f);
};
reagent.ratom.RCursor.prototype.cljs$core$ISwap$_swap_BANG_$arity$3 = function(a, f, x) {
  var self__ = this;
  var a__$1 = this;
  return cljs.core._swap_BANG_.call(null, a__$1._reaction(), f, x);
};
reagent.ratom.RCursor.prototype.cljs$core$ISwap$_swap_BANG_$arity$4 = function(a, f, x, y) {
  var self__ = this;
  var a__$1 = this;
  return cljs.core._swap_BANG_.call(null, a__$1._reaction(), f, x, y);
};
reagent.ratom.RCursor.prototype.cljs$core$ISwap$_swap_BANG_$arity$5 = function(a, f, x, y, more) {
  var self__ = this;
  var a__$1 = this;
  return cljs.core._swap_BANG_.call(null, a__$1._reaction(), f, x, y, more);
};
reagent.ratom.RCursor.prototype.cljs$core$IWatchable$_notify_watches$arity$3 = function(this$, oldval, newval) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core._notify_watches.call(null, this$__$1._reaction(), oldval, newval);
};
reagent.ratom.RCursor.prototype.cljs$core$IWatchable$_add_watch$arity$3 = function(this$, key, f) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core._add_watch.call(null, this$__$1._reaction(), key, f);
};
reagent.ratom.RCursor.prototype.cljs$core$IWatchable$_remove_watch$arity$2 = function(this$, key) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core._remove_watch.call(null, this$__$1._reaction(), key);
};
reagent.ratom.RCursor.prototype.cljs$core$IDeref$_deref$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core._deref.call(null, this$__$1._reaction());
};
reagent.ratom.RCursor.cljs$lang$type = true;
reagent.ratom.RCursor.cljs$lang$ctorStr = "reagent.ratom/RCursor";
reagent.ratom.RCursor.cljs$lang$ctorPrWriter = function(this__4914__auto__, writer__4915__auto__, opt__4916__auto__) {
  return cljs.core._write.call(null, writer__4915__auto__, "reagent.ratom/RCursor");
};
reagent.ratom.__GT_RCursor = function reagent$ratom$__GT_RCursor(ratom, path, reaction) {
  return new reagent.ratom.RCursor(ratom, path, reaction);
};
reagent.ratom.cursor = function reagent$ratom$cursor(src, path) {
  if (function() {
    var G__12126 = path;
    if (G__12126) {
      var bit__5009__auto__ = G__12126.cljs$lang$protocol_mask$partition0$ & 32768;
      if (bit__5009__auto__ || G__12126.cljs$core$IDeref$) {
        return true;
      } else {
        if (!G__12126.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IDeref, G__12126);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IDeref, G__12126);
    }
  }()) {
    if (typeof console !== "undefined") {
      console.warn([cljs.core.str("Warning: "), cljs.core.str("Calling cursor with an atom as the second arg is "), cljs.core.str("deprecated, in (cursor "), cljs.core.str(src), cljs.core.str(" "), cljs.core.str(cljs.core.pr_str.call(null, path)), cljs.core.str(")")].join(""));
    } else {
    }
    if (function() {
      var G__12127 = path;
      if (G__12127) {
        var bit__5009__auto__ = null;
        if (cljs.core.truth_(function() {
          var or__4335__auto__ = bit__5009__auto__;
          if (cljs.core.truth_(or__4335__auto__)) {
            return or__4335__auto__;
          } else {
            return G__12127.reagent$ratom$IReactiveAtom$;
          }
        }())) {
          return true;
        } else {
          if (!G__12127.cljs$lang$protocol_mask$partition$) {
            return cljs.core.native_satisfies_QMARK_.call(null, reagent.ratom.IReactiveAtom, G__12127);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, reagent.ratom.IReactiveAtom, G__12127);
      }
    }()) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str([cljs.core.str("src must be a reactive atom, not "), cljs.core.str(cljs.core.pr_str.call(null, path))].join("")), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "satisfies?", "satisfies?", -433227199, null), new cljs.core.Symbol(null, "IReactiveAtom", "IReactiveAtom", -991158427, null), new cljs.core.Symbol(null, "path", "path", 1452340359, null))))].join(""));
    }
    return new reagent.ratom.RCursor(path, src, null);
  } else {
    if (function() {
      var or__4335__auto__ = function() {
        var G__12129 = src;
        if (G__12129) {
          var bit__5009__auto__ = null;
          if (cljs.core.truth_(function() {
            var or__4335__auto__ = bit__5009__auto__;
            if (cljs.core.truth_(or__4335__auto__)) {
              return or__4335__auto__;
            } else {
              return G__12129.reagent$ratom$IReactiveAtom$;
            }
          }())) {
            return true;
          } else {
            if (!G__12129.cljs$lang$protocol_mask$partition$) {
              return cljs.core.native_satisfies_QMARK_.call(null, reagent.ratom.IReactiveAtom, G__12129);
            } else {
              return false;
            }
          }
        } else {
          return cljs.core.native_satisfies_QMARK_.call(null, reagent.ratom.IReactiveAtom, G__12129);
        }
      }();
      if (or__4335__auto__) {
        return or__4335__auto__;
      } else {
        return cljs.core.ifn_QMARK_.call(null, src) && !cljs.core.vector_QMARK_.call(null, src);
      }
    }()) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str([cljs.core.str("src must be a reactive atom or a function, not "), cljs.core.str(cljs.core.pr_str.call(null, src))].join("")), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "or", "or", 1876275696, null), cljs.core.list(new cljs.core.Symbol(null, "satisfies?", "satisfies?", -433227199, null), new cljs.core.Symbol(null, "IReactiveAtom", "IReactiveAtom", -991158427, null), 
      new cljs.core.Symbol(null, "src", "src", -10544524, null)), cljs.core.list(new cljs.core.Symbol(null, "and", "and", 668631710, null), cljs.core.list(new cljs.core.Symbol(null, "ifn?", "ifn?", -2106461064, null), new cljs.core.Symbol(null, "src", "src", -10544524, null)), cljs.core.list(new cljs.core.Symbol(null, "not", "not", 1044554643, null), cljs.core.list(new cljs.core.Symbol(null, "vector?", "vector?", -61367869, null), new cljs.core.Symbol(null, "src", "src", -10544524, null)))))))].join(""));
    }
    return new reagent.ratom.RCursor(src, path, null);
  }
};
reagent.ratom.IDisposable = function() {
  var obj12131 = {};
  return obj12131;
}();
reagent.ratom.dispose_BANG_ = function reagent$ratom$dispose_BANG_(this$) {
  if (function() {
    var and__4323__auto__ = this$;
    if (and__4323__auto__) {
      return this$.reagent$ratom$IDisposable$dispose_BANG_$arity$1;
    } else {
      return and__4323__auto__;
    }
  }()) {
    return this$.reagent$ratom$IDisposable$dispose_BANG_$arity$1(this$);
  } else {
    var x__4971__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4335__auto__ = reagent.ratom.dispose_BANG_[goog.typeOf(x__4971__auto__)];
      if (or__4335__auto__) {
        return or__4335__auto__;
      } else {
        var or__4335__auto____$1 = reagent.ratom.dispose_BANG_["_"];
        if (or__4335__auto____$1) {
          return or__4335__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IDisposable.dispose!", this$);
        }
      }
    }().call(null, this$);
  }
};
reagent.ratom.IRunnable = function() {
  var obj12133 = {};
  return obj12133;
}();
reagent.ratom.run = function reagent$ratom$run(this$) {
  if (function() {
    var and__4323__auto__ = this$;
    if (and__4323__auto__) {
      return this$.reagent$ratom$IRunnable$run$arity$1;
    } else {
      return and__4323__auto__;
    }
  }()) {
    return this$.reagent$ratom$IRunnable$run$arity$1(this$);
  } else {
    var x__4971__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4335__auto__ = reagent.ratom.run[goog.typeOf(x__4971__auto__)];
      if (or__4335__auto__) {
        return or__4335__auto__;
      } else {
        var or__4335__auto____$1 = reagent.ratom.run["_"];
        if (or__4335__auto____$1) {
          return or__4335__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IRunnable.run", this$);
        }
      }
    }().call(null, this$);
  }
};
reagent.ratom.IComputedImpl = function() {
  var obj12135 = {};
  return obj12135;
}();
reagent.ratom._update_watching = function reagent$ratom$_update_watching(this$, derefed) {
  if (function() {
    var and__4323__auto__ = this$;
    if (and__4323__auto__) {
      return this$.reagent$ratom$IComputedImpl$_update_watching$arity$2;
    } else {
      return and__4323__auto__;
    }
  }()) {
    return this$.reagent$ratom$IComputedImpl$_update_watching$arity$2(this$, derefed);
  } else {
    var x__4971__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4335__auto__ = reagent.ratom._update_watching[goog.typeOf(x__4971__auto__)];
      if (or__4335__auto__) {
        return or__4335__auto__;
      } else {
        var or__4335__auto____$1 = reagent.ratom._update_watching["_"];
        if (or__4335__auto____$1) {
          return or__4335__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IComputedImpl.-update-watching", this$);
        }
      }
    }().call(null, this$, derefed);
  }
};
reagent.ratom._handle_change = function reagent$ratom$_handle_change(k, sender, oldval, newval) {
  if (function() {
    var and__4323__auto__ = k;
    if (and__4323__auto__) {
      return k.reagent$ratom$IComputedImpl$_handle_change$arity$4;
    } else {
      return and__4323__auto__;
    }
  }()) {
    return k.reagent$ratom$IComputedImpl$_handle_change$arity$4(k, sender, oldval, newval);
  } else {
    var x__4971__auto__ = k == null ? null : k;
    return function() {
      var or__4335__auto__ = reagent.ratom._handle_change[goog.typeOf(x__4971__auto__)];
      if (or__4335__auto__) {
        return or__4335__auto__;
      } else {
        var or__4335__auto____$1 = reagent.ratom._handle_change["_"];
        if (or__4335__auto____$1) {
          return or__4335__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IComputedImpl.-handle-change", k);
        }
      }
    }().call(null, k, sender, oldval, newval);
  }
};
reagent.ratom._peek_at = function reagent$ratom$_peek_at(this$) {
  if (function() {
    var and__4323__auto__ = this$;
    if (and__4323__auto__) {
      return this$.reagent$ratom$IComputedImpl$_peek_at$arity$1;
    } else {
      return and__4323__auto__;
    }
  }()) {
    return this$.reagent$ratom$IComputedImpl$_peek_at$arity$1(this$);
  } else {
    var x__4971__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4335__auto__ = reagent.ratom._peek_at[goog.typeOf(x__4971__auto__)];
      if (or__4335__auto__) {
        return or__4335__auto__;
      } else {
        var or__4335__auto____$1 = reagent.ratom._peek_at["_"];
        if (or__4335__auto____$1) {
          return or__4335__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IComputedImpl.-peek-at", this$);
        }
      }
    }().call(null, this$);
  }
};
reagent.ratom.Reaction = function(f, state, dirty_QMARK_, active_QMARK_, watching, watches, auto_run, on_set, on_dispose) {
  this.f = f;
  this.state = state;
  this.dirty_QMARK_ = dirty_QMARK_;
  this.active_QMARK_ = active_QMARK_;
  this.watching = watching;
  this.watches = watches;
  this.auto_run = auto_run;
  this.on_set = on_set;
  this.on_dispose = on_dispose;
  this.cljs$lang$protocol_mask$partition0$ = 2153807872;
  this.cljs$lang$protocol_mask$partition1$ = 114690;
};
reagent.ratom.Reaction.prototype.reagent$ratom$IComputedImpl$ = true;
reagent.ratom.Reaction.prototype.reagent$ratom$IComputedImpl$_handle_change$arity$4 = function(this$, sender, oldval, newval) {
  var self__ = this;
  var this$__$1 = this;
  if (cljs.core.truth_(function() {
    var and__4323__auto__ = self__.active_QMARK_;
    if (cljs.core.truth_(and__4323__auto__)) {
      return cljs.core.not.call(null, self__.dirty_QMARK_) && !(oldval === newval);
    } else {
      return and__4323__auto__;
    }
  }())) {
    self__.dirty_QMARK_ = true;
    return function() {
      var or__4335__auto__ = self__.auto_run;
      if (cljs.core.truth_(or__4335__auto__)) {
        return or__4335__auto__;
      } else {
        return reagent.ratom.run;
      }
    }().call(null, this$__$1);
  } else {
    return null;
  }
};
reagent.ratom.Reaction.prototype.reagent$ratom$IComputedImpl$_update_watching$arity$2 = function(this$, derefed) {
  var self__ = this;
  var this$__$1 = this;
  var seq__12136_12149 = cljs.core.seq.call(null, derefed);
  var chunk__12137_12150 = null;
  var count__12138_12151 = 0;
  var i__12139_12152 = 0;
  while (true) {
    if (i__12139_12152 < count__12138_12151) {
      var w_12153 = cljs.core._nth.call(null, chunk__12137_12150, i__12139_12152);
      if (cljs.core.contains_QMARK_.call(null, self__.watching, w_12153)) {
      } else {
        cljs.core.add_watch.call(null, w_12153, this$__$1, reagent.ratom._handle_change);
      }
      var G__12154 = seq__12136_12149;
      var G__12155 = chunk__12137_12150;
      var G__12156 = count__12138_12151;
      var G__12157 = i__12139_12152 + 1;
      seq__12136_12149 = G__12154;
      chunk__12137_12150 = G__12155;
      count__12138_12151 = G__12156;
      i__12139_12152 = G__12157;
      continue;
    } else {
      var temp__4126__auto___12158 = cljs.core.seq.call(null, seq__12136_12149);
      if (temp__4126__auto___12158) {
        var seq__12136_12159__$1 = temp__4126__auto___12158;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__12136_12159__$1)) {
          var c__5120__auto___12160 = cljs.core.chunk_first.call(null, seq__12136_12159__$1);
          var G__12161 = cljs.core.chunk_rest.call(null, seq__12136_12159__$1);
          var G__12162 = c__5120__auto___12160;
          var G__12163 = cljs.core.count.call(null, c__5120__auto___12160);
          var G__12164 = 0;
          seq__12136_12149 = G__12161;
          chunk__12137_12150 = G__12162;
          count__12138_12151 = G__12163;
          i__12139_12152 = G__12164;
          continue;
        } else {
          var w_12165 = cljs.core.first.call(null, seq__12136_12159__$1);
          if (cljs.core.contains_QMARK_.call(null, self__.watching, w_12165)) {
          } else {
            cljs.core.add_watch.call(null, w_12165, this$__$1, reagent.ratom._handle_change);
          }
          var G__12166 = cljs.core.next.call(null, seq__12136_12159__$1);
          var G__12167 = null;
          var G__12168 = 0;
          var G__12169 = 0;
          seq__12136_12149 = G__12166;
          chunk__12137_12150 = G__12167;
          count__12138_12151 = G__12168;
          i__12139_12152 = G__12169;
          continue;
        }
      } else {
      }
    }
    break;
  }
  var seq__12140_12170 = cljs.core.seq.call(null, self__.watching);
  var chunk__12141_12171 = null;
  var count__12142_12172 = 0;
  var i__12143_12173 = 0;
  while (true) {
    if (i__12143_12173 < count__12142_12172) {
      var w_12174 = cljs.core._nth.call(null, chunk__12141_12171, i__12143_12173);
      if (cljs.core.contains_QMARK_.call(null, derefed, w_12174)) {
      } else {
        cljs.core.remove_watch.call(null, w_12174, this$__$1);
      }
      var G__12175 = seq__12140_12170;
      var G__12176 = chunk__12141_12171;
      var G__12177 = count__12142_12172;
      var G__12178 = i__12143_12173 + 1;
      seq__12140_12170 = G__12175;
      chunk__12141_12171 = G__12176;
      count__12142_12172 = G__12177;
      i__12143_12173 = G__12178;
      continue;
    } else {
      var temp__4126__auto___12179 = cljs.core.seq.call(null, seq__12140_12170);
      if (temp__4126__auto___12179) {
        var seq__12140_12180__$1 = temp__4126__auto___12179;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__12140_12180__$1)) {
          var c__5120__auto___12181 = cljs.core.chunk_first.call(null, seq__12140_12180__$1);
          var G__12182 = cljs.core.chunk_rest.call(null, seq__12140_12180__$1);
          var G__12183 = c__5120__auto___12181;
          var G__12184 = cljs.core.count.call(null, c__5120__auto___12181);
          var G__12185 = 0;
          seq__12140_12170 = G__12182;
          chunk__12141_12171 = G__12183;
          count__12142_12172 = G__12184;
          i__12143_12173 = G__12185;
          continue;
        } else {
          var w_12186 = cljs.core.first.call(null, seq__12140_12180__$1);
          if (cljs.core.contains_QMARK_.call(null, derefed, w_12186)) {
          } else {
            cljs.core.remove_watch.call(null, w_12186, this$__$1);
          }
          var G__12187 = cljs.core.next.call(null, seq__12140_12180__$1);
          var G__12188 = null;
          var G__12189 = 0;
          var G__12190 = 0;
          seq__12140_12170 = G__12187;
          chunk__12141_12171 = G__12188;
          count__12142_12172 = G__12189;
          i__12143_12173 = G__12190;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return self__.watching = derefed;
};
reagent.ratom.Reaction.prototype.reagent$ratom$IComputedImpl$_peek_at$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (cljs.core.not.call(null, self__.dirty_QMARK_)) {
    return self__.state;
  } else {
    var _STAR_ratom_context_STAR_12144 = reagent.ratom._STAR_ratom_context_STAR_;
    reagent.ratom._STAR_ratom_context_STAR_ = null;
    try {
      return cljs.core._deref.call(null, this$__$1);
    } finally {
      reagent.ratom._STAR_ratom_context_STAR_ = _STAR_ratom_context_STAR_12144;
    }
  }
};
reagent.ratom.Reaction.prototype.reagent$ratom$IReactiveAtom$ = true;
reagent.ratom.Reaction.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this$, writer, opts) {
  var self__ = this;
  var this$__$1 = this;
  cljs.core._write.call(null, writer, [cljs.core.str("#\x3cReaction "), cljs.core.str(cljs.core.hash.call(null, this$__$1)), cljs.core.str(": ")].join(""));
  cljs.core.pr_writer.call(null, self__.state, writer, opts);
  return cljs.core._write.call(null, writer, "\x3e");
};
reagent.ratom.Reaction.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return goog.getUid(this$__$1);
};
reagent.ratom.Reaction.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var self__ = this;
  var o__$1 = this;
  return o__$1 === other;
};
reagent.ratom.Reaction.prototype.reagent$ratom$IDisposable$ = true;
reagent.ratom.Reaction.prototype.reagent$ratom$IDisposable$dispose_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var seq__12145_12191 = cljs.core.seq.call(null, self__.watching);
  var chunk__12146_12192 = null;
  var count__12147_12193 = 0;
  var i__12148_12194 = 0;
  while (true) {
    if (i__12148_12194 < count__12147_12193) {
      var w_12195 = cljs.core._nth.call(null, chunk__12146_12192, i__12148_12194);
      cljs.core.remove_watch.call(null, w_12195, this$__$1);
      var G__12196 = seq__12145_12191;
      var G__12197 = chunk__12146_12192;
      var G__12198 = count__12147_12193;
      var G__12199 = i__12148_12194 + 1;
      seq__12145_12191 = G__12196;
      chunk__12146_12192 = G__12197;
      count__12147_12193 = G__12198;
      i__12148_12194 = G__12199;
      continue;
    } else {
      var temp__4126__auto___12200 = cljs.core.seq.call(null, seq__12145_12191);
      if (temp__4126__auto___12200) {
        var seq__12145_12201__$1 = temp__4126__auto___12200;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__12145_12201__$1)) {
          var c__5120__auto___12202 = cljs.core.chunk_first.call(null, seq__12145_12201__$1);
          var G__12203 = cljs.core.chunk_rest.call(null, seq__12145_12201__$1);
          var G__12204 = c__5120__auto___12202;
          var G__12205 = cljs.core.count.call(null, c__5120__auto___12202);
          var G__12206 = 0;
          seq__12145_12191 = G__12203;
          chunk__12146_12192 = G__12204;
          count__12147_12193 = G__12205;
          i__12148_12194 = G__12206;
          continue;
        } else {
          var w_12207 = cljs.core.first.call(null, seq__12145_12201__$1);
          cljs.core.remove_watch.call(null, w_12207, this$__$1);
          var G__12208 = cljs.core.next.call(null, seq__12145_12201__$1);
          var G__12209 = null;
          var G__12210 = 0;
          var G__12211 = 0;
          seq__12145_12191 = G__12208;
          chunk__12146_12192 = G__12209;
          count__12147_12193 = G__12210;
          i__12148_12194 = G__12211;
          continue;
        }
      } else {
      }
    }
    break;
  }
  self__.watching = null;
  self__.state = null;
  self__.dirty_QMARK_ = true;
  if (cljs.core.truth_(self__.active_QMARK_)) {
    if (cljs.core.truth_(reagent.ratom.debug)) {
      cljs.core.swap_BANG_.call(null, reagent.ratom._running, cljs.core.dec);
    } else {
    }
    self__.active_QMARK_ = false;
  } else {
  }
  if (cljs.core.truth_(self__.on_dispose)) {
    return self__.on_dispose.call(null);
  } else {
    return null;
  }
};
reagent.ratom.Reaction.prototype.cljs$core$IReset$_reset_BANG_$arity$2 = function(a, newval) {
  var self__ = this;
  var a__$1 = this;
  var oldval = self__.state;
  self__.state = newval;
  if (cljs.core.truth_(self__.on_set)) {
    self__.dirty_QMARK_ = true;
    self__.on_set.call(null, oldval, newval);
  } else {
  }
  cljs.core._notify_watches.call(null, a__$1, oldval, newval);
  return newval;
};
reagent.ratom.Reaction.prototype.cljs$core$ISwap$_swap_BANG_$arity$2 = function(a, f__$1) {
  var self__ = this;
  var a__$1 = this;
  return cljs.core._reset_BANG_.call(null, a__$1, f__$1.call(null, reagent.ratom._peek_at.call(null, a__$1)));
};
reagent.ratom.Reaction.prototype.cljs$core$ISwap$_swap_BANG_$arity$3 = function(a, f__$1, x) {
  var self__ = this;
  var a__$1 = this;
  return cljs.core._reset_BANG_.call(null, a__$1, f__$1.call(null, reagent.ratom._peek_at.call(null, a__$1), x));
};
reagent.ratom.Reaction.prototype.cljs$core$ISwap$_swap_BANG_$arity$4 = function(a, f__$1, x, y) {
  var self__ = this;
  var a__$1 = this;
  return cljs.core._reset_BANG_.call(null, a__$1, f__$1.call(null, reagent.ratom._peek_at.call(null, a__$1), x, y));
};
reagent.ratom.Reaction.prototype.cljs$core$ISwap$_swap_BANG_$arity$5 = function(a, f__$1, x, y, more) {
  var self__ = this;
  var a__$1 = this;
  return cljs.core._reset_BANG_.call(null, a__$1, cljs.core.apply.call(null, f__$1, reagent.ratom._peek_at.call(null, a__$1), x, y, more));
};
reagent.ratom.Reaction.prototype.reagent$ratom$IRunnable$ = true;
reagent.ratom.Reaction.prototype.reagent$ratom$IRunnable$run$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var oldstate = self__.state;
  var res = reagent.ratom.capture_derefed.call(null, self__.f, this$__$1);
  var derefed = reagent.ratom.captured.call(null, this$__$1);
  if (cljs.core.not_EQ_.call(null, derefed, self__.watching)) {
    reagent.ratom._update_watching.call(null, this$__$1, derefed);
  } else {
  }
  if (cljs.core.truth_(self__.active_QMARK_)) {
  } else {
    if (cljs.core.truth_(reagent.ratom.debug)) {
      cljs.core.swap_BANG_.call(null, reagent.ratom._running, cljs.core.inc);
    } else {
    }
    self__.active_QMARK_ = true;
  }
  self__.dirty_QMARK_ = false;
  self__.state = res;
  cljs.core._notify_watches.call(null, this$__$1, oldstate, self__.state);
  return res;
};
reagent.ratom.Reaction.prototype.cljs$core$IWatchable$_notify_watches$arity$3 = function(this$, oldval, newval) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.reduce_kv.call(null, function(this$__$1) {
    return function(_, key, f__$1) {
      f__$1.call(null, key, this$__$1, oldval, newval);
      return null;
    };
  }(this$__$1), null, self__.watches);
};
reagent.ratom.Reaction.prototype.cljs$core$IWatchable$_add_watch$arity$3 = function(this$, k, wf) {
  var self__ = this;
  var this$__$1 = this;
  return self__.watches = cljs.core.assoc.call(null, self__.watches, k, wf);
};
reagent.ratom.Reaction.prototype.cljs$core$IWatchable$_remove_watch$arity$2 = function(this$, k) {
  var self__ = this;
  var this$__$1 = this;
  self__.watches = cljs.core.dissoc.call(null, self__.watches, k);
  if (cljs.core.empty_QMARK_.call(null, self__.watches) && cljs.core.not.call(null, self__.auto_run)) {
    return reagent.ratom.dispose_BANG_.call(null, this$__$1);
  } else {
    return null;
  }
};
reagent.ratom.Reaction.prototype.cljs$core$IDeref$_deref$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (cljs.core.truth_(function() {
    var or__4335__auto__ = self__.auto_run;
    if (cljs.core.truth_(or__4335__auto__)) {
      return or__4335__auto__;
    } else {
      return cljs.core.some_QMARK_.call(null, reagent.ratom._STAR_ratom_context_STAR_);
    }
  }())) {
    reagent.ratom.notify_deref_watcher_BANG_.call(null, this$__$1);
    if (cljs.core.truth_(self__.dirty_QMARK_)) {
      return reagent.ratom.run.call(null, this$__$1);
    } else {
      return self__.state;
    }
  } else {
    if (cljs.core.truth_(self__.dirty_QMARK_)) {
      var oldstate_12212 = self__.state;
      self__.state = self__.f.call(null);
      if (oldstate_12212 === self__.state) {
      } else {
        cljs.core._notify_watches.call(null, this$__$1, oldstate_12212, self__.state);
      }
    } else {
    }
    return self__.state;
  }
};
reagent.ratom.Reaction.cljs$lang$type = true;
reagent.ratom.Reaction.cljs$lang$ctorStr = "reagent.ratom/Reaction";
reagent.ratom.Reaction.cljs$lang$ctorPrWriter = function(this__4914__auto__, writer__4915__auto__, opt__4916__auto__) {
  return cljs.core._write.call(null, writer__4915__auto__, "reagent.ratom/Reaction");
};
reagent.ratom.__GT_Reaction = function reagent$ratom$__GT_Reaction(f, state, dirty_QMARK_, active_QMARK_, watching, watches, auto_run, on_set, on_dispose) {
  return new reagent.ratom.Reaction(f, state, dirty_QMARK_, active_QMARK_, watching, watches, auto_run, on_set, on_dispose);
};
reagent.ratom.make_reaction = function reagent$ratom$make_reaction() {
  var argseq__5375__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return reagent.ratom.make_reaction.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5375__auto__);
};
reagent.ratom.make_reaction.cljs$core$IFn$_invoke$arity$variadic = function(f, p__12215) {
  var map__12216 = p__12215;
  var map__12216__$1 = cljs.core.seq_QMARK_.call(null, map__12216) ? cljs.core.apply.call(null, cljs.core.hash_map, map__12216) : map__12216;
  var derefed = cljs.core.get.call(null, map__12216__$1, new cljs.core.Keyword(null, "derefed", "derefed", 590684583));
  var on_dispose = cljs.core.get.call(null, map__12216__$1, new cljs.core.Keyword(null, "on-dispose", "on-dispose", 2105306360));
  var on_set = cljs.core.get.call(null, map__12216__$1, new cljs.core.Keyword(null, "on-set", "on-set", -140953470));
  var auto_run = cljs.core.get.call(null, map__12216__$1, new cljs.core.Keyword(null, "auto-run", "auto-run", 1958400437));
  var runner = cljs.core._EQ_.call(null, auto_run, true) ? reagent.ratom.run : auto_run;
  var active = !(derefed == null);
  var dirty = !active;
  var reaction = new reagent.ratom.Reaction(f, null, dirty, active, null, null, runner, on_set, on_dispose);
  if (derefed == null) {
  } else {
    if (cljs.core.truth_(reagent.ratom.debug)) {
      cljs.core.swap_BANG_.call(null, reagent.ratom._running, cljs.core.inc);
    } else {
    }
    reagent.ratom._update_watching.call(null, reaction, derefed);
  }
  return reaction;
};
reagent.ratom.make_reaction.cljs$lang$maxFixedArity = 1;
reagent.ratom.make_reaction.cljs$lang$applyTo = function(seq12213) {
  var G__12214 = cljs.core.first.call(null, seq12213);
  var seq12213__$1 = cljs.core.next.call(null, seq12213);
  return reagent.ratom.make_reaction.cljs$core$IFn$_invoke$arity$variadic(G__12214, seq12213__$1);
};
reagent.ratom.Wrapper = function(state, callback, changed, watches) {
  this.state = state;
  this.callback = callback;
  this.changed = changed;
  this.watches = watches;
  this.cljs$lang$protocol_mask$partition0$ = 2149613568;
  this.cljs$lang$protocol_mask$partition1$ = 114690;
};
reagent.ratom.Wrapper.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(_, writer, opts) {
  var self__ = this;
  var ___$1 = this;
  cljs.core._write.call(null, writer, "#\x3cwrap: ");
  cljs.core.pr_writer.call(null, self__.state, writer, opts);
  return cljs.core._write.call(null, writer, "\x3e");
};
reagent.ratom.Wrapper.prototype.cljs$core$IWatchable$_notify_watches$arity$3 = function(this$, oldval, newval) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.reduce_kv.call(null, function(this$__$1) {
    return function(_, key, f) {
      f.call(null, key, this$__$1, oldval, newval);
      return null;
    };
  }(this$__$1), null, self__.watches);
};
reagent.ratom.Wrapper.prototype.cljs$core$IWatchable$_add_watch$arity$3 = function(this$, key, f) {
  var self__ = this;
  var this$__$1 = this;
  return self__.watches = cljs.core.assoc.call(null, self__.watches, key, f);
};
reagent.ratom.Wrapper.prototype.cljs$core$IWatchable$_remove_watch$arity$2 = function(this$, key) {
  var self__ = this;
  var this$__$1 = this;
  return self__.watches = cljs.core.dissoc.call(null, self__.watches, key);
};
reagent.ratom.Wrapper.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  return other instanceof reagent.ratom.Wrapper && cljs.core.not.call(null, self__.changed) && cljs.core.not.call(null, other.changed) && cljs.core._EQ_.call(null, self__.state, other.state) && cljs.core._EQ_.call(null, self__.callback, other.callback);
};
reagent.ratom.Wrapper.prototype.cljs$core$ISwap$_swap_BANG_$arity$2 = function(a, f) {
  var self__ = this;
  var a__$1 = this;
  return cljs.core._reset_BANG_.call(null, a__$1, f.call(null, self__.state));
};
reagent.ratom.Wrapper.prototype.cljs$core$ISwap$_swap_BANG_$arity$3 = function(a, f, x) {
  var self__ = this;
  var a__$1 = this;
  return cljs.core._reset_BANG_.call(null, a__$1, f.call(null, self__.state, x));
};
reagent.ratom.Wrapper.prototype.cljs$core$ISwap$_swap_BANG_$arity$4 = function(a, f, x, y) {
  var self__ = this;
  var a__$1 = this;
  return cljs.core._reset_BANG_.call(null, a__$1, f.call(null, self__.state, x, y));
};
reagent.ratom.Wrapper.prototype.cljs$core$ISwap$_swap_BANG_$arity$5 = function(a, f, x, y, more) {
  var self__ = this;
  var a__$1 = this;
  return cljs.core._reset_BANG_.call(null, a__$1, cljs.core.apply.call(null, f, self__.state, x, y, more));
};
reagent.ratom.Wrapper.prototype.cljs$core$IReset$_reset_BANG_$arity$2 = function(this$, newval) {
  var self__ = this;
  var this$__$1 = this;
  var oldval = self__.state;
  self__.changed = true;
  self__.state = newval;
  if (self__.watches == null) {
  } else {
    cljs.core._notify_watches.call(null, this$__$1, oldval, newval);
  }
  self__.callback.call(null, newval);
  return newval;
};
reagent.ratom.Wrapper.prototype.cljs$core$IDeref$_deref$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (cljs.core.truth_(function() {
    var and__4323__auto__ = self__.changed;
    if (cljs.core.truth_(and__4323__auto__)) {
      return cljs.core.some_QMARK_.call(null, reagent.ratom._STAR_ratom_context_STAR_);
    } else {
      return and__4323__auto__;
    }
  }())) {
    if (typeof console !== "undefined") {
      console.warn([cljs.core.str("Warning: "), cljs.core.str("derefing stale wrap: "), cljs.core.str(cljs.core.pr_str.call(null, this$__$1))].join(""));
    } else {
    }
  } else {
  }
  return self__.state;
};
reagent.ratom.Wrapper.cljs$lang$type = true;
reagent.ratom.Wrapper.cljs$lang$ctorStr = "reagent.ratom/Wrapper";
reagent.ratom.Wrapper.cljs$lang$ctorPrWriter = function(this__4914__auto__, writer__4915__auto__, opt__4916__auto__) {
  return cljs.core._write.call(null, writer__4915__auto__, "reagent.ratom/Wrapper");
};
reagent.ratom.__GT_Wrapper = function reagent$ratom$__GT_Wrapper(state, callback, changed, watches) {
  return new reagent.ratom.Wrapper(state, callback, changed, watches);
};
reagent.ratom.make_wrapper = function reagent$ratom$make_wrapper(value, callback_fn, args) {
  return new reagent.ratom.Wrapper(value, new reagent.impl.util.partial_ifn(callback_fn, args, null), false, null);
};
goog.provide("reagent.impl.batching");
goog.require("cljs.core");
goog.require("clojure.string");
goog.require("reagent.impl.util");
goog.require("reagent.ratom");
goog.require("reagent.interop");
goog.require("reagent.debug");
if (typeof reagent.impl.batching.mount_count !== "undefined") {
} else {
  reagent.impl.batching.mount_count = 0;
}
reagent.impl.batching.next_mount_count = function reagent$impl$batching$next_mount_count() {
  return reagent.impl.batching.mount_count = reagent.impl.batching.mount_count + 1;
};
reagent.impl.batching.fake_raf = function reagent$impl$batching$fake_raf(f) {
  return setTimeout(f, 16);
};
reagent.impl.batching.next_tick = cljs.core.not.call(null, reagent.impl.util.is_client) ? reagent.impl.batching.fake_raf : function() {
  var w = window;
  var or__4335__auto__ = w["requestAnimationFrame"];
  if (cljs.core.truth_(or__4335__auto__)) {
    return or__4335__auto__;
  } else {
    var or__4335__auto____$1 = w["webkitRequestAnimationFrame"];
    if (cljs.core.truth_(or__4335__auto____$1)) {
      return or__4335__auto____$1;
    } else {
      var or__4335__auto____$2 = w["mozRequestAnimationFrame"];
      if (cljs.core.truth_(or__4335__auto____$2)) {
        return or__4335__auto____$2;
      } else {
        var or__4335__auto____$3 = w["msRequestAnimationFrame"];
        if (cljs.core.truth_(or__4335__auto____$3)) {
          return or__4335__auto____$3;
        } else {
          return reagent.impl.batching.fake_raf;
        }
      }
    }
  }
}();
reagent.impl.batching.compare_mount_order = function reagent$impl$batching$compare_mount_order(c1, c2) {
  return c1["cljsMountOrder"] - c2["cljsMountOrder"];
};
reagent.impl.batching.run_queue = function reagent$impl$batching$run_queue(a) {
  a.sort(reagent.impl.batching.compare_mount_order);
  var n__5220__auto__ = a.length;
  var i = 0;
  while (true) {
    if (i < n__5220__auto__) {
      var c_12058 = a[i];
      if (cljs.core.truth_(c_12058["cljsIsDirty"])) {
        c_12058["forceUpdate"]();
      } else {
      }
      var G__12059 = i + 1;
      i = G__12059;
      continue;
    } else {
      return null;
    }
    break;
  }
};
reagent.impl.batching.run_funs = function reagent$impl$batching$run_funs(a) {
  var n__5220__auto__ = a.length;
  var i = 0;
  while (true) {
    if (i < n__5220__auto__) {
      a[i].call(null);
      var G__12060 = i + 1;
      i = G__12060;
      continue;
    } else {
      return null;
    }
    break;
  }
};
reagent.impl.batching.RenderQueue = function(queue, scheduled_QMARK_, after_render) {
  this.queue = queue;
  this.scheduled_QMARK_ = scheduled_QMARK_;
  this.after_render = after_render;
};
reagent.impl.batching.RenderQueue.prototype.queue_render = function(c) {
  var self__ = this;
  var this$ = this;
  self__.queue.push(c);
  return this$.schedule();
};
reagent.impl.batching.RenderQueue.prototype.add_after_render = function(f) {
  var self__ = this;
  var _ = this;
  return self__.after_render.push(f);
};
reagent.impl.batching.RenderQueue.prototype.schedule = function() {
  var self__ = this;
  var this$ = this;
  if (cljs.core.truth_(self__.scheduled_QMARK_)) {
    return null;
  } else {
    self__.scheduled_QMARK_ = true;
    return reagent.impl.batching.next_tick.call(null, function(this$) {
      return function() {
        return this$.run_queue();
      };
    }(this$));
  }
};
reagent.impl.batching.RenderQueue.prototype.run_queue = function() {
  var self__ = this;
  var _ = this;
  var q = self__.queue;
  var aq = self__.after_render;
  self__.queue = [];
  self__.after_render = [];
  self__.scheduled_QMARK_ = false;
  reagent.impl.batching.run_queue.call(null, q);
  return reagent.impl.batching.run_funs.call(null, aq);
};
reagent.impl.batching.RenderQueue.cljs$lang$type = true;
reagent.impl.batching.RenderQueue.cljs$lang$ctorStr = "reagent.impl.batching/RenderQueue";
reagent.impl.batching.RenderQueue.cljs$lang$ctorPrWriter = function(this__4914__auto__, writer__4915__auto__, opt__4916__auto__) {
  return cljs.core._write.call(null, writer__4915__auto__, "reagent.impl.batching/RenderQueue");
};
reagent.impl.batching.__GT_RenderQueue = function reagent$impl$batching$__GT_RenderQueue(queue, scheduled_QMARK_, after_render) {
  return new reagent.impl.batching.RenderQueue(queue, scheduled_QMARK_, after_render);
};
reagent.impl.batching.render_queue = new reagent.impl.batching.RenderQueue([], false, []);
reagent.impl.batching.flush = function reagent$impl$batching$flush() {
  return reagent.impl.batching.render_queue.run_queue();
};
reagent.impl.batching.queue_render = function reagent$impl$batching$queue_render(c) {
  c["cljsIsDirty"] = true;
  return reagent.impl.batching.render_queue.queue_render(c);
};
reagent.impl.batching.mark_rendered = function reagent$impl$batching$mark_rendered(c) {
  return c["cljsIsDirty"] = false;
};
reagent.impl.batching.do_after_flush = function reagent$impl$batching$do_after_flush(f) {
  return reagent.impl.batching.render_queue.add_after_render(f);
};
reagent.impl.batching.do_later = function reagent$impl$batching$do_later(f) {
  reagent.impl.batching.do_after_flush.call(null, f);
  return reagent.impl.batching.render_queue.schedule();
};
reagent.impl.batching.is_reagent_component = function reagent$impl$batching$is_reagent_component(c) {
  var G__12062 = c;
  var G__12062__$1 = G__12062 == null ? null : G__12062["props"];
  var G__12062__$2 = G__12062__$1 == null ? null : G__12062__$1["argv"];
  return G__12062__$2;
};
reagent.impl.batching.run_reactively = function reagent$impl$batching$run_reactively(c, run) {
  if (cljs.core.truth_(reagent.impl.batching.is_reagent_component.call(null, c))) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "is-reagent-component", "is-reagent-component", -1856228005, null), new cljs.core.Symbol(null, "c", "c", -122660552, null))))].join(""));
  }
  reagent.impl.batching.mark_rendered.call(null, c);
  var rat = c["cljsRatom"];
  if (rat == null) {
    var res = reagent.ratom.capture_derefed.call(null, run, c);
    var derefed = reagent.ratom.captured.call(null, c);
    if (!(derefed == null)) {
      c["cljsRatom"] = reagent.ratom.make_reaction.call(null, run, new cljs.core.Keyword(null, "auto-run", "auto-run", 1958400437), function(res, derefed, rat) {
        return function() {
          return reagent.impl.batching.queue_render.call(null, c);
        };
      }(res, derefed, rat), new cljs.core.Keyword(null, "derefed", "derefed", 590684583), derefed);
    } else {
    }
    return res;
  } else {
    return reagent.ratom.run.call(null, rat);
  }
};
reagent.impl.batching.dispose = function reagent$impl$batching$dispose(c) {
  var G__12064_12065 = c["cljsRatom"];
  var G__12064_12066__$1 = G__12064_12065 == null ? null : reagent.ratom.dispose_BANG_.call(null, G__12064_12065);
  return reagent.impl.batching.mark_rendered.call(null, c);
};
goog.provide("reagent.impl.component");
goog.require("cljs.core");
goog.require("reagent.debug");
goog.require("reagent.interop");
goog.require("reagent.ratom");
goog.require("reagent.impl.batching");
goog.require("reagent.impl.util");
reagent.impl.component.state_atom = function reagent$impl$component$state_atom(this$) {
  var sa = this$["cljsState"];
  if (!(sa == null)) {
    return sa;
  } else {
    return this$["cljsState"] = reagent.ratom.atom.call(null, null);
  }
};
reagent.impl.component.as_element = function reagent$impl$component$as_element(x) {
  return reagent.impl.template.as_element(x);
};
reagent.impl.component.do_render = function reagent$impl$component$do_render(c) {
  var _STAR_current_component_STAR_12021 = reagent.impl.component._STAR_current_component_STAR_;
  reagent.impl.component._STAR_current_component_STAR_ = c;
  try {
    var f = c["cljsRender"];
    var _ = cljs.core.ifn_QMARK_.call(null, f) ? null : function() {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "ifn?", "ifn?", -2106461064, null), new cljs.core.Symbol(null, "f", "f", 43394975, null))))].join(""));
    }();
    var p = c["props"];
    var res = c["reagentRender"] == null ? f.call(null, c) : function() {
      var argv = p["argv"];
      var n = cljs.core.count.call(null, argv);
      var G__12022 = n;
      switch(G__12022) {
        case 1:
          return f.call(null);
          break;
        case 2:
          return f.call(null, cljs.core.nth.call(null, argv, 1));
          break;
        case 3:
          return f.call(null, cljs.core.nth.call(null, argv, 1), cljs.core.nth.call(null, argv, 2));
          break;
        case 4:
          return f.call(null, cljs.core.nth.call(null, argv, 1), cljs.core.nth.call(null, argv, 2), cljs.core.nth.call(null, argv, 3));
          break;
        case 5:
          return f.call(null, cljs.core.nth.call(null, argv, 1), cljs.core.nth.call(null, argv, 2), cljs.core.nth.call(null, argv, 3), cljs.core.nth.call(null, argv, 4));
          break;
        default:
          return cljs.core.apply.call(null, f, cljs.core.subvec.call(null, argv, 1));
      }
    }();
    if (cljs.core.vector_QMARK_.call(null, res)) {
      return reagent.impl.component.as_element.call(null, res);
    } else {
      if (cljs.core.ifn_QMARK_.call(null, res)) {
        c["cljsRender"] = res;
        return reagent$impl$component$do_render.call(null, c);
      } else {
        return res;
      }
    }
  } finally {
    reagent.impl.component._STAR_current_component_STAR_ = _STAR_current_component_STAR_12021;
  }
};
reagent.impl.component.static_fns = new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "render", "render", -1408033454), function() {
  var c = this;
  if (cljs.core.not.call(null, reagent.impl.component._STAR_non_reactive_STAR_)) {
    return reagent.impl.batching.run_reactively.call(null, c, function(c) {
      return function() {
        return reagent.impl.component.do_render.call(null, c);
      };
    }(c));
  } else {
    return reagent.impl.component.do_render.call(null, c);
  }
}], null);
reagent.impl.component.custom_wrapper = function reagent$impl$component$custom_wrapper(key, f) {
  var G__12025 = key instanceof cljs.core.Keyword ? key.fqn : null;
  switch(G__12025) {
    case "componentWillUnmount":
      return function(G__12025) {
        return function() {
          var c = this;
          reagent.impl.batching.dispose.call(null, c);
          if (f == null) {
            return null;
          } else {
            return f.call(null, c);
          }
        };
      }(G__12025);
      break;
    case "componentWillMount":
      return function(G__12025) {
        return function() {
          var c = this;
          c["cljsMountOrder"] = reagent.impl.batching.next_mount_count.call(null);
          if (f == null) {
            return null;
          } else {
            return f.call(null, c);
          }
        };
      }(G__12025);
      break;
    case "componentDidUpdate":
      return function(G__12025) {
        return function(oldprops) {
          var c = this;
          return f.call(null, c, oldprops["argv"]);
        };
      }(G__12025);
      break;
    case "componentWillUpdate":
      return function(G__12025) {
        return function(nextprops) {
          var c = this;
          return f.call(null, c, nextprops["argv"]);
        };
      }(G__12025);
      break;
    case "shouldComponentUpdate":
      return function(G__12025) {
        return function(nextprops, nextstate) {
          var or__4335__auto__ = reagent.impl.util._STAR_always_update_STAR_;
          if (cljs.core.truth_(or__4335__auto__)) {
            return or__4335__auto__;
          } else {
            var c = this;
            var old_argv = c["props"]["argv"];
            var new_argv = nextprops["argv"];
            if (f == null) {
              return old_argv == null || new_argv == null || cljs.core.not_EQ_.call(null, old_argv, new_argv);
            } else {
              return f.call(null, c, old_argv, new_argv);
            }
          }
        };
      }(G__12025);
      break;
    case "componentWillReceiveProps":
      return function(G__12025) {
        return function(props) {
          var c = this;
          return f.call(null, c, props["argv"]);
        };
      }(G__12025);
      break;
    case "getInitialState":
      return function(G__12025) {
        return function() {
          var c = this;
          return cljs.core.reset_BANG_.call(null, reagent.impl.component.state_atom.call(null, c), f.call(null, c));
        };
      }(G__12025);
      break;
    case "getDefaultProps":
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("getDefaultProps not supported yet"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, false))].join(""));break;
    default:
      return null;
  }
};
reagent.impl.component.default_wrapper = function reagent$impl$component$default_wrapper(f) {
  if (cljs.core.ifn_QMARK_.call(null, f)) {
    return function() {
      var G__12027__delegate = function(args) {
        var c = this;
        return cljs.core.apply.call(null, f, c, args);
      };
      var G__12027 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          var G__12028__i = 0, G__12028__a = new Array(arguments.length - 0);
          while (G__12028__i < G__12028__a.length) {
            G__12028__a[G__12028__i] = arguments[G__12028__i + 0];
            ++G__12028__i;
          }
          args = new cljs.core.IndexedSeq(G__12028__a, 0);
        }
        return G__12027__delegate.call(this, args);
      };
      G__12027.cljs$lang$maxFixedArity = 0;
      G__12027.cljs$lang$applyTo = function(arglist__12029) {
        var args = cljs.core.seq(arglist__12029);
        return G__12027__delegate(args);
      };
      G__12027.cljs$core$IFn$_invoke$arity$variadic = G__12027__delegate;
      return G__12027;
    }();
  } else {
    return f;
  }
};
reagent.impl.component.dont_wrap = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "cljsRender", "cljsRender", 247449928), null, new cljs.core.Keyword(null, "reagentRender", "reagentRender", -358306383), null, new cljs.core.Keyword(null, "render", "render", -1408033454), null, new cljs.core.Keyword(null, "cljsName", "cljsName", 999824949), null], null), null);
reagent.impl.component.dont_bind = function reagent$impl$component$dont_bind(f) {
  if (cljs.core.fn_QMARK_.call(null, f)) {
    var G__12031 = f;
    G__12031["__reactDontBind"] = true;
    return G__12031;
  } else {
    return f;
  }
};
reagent.impl.component.get_wrapper = function reagent$impl$component$get_wrapper(key, f, name) {
  if (cljs.core.truth_(reagent.impl.component.dont_wrap.call(null, key))) {
    return reagent.impl.component.dont_bind.call(null, f);
  } else {
    var wrap = reagent.impl.component.custom_wrapper.call(null, key, f);
    if (cljs.core.truth_(function() {
      var and__4323__auto__ = wrap;
      if (cljs.core.truth_(and__4323__auto__)) {
        return f;
      } else {
        return and__4323__auto__;
      }
    }())) {
      if (cljs.core.ifn_QMARK_.call(null, f)) {
      } else {
        throw new Error([cljs.core.str("Assert failed: "), cljs.core.str([cljs.core.str("Expected function in "), cljs.core.str(name), cljs.core.str(key), cljs.core.str(" but got "), cljs.core.str(f)].join("")), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "ifn?", "ifn?", -2106461064, null), new cljs.core.Symbol(null, "f", "f", 43394975, null))))].join(""));
      }
    } else {
    }
    var or__4335__auto__ = wrap;
    if (cljs.core.truth_(or__4335__auto__)) {
      return or__4335__auto__;
    } else {
      return reagent.impl.component.default_wrapper.call(null, f);
    }
  }
};
reagent.impl.component.obligatory = new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "shouldComponentUpdate", "shouldComponentUpdate", 1795750960), null, new cljs.core.Keyword(null, "componentWillMount", "componentWillMount", -285327619), null, new cljs.core.Keyword(null, "componentWillUnmount", "componentWillUnmount", 1573788814), null], null);
reagent.impl.component.dash_to_camel = reagent.impl.util.memoize_1.call(null, reagent.impl.util.dash_to_camel);
reagent.impl.component.camelify_map_keys = function reagent$impl$component$camelify_map_keys(fun_map) {
  return cljs.core.reduce_kv.call(null, function(m, k, v) {
    return cljs.core.assoc.call(null, m, cljs.core.keyword.call(null, reagent.impl.component.dash_to_camel.call(null, k)), v);
  }, cljs.core.PersistentArrayMap.EMPTY, fun_map);
};
reagent.impl.component.add_obligatory = function reagent$impl$component$add_obligatory(fun_map) {
  return cljs.core.merge.call(null, reagent.impl.component.obligatory, fun_map);
};
reagent.impl.component.add_render = function reagent$impl$component$add_render(fun_map, render_f, name) {
  var fm = cljs.core.assoc.call(null, fun_map, new cljs.core.Keyword(null, "cljsRender", "cljsRender", 247449928), render_f, new cljs.core.Keyword(null, "render", "render", -1408033454), (new cljs.core.Keyword(null, "render", "render", -1408033454)).cljs$core$IFn$_invoke$arity$1(reagent.impl.component.static_fns));
  return cljs.core.assoc.call(null, fm, new cljs.core.Keyword(null, "cljsName", "cljsName", 999824949), function(fm) {
    return function() {
      return name;
    };
  }(fm));
};
reagent.impl.component.fun_name = function reagent$impl$component$fun_name(f) {
  var or__4335__auto__ = function() {
    var and__4323__auto__ = cljs.core.fn_QMARK_.call(null, f);
    if (and__4323__auto__) {
      var or__4335__auto__ = f["displayName"];
      if (cljs.core.truth_(or__4335__auto__)) {
        return or__4335__auto__;
      } else {
        return f["name"];
      }
    } else {
      return and__4323__auto__;
    }
  }();
  if (cljs.core.truth_(or__4335__auto__)) {
    return or__4335__auto__;
  } else {
    var or__4335__auto____$1 = function() {
      var and__4323__auto__ = function() {
        var G__12039 = f;
        if (G__12039) {
          var bit__5002__auto__ = G__12039.cljs$lang$protocol_mask$partition1$ & 4096;
          if (bit__5002__auto__ || G__12039.cljs$core$INamed$) {
            return true;
          } else {
            return false;
          }
        } else {
          return false;
        }
      }();
      if (and__4323__auto__) {
        return cljs.core.name.call(null, f);
      } else {
        return and__4323__auto__;
      }
    }();
    if (cljs.core.truth_(or__4335__auto____$1)) {
      return or__4335__auto____$1;
    } else {
      var m = cljs.core.meta.call(null, f);
      if (cljs.core.map_QMARK_.call(null, m)) {
        return(new cljs.core.Keyword(null, "name", "name", 1843675177)).cljs$core$IFn$_invoke$arity$1(m);
      } else {
        return null;
      }
    }
  }
};
reagent.impl.component.wrap_funs = function reagent$impl$component$wrap_funs(fmap) {
  var fun_map = function() {
    var temp__4128__auto__ = (new cljs.core.Keyword(null, "componentFunction", "componentFunction", 825866104)).cljs$core$IFn$_invoke$arity$1(fmap);
    if (temp__4128__auto__ == null) {
      return fmap;
    } else {
      var cf = temp__4128__auto__;
      return cljs.core.dissoc.call(null, cljs.core.assoc.call(null, fmap, new cljs.core.Keyword(null, "reagentRender", "reagentRender", -358306383), cf), new cljs.core.Keyword(null, "componentFunction", "componentFunction", 825866104));
    }
  }();
  var render_fun = function() {
    var or__4335__auto__ = (new cljs.core.Keyword(null, "reagentRender", "reagentRender", -358306383)).cljs$core$IFn$_invoke$arity$1(fun_map);
    if (cljs.core.truth_(or__4335__auto__)) {
      return or__4335__auto__;
    } else {
      return(new cljs.core.Keyword(null, "render", "render", -1408033454)).cljs$core$IFn$_invoke$arity$1(fun_map);
    }
  }();
  var _ = cljs.core.ifn_QMARK_.call(null, render_fun) ? null : function() {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str([cljs.core.str("Render must be a function, not "), cljs.core.str(cljs.core.pr_str.call(null, render_fun))].join("")), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "ifn?", "ifn?", -2106461064, null), new cljs.core.Symbol(null, "render-fun", "render-fun", -1209513086, null))))].join(""));
  }();
  var name = [cljs.core.str(function() {
    var or__4335__auto__ = (new cljs.core.Keyword(null, "displayName", "displayName", -809144601)).cljs$core$IFn$_invoke$arity$1(fun_map);
    if (cljs.core.truth_(or__4335__auto__)) {
      return or__4335__auto__;
    } else {
      return reagent.impl.component.fun_name.call(null, render_fun);
    }
  }())].join("");
  var name_SINGLEQUOTE_ = cljs.core.empty_QMARK_.call(null, name) ? [cljs.core.str(cljs.core.gensym.call(null, "reagent"))].join("") : name;
  var fmap__$1 = reagent.impl.component.add_render.call(null, cljs.core.assoc.call(null, fun_map, new cljs.core.Keyword(null, "displayName", "displayName", -809144601), name_SINGLEQUOTE_), render_fun, name_SINGLEQUOTE_);
  return cljs.core.reduce_kv.call(null, function(fun_map, render_fun, _, name, name_SINGLEQUOTE_, fmap__$1) {
    return function(m, k, v) {
      return cljs.core.assoc.call(null, m, k, reagent.impl.component.get_wrapper.call(null, k, v, name_SINGLEQUOTE_));
    };
  }(fun_map, render_fun, _, name, name_SINGLEQUOTE_, fmap__$1), cljs.core.PersistentArrayMap.EMPTY, fmap__$1);
};
reagent.impl.component.map_to_js = function reagent$impl$component$map_to_js(m) {
  return cljs.core.reduce_kv.call(null, function(o, k, v) {
    var G__12041 = o;
    G__12041[cljs.core.name.call(null, k)] = v;
    return G__12041;
  }, {}, m);
};
reagent.impl.component.cljsify = function reagent$impl$component$cljsify(body) {
  return reagent.impl.component.map_to_js.call(null, reagent.impl.component.wrap_funs.call(null, reagent.impl.component.add_obligatory.call(null, reagent.impl.component.camelify_map_keys.call(null, body))));
};
reagent.impl.component.create_class = function reagent$impl$component$create_class(body) {
  if (cljs.core.map_QMARK_.call(null, body)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "map?", "map?", -1780568534, null), new cljs.core.Symbol(null, "body", "body", -408674142, null))))].join(""));
  }
  var spec = reagent.impl.component.cljsify.call(null, body);
  var res = React["createClass"](spec);
  var f = function(spec, res) {
    return function() {
      var G__12042__delegate = function(args) {
        return reagent.impl.component.as_element.call(null, cljs.core.apply.call(null, cljs.core.vector, res, args));
      };
      var G__12042 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          var G__12043__i = 0, G__12043__a = new Array(arguments.length - 0);
          while (G__12043__i < G__12043__a.length) {
            G__12043__a[G__12043__i] = arguments[G__12043__i + 0];
            ++G__12043__i;
          }
          args = new cljs.core.IndexedSeq(G__12043__a, 0);
        }
        return G__12042__delegate.call(this, args);
      };
      G__12042.cljs$lang$maxFixedArity = 0;
      G__12042.cljs$lang$applyTo = function(arglist__12044) {
        var args = cljs.core.seq(arglist__12044);
        return G__12042__delegate(args);
      };
      G__12042.cljs$core$IFn$_invoke$arity$variadic = G__12042__delegate;
      return G__12042;
    }();
  }(spec, res);
  reagent.impl.util.cache_react_class.call(null, f, res);
  reagent.impl.util.cache_react_class.call(null, res, res);
  return f;
};
reagent.impl.component.comp_name = function reagent$impl$component$comp_name() {
  var n = function() {
    var G__12046 = reagent.impl.component._STAR_current_component_STAR_;
    var G__12046__$1 = G__12046 == null ? null : G__12046["cljsName"]();
    return G__12046__$1;
  }();
  if (!cljs.core.empty_QMARK_.call(null, n)) {
    return[cljs.core.str(" (in "), cljs.core.str(n), cljs.core.str(")")].join("");
  } else {
    return "";
  }
};
reagent.impl.component.shallow_obj_to_map = function reagent$impl$component$shallow_obj_to_map(o) {
  return cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, function() {
    var iter__5089__auto__ = function reagent$impl$component$shallow_obj_to_map_$_iter__12051(s__12052) {
      return new cljs.core.LazySeq(null, function() {
        var s__12052__$1 = s__12052;
        while (true) {
          var temp__4126__auto__ = cljs.core.seq.call(null, s__12052__$1);
          if (temp__4126__auto__) {
            var s__12052__$2 = temp__4126__auto__;
            if (cljs.core.chunked_seq_QMARK_.call(null, s__12052__$2)) {
              var c__5087__auto__ = cljs.core.chunk_first.call(null, s__12052__$2);
              var size__5088__auto__ = cljs.core.count.call(null, c__5087__auto__);
              var b__12054 = cljs.core.chunk_buffer.call(null, size__5088__auto__);
              if (function() {
                var i__12053 = 0;
                while (true) {
                  if (i__12053 < size__5088__auto__) {
                    var k = cljs.core._nth.call(null, c__5087__auto__, i__12053);
                    cljs.core.chunk_append.call(null, b__12054, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.call(null, k), o[k]], null));
                    var G__12055 = i__12053 + 1;
                    i__12053 = G__12055;
                    continue;
                  } else {
                    return true;
                  }
                  break;
                }
              }()) {
                return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__12054), reagent$impl$component$shallow_obj_to_map_$_iter__12051.call(null, cljs.core.chunk_rest.call(null, s__12052__$2)));
              } else {
                return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__12054), null);
              }
            } else {
              var k = cljs.core.first.call(null, s__12052__$2);
              return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.call(null, k), o[k]], null), reagent$impl$component$shallow_obj_to_map_$_iter__12051.call(null, cljs.core.rest.call(null, s__12052__$2)));
            }
          } else {
            return null;
          }
          break;
        }
      }, null, null);
    };
    return iter__5089__auto__.call(null, cljs.core.js_keys.call(null, o));
  }());
};
reagent.impl.component.elem_counter = 0;
reagent.impl.component.reactify_component = function reagent$impl$component$reactify_component(comp) {
  return React["createClass"]({"render":function() {
    var this$ = this;
    return reagent.impl.component.as_element.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [comp, cljs.core.assoc.call(null, reagent.impl.component.shallow_obj_to_map.call(null, this$["props"]), new cljs.core.Keyword(null, "-elem-count", "-elem-count", 663797079), reagent.impl.component.elem_counter = reagent.impl.component.elem_counter + 1)], null));
  }, "displayName":"react-wrapper"});
};
goog.provide("reagent.impl.template");
goog.require("cljs.core");
goog.require("reagent.impl.util");
goog.require("reagent.impl.component");
goog.require("reagent.interop");
goog.require("reagent.ratom");
goog.require("reagent.impl.batching");
goog.require("clojure.string");
goog.require("reagent.debug");
reagent.impl.template.re_tag = /([^\s\.#]+)(?:#([^\s\.#]+))?(?:\.([^\s#]+))?/;
reagent.impl.template.NativeWrapper = function(comp) {
  this.comp = comp;
};
reagent.impl.template.NativeWrapper.cljs$lang$type = true;
reagent.impl.template.NativeWrapper.cljs$lang$ctorStr = "reagent.impl.template/NativeWrapper";
reagent.impl.template.NativeWrapper.cljs$lang$ctorPrWriter = function(this__4914__auto__, writer__4915__auto__, opt__4916__auto__) {
  return cljs.core._write.call(null, writer__4915__auto__, "reagent.impl.template/NativeWrapper");
};
reagent.impl.template.__GT_NativeWrapper = function reagent$impl$template$__GT_NativeWrapper(comp) {
  return new reagent.impl.template.NativeWrapper(comp);
};
reagent.impl.template.named_QMARK_ = function reagent$impl$template$named_QMARK_(x) {
  return x instanceof cljs.core.Keyword || x instanceof cljs.core.Symbol;
};
reagent.impl.template.hiccup_tag_QMARK_ = function reagent$impl$template$hiccup_tag_QMARK_(x) {
  var or__4335__auto__ = reagent.impl.template.named_QMARK_.call(null, x);
  if (cljs.core.truth_(or__4335__auto__)) {
    return or__4335__auto__;
  } else {
    return typeof x === "string";
  }
};
reagent.impl.template.valid_tag_QMARK_ = function reagent$impl$template$valid_tag_QMARK_(x) {
  var or__4335__auto__ = reagent.impl.template.hiccup_tag_QMARK_.call(null, x);
  if (cljs.core.truth_(or__4335__auto__)) {
    return or__4335__auto__;
  } else {
    return cljs.core.ifn_QMARK_.call(null, x) || x instanceof reagent.impl.template.NativeWrapper;
  }
};
reagent.impl.template.prop_name_cache = {"charset":"charSet", "for":"htmlFor", "class":"className"};
reagent.impl.template.obj_get = function reagent$impl$template$obj_get(o, k) {
  if (cljs.core.truth_(o.hasOwnProperty(k))) {
    return o[k];
  } else {
    return null;
  }
};
reagent.impl.template.cached_prop_name = function reagent$impl$template$cached_prop_name(k) {
  if (cljs.core.truth_(reagent.impl.template.named_QMARK_.call(null, k))) {
    var temp__4128__auto__ = reagent.impl.template.obj_get.call(null, reagent.impl.template.prop_name_cache, cljs.core.name.call(null, k));
    if (temp__4128__auto__ == null) {
      return reagent.impl.template.prop_name_cache[cljs.core.name.call(null, k)] = reagent.impl.util.dash_to_camel.call(null, k);
    } else {
      var k_SINGLEQUOTE_ = temp__4128__auto__;
      return k_SINGLEQUOTE_;
    }
  } else {
    return k;
  }
};
reagent.impl.template.convert_prop_value = function reagent$impl$template$convert_prop_value(x) {
  if (typeof x === "string" || typeof x === "number" || cljs.core.fn_QMARK_.call(null, x)) {
    return x;
  } else {
    if (cljs.core.truth_(reagent.impl.template.named_QMARK_.call(null, x))) {
      return cljs.core.name.call(null, x);
    } else {
      if (cljs.core.map_QMARK_.call(null, x)) {
        return cljs.core.reduce_kv.call(null, function(o, k, v) {
          var G__12070 = o;
          G__12070[reagent.impl.template.cached_prop_name.call(null, k)] = reagent$impl$template$convert_prop_value.call(null, v);
          return G__12070;
        }, {}, x);
      } else {
        if (cljs.core.coll_QMARK_.call(null, x)) {
          return cljs.core.clj__GT_js.call(null, x);
        } else {
          if (cljs.core.ifn_QMARK_.call(null, x)) {
            return function() {
              var G__12071__delegate = function(args) {
                return cljs.core.apply.call(null, x, args);
              };
              var G__12071 = function(var_args) {
                var args = null;
                if (arguments.length > 0) {
                  var G__12072__i = 0, G__12072__a = new Array(arguments.length - 0);
                  while (G__12072__i < G__12072__a.length) {
                    G__12072__a[G__12072__i] = arguments[G__12072__i + 0];
                    ++G__12072__i;
                  }
                  args = new cljs.core.IndexedSeq(G__12072__a, 0);
                }
                return G__12071__delegate.call(this, args);
              };
              G__12071.cljs$lang$maxFixedArity = 0;
              G__12071.cljs$lang$applyTo = function(arglist__12073) {
                var args = cljs.core.seq(arglist__12073);
                return G__12071__delegate(args);
              };
              G__12071.cljs$core$IFn$_invoke$arity$variadic = G__12071__delegate;
              return G__12071;
            }();
          } else {
            return cljs.core.clj__GT_js.call(null, x);
          }
        }
      }
    }
  }
};
reagent.impl.template.set_id_class = function reagent$impl$template$set_id_class(props, id, class$) {
  var p = props == null ? {} : props;
  if (cljs.core.some_QMARK_.call(null, id) && p["id"] == null) {
    p["id"] = id;
  } else {
  }
  if (cljs.core.some_QMARK_.call(null, class$)) {
    var old_12074 = p["className"];
    p["className"] = cljs.core.some_QMARK_.call(null, old_12074) ? [cljs.core.str(class$), cljs.core.str(" "), cljs.core.str(old_12074)].join("") : class$;
  } else {
  }
  return p;
};
reagent.impl.template.convert_props = function reagent$impl$template$convert_props(props, id_class) {
  var id = id_class["id"];
  var class$ = id_class["className"];
  var no_id_class = id == null && class$ == null;
  if (no_id_class && cljs.core.empty_QMARK_.call(null, props)) {
    return null;
  } else {
    var objprops = reagent.impl.template.convert_prop_value.call(null, props);
    if (no_id_class) {
      return objprops;
    } else {
      return reagent.impl.template.set_id_class.call(null, objprops, id, class$);
    }
  }
};
reagent.impl.template.input_unmount = function reagent$impl$template$input_unmount(this$) {
  return this$["cljsInputValue"] = null;
};
reagent.impl.template.input_set_value = function reagent$impl$template$input_set_value(this$) {
  var temp__4130__auto__ = this$["cljsInputValue"];
  if (temp__4130__auto__ == null) {
    return null;
  } else {
    var value = temp__4130__auto__;
    this$["cljsInputDirty"] = false;
    var node = this$["getDOMNode"]();
    if (cljs.core.not_EQ_.call(null, value, node["value"])) {
      return node["value"] = value;
    } else {
      return null;
    }
  }
};
reagent.impl.template.input_handle_change = function reagent$impl$template$input_handle_change(this$, on_change, e) {
  var res = on_change.call(null, e);
  if (cljs.core.truth_(this$["cljsInputDirty"])) {
  } else {
    this$["cljsInputDirty"] = true;
    reagent.impl.batching.do_later.call(null, function(res) {
      return function() {
        return reagent.impl.template.input_set_value.call(null, this$);
      };
    }(res));
  }
  return res;
};
reagent.impl.template.input_render_setup = function reagent$impl$template$input_render_setup(this$, jsprops) {
  if (cljs.core.truth_(function() {
    var and__4323__auto__ = jsprops["hasOwnProperty"]("onChange");
    if (cljs.core.truth_(and__4323__auto__)) {
      return jsprops["hasOwnProperty"]("value");
    } else {
      return and__4323__auto__;
    }
  }())) {
    var v = jsprops["value"];
    var value = v == null ? "" : v;
    var on_change = jsprops["onChange"];
    this$["cljsInputValue"] = value;
    delete jsprops["value"];
    var G__12077 = jsprops;
    G__12077["defaultValue"] = value;
    G__12077["onChange"] = function(G__12077, v, value, on_change) {
      return function(p1__12075_SHARP_) {
        return reagent.impl.template.input_handle_change.call(null, this$, on_change, p1__12075_SHARP_);
      };
    }(G__12077, v, value, on_change);
    return G__12077;
  } else {
    return this$["cljsInputValue"] = null;
  }
};
reagent.impl.template.input_component_QMARK_ = function reagent$impl$template$input_component_QMARK_(x) {
  return x === "input" || x === "textarea";
};
reagent.impl.template.reagent_input_class = null;
reagent.impl.template.input_spec = new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "display-name", "display-name", 694513143), "ReagentInput", new cljs.core.Keyword(null, "component-did-update", "component-did-update", -1468549173), reagent.impl.template.input_set_value, new cljs.core.Keyword(null, "component-will-unmount", "component-will-unmount", -2058314698), reagent.impl.template.input_unmount, new cljs.core.Keyword(null, "reagent-render", "reagent-render", -985383853), 
function(argv, comp, jsprops, first_child) {
  var this$ = reagent.impl.component._STAR_current_component_STAR_;
  reagent.impl.template.input_render_setup.call(null, this$, jsprops);
  return reagent.impl.template.make_element.call(null, argv, comp, jsprops, first_child);
}], null);
reagent.impl.template.reagent_input = function reagent$impl$template$reagent_input(argv, comp, jsprops, first_child) {
  if (reagent.impl.template.reagent_input_class == null) {
    reagent.impl.template.reagent_input_class = reagent.impl.component.create_class.call(null, reagent.impl.template.input_spec);
  } else {
  }
  return reagent.impl.template.reagent_input_class.call(null, argv, comp, jsprops, first_child);
};
reagent.impl.template.parse_tag = function reagent$impl$template$parse_tag(hiccup_tag) {
  var vec__12079 = cljs.core.next.call(null, cljs.core.re_matches.call(null, reagent.impl.template.re_tag, cljs.core.name.call(null, hiccup_tag)));
  var tag = cljs.core.nth.call(null, vec__12079, 0, null);
  var id = cljs.core.nth.call(null, vec__12079, 1, null);
  var class$ = cljs.core.nth.call(null, vec__12079, 2, null);
  var class_SINGLEQUOTE_ = cljs.core.truth_(class$) ? clojure.string.replace.call(null, class$, /\./, " ") : null;
  if (cljs.core.truth_(tag)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str([cljs.core.str("Invalid tag: '"), cljs.core.str(hiccup_tag), cljs.core.str("'"), cljs.core.str(reagent.impl.component.comp_name.call(null))].join("")), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, new cljs.core.Symbol(null, "tag", "tag", 350170304, null)))].join(""));
  }
  return{"className":class_SINGLEQUOTE_, "id":id, "name":tag};
};
reagent.impl.template.fn_to_class = function reagent$impl$template$fn_to_class(f) {
  if (cljs.core.ifn_QMARK_.call(null, f)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str([cljs.core.str("Expected a function, not "), cljs.core.str(cljs.core.pr_str.call(null, f))].join("")), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "ifn?", "ifn?", -2106461064, null), new cljs.core.Symbol(null, "f", "f", 43394975, null))))].join(""));
  }
  if (!!(cljs.core.fn_QMARK_.call(null, f) && cljs.core.some_QMARK_.call(null, f["type"])) && typeof console !== "undefined") {
    console.warn([cljs.core.str("Warning: "), cljs.core.str("Using native React classes directly in Hiccup forms "), cljs.core.str("is not supported. Use create-element or "), cljs.core.str("adapt-react-class instead: "), cljs.core.str(f["type"]), cljs.core.str(reagent.impl.component.comp_name.call(null))].join(""));
  } else {
  }
  var spec = cljs.core.meta.call(null, f);
  var withrender = cljs.core.assoc.call(null, spec, new cljs.core.Keyword(null, "reagent-render", "reagent-render", -985383853), f);
  var res = reagent.impl.component.create_class.call(null, withrender);
  var wrapf = reagent.impl.util.cached_react_class.call(null, res);
  reagent.impl.util.cache_react_class.call(null, f, wrapf);
  return wrapf;
};
reagent.impl.template.as_class = function reagent$impl$template$as_class(tag) {
  var temp__4128__auto__ = reagent.impl.util.cached_react_class.call(null, tag);
  if (temp__4128__auto__ == null) {
    return reagent.impl.template.fn_to_class.call(null, tag);
  } else {
    var cached_class = temp__4128__auto__;
    return cached_class;
  }
};
reagent.impl.template.get_key = function reagent$impl$template$get_key(x) {
  if (cljs.core.map_QMARK_.call(null, x)) {
    return cljs.core.get.call(null, x, new cljs.core.Keyword(null, "key", "key", -1516042587));
  } else {
    return null;
  }
};
reagent.impl.template.key_from_vec = function reagent$impl$template$key_from_vec(v) {
  var temp__4128__auto__ = function() {
    var G__12081 = cljs.core.meta.call(null, v);
    var G__12081__$1 = G__12081 == null ? null : reagent.impl.template.get_key.call(null, G__12081);
    return G__12081__$1;
  }();
  if (temp__4128__auto__ == null) {
    return reagent.impl.template.get_key.call(null, cljs.core.nth.call(null, v, 1, null));
  } else {
    var k = temp__4128__auto__;
    return k;
  }
};
reagent.impl.template.reag_element = function reagent$impl$template$reag_element(tag, v) {
  var c = reagent.impl.template.as_class.call(null, tag);
  var jsprops = {"argv":v};
  var G__12083_12084 = v;
  var G__12083_12085__$1 = G__12083_12084 == null ? null : reagent.impl.template.key_from_vec.call(null, G__12083_12084);
  var G__12083_12086__$2 = G__12083_12085__$1 == null ? null : jsprops["key"] = G__12083_12085__$1;
  return React["createElement"](c, jsprops);
};
reagent.impl.template.adapt_react_class = function reagent$impl$template$adapt_react_class(c) {
  return new reagent.impl.template.NativeWrapper({"class":null, "id":null, "name":c});
};
reagent.impl.template.tag_name_cache = {};
reagent.impl.template.cached_parse = function reagent$impl$template$cached_parse(x) {
  if (cljs.core.truth_(reagent.impl.template.hiccup_tag_QMARK_.call(null, x))) {
    var temp__4128__auto__ = reagent.impl.template.obj_get.call(null, reagent.impl.template.tag_name_cache, cljs.core.name.call(null, x));
    if (temp__4128__auto__ == null) {
      return reagent.impl.template.tag_name_cache[cljs.core.name.call(null, x)] = reagent.impl.template.parse_tag.call(null, x);
    } else {
      var s = temp__4128__auto__;
      return s;
    }
  } else {
    if (x instanceof reagent.impl.template.NativeWrapper) {
      return x.comp;
    } else {
      return null;
    }
  }
};
reagent.impl.template.native_element = function reagent$impl$template$native_element(tag, argv) {
  var temp__4126__auto__ = reagent.impl.template.cached_parse.call(null, tag);
  if (cljs.core.truth_(temp__4126__auto__)) {
    var parsed = temp__4126__auto__;
    var comp = parsed["name"];
    var props = cljs.core.nth.call(null, argv, 1, null);
    var hasprops = props == null || cljs.core.map_QMARK_.call(null, props);
    var jsprops = reagent.impl.template.convert_props.call(null, hasprops ? props : null, parsed);
    var first_child = hasprops ? 2 : 1;
    if (cljs.core.truth_(reagent.impl.template.input_component_QMARK_.call(null, comp))) {
      return reagent.impl.template.as_element.call(null, cljs.core.with_meta.call(null, new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [reagent.impl.template.reagent_input, argv, comp, jsprops, first_child], null), cljs.core.meta.call(null, argv)));
    } else {
      var p = function() {
        var temp__4128__auto__ = function() {
          var G__12089 = cljs.core.meta.call(null, argv);
          var G__12089__$1 = G__12089 == null ? null : reagent.impl.template.get_key.call(null, G__12089);
          return G__12089__$1;
        }();
        if (temp__4128__auto__ == null) {
          return jsprops;
        } else {
          var key = temp__4128__auto__;
          var G__12090 = jsprops == null ? {} : jsprops;
          G__12090["key"] = key;
          return G__12090;
        }
      }();
      return reagent.impl.template.make_element.call(null, argv, comp, p, first_child);
    }
  } else {
    return null;
  }
};
reagent.impl.template.vec_to_elem = function reagent$impl$template$vec_to_elem(v) {
  if (cljs.core.count.call(null, v) > 0) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str([cljs.core.str("Hiccup form should not be empty: "), cljs.core.str(cljs.core.pr_str.call(null, v)), cljs.core.str(reagent.impl.component.comp_name.call(null))].join("")), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "pos?", "pos?", -244377722, null), cljs.core.list(new cljs.core.Symbol(null, "count", "count", -514511684, null), new cljs.core.Symbol(null, "v", "v", 1661996586, 
    null)))))].join(""));
  }
  var tag = cljs.core.nth.call(null, v, 0);
  if (cljs.core.truth_(reagent.impl.template.valid_tag_QMARK_.call(null, tag))) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str([cljs.core.str("Invalid Hiccup form: "), cljs.core.str(cljs.core.pr_str.call(null, v)), cljs.core.str(reagent.impl.component.comp_name.call(null))].join("")), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "valid-tag?", "valid-tag?", 1243064160, null), new cljs.core.Symbol(null, "tag", "tag", 350170304, null))))].join(""));
  }
  var temp__4128__auto__ = reagent.impl.template.native_element.call(null, tag, v);
  if (temp__4128__auto__ == null) {
    return reagent.impl.template.reag_element.call(null, tag, v);
  } else {
    var ne = temp__4128__auto__;
    return ne;
  }
};
reagent.impl.template.as_element = function reagent$impl$template$as_element(x) {
  if (typeof x === "string") {
    return x;
  } else {
    if (cljs.core.vector_QMARK_.call(null, x)) {
      return reagent.impl.template.vec_to_elem.call(null, x);
    } else {
      if (cljs.core.seq_QMARK_.call(null, x)) {
        return reagent.impl.template.expand_seq_check.call(null, x);
      } else {
        return x;
      }
    }
  }
};
reagent.impl.template.expand_seq = function reagent$impl$template$expand_seq(s) {
  var a = cljs.core.into_array.call(null, s);
  var n__5220__auto___12091 = a.length;
  var i_12092 = 0;
  while (true) {
    if (i_12092 < n__5220__auto___12091) {
      a[i_12092] = reagent.impl.template.as_element.call(null, a[i_12092]);
      var G__12093 = i_12092 + 1;
      i_12092 = G__12093;
      continue;
    } else {
    }
    break;
  }
  return a;
};
reagent.impl.template.expand_seq_dev = function reagent$impl$template$expand_seq_dev(s, o) {
  var a = cljs.core.into_array.call(null, s);
  var n__5220__auto___12094 = a.length;
  var i_12095 = 0;
  while (true) {
    if (i_12095 < n__5220__auto___12094) {
      var val_12096 = a[i_12095];
      if (cljs.core.vector_QMARK_.call(null, val_12096) && reagent.impl.template.key_from_vec.call(null, val_12096) == null) {
        o["no-key"] = true;
      } else {
      }
      a[i_12095] = reagent.impl.template.as_element.call(null, val_12096);
      var G__12097 = i_12095 + 1;
      i_12095 = G__12097;
      continue;
    } else {
    }
    break;
  }
  return a;
};
reagent.impl.template.expand_seq_check = function reagent$impl$template$expand_seq_check(x) {
  var ctx = {};
  var res = reagent.ratom._STAR_ratom_context_STAR_ == null ? reagent.impl.template.expand_seq_dev.call(null, x, ctx) : reagent.ratom.capture_derefed.call(null, function(ctx) {
    return function() {
      return reagent.impl.template.expand_seq_dev.call(null, x, ctx);
    };
  }(ctx), ctx);
  if (cljs.core.truth_(reagent.ratom.captured.call(null, ctx))) {
    if (typeof console !== "undefined") {
      console.warn([cljs.core.str("Warning: "), cljs.core.str("Reactive deref not supported in lazy seq, "), cljs.core.str("it should be wrapped in doall"), cljs.core.str(reagent.impl.component.comp_name.call(null)), cljs.core.str(". Value:\n"), cljs.core.str(cljs.core.pr_str.call(null, x))].join(""));
    } else {
    }
  } else {
  }
  if (cljs.core.truth_(ctx["no-key"])) {
    if (typeof console !== "undefined") {
      console.warn([cljs.core.str("Warning: "), cljs.core.str("Every element in a seq should have a unique "), cljs.core.str(":key"), cljs.core.str(reagent.impl.component.comp_name.call(null)), cljs.core.str(". Value: "), cljs.core.str(cljs.core.pr_str.call(null, x))].join(""));
    } else {
    }
  } else {
  }
  return res;
};
reagent.impl.template.make_element = function reagent$impl$template$make_element(argv, comp, jsprops, first_child) {
  var G__12099 = cljs.core.count.call(null, argv) - first_child;
  switch(G__12099) {
    case 0:
      return React["createElement"](comp, jsprops);
      break;
    case 1:
      return React["createElement"](comp, jsprops, reagent.impl.template.as_element.call(null, cljs.core.nth.call(null, argv, first_child)));
      break;
    default:
      return React["createElement"].apply(null, cljs.core.reduce_kv.call(null, function(G__12099) {
        return function(a, k, v) {
          if (k >= first_child) {
            a.push(reagent.impl.template.as_element.call(null, v));
          } else {
          }
          return a;
        };
      }(G__12099), [comp, jsprops], argv));
  }
};
goog.provide("reagent.core");
goog.require("cljs.core");
goog.require("reagent.impl.util");
goog.require("reagent.impl.component");
goog.require("reagent.interop");
goog.require("reagent.ratom");
goog.require("reagent.impl.template");
goog.require("reagent.impl.batching");
goog.require("reagent.debug");
reagent.core.is_client = reagent.impl.util.is_client;
reagent.core.create_element = function reagent$core$create_element() {
  var G__11996 = arguments.length;
  switch(G__11996) {
    case 1:
      return reagent.core.create_element.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return reagent.core.create_element.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return reagent.core.create_element.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      var argseq__5386__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 3), 0);
      return reagent.core.create_element.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__5386__auto__);
  }
};
reagent.core.create_element.cljs$core$IFn$_invoke$arity$1 = function(type) {
  return reagent.core.create_element.call(null, type, null);
};
reagent.core.create_element.cljs$core$IFn$_invoke$arity$2 = function(type, props) {
  if (!cljs.core.map_QMARK_.call(null, props)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "not", "not", 1044554643, null), cljs.core.list(new cljs.core.Symbol(null, "map?", "map?", -1780568534, null), new cljs.core.Symbol(null, "props", "props", 2093813254, null)))))].join(""));
  }
  return React.createElement(type, props);
};
reagent.core.create_element.cljs$core$IFn$_invoke$arity$3 = function(type, props, child) {
  if (!cljs.core.map_QMARK_.call(null, props)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "not", "not", 1044554643, null), cljs.core.list(new cljs.core.Symbol(null, "map?", "map?", -1780568534, null), new cljs.core.Symbol(null, "props", "props", 2093813254, null)))))].join(""));
  }
  return React.createElement(type, props, child);
};
reagent.core.create_element.cljs$core$IFn$_invoke$arity$variadic = function(type, props, child, children) {
  if (!cljs.core.map_QMARK_.call(null, props)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "not", "not", 1044554643, null), cljs.core.list(new cljs.core.Symbol(null, "map?", "map?", -1780568534, null), new cljs.core.Symbol(null, "props", "props", 2093813254, null)))))].join(""));
  }
  return cljs.core.apply.call(null, React.createElement, type, props, child, children);
};
reagent.core.create_element.cljs$lang$applyTo = function(seq11991) {
  var G__11992 = cljs.core.first.call(null, seq11991);
  var seq11991__$1 = cljs.core.next.call(null, seq11991);
  var G__11993 = cljs.core.first.call(null, seq11991__$1);
  var seq11991__$2 = cljs.core.next.call(null, seq11991__$1);
  var G__11994 = cljs.core.first.call(null, seq11991__$2);
  var seq11991__$3 = cljs.core.next.call(null, seq11991__$2);
  return reagent.core.create_element.cljs$core$IFn$_invoke$arity$variadic(G__11992, G__11993, G__11994, seq11991__$3);
};
reagent.core.create_element.cljs$lang$maxFixedArity = 3;
reagent.core.as_element = function reagent$core$as_element(form) {
  return reagent.impl.template.as_element.call(null, form);
};
reagent.core.adapt_react_class = function reagent$core$adapt_react_class(c) {
  return reagent.impl.template.adapt_react_class.call(null, c);
};
reagent.core.reactify_component = function reagent$core$reactify_component(c) {
  return reagent.impl.component.reactify_component.call(null, c);
};
reagent.core.render = function reagent$core$render() {
  var G__11999 = arguments.length;
  switch(G__11999) {
    case 2:
      return reagent.core.render.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return reagent.core.render.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
reagent.core.render.cljs$core$IFn$_invoke$arity$2 = function(comp, container) {
  return reagent.core.render.call(null, comp, container, null);
};
reagent.core.render.cljs$core$IFn$_invoke$arity$3 = function(comp, container, callback) {
  var f = function() {
    return reagent.core.as_element.call(null, cljs.core.fn_QMARK_.call(null, comp) ? comp.call(null) : comp);
  };
  return reagent.impl.util.render_component.call(null, f, container, callback);
};
reagent.core.render.cljs$lang$maxFixedArity = 3;
reagent.core.unmount_component_at_node = function reagent$core$unmount_component_at_node(container) {
  return reagent.impl.util.unmount_component_at_node.call(null, container);
};
reagent.core.render_to_string = function reagent$core$render_to_string(component) {
  var _STAR_non_reactive_STAR_12002 = reagent.impl.component._STAR_non_reactive_STAR_;
  reagent.impl.component._STAR_non_reactive_STAR_ = true;
  try {
    return React["renderToString"](reagent.core.as_element.call(null, component));
  } finally {
    reagent.impl.component._STAR_non_reactive_STAR_ = _STAR_non_reactive_STAR_12002;
  }
};
reagent.core.as_component = reagent.core.as_element;
reagent.core.render_component = reagent.core.render;
reagent.core.render_component_to_string = reagent.core.render_to_string;
reagent.core.render_to_static_markup = function reagent$core$render_to_static_markup(component) {
  var _STAR_non_reactive_STAR_12004 = reagent.impl.component._STAR_non_reactive_STAR_;
  reagent.impl.component._STAR_non_reactive_STAR_ = true;
  try {
    return React["renderToStaticMarkup"](reagent.core.as_element.call(null, component));
  } finally {
    reagent.impl.component._STAR_non_reactive_STAR_ = _STAR_non_reactive_STAR_12004;
  }
};
reagent.core.force_update_all = function reagent$core$force_update_all() {
  return reagent.impl.util.force_update_all.call(null);
};
goog.exportSymbol("reagent.core.force_update_all", reagent.core.force_update_all);
reagent.core.create_class = function reagent$core$create_class(spec) {
  return reagent.impl.component.create_class.call(null, spec);
};
reagent.core.current_component = function reagent$core$current_component() {
  return reagent.impl.component._STAR_current_component_STAR_;
};
reagent.core.state_atom = function reagent$core$state_atom(this$) {
  if (cljs.core.truth_(reagent.impl.util.reagent_component_QMARK_.call(null, this$))) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol("util", "reagent-component?", "util/reagent-component?", 1508385933, null), new cljs.core.Symbol(null, "this", "this", 1028897902, null))))].join(""));
  }
  return reagent.impl.component.state_atom.call(null, this$);
};
reagent.core.state = function reagent$core$state(this$) {
  if (cljs.core.truth_(reagent.impl.util.reagent_component_QMARK_.call(null, this$))) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol("util", "reagent-component?", "util/reagent-component?", 1508385933, null), new cljs.core.Symbol(null, "this", "this", 1028897902, null))))].join(""));
  }
  return cljs.core.deref.call(null, reagent.core.state_atom.call(null, this$));
};
reagent.core.replace_state = function reagent$core$replace_state(this$, new_state) {
  if (cljs.core.truth_(reagent.impl.util.reagent_component_QMARK_.call(null, this$))) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol("util", "reagent-component?", "util/reagent-component?", 1508385933, null), new cljs.core.Symbol(null, "this", "this", 1028897902, null))))].join(""));
  }
  if (new_state == null || cljs.core.map_QMARK_.call(null, new_state)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "or", "or", 1876275696, null), cljs.core.list(new cljs.core.Symbol(null, "nil?", "nil?", 1612038930, null), new cljs.core.Symbol(null, "new-state", "new-state", 1150182315, null)), cljs.core.list(new cljs.core.Symbol(null, "map?", "map?", -1780568534, null), new cljs.core.Symbol(null, "new-state", "new-state", 1150182315, null)))))].join(""));
  }
  return cljs.core.reset_BANG_.call(null, reagent.core.state_atom.call(null, this$), new_state);
};
reagent.core.set_state = function reagent$core$set_state(this$, new_state) {
  if (cljs.core.truth_(reagent.impl.util.reagent_component_QMARK_.call(null, this$))) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol("util", "reagent-component?", "util/reagent-component?", 1508385933, null), new cljs.core.Symbol(null, "this", "this", 1028897902, null))))].join(""));
  }
  if (new_state == null || cljs.core.map_QMARK_.call(null, new_state)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "or", "or", 1876275696, null), cljs.core.list(new cljs.core.Symbol(null, "nil?", "nil?", 1612038930, null), new cljs.core.Symbol(null, "new-state", "new-state", 1150182315, null)), cljs.core.list(new cljs.core.Symbol(null, "map?", "map?", -1780568534, null), new cljs.core.Symbol(null, "new-state", "new-state", 1150182315, null)))))].join(""));
  }
  return cljs.core.swap_BANG_.call(null, reagent.core.state_atom.call(null, this$), cljs.core.merge, new_state);
};
reagent.core.props = function reagent$core$props(this$) {
  if (cljs.core.truth_(reagent.impl.util.reagent_component_QMARK_.call(null, this$))) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol("util", "reagent-component?", "util/reagent-component?", 1508385933, null), new cljs.core.Symbol(null, "this", "this", 1028897902, null))))].join(""));
  }
  return reagent.impl.util.get_props.call(null, this$);
};
reagent.core.children = function reagent$core$children(this$) {
  if (cljs.core.truth_(reagent.impl.util.reagent_component_QMARK_.call(null, this$))) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol("util", "reagent-component?", "util/reagent-component?", 1508385933, null), new cljs.core.Symbol(null, "this", "this", 1028897902, null))))].join(""));
  }
  return reagent.impl.util.get_children.call(null, this$);
};
reagent.core.argv = function reagent$core$argv(this$) {
  if (cljs.core.truth_(reagent.impl.util.reagent_component_QMARK_.call(null, this$))) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol("util", "reagent-component?", "util/reagent-component?", 1508385933, null), new cljs.core.Symbol(null, "this", "this", 1028897902, null))))].join(""));
  }
  return reagent.impl.util.get_argv.call(null, this$);
};
reagent.core.dom_node = function reagent$core$dom_node(this$) {
  return this$["getDOMNode"]();
};
reagent.core.merge_props = function reagent$core$merge_props(defaults, props) {
  return reagent.impl.util.merge_props.call(null, defaults, props);
};
reagent.core.flush = function reagent$core$flush() {
  return reagent.impl.batching.flush.call(null);
};
reagent.core.atom = function reagent$core$atom() {
  var G__12008 = arguments.length;
  switch(G__12008) {
    case 1:
      return reagent.core.atom.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      var argseq__5386__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0);
      return reagent.core.atom.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5386__auto__);
  }
};
reagent.core.atom.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return reagent.ratom.atom.call(null, x);
};
reagent.core.atom.cljs$core$IFn$_invoke$arity$variadic = function(x, rest) {
  return cljs.core.apply.call(null, reagent.ratom.atom, x, rest);
};
reagent.core.atom.cljs$lang$applyTo = function(seq12005) {
  var G__12006 = cljs.core.first.call(null, seq12005);
  var seq12005__$1 = cljs.core.next.call(null, seq12005);
  return reagent.core.atom.cljs$core$IFn$_invoke$arity$variadic(G__12006, seq12005__$1);
};
reagent.core.atom.cljs$lang$maxFixedArity = 1;
reagent.core.wrap = function reagent$core$wrap() {
  var argseq__5375__auto__ = 2 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0) : null;
  return reagent.core.wrap.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5375__auto__);
};
reagent.core.wrap.cljs$core$IFn$_invoke$arity$variadic = function(value, reset_fn, args) {
  if (cljs.core.ifn_QMARK_.call(null, reset_fn)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "ifn?", "ifn?", -2106461064, null), new cljs.core.Symbol(null, "reset-fn", "reset-fn", 949643977, null))))].join(""));
  }
  return reagent.ratom.make_wrapper.call(null, value, reset_fn, args);
};
reagent.core.wrap.cljs$lang$maxFixedArity = 2;
reagent.core.wrap.cljs$lang$applyTo = function(seq12010) {
  var G__12011 = cljs.core.first.call(null, seq12010);
  var seq12010__$1 = cljs.core.next.call(null, seq12010);
  var G__12012 = cljs.core.first.call(null, seq12010__$1);
  var seq12010__$2 = cljs.core.next.call(null, seq12010__$1);
  return reagent.core.wrap.cljs$core$IFn$_invoke$arity$variadic(G__12011, G__12012, seq12010__$2);
};
reagent.core.cursor = function reagent$core$cursor(src, path) {
  return reagent.ratom.cursor.call(null, src, path);
};
reagent.core.next_tick = function reagent$core$next_tick(f) {
  return reagent.impl.batching.next_tick.call(null, f);
};
reagent.core.partial = function reagent$core$partial() {
  var argseq__5375__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return reagent.core.partial.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5375__auto__);
};
reagent.core.partial.cljs$core$IFn$_invoke$arity$variadic = function(f, args) {
  return new reagent.impl.util.partial_ifn(f, args, null);
};
reagent.core.partial.cljs$lang$maxFixedArity = 1;
reagent.core.partial.cljs$lang$applyTo = function(seq12013) {
  var G__12014 = cljs.core.first.call(null, seq12013);
  var seq12013__$1 = cljs.core.next.call(null, seq12013);
  return reagent.core.partial.cljs$core$IFn$_invoke$arity$variadic(G__12014, seq12013__$1);
};
goog.provide("cljs.core.async.impl.protocols");
goog.require("cljs.core");
cljs.core.async.impl.protocols.MAX_QUEUE_SIZE = 1024;
cljs.core.async.impl.protocols.ReadPort = function() {
  var obj15202 = {};
  return obj15202;
}();
cljs.core.async.impl.protocols.take_BANG_ = function cljs$core$async$impl$protocols$take_BANG_(port, fn1_handler) {
  if (function() {
    var and__4323__auto__ = port;
    if (and__4323__auto__) {
      return port.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2;
    } else {
      return and__4323__auto__;
    }
  }()) {
    return port.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2(port, fn1_handler);
  } else {
    var x__4971__auto__ = port == null ? null : port;
    return function() {
      var or__4335__auto__ = cljs.core.async.impl.protocols.take_BANG_[goog.typeOf(x__4971__auto__)];
      if (or__4335__auto__) {
        return or__4335__auto__;
      } else {
        var or__4335__auto____$1 = cljs.core.async.impl.protocols.take_BANG_["_"];
        if (or__4335__auto____$1) {
          return or__4335__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ReadPort.take!", port);
        }
      }
    }().call(null, port, fn1_handler);
  }
};
cljs.core.async.impl.protocols.WritePort = function() {
  var obj15204 = {};
  return obj15204;
}();
cljs.core.async.impl.protocols.put_BANG_ = function cljs$core$async$impl$protocols$put_BANG_(port, val, fn1_handler) {
  if (function() {
    var and__4323__auto__ = port;
    if (and__4323__auto__) {
      return port.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3;
    } else {
      return and__4323__auto__;
    }
  }()) {
    return port.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3(port, val, fn1_handler);
  } else {
    var x__4971__auto__ = port == null ? null : port;
    return function() {
      var or__4335__auto__ = cljs.core.async.impl.protocols.put_BANG_[goog.typeOf(x__4971__auto__)];
      if (or__4335__auto__) {
        return or__4335__auto__;
      } else {
        var or__4335__auto____$1 = cljs.core.async.impl.protocols.put_BANG_["_"];
        if (or__4335__auto____$1) {
          return or__4335__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "WritePort.put!", port);
        }
      }
    }().call(null, port, val, fn1_handler);
  }
};
cljs.core.async.impl.protocols.Channel = function() {
  var obj15206 = {};
  return obj15206;
}();
cljs.core.async.impl.protocols.close_BANG_ = function cljs$core$async$impl$protocols$close_BANG_(chan) {
  if (function() {
    var and__4323__auto__ = chan;
    if (and__4323__auto__) {
      return chan.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1;
    } else {
      return and__4323__auto__;
    }
  }()) {
    return chan.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1(chan);
  } else {
    var x__4971__auto__ = chan == null ? null : chan;
    return function() {
      var or__4335__auto__ = cljs.core.async.impl.protocols.close_BANG_[goog.typeOf(x__4971__auto__)];
      if (or__4335__auto__) {
        return or__4335__auto__;
      } else {
        var or__4335__auto____$1 = cljs.core.async.impl.protocols.close_BANG_["_"];
        if (or__4335__auto____$1) {
          return or__4335__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Channel.close!", chan);
        }
      }
    }().call(null, chan);
  }
};
cljs.core.async.impl.protocols.closed_QMARK_ = function cljs$core$async$impl$protocols$closed_QMARK_(chan) {
  if (function() {
    var and__4323__auto__ = chan;
    if (and__4323__auto__) {
      return chan.cljs$core$async$impl$protocols$Channel$closed_QMARK_$arity$1;
    } else {
      return and__4323__auto__;
    }
  }()) {
    return chan.cljs$core$async$impl$protocols$Channel$closed_QMARK_$arity$1(chan);
  } else {
    var x__4971__auto__ = chan == null ? null : chan;
    return function() {
      var or__4335__auto__ = cljs.core.async.impl.protocols.closed_QMARK_[goog.typeOf(x__4971__auto__)];
      if (or__4335__auto__) {
        return or__4335__auto__;
      } else {
        var or__4335__auto____$1 = cljs.core.async.impl.protocols.closed_QMARK_["_"];
        if (or__4335__auto____$1) {
          return or__4335__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Channel.closed?", chan);
        }
      }
    }().call(null, chan);
  }
};
cljs.core.async.impl.protocols.Handler = function() {
  var obj15208 = {};
  return obj15208;
}();
cljs.core.async.impl.protocols.active_QMARK_ = function cljs$core$async$impl$protocols$active_QMARK_(h) {
  if (function() {
    var and__4323__auto__ = h;
    if (and__4323__auto__) {
      return h.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1;
    } else {
      return and__4323__auto__;
    }
  }()) {
    return h.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1(h);
  } else {
    var x__4971__auto__ = h == null ? null : h;
    return function() {
      var or__4335__auto__ = cljs.core.async.impl.protocols.active_QMARK_[goog.typeOf(x__4971__auto__)];
      if (or__4335__auto__) {
        return or__4335__auto__;
      } else {
        var or__4335__auto____$1 = cljs.core.async.impl.protocols.active_QMARK_["_"];
        if (or__4335__auto____$1) {
          return or__4335__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Handler.active?", h);
        }
      }
    }().call(null, h);
  }
};
cljs.core.async.impl.protocols.commit = function cljs$core$async$impl$protocols$commit(h) {
  if (function() {
    var and__4323__auto__ = h;
    if (and__4323__auto__) {
      return h.cljs$core$async$impl$protocols$Handler$commit$arity$1;
    } else {
      return and__4323__auto__;
    }
  }()) {
    return h.cljs$core$async$impl$protocols$Handler$commit$arity$1(h);
  } else {
    var x__4971__auto__ = h == null ? null : h;
    return function() {
      var or__4335__auto__ = cljs.core.async.impl.protocols.commit[goog.typeOf(x__4971__auto__)];
      if (or__4335__auto__) {
        return or__4335__auto__;
      } else {
        var or__4335__auto____$1 = cljs.core.async.impl.protocols.commit["_"];
        if (or__4335__auto____$1) {
          return or__4335__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Handler.commit", h);
        }
      }
    }().call(null, h);
  }
};
cljs.core.async.impl.protocols.Buffer = function() {
  var obj15210 = {};
  return obj15210;
}();
cljs.core.async.impl.protocols.full_QMARK_ = function cljs$core$async$impl$protocols$full_QMARK_(b) {
  if (function() {
    var and__4323__auto__ = b;
    if (and__4323__auto__) {
      return b.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1;
    } else {
      return and__4323__auto__;
    }
  }()) {
    return b.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1(b);
  } else {
    var x__4971__auto__ = b == null ? null : b;
    return function() {
      var or__4335__auto__ = cljs.core.async.impl.protocols.full_QMARK_[goog.typeOf(x__4971__auto__)];
      if (or__4335__auto__) {
        return or__4335__auto__;
      } else {
        var or__4335__auto____$1 = cljs.core.async.impl.protocols.full_QMARK_["_"];
        if (or__4335__auto____$1) {
          return or__4335__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Buffer.full?", b);
        }
      }
    }().call(null, b);
  }
};
cljs.core.async.impl.protocols.remove_BANG_ = function cljs$core$async$impl$protocols$remove_BANG_(b) {
  if (function() {
    var and__4323__auto__ = b;
    if (and__4323__auto__) {
      return b.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1;
    } else {
      return and__4323__auto__;
    }
  }()) {
    return b.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1(b);
  } else {
    var x__4971__auto__ = b == null ? null : b;
    return function() {
      var or__4335__auto__ = cljs.core.async.impl.protocols.remove_BANG_[goog.typeOf(x__4971__auto__)];
      if (or__4335__auto__) {
        return or__4335__auto__;
      } else {
        var or__4335__auto____$1 = cljs.core.async.impl.protocols.remove_BANG_["_"];
        if (or__4335__auto____$1) {
          return or__4335__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Buffer.remove!", b);
        }
      }
    }().call(null, b);
  }
};
cljs.core.async.impl.protocols.add_BANG__STAR_ = function cljs$core$async$impl$protocols$add_BANG__STAR_(b, itm) {
  if (function() {
    var and__4323__auto__ = b;
    if (and__4323__auto__) {
      return b.cljs$core$async$impl$protocols$Buffer$add_BANG__STAR_$arity$2;
    } else {
      return and__4323__auto__;
    }
  }()) {
    return b.cljs$core$async$impl$protocols$Buffer$add_BANG__STAR_$arity$2(b, itm);
  } else {
    var x__4971__auto__ = b == null ? null : b;
    return function() {
      var or__4335__auto__ = cljs.core.async.impl.protocols.add_BANG__STAR_[goog.typeOf(x__4971__auto__)];
      if (or__4335__auto__) {
        return or__4335__auto__;
      } else {
        var or__4335__auto____$1 = cljs.core.async.impl.protocols.add_BANG__STAR_["_"];
        if (or__4335__auto____$1) {
          return or__4335__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Buffer.add!*", b);
        }
      }
    }().call(null, b, itm);
  }
};
cljs.core.async.impl.protocols.add_BANG_ = function cljs$core$async$impl$protocols$add_BANG_() {
  var G__15212 = arguments.length;
  switch(G__15212) {
    case 1:
      return cljs.core.async.impl.protocols.add_BANG_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.async.impl.protocols.add_BANG_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.async.impl.protocols.add_BANG_.cljs$core$IFn$_invoke$arity$1 = function(b) {
  return b;
};
cljs.core.async.impl.protocols.add_BANG_.cljs$core$IFn$_invoke$arity$2 = function(b, itm) {
  if (!(itm == null)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "not", "not", 1044554643, null), cljs.core.list(new cljs.core.Symbol(null, "nil?", "nil?", 1612038930, null), new cljs.core.Symbol(null, "itm", "itm", -713282527, null)))))].join(""));
  }
  return cljs.core.async.impl.protocols.add_BANG__STAR_.call(null, b, itm);
};
cljs.core.async.impl.protocols.add_BANG_.cljs$lang$maxFixedArity = 2;
cljs.core.async.impl.protocols.UnblockingBuffer = function() {
  var obj15215 = {};
  return obj15215;
}();
goog.provide("cljs.core.async.impl.buffers");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.protocols");
cljs.core.async.impl.buffers.acopy = function cljs$core$async$impl$buffers$acopy(src, src_start, dest, dest_start, len) {
  var cnt = 0;
  while (true) {
    if (cnt < len) {
      dest[dest_start + cnt] = src[src_start + cnt];
      var G__15218 = cnt + 1;
      cnt = G__15218;
      continue;
    } else {
      return null;
    }
    break;
  }
};
cljs.core.async.impl.buffers.RingBuffer = function(head, tail, length, arr) {
  this.head = head;
  this.tail = tail;
  this.length = length;
  this.arr = arr;
};
cljs.core.async.impl.buffers.RingBuffer.prototype.pop = function() {
  var self__ = this;
  var _ = this;
  if (self__.length === 0) {
    return null;
  } else {
    var x = self__.arr[self__.tail];
    self__.arr[self__.tail] = null;
    self__.tail = (self__.tail + 1) % self__.arr.length;
    self__.length = self__.length - 1;
    return x;
  }
};
cljs.core.async.impl.buffers.RingBuffer.prototype.unshift = function(x) {
  var self__ = this;
  var _ = this;
  self__.arr[self__.head] = x;
  self__.head = (self__.head + 1) % self__.arr.length;
  self__.length = self__.length + 1;
  return null;
};
cljs.core.async.impl.buffers.RingBuffer.prototype.unbounded_unshift = function(x) {
  var self__ = this;
  var this$ = this;
  if (self__.length + 1 === self__.arr.length) {
    this$.resize();
  } else {
  }
  return this$.unshift(x);
};
cljs.core.async.impl.buffers.RingBuffer.prototype.resize = function() {
  var self__ = this;
  var _ = this;
  var new_arr_size = self__.arr.length * 2;
  var new_arr = new Array(new_arr_size);
  if (self__.tail < self__.head) {
    cljs.core.async.impl.buffers.acopy.call(null, self__.arr, self__.tail, new_arr, 0, self__.length);
    self__.tail = 0;
    self__.head = self__.length;
    return self__.arr = new_arr;
  } else {
    if (self__.tail > self__.head) {
      cljs.core.async.impl.buffers.acopy.call(null, self__.arr, self__.tail, new_arr, 0, self__.arr.length - self__.tail);
      cljs.core.async.impl.buffers.acopy.call(null, self__.arr, 0, new_arr, self__.arr.length - self__.tail, self__.head);
      self__.tail = 0;
      self__.head = self__.length;
      return self__.arr = new_arr;
    } else {
      if (self__.tail === self__.head) {
        self__.tail = 0;
        self__.head = 0;
        return self__.arr = new_arr;
      } else {
        return null;
      }
    }
  }
};
cljs.core.async.impl.buffers.RingBuffer.prototype.cleanup = function(keep_QMARK_) {
  var self__ = this;
  var this$ = this;
  var n__5220__auto__ = self__.length;
  var x = 0;
  while (true) {
    if (x < n__5220__auto__) {
      var v_15219 = this$.pop();
      if (keep_QMARK_.call(null, v_15219)) {
        this$.unshift(v_15219);
      } else {
      }
      var G__15220 = x + 1;
      x = G__15220;
      continue;
    } else {
      return null;
    }
    break;
  }
};
cljs.core.async.impl.buffers.RingBuffer.cljs$lang$type = true;
cljs.core.async.impl.buffers.RingBuffer.cljs$lang$ctorStr = "cljs.core.async.impl.buffers/RingBuffer";
cljs.core.async.impl.buffers.RingBuffer.cljs$lang$ctorPrWriter = function(this__4914__auto__, writer__4915__auto__, opt__4916__auto__) {
  return cljs.core._write.call(null, writer__4915__auto__, "cljs.core.async.impl.buffers/RingBuffer");
};
cljs.core.async.impl.buffers.__GT_RingBuffer = function cljs$core$async$impl$buffers$__GT_RingBuffer(head, tail, length, arr) {
  return new cljs.core.async.impl.buffers.RingBuffer(head, tail, length, arr);
};
cljs.core.async.impl.buffers.ring_buffer = function cljs$core$async$impl$buffers$ring_buffer(n) {
  if (n > 0) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("Can't create a ring buffer of size 0"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "\x3e", "\x3e", 1085014381, null), new cljs.core.Symbol(null, "n", "n", -2092305744, null), 0)))].join(""));
  }
  return new cljs.core.async.impl.buffers.RingBuffer(0, 0, 0, new Array(n));
};
cljs.core.async.impl.buffers.FixedBuffer = function(buf, n) {
  this.buf = buf;
  this.n = n;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2;
};
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.length;
};
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$async$impl$protocols$Buffer$ = true;
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.length === self__.n;
};
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.pop();
};
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$async$impl$protocols$Buffer$add_BANG__STAR_$arity$2 = function(this$, itm) {
  var self__ = this;
  var this$__$1 = this;
  self__.buf.unbounded_unshift(itm);
  return this$__$1;
};
cljs.core.async.impl.buffers.FixedBuffer.cljs$lang$type = true;
cljs.core.async.impl.buffers.FixedBuffer.cljs$lang$ctorStr = "cljs.core.async.impl.buffers/FixedBuffer";
cljs.core.async.impl.buffers.FixedBuffer.cljs$lang$ctorPrWriter = function(this__4914__auto__, writer__4915__auto__, opt__4916__auto__) {
  return cljs.core._write.call(null, writer__4915__auto__, "cljs.core.async.impl.buffers/FixedBuffer");
};
cljs.core.async.impl.buffers.__GT_FixedBuffer = function cljs$core$async$impl$buffers$__GT_FixedBuffer(buf, n) {
  return new cljs.core.async.impl.buffers.FixedBuffer(buf, n);
};
cljs.core.async.impl.buffers.fixed_buffer = function cljs$core$async$impl$buffers$fixed_buffer(n) {
  return new cljs.core.async.impl.buffers.FixedBuffer(cljs.core.async.impl.buffers.ring_buffer.call(null, n), n);
};
cljs.core.async.impl.buffers.DroppingBuffer = function(buf, n) {
  this.buf = buf;
  this.n = n;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2;
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.length;
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$ = true;
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return false;
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.pop();
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$add_BANG__STAR_$arity$2 = function(this$, itm) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.buf.length === self__.n) {
  } else {
    self__.buf.unshift(itm);
  }
  return this$__$1;
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$UnblockingBuffer$ = true;
cljs.core.async.impl.buffers.DroppingBuffer.cljs$lang$type = true;
cljs.core.async.impl.buffers.DroppingBuffer.cljs$lang$ctorStr = "cljs.core.async.impl.buffers/DroppingBuffer";
cljs.core.async.impl.buffers.DroppingBuffer.cljs$lang$ctorPrWriter = function(this__4914__auto__, writer__4915__auto__, opt__4916__auto__) {
  return cljs.core._write.call(null, writer__4915__auto__, "cljs.core.async.impl.buffers/DroppingBuffer");
};
cljs.core.async.impl.buffers.__GT_DroppingBuffer = function cljs$core$async$impl$buffers$__GT_DroppingBuffer(buf, n) {
  return new cljs.core.async.impl.buffers.DroppingBuffer(buf, n);
};
cljs.core.async.impl.buffers.dropping_buffer = function cljs$core$async$impl$buffers$dropping_buffer(n) {
  return new cljs.core.async.impl.buffers.DroppingBuffer(cljs.core.async.impl.buffers.ring_buffer.call(null, n), n);
};
cljs.core.async.impl.buffers.SlidingBuffer = function(buf, n) {
  this.buf = buf;
  this.n = n;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2;
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.length;
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$ = true;
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return false;
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.pop();
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$add_BANG__STAR_$arity$2 = function(this$, itm) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.buf.length === self__.n) {
    cljs.core.async.impl.protocols.remove_BANG_.call(null, this$__$1);
  } else {
  }
  self__.buf.unshift(itm);
  return this$__$1;
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$UnblockingBuffer$ = true;
cljs.core.async.impl.buffers.SlidingBuffer.cljs$lang$type = true;
cljs.core.async.impl.buffers.SlidingBuffer.cljs$lang$ctorStr = "cljs.core.async.impl.buffers/SlidingBuffer";
cljs.core.async.impl.buffers.SlidingBuffer.cljs$lang$ctorPrWriter = function(this__4914__auto__, writer__4915__auto__, opt__4916__auto__) {
  return cljs.core._write.call(null, writer__4915__auto__, "cljs.core.async.impl.buffers/SlidingBuffer");
};
cljs.core.async.impl.buffers.__GT_SlidingBuffer = function cljs$core$async$impl$buffers$__GT_SlidingBuffer(buf, n) {
  return new cljs.core.async.impl.buffers.SlidingBuffer(buf, n);
};
cljs.core.async.impl.buffers.sliding_buffer = function cljs$core$async$impl$buffers$sliding_buffer(n) {
  return new cljs.core.async.impl.buffers.SlidingBuffer(cljs.core.async.impl.buffers.ring_buffer.call(null, n), n);
};
goog.provide("goog.async.nextTick");
goog.provide("goog.async.throwException");
goog.require("goog.debug.entryPointRegistry");
goog.require("goog.functions");
goog.async.throwException = function(exception) {
  goog.global.setTimeout(function() {
    throw exception;
  }, 0);
};
goog.async.nextTick = function(callback, opt_context) {
  var cb = callback;
  if (opt_context) {
    cb = goog.bind(callback, opt_context);
  }
  cb = goog.async.nextTick.wrapCallback_(cb);
  if (goog.isFunction(goog.global.setImmediate)) {
    goog.global.setImmediate(cb);
    return;
  }
  if (!goog.async.nextTick.setImmediate_) {
    goog.async.nextTick.setImmediate_ = goog.async.nextTick.getSetImmediateEmulator_();
  }
  goog.async.nextTick.setImmediate_(cb);
};
goog.async.nextTick.setImmediate_;
goog.async.nextTick.getSetImmediateEmulator_ = function() {
  var Channel = goog.global["MessageChannel"];
  if (typeof Channel === "undefined" && typeof window !== "undefined" && window.postMessage && window.addEventListener) {
    Channel = function() {
      var iframe = document.createElement("iframe");
      iframe.style.display = "none";
      iframe.src = "";
      document.documentElement.appendChild(iframe);
      var win = iframe.contentWindow;
      var doc = win.document;
      doc.open();
      doc.write("");
      doc.close();
      var message = "callImmediate" + Math.random();
      var origin = win.location.protocol == "file:" ? "*" : win.location.protocol + "//" + win.location.host;
      var onmessage = goog.bind(function(e) {
        if (e.origin != origin && e.data != message) {
          return;
        }
        this["port1"].onmessage();
      }, this);
      win.addEventListener("message", onmessage, false);
      this["port1"] = {};
      this["port2"] = {postMessage:function() {
        win.postMessage(message, origin);
      }};
    };
  }
  if (typeof Channel !== "undefined") {
    var channel = new Channel;
    var head = {};
    var tail = head;
    channel["port1"].onmessage = function() {
      head = head.next;
      var cb = head.cb;
      head.cb = null;
      cb();
    };
    return function(cb) {
      tail.next = {cb:cb};
      tail = tail.next;
      channel["port2"].postMessage(0);
    };
  }
  if (typeof document !== "undefined" && "onreadystatechange" in document.createElement("script")) {
    return function(cb) {
      var script = document.createElement("script");
      script.onreadystatechange = function() {
        script.onreadystatechange = null;
        script.parentNode.removeChild(script);
        script = null;
        cb();
        cb = null;
      };
      document.documentElement.appendChild(script);
    };
  }
  return function(cb) {
    goog.global.setTimeout(cb, 0);
  };
};
goog.async.nextTick.wrapCallback_ = goog.functions.identity;
goog.debug.entryPointRegistry.register(function(transformer) {
  goog.async.nextTick.wrapCallback_ = transformer;
});
goog.provide("cljs.core.async.impl.dispatch");
goog.require("cljs.core");
goog.require("goog.async.nextTick");
goog.require("cljs.core.async.impl.buffers");
cljs.core.async.impl.dispatch.tasks = cljs.core.async.impl.buffers.ring_buffer.call(null, 32);
cljs.core.async.impl.dispatch.running_QMARK_ = false;
cljs.core.async.impl.dispatch.queued_QMARK_ = false;
cljs.core.async.impl.dispatch.TASK_BATCH_SIZE = 1024;
cljs.core.async.impl.dispatch.process_messages = function cljs$core$async$impl$dispatch$process_messages() {
  cljs.core.async.impl.dispatch.running_QMARK_ = true;
  cljs.core.async.impl.dispatch.queued_QMARK_ = false;
  var count_15223 = 0;
  while (true) {
    var m_15224 = cljs.core.async.impl.dispatch.tasks.pop();
    if (m_15224 == null) {
    } else {
      m_15224.call(null);
      if (count_15223 < cljs.core.async.impl.dispatch.TASK_BATCH_SIZE) {
        var G__15225 = count_15223 + 1;
        count_15223 = G__15225;
        continue;
      } else {
      }
    }
    break;
  }
  cljs.core.async.impl.dispatch.running_QMARK_ = false;
  if (cljs.core.async.impl.dispatch.tasks.length > 0) {
    return cljs.core.async.impl.dispatch.queue_dispatcher.call(null);
  } else {
    return null;
  }
};
cljs.core.async.impl.dispatch.queue_dispatcher = function cljs$core$async$impl$dispatch$queue_dispatcher() {
  if (cljs.core.truth_(function() {
    var and__4323__auto__ = cljs.core.async.impl.dispatch.queued_QMARK_;
    if (cljs.core.truth_(and__4323__auto__)) {
      return cljs.core.async.impl.dispatch.running_QMARK_;
    } else {
      return and__4323__auto__;
    }
  }())) {
    return null;
  } else {
    cljs.core.async.impl.dispatch.queued_QMARK_ = true;
    return goog.async.nextTick(cljs.core.async.impl.dispatch.process_messages);
  }
};
cljs.core.async.impl.dispatch.run = function cljs$core$async$impl$dispatch$run(f) {
  cljs.core.async.impl.dispatch.tasks.unbounded_unshift(f);
  return cljs.core.async.impl.dispatch.queue_dispatcher.call(null);
};
cljs.core.async.impl.dispatch.queue_delay = function cljs$core$async$impl$dispatch$queue_delay(f, delay) {
  return setTimeout(f, delay);
};
goog.provide("cljs.core.async.impl.channels");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.buffers");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.protocols");
cljs.core.async.impl.channels.box = function cljs$core$async$impl$channels$box(val) {
  if (typeof cljs.core.async.impl.channels.t15231 !== "undefined") {
  } else {
    cljs.core.async.impl.channels.t15231 = function(val, box, meta15232) {
      this.val = val;
      this.box = box;
      this.meta15232 = meta15232;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 425984;
    };
    cljs.core.async.impl.channels.t15231.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return self__.val;
    };
    cljs.core.async.impl.channels.t15231.prototype.cljs$core$IMeta$_meta$arity$1 = function(_15233) {
      var self__ = this;
      var _15233__$1 = this;
      return self__.meta15232;
    };
    cljs.core.async.impl.channels.t15231.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_15233, meta15232__$1) {
      var self__ = this;
      var _15233__$1 = this;
      return new cljs.core.async.impl.channels.t15231(self__.val, self__.box, meta15232__$1);
    };
    cljs.core.async.impl.channels.t15231.cljs$lang$type = true;
    cljs.core.async.impl.channels.t15231.cljs$lang$ctorStr = "cljs.core.async.impl.channels/t15231";
    cljs.core.async.impl.channels.t15231.cljs$lang$ctorPrWriter = function(this__4914__auto__, writer__4915__auto__, opt__4916__auto__) {
      return cljs.core._write.call(null, writer__4915__auto__, "cljs.core.async.impl.channels/t15231");
    };
    cljs.core.async.impl.channels.__GT_t15231 = function cljs$core$async$impl$channels$box_$___GT_t15231(val__$1, box__$1, meta15232) {
      return new cljs.core.async.impl.channels.t15231(val__$1, box__$1, meta15232);
    };
  }
  return new cljs.core.async.impl.channels.t15231(val, cljs$core$async$impl$channels$box, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.core.async.impl.channels.PutBox = function(handler, val) {
  this.handler = handler;
  this.val = val;
};
cljs.core.async.impl.channels.PutBox.cljs$lang$type = true;
cljs.core.async.impl.channels.PutBox.cljs$lang$ctorStr = "cljs.core.async.impl.channels/PutBox";
cljs.core.async.impl.channels.PutBox.cljs$lang$ctorPrWriter = function(this__4914__auto__, writer__4915__auto__, opt__4916__auto__) {
  return cljs.core._write.call(null, writer__4915__auto__, "cljs.core.async.impl.channels/PutBox");
};
cljs.core.async.impl.channels.__GT_PutBox = function cljs$core$async$impl$channels$__GT_PutBox(handler, val) {
  return new cljs.core.async.impl.channels.PutBox(handler, val);
};
cljs.core.async.impl.channels.put_active_QMARK_ = function cljs$core$async$impl$channels$put_active_QMARK_(box) {
  return cljs.core.async.impl.protocols.active_QMARK_.call(null, box.handler);
};
cljs.core.async.impl.channels.MAX_DIRTY = 64;
cljs.core.async.impl.channels.MMC = function() {
  var obj15235 = {};
  return obj15235;
}();
cljs.core.async.impl.channels.abort = function cljs$core$async$impl$channels$abort(this$) {
  if (function() {
    var and__4323__auto__ = this$;
    if (and__4323__auto__) {
      return this$.cljs$core$async$impl$channels$MMC$abort$arity$1;
    } else {
      return and__4323__auto__;
    }
  }()) {
    return this$.cljs$core$async$impl$channels$MMC$abort$arity$1(this$);
  } else {
    var x__4971__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4335__auto__ = cljs.core.async.impl.channels.abort[goog.typeOf(x__4971__auto__)];
      if (or__4335__auto__) {
        return or__4335__auto__;
      } else {
        var or__4335__auto____$1 = cljs.core.async.impl.channels.abort["_"];
        if (or__4335__auto____$1) {
          return or__4335__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "MMC.abort", this$);
        }
      }
    }().call(null, this$);
  }
};
cljs.core.async.impl.channels.ManyToManyChannel = function(takes, dirty_takes, puts, dirty_puts, buf, closed, add_BANG_) {
  this.takes = takes;
  this.dirty_takes = dirty_takes;
  this.puts = puts;
  this.dirty_puts = dirty_puts;
  this.buf = buf;
  this.closed = closed;
  this.add_BANG_ = add_BANG_;
};
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$Channel$ = true;
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$Channel$closed_QMARK_$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.closed;
};
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.closed) {
    return null;
  } else {
    self__.closed = true;
    if (cljs.core.truth_(function() {
      var and__4323__auto__ = self__.buf;
      if (cljs.core.truth_(and__4323__auto__)) {
        return self__.puts.length === 0;
      } else {
        return and__4323__auto__;
      }
    }())) {
      self__.add_BANG_.call(null, self__.buf);
    } else {
    }
    while (true) {
      var taker_15236 = self__.takes.pop();
      if (taker_15236 == null) {
      } else {
        if (cljs.core.async.impl.protocols.active_QMARK_.call(null, taker_15236)) {
          var take_cb_15237 = cljs.core.async.impl.protocols.commit.call(null, taker_15236);
          var val_15238 = cljs.core.truth_(function() {
            var and__4323__auto__ = self__.buf;
            if (cljs.core.truth_(and__4323__auto__)) {
              return cljs.core.count.call(null, self__.buf) > 0;
            } else {
              return and__4323__auto__;
            }
          }()) ? cljs.core.async.impl.protocols.remove_BANG_.call(null, self__.buf) : null;
          cljs.core.async.impl.dispatch.run.call(null, function(take_cb_15237, val_15238, taker_15236, this$__$1) {
            return function() {
              return take_cb_15237.call(null, val_15238);
            };
          }(take_cb_15237, val_15238, taker_15236, this$__$1));
        } else {
        }
        continue;
      }
      break;
    }
    return null;
  }
};
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$ReadPort$ = true;
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 = function(this$, handler) {
  var self__ = this;
  var this$__$1 = this;
  if (!cljs.core.async.impl.protocols.active_QMARK_.call(null, handler)) {
    return null;
  } else {
    if (!(self__.buf == null) && cljs.core.count.call(null, self__.buf) > 0) {
      var _ = cljs.core.async.impl.protocols.commit.call(null, handler);
      var retval = cljs.core.async.impl.channels.box.call(null, cljs.core.async.impl.protocols.remove_BANG_.call(null, self__.buf));
      while (true) {
        if (cljs.core.truth_(cljs.core.async.impl.protocols.full_QMARK_.call(null, self__.buf))) {
        } else {
          var putter_15239 = self__.puts.pop();
          if (putter_15239 == null) {
          } else {
            var put_handler_15240 = putter_15239.handler;
            var val_15241 = putter_15239.val;
            if (cljs.core.async.impl.protocols.active_QMARK_.call(null, put_handler_15240)) {
              var put_cb_15242 = cljs.core.async.impl.protocols.commit.call(null, put_handler_15240);
              cljs.core.async.impl.protocols.commit.call(null, handler);
              cljs.core.async.impl.dispatch.run.call(null, function(put_cb_15242, put_handler_15240, val_15241, putter_15239, _, retval, this$__$1) {
                return function() {
                  return put_cb_15242.call(null, true);
                };
              }(put_cb_15242, put_handler_15240, val_15241, putter_15239, _, retval, this$__$1));
              if (cljs.core.reduced_QMARK_.call(null, self__.add_BANG_.call(null, self__.buf, val_15241))) {
                cljs.core.async.impl.channels.abort.call(null, this$__$1);
              } else {
              }
            } else {
            }
            continue;
          }
        }
        break;
      }
      return retval;
    } else {
      var putter = function() {
        while (true) {
          var putter = self__.puts.pop();
          if (cljs.core.truth_(putter)) {
            if (cljs.core.async.impl.protocols.active_QMARK_.call(null, putter.handler)) {
              return putter;
            } else {
              continue;
            }
          } else {
            return null;
          }
          break;
        }
      }();
      if (cljs.core.truth_(putter)) {
        var put_cb = cljs.core.async.impl.protocols.commit.call(null, putter.handler);
        cljs.core.async.impl.protocols.commit.call(null, handler);
        cljs.core.async.impl.dispatch.run.call(null, function(put_cb, putter, this$__$1) {
          return function() {
            return put_cb.call(null, true);
          };
        }(put_cb, putter, this$__$1));
        return cljs.core.async.impl.channels.box.call(null, putter.val);
      } else {
        if (cljs.core.truth_(self__.closed)) {
          if (cljs.core.truth_(self__.buf)) {
            self__.add_BANG_.call(null, self__.buf);
          } else {
          }
          if (cljs.core.truth_(function() {
            var and__4323__auto__ = cljs.core.async.impl.protocols.active_QMARK_.call(null, handler);
            if (cljs.core.truth_(and__4323__auto__)) {
              return cljs.core.async.impl.protocols.commit.call(null, handler);
            } else {
              return and__4323__auto__;
            }
          }())) {
            var has_val = function() {
              var and__4323__auto__ = self__.buf;
              if (cljs.core.truth_(and__4323__auto__)) {
                return cljs.core.count.call(null, self__.buf) > 0;
              } else {
                return and__4323__auto__;
              }
            }();
            var val = cljs.core.truth_(has_val) ? cljs.core.async.impl.protocols.remove_BANG_.call(null, self__.buf) : null;
            return cljs.core.async.impl.channels.box.call(null, val);
          } else {
            return null;
          }
        } else {
          if (self__.dirty_takes > cljs.core.async.impl.channels.MAX_DIRTY) {
            self__.dirty_takes = 0;
            self__.takes.cleanup(cljs.core.async.impl.protocols.active_QMARK_);
          } else {
            self__.dirty_takes = self__.dirty_takes + 1;
          }
          if (self__.takes.length < cljs.core.async.impl.protocols.MAX_QUEUE_SIZE) {
          } else {
            throw new Error([cljs.core.str("Assert failed: "), cljs.core.str([cljs.core.str("No more than "), cljs.core.str(cljs.core.async.impl.protocols.MAX_QUEUE_SIZE), cljs.core.str(" pending takes are allowed on a single channel.")].join("")), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "\x3c", "\x3c", 993667236, null), cljs.core.list(new cljs.core.Symbol(null, ".-length", ".-length", -280799999, null), new cljs.core.Symbol(null, "takes", 
            "takes", 298247964, null)), new cljs.core.Symbol("impl", "MAX-QUEUE-SIZE", "impl/MAX-QUEUE-SIZE", 1508600732, null))))].join(""));
          }
          self__.takes.unbounded_unshift(handler);
          return null;
        }
      }
    }
  }
};
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$WritePort$ = true;
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3 = function(this$, val, handler) {
  var self__ = this;
  var this$__$1 = this;
  if (!(val == null)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("Can't put nil in on a channel"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "not", "not", 1044554643, null), cljs.core.list(new cljs.core.Symbol(null, "nil?", "nil?", 1612038930, null), new cljs.core.Symbol(null, "val", "val", 1769233139, null)))))].join(""));
  }
  var closed__$1 = self__.closed;
  if (closed__$1 || !cljs.core.async.impl.protocols.active_QMARK_.call(null, handler)) {
    return cljs.core.async.impl.channels.box.call(null, !closed__$1);
  } else {
    if (cljs.core.truth_(function() {
      var and__4323__auto__ = self__.buf;
      if (cljs.core.truth_(and__4323__auto__)) {
        return cljs.core.not.call(null, cljs.core.async.impl.protocols.full_QMARK_.call(null, self__.buf));
      } else {
        return and__4323__auto__;
      }
    }())) {
      cljs.core.async.impl.protocols.commit.call(null, handler);
      var done_QMARK_ = cljs.core.reduced_QMARK_.call(null, self__.add_BANG_.call(null, self__.buf, val));
      while (true) {
        if (self__.takes.length > 0 && cljs.core.count.call(null, self__.buf) > 0) {
          var taker_15243 = self__.takes.pop();
          if (cljs.core.async.impl.protocols.active_QMARK_.call(null, taker_15243)) {
            var take_cb_15244 = cljs.core.async.impl.protocols.commit.call(null, taker_15243);
            var val_15245__$1 = cljs.core.async.impl.protocols.remove_BANG_.call(null, self__.buf);
            cljs.core.async.impl.dispatch.run.call(null, function(take_cb_15244, val_15245__$1, taker_15243, done_QMARK_, closed__$1, this$__$1) {
              return function() {
                return take_cb_15244.call(null, val_15245__$1);
              };
            }(take_cb_15244, val_15245__$1, taker_15243, done_QMARK_, closed__$1, this$__$1));
          } else {
            continue;
          }
        } else {
        }
        break;
      }
      if (done_QMARK_) {
        cljs.core.async.impl.channels.abort.call(null, this$__$1);
      } else {
      }
      return cljs.core.async.impl.channels.box.call(null, true);
    } else {
      var taker = function() {
        while (true) {
          var taker = self__.takes.pop();
          if (cljs.core.truth_(taker)) {
            if (cljs.core.truth_(cljs.core.async.impl.protocols.active_QMARK_.call(null, taker))) {
              return taker;
            } else {
              continue;
            }
          } else {
            return null;
          }
          break;
        }
      }();
      if (cljs.core.truth_(taker)) {
        var take_cb = cljs.core.async.impl.protocols.commit.call(null, taker);
        cljs.core.async.impl.protocols.commit.call(null, handler);
        cljs.core.async.impl.dispatch.run.call(null, function(take_cb, taker, closed__$1, this$__$1) {
          return function() {
            return take_cb.call(null, val);
          };
        }(take_cb, taker, closed__$1, this$__$1));
        return cljs.core.async.impl.channels.box.call(null, true);
      } else {
        if (self__.dirty_puts > cljs.core.async.impl.channels.MAX_DIRTY) {
          self__.dirty_puts = 0;
          self__.puts.cleanup(cljs.core.async.impl.channels.put_active_QMARK_);
        } else {
          self__.dirty_puts = self__.dirty_puts + 1;
        }
        if (self__.puts.length < cljs.core.async.impl.protocols.MAX_QUEUE_SIZE) {
        } else {
          throw new Error([cljs.core.str("Assert failed: "), cljs.core.str([cljs.core.str("No more than "), cljs.core.str(cljs.core.async.impl.protocols.MAX_QUEUE_SIZE), cljs.core.str(" pending puts are allowed on a single channel."), cljs.core.str(" Consider using a windowed buffer.")].join("")), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "\x3c", "\x3c", 993667236, null), cljs.core.list(new cljs.core.Symbol(null, ".-length", ".-length", 
          -280799999, null), new cljs.core.Symbol(null, "puts", "puts", -1883877054, null)), new cljs.core.Symbol("impl", "MAX-QUEUE-SIZE", "impl/MAX-QUEUE-SIZE", 1508600732, null))))].join(""));
        }
        self__.puts.unbounded_unshift(new cljs.core.async.impl.channels.PutBox(handler, val));
        return null;
      }
    }
  }
};
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$channels$MMC$ = true;
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$channels$MMC$abort$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  while (true) {
    var putter_15246 = self__.puts.pop();
    if (putter_15246 == null) {
    } else {
      var put_handler_15247 = putter_15246.handler;
      var val_15248 = putter_15246.val;
      if (cljs.core.async.impl.protocols.active_QMARK_.call(null, put_handler_15247)) {
        var put_cb_15249 = cljs.core.async.impl.protocols.commit.call(null, put_handler_15247);
        cljs.core.async.impl.dispatch.run.call(null, function(put_cb_15249, put_handler_15247, val_15248, putter_15246, this$__$1) {
          return function() {
            return put_cb_15249.call(null, true);
          };
        }(put_cb_15249, put_handler_15247, val_15248, putter_15246, this$__$1));
      } else {
        continue;
      }
    }
    break;
  }
  self__.puts.cleanup(cljs.core.constantly.call(null, false));
  return cljs.core.async.impl.protocols.close_BANG_.call(null, this$__$1);
};
cljs.core.async.impl.channels.ManyToManyChannel.cljs$lang$type = true;
cljs.core.async.impl.channels.ManyToManyChannel.cljs$lang$ctorStr = "cljs.core.async.impl.channels/ManyToManyChannel";
cljs.core.async.impl.channels.ManyToManyChannel.cljs$lang$ctorPrWriter = function(this__4914__auto__, writer__4915__auto__, opt__4916__auto__) {
  return cljs.core._write.call(null, writer__4915__auto__, "cljs.core.async.impl.channels/ManyToManyChannel");
};
cljs.core.async.impl.channels.__GT_ManyToManyChannel = function cljs$core$async$impl$channels$__GT_ManyToManyChannel(takes, dirty_takes, puts, dirty_puts, buf, closed, add_BANG_) {
  return new cljs.core.async.impl.channels.ManyToManyChannel(takes, dirty_takes, puts, dirty_puts, buf, closed, add_BANG_);
};
cljs.core.async.impl.channels.ex_handler = function cljs$core$async$impl$channels$ex_handler(ex) {
  console.log(ex);
  return null;
};
cljs.core.async.impl.channels.handle = function cljs$core$async$impl$channels$handle(buf, exh, t) {
  var else$ = function() {
    var or__4335__auto__ = exh;
    if (cljs.core.truth_(or__4335__auto__)) {
      return or__4335__auto__;
    } else {
      return cljs.core.async.impl.channels.ex_handler;
    }
  }().call(null, t);
  if (else$ == null) {
    return buf;
  } else {
    return cljs.core.async.impl.protocols.add_BANG_.call(null, buf, else$);
  }
};
cljs.core.async.impl.channels.chan = function cljs$core$async$impl$channels$chan() {
  var G__15251 = arguments.length;
  switch(G__15251) {
    case 1:
      return cljs.core.async.impl.channels.chan.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.async.impl.channels.chan.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.async.impl.channels.chan.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.async.impl.channels.chan.cljs$core$IFn$_invoke$arity$1 = function(buf) {
  return cljs.core.async.impl.channels.chan.call(null, buf, null);
};
cljs.core.async.impl.channels.chan.cljs$core$IFn$_invoke$arity$2 = function(buf, xform) {
  return cljs.core.async.impl.channels.chan.call(null, buf, xform, null);
};
cljs.core.async.impl.channels.chan.cljs$core$IFn$_invoke$arity$3 = function(buf, xform, exh) {
  return new cljs.core.async.impl.channels.ManyToManyChannel(cljs.core.async.impl.buffers.ring_buffer.call(null, 32), 0, cljs.core.async.impl.buffers.ring_buffer.call(null, 32), 0, buf, false, function() {
    var add_BANG_ = cljs.core.truth_(xform) ? xform.call(null, cljs.core.async.impl.protocols.add_BANG_) : cljs.core.async.impl.protocols.add_BANG_;
    return function(add_BANG_) {
      return function() {
        var G__15255 = null;
        var G__15255__1 = function(buf__$1) {
          try {
            return add_BANG_.call(null, buf__$1);
          } catch (e15252) {
            var t = e15252;
            return cljs.core.async.impl.channels.handle.call(null, buf__$1, exh, t);
          }
        };
        var G__15255__2 = function(buf__$1, val) {
          try {
            return add_BANG_.call(null, buf__$1, val);
          } catch (e15253) {
            var t = e15253;
            return cljs.core.async.impl.channels.handle.call(null, buf__$1, exh, t);
          }
        };
        G__15255 = function(buf__$1, val) {
          switch(arguments.length) {
            case 1:
              return G__15255__1.call(this, buf__$1);
            case 2:
              return G__15255__2.call(this, buf__$1, val);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__15255.cljs$core$IFn$_invoke$arity$1 = G__15255__1;
        G__15255.cljs$core$IFn$_invoke$arity$2 = G__15255__2;
        return G__15255;
      }();
    }(add_BANG_);
  }());
};
cljs.core.async.impl.channels.chan.cljs$lang$maxFixedArity = 3;
goog.provide("cljs.core.async.impl.ioc_helpers");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.protocols");
cljs.core.async.impl.ioc_helpers.FN_IDX = 0;
cljs.core.async.impl.ioc_helpers.STATE_IDX = 1;
cljs.core.async.impl.ioc_helpers.VALUE_IDX = 2;
cljs.core.async.impl.ioc_helpers.BINDINGS_IDX = 3;
cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES = 4;
cljs.core.async.impl.ioc_helpers.CURRENT_EXCEPTION = 5;
cljs.core.async.impl.ioc_helpers.USER_START_IDX = 6;
cljs.core.async.impl.ioc_helpers.aset_object = function cljs$core$async$impl$ioc_helpers$aset_object(arr, idx, o) {
  return arr[idx][o];
};
cljs.core.async.impl.ioc_helpers.aget_object = function cljs$core$async$impl$ioc_helpers$aget_object(arr, idx) {
  return arr[idx];
};
cljs.core.async.impl.ioc_helpers.finished_QMARK_ = function cljs$core$async$impl$ioc_helpers$finished_QMARK_(state_array) {
  return cljs.core.keyword_identical_QMARK_.call(null, state_array[cljs.core.async.impl.ioc_helpers.STATE_IDX], new cljs.core.Keyword(null, "finished", "finished", -1018867731));
};
cljs.core.async.impl.ioc_helpers.fn_handler = function cljs$core$async$impl$ioc_helpers$fn_handler(f) {
  if (typeof cljs.core.async.impl.ioc_helpers.t15160 !== "undefined") {
  } else {
    cljs.core.async.impl.ioc_helpers.t15160 = function(f, fn_handler, meta15161) {
      this.f = f;
      this.fn_handler = fn_handler;
      this.meta15161 = meta15161;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.impl.ioc_helpers.t15160.prototype.cljs$core$async$impl$protocols$Handler$ = true;
    cljs.core.async.impl.ioc_helpers.t15160.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return true;
    };
    cljs.core.async.impl.ioc_helpers.t15160.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return self__.f;
    };
    cljs.core.async.impl.ioc_helpers.t15160.prototype.cljs$core$IMeta$_meta$arity$1 = function(_15162) {
      var self__ = this;
      var _15162__$1 = this;
      return self__.meta15161;
    };
    cljs.core.async.impl.ioc_helpers.t15160.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_15162, meta15161__$1) {
      var self__ = this;
      var _15162__$1 = this;
      return new cljs.core.async.impl.ioc_helpers.t15160(self__.f, self__.fn_handler, meta15161__$1);
    };
    cljs.core.async.impl.ioc_helpers.t15160.cljs$lang$type = true;
    cljs.core.async.impl.ioc_helpers.t15160.cljs$lang$ctorStr = "cljs.core.async.impl.ioc-helpers/t15160";
    cljs.core.async.impl.ioc_helpers.t15160.cljs$lang$ctorPrWriter = function(this__4914__auto__, writer__4915__auto__, opt__4916__auto__) {
      return cljs.core._write.call(null, writer__4915__auto__, "cljs.core.async.impl.ioc-helpers/t15160");
    };
    cljs.core.async.impl.ioc_helpers.__GT_t15160 = function cljs$core$async$impl$ioc_helpers$fn_handler_$___GT_t15160(f__$1, fn_handler__$1, meta15161) {
      return new cljs.core.async.impl.ioc_helpers.t15160(f__$1, fn_handler__$1, meta15161);
    };
  }
  return new cljs.core.async.impl.ioc_helpers.t15160(f, cljs$core$async$impl$ioc_helpers$fn_handler, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.core.async.impl.ioc_helpers.run_state_machine = function cljs$core$async$impl$ioc_helpers$run_state_machine(state) {
  return cljs.core.async.impl.ioc_helpers.aget_object.call(null, state, cljs.core.async.impl.ioc_helpers.FN_IDX).call(null, state);
};
cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped = function cljs$core$async$impl$ioc_helpers$run_state_machine_wrapped(state) {
  try {
    return cljs.core.async.impl.ioc_helpers.run_state_machine.call(null, state);
  } catch (e15164) {
    if (e15164 instanceof Object) {
      var ex = e15164;
      cljs.core.async.impl.protocols.close_BANG_.call(null, cljs.core.async.impl.ioc_helpers.aget_object.call(null, state, cljs.core.async.impl.ioc_helpers.USER_START_IDX));
      throw ex;
    } else {
      throw e15164;
    }
  }
};
cljs.core.async.impl.ioc_helpers.take_BANG_ = function cljs$core$async$impl$ioc_helpers$take_BANG_(state, blk, c) {
  var temp__4124__auto__ = cljs.core.async.impl.protocols.take_BANG_.call(null, c, cljs.core.async.impl.ioc_helpers.fn_handler.call(null, function(x) {
    var statearr_15167_15169 = state;
    statearr_15167_15169[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = x;
    statearr_15167_15169[cljs.core.async.impl.ioc_helpers.STATE_IDX] = blk;
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state);
  }));
  if (cljs.core.truth_(temp__4124__auto__)) {
    var cb = temp__4124__auto__;
    var statearr_15168_15170 = state;
    statearr_15168_15170[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = cljs.core.deref.call(null, cb);
    statearr_15168_15170[cljs.core.async.impl.ioc_helpers.STATE_IDX] = blk;
    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
  } else {
    return null;
  }
};
cljs.core.async.impl.ioc_helpers.put_BANG_ = function cljs$core$async$impl$ioc_helpers$put_BANG_(state, blk, c, val) {
  var temp__4124__auto__ = cljs.core.async.impl.protocols.put_BANG_.call(null, c, val, cljs.core.async.impl.ioc_helpers.fn_handler.call(null, function(ret_val) {
    var statearr_15173_15175 = state;
    statearr_15173_15175[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = ret_val;
    statearr_15173_15175[cljs.core.async.impl.ioc_helpers.STATE_IDX] = blk;
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state);
  }));
  if (cljs.core.truth_(temp__4124__auto__)) {
    var cb = temp__4124__auto__;
    var statearr_15174_15176 = state;
    statearr_15174_15176[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = cljs.core.deref.call(null, cb);
    statearr_15174_15176[cljs.core.async.impl.ioc_helpers.STATE_IDX] = blk;
    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
  } else {
    return null;
  }
};
cljs.core.async.impl.ioc_helpers.return_chan = function cljs$core$async$impl$ioc_helpers$return_chan(state, value) {
  var c = state[cljs.core.async.impl.ioc_helpers.USER_START_IDX];
  if (value == null) {
  } else {
    cljs.core.async.impl.protocols.put_BANG_.call(null, c, value, cljs.core.async.impl.ioc_helpers.fn_handler.call(null, function(c) {
      return function() {
        return null;
      };
    }(c)));
  }
  cljs.core.async.impl.protocols.close_BANG_.call(null, c);
  return c;
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame = function(catch_block, catch_exception, finally_block, continue_block, prev, __meta, __extmap, __hash) {
  this.catch_block = catch_block;
  this.catch_exception = catch_exception;
  this.finally_block = finally_block;
  this.continue_block = continue_block;
  this.prev = prev;
  this.__meta = __meta;
  this.__extmap = __extmap;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 2229667594;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this__4930__auto__, k__4931__auto__) {
  var self__ = this;
  var this__4930__auto____$1 = this;
  return cljs.core._lookup.call(null, this__4930__auto____$1, k__4931__auto__, null);
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this__4932__auto__, k15178, else__4933__auto__) {
  var self__ = this;
  var this__4932__auto____$1 = this;
  var G__15180 = k15178 instanceof cljs.core.Keyword ? k15178.fqn : null;
  switch(G__15180) {
    case "prev":
      return self__.prev;
      break;
    case "continue-block":
      return self__.continue_block;
      break;
    case "finally-block":
      return self__.finally_block;
      break;
    case "catch-exception":
      return self__.catch_exception;
      break;
    case "catch-block":
      return self__.catch_block;
      break;
    default:
      return cljs.core.get.call(null, self__.__extmap, k15178, else__4933__auto__);
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this__4944__auto__, writer__4945__auto__, opts__4946__auto__) {
  var self__ = this;
  var this__4944__auto____$1 = this;
  var pr_pair__4947__auto__ = function(this__4944__auto____$1) {
    return function(keyval__4948__auto__) {
      return cljs.core.pr_sequential_writer.call(null, writer__4945__auto__, cljs.core.pr_writer, "", " ", "", opts__4946__auto__, keyval__4948__auto__);
    };
  }(this__4944__auto____$1);
  return cljs.core.pr_sequential_writer.call(null, writer__4945__auto__, pr_pair__4947__auto__, "#cljs.core.async.impl.ioc-helpers.ExceptionFrame{", ", ", "}", opts__4946__auto__, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "catch-block", "catch-block", 1175212748), self__.catch_block], null), new cljs.core.PersistentVector(null, 
  2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "catch-exception", "catch-exception", -1997306795), self__.catch_exception], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472), self__.finally_block], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "continue-block", "continue-block", -1852047850), 
  self__.continue_block], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "prev", "prev", -1597069226), self__.prev], null)], null), self__.__extmap));
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IMeta$_meta$arity$1 = function(this__4928__auto__) {
  var self__ = this;
  var this__4928__auto____$1 = this;
  return self__.__meta;
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$ICloneable$_clone$arity$1 = function(this__4924__auto__) {
  var self__ = this;
  var this__4924__auto____$1 = this;
  return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, self__.finally_block, self__.continue_block, self__.prev, self__.__meta, self__.__extmap, self__.__hash);
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$ICounted$_count$arity$1 = function(this__4934__auto__) {
  var self__ = this;
  var this__4934__auto____$1 = this;
  return 5 + cljs.core.count.call(null, self__.__extmap);
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IHash$_hash$arity$1 = function(this__4925__auto__) {
  var self__ = this;
  var this__4925__auto____$1 = this;
  var h__4751__auto__ = self__.__hash;
  if (!(h__4751__auto__ == null)) {
    return h__4751__auto__;
  } else {
    var h__4751__auto____$1 = cljs.core.hash_imap.call(null, this__4925__auto____$1);
    self__.__hash = h__4751__auto____$1;
    return h__4751__auto____$1;
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this__4926__auto__, other__4927__auto__) {
  var self__ = this;
  var this__4926__auto____$1 = this;
  if (cljs.core.truth_(function() {
    var and__4323__auto__ = other__4927__auto__;
    if (cljs.core.truth_(and__4323__auto__)) {
      var and__4323__auto____$1 = this__4926__auto____$1.constructor === other__4927__auto__.constructor;
      if (and__4323__auto____$1) {
        return cljs.core.equiv_map.call(null, this__4926__auto____$1, other__4927__auto__);
      } else {
        return and__4323__auto____$1;
      }
    } else {
      return and__4323__auto__;
    }
  }())) {
    return true;
  } else {
    return false;
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IMap$_dissoc$arity$2 = function(this__4939__auto__, k__4940__auto__) {
  var self__ = this;
  var this__4939__auto____$1 = this;
  if (cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472), null, new cljs.core.Keyword(null, "catch-block", "catch-block", 1175212748), null, new cljs.core.Keyword(null, "catch-exception", "catch-exception", -1997306795), null, new cljs.core.Keyword(null, "prev", "prev", -1597069226), null, new cljs.core.Keyword(null, "continue-block", "continue-block", -1852047850), 
  null], null), null), k__4940__auto__)) {
    return cljs.core.dissoc.call(null, cljs.core.with_meta.call(null, cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, this__4939__auto____$1), self__.__meta), k__4940__auto__);
  } else {
    return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, self__.finally_block, self__.continue_block, self__.prev, self__.__meta, cljs.core.not_empty.call(null, cljs.core.dissoc.call(null, self__.__extmap, k__4940__auto__)), null);
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(this__4937__auto__, k__4938__auto__, G__15177) {
  var self__ = this;
  var this__4937__auto____$1 = this;
  var pred__15181 = cljs.core.keyword_identical_QMARK_;
  var expr__15182 = k__4938__auto__;
  if (cljs.core.truth_(pred__15181.call(null, new cljs.core.Keyword(null, "catch-block", "catch-block", 1175212748), expr__15182))) {
    return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(G__15177, self__.catch_exception, self__.finally_block, self__.continue_block, self__.prev, self__.__meta, self__.__extmap, null);
  } else {
    if (cljs.core.truth_(pred__15181.call(null, new cljs.core.Keyword(null, "catch-exception", "catch-exception", -1997306795), expr__15182))) {
      return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, G__15177, self__.finally_block, self__.continue_block, self__.prev, self__.__meta, self__.__extmap, null);
    } else {
      if (cljs.core.truth_(pred__15181.call(null, new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472), expr__15182))) {
        return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, G__15177, self__.continue_block, self__.prev, self__.__meta, self__.__extmap, null);
      } else {
        if (cljs.core.truth_(pred__15181.call(null, new cljs.core.Keyword(null, "continue-block", "continue-block", -1852047850), expr__15182))) {
          return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, self__.finally_block, G__15177, self__.prev, self__.__meta, self__.__extmap, null);
        } else {
          if (cljs.core.truth_(pred__15181.call(null, new cljs.core.Keyword(null, "prev", "prev", -1597069226), expr__15182))) {
            return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, self__.finally_block, self__.continue_block, G__15177, self__.__meta, self__.__extmap, null);
          } else {
            return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, self__.finally_block, self__.continue_block, self__.prev, self__.__meta, cljs.core.assoc.call(null, self__.__extmap, k__4938__auto__, G__15177), null);
          }
        }
      }
    }
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this__4942__auto__) {
  var self__ = this;
  var this__4942__auto____$1 = this;
  return cljs.core.seq.call(null, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "catch-block", "catch-block", 1175212748), self__.catch_block], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "catch-exception", "catch-exception", -1997306795), self__.catch_exception], 
  null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472), self__.finally_block], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "continue-block", "continue-block", -1852047850), self__.continue_block], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "prev", 
  "prev", -1597069226), self__.prev], null)], null), self__.__extmap));
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this__4929__auto__, G__15177) {
  var self__ = this;
  var this__4929__auto____$1 = this;
  return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, self__.finally_block, self__.continue_block, self__.prev, G__15177, self__.__extmap, self__.__hash);
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$ICollection$_conj$arity$2 = function(this__4935__auto__, entry__4936__auto__) {
  var self__ = this;
  var this__4935__auto____$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry__4936__auto__)) {
    return cljs.core._assoc.call(null, this__4935__auto____$1, cljs.core._nth.call(null, entry__4936__auto__, 0), cljs.core._nth.call(null, entry__4936__auto__, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, this__4935__auto____$1, entry__4936__auto__);
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.cljs$lang$type = true;
cljs.core.async.impl.ioc_helpers.ExceptionFrame.cljs$lang$ctorPrSeq = function(this__4964__auto__) {
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, "cljs.core.async.impl.ioc-helpers/ExceptionFrame");
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.cljs$lang$ctorPrWriter = function(this__4964__auto__, writer__4965__auto__) {
  return cljs.core._write.call(null, writer__4965__auto__, "cljs.core.async.impl.ioc-helpers/ExceptionFrame");
};
cljs.core.async.impl.ioc_helpers.__GT_ExceptionFrame = function cljs$core$async$impl$ioc_helpers$__GT_ExceptionFrame(catch_block, catch_exception, finally_block, continue_block, prev) {
  return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(catch_block, catch_exception, finally_block, continue_block, prev, null, null, null);
};
cljs.core.async.impl.ioc_helpers.map__GT_ExceptionFrame = function cljs$core$async$impl$ioc_helpers$map__GT_ExceptionFrame(G__15179) {
  return new cljs.core.async.impl.ioc_helpers.ExceptionFrame((new cljs.core.Keyword(null, "catch-block", "catch-block", 1175212748)).cljs$core$IFn$_invoke$arity$1(G__15179), (new cljs.core.Keyword(null, "catch-exception", "catch-exception", -1997306795)).cljs$core$IFn$_invoke$arity$1(G__15179), (new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472)).cljs$core$IFn$_invoke$arity$1(G__15179), (new cljs.core.Keyword(null, "continue-block", "continue-block", -1852047850)).cljs$core$IFn$_invoke$arity$1(G__15179), 
  (new cljs.core.Keyword(null, "prev", "prev", -1597069226)).cljs$core$IFn$_invoke$arity$1(G__15179), null, cljs.core.dissoc.call(null, G__15179, new cljs.core.Keyword(null, "catch-block", "catch-block", 1175212748), new cljs.core.Keyword(null, "catch-exception", "catch-exception", -1997306795), new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472), new cljs.core.Keyword(null, "continue-block", "continue-block", -1852047850), new cljs.core.Keyword(null, "prev", "prev", -1597069226)), 
  null);
};
cljs.core.async.impl.ioc_helpers.add_exception_frame = function cljs$core$async$impl$ioc_helpers$add_exception_frame(state, catch_block, catch_exception, finally_block, continue_block) {
  var statearr_15186 = state;
  statearr_15186[cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES] = cljs.core.async.impl.ioc_helpers.__GT_ExceptionFrame.call(null, catch_block, catch_exception, finally_block, continue_block, cljs.core.async.impl.ioc_helpers.aget_object.call(null, state, cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES));
  return statearr_15186;
};
cljs.core.async.impl.ioc_helpers.process_exception = function cljs$core$async$impl$ioc_helpers$process_exception(state) {
  while (true) {
    var exception_frame = cljs.core.async.impl.ioc_helpers.aget_object.call(null, state, cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES);
    var catch_block = (new cljs.core.Keyword(null, "catch-block", "catch-block", 1175212748)).cljs$core$IFn$_invoke$arity$1(exception_frame);
    var catch_exception = (new cljs.core.Keyword(null, "catch-exception", "catch-exception", -1997306795)).cljs$core$IFn$_invoke$arity$1(exception_frame);
    var exception = cljs.core.async.impl.ioc_helpers.aget_object.call(null, state, cljs.core.async.impl.ioc_helpers.CURRENT_EXCEPTION);
    if (cljs.core.truth_(function() {
      var and__4323__auto__ = exception;
      if (cljs.core.truth_(and__4323__auto__)) {
        return cljs.core.not.call(null, exception_frame);
      } else {
        return and__4323__auto__;
      }
    }())) {
      throw exception;
    } else {
      if (cljs.core.truth_(function() {
        var and__4323__auto__ = exception;
        if (cljs.core.truth_(and__4323__auto__)) {
          var and__4323__auto____$1 = catch_block;
          if (cljs.core.truth_(and__4323__auto____$1)) {
            return exception instanceof catch_exception;
          } else {
            return and__4323__auto____$1;
          }
        } else {
          return and__4323__auto__;
        }
      }())) {
        var statearr_15192 = state;
        statearr_15192[cljs.core.async.impl.ioc_helpers.STATE_IDX] = catch_block;
        statearr_15192[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = exception;
        statearr_15192[cljs.core.async.impl.ioc_helpers.CURRENT_EXCEPTION] = null;
        statearr_15192[cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES] = cljs.core.assoc.call(null, exception_frame, new cljs.core.Keyword(null, "catch-block", "catch-block", 1175212748), null, new cljs.core.Keyword(null, "catch-exception", "catch-exception", -1997306795), null);
        return statearr_15192;
      } else {
        if (cljs.core.truth_(function() {
          var and__4323__auto__ = exception;
          if (cljs.core.truth_(and__4323__auto__)) {
            return cljs.core.not.call(null, catch_block) && cljs.core.not.call(null, (new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472)).cljs$core$IFn$_invoke$arity$1(exception_frame));
          } else {
            return and__4323__auto__;
          }
        }())) {
          var statearr_15193_15197 = state;
          statearr_15193_15197[cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES] = (new cljs.core.Keyword(null, "prev", "prev", -1597069226)).cljs$core$IFn$_invoke$arity$1(exception_frame);
          var G__15198 = state;
          state = G__15198;
          continue;
        } else {
          if (cljs.core.truth_(function() {
            var and__4323__auto__ = exception;
            if (cljs.core.truth_(and__4323__auto__)) {
              var and__4323__auto____$1 = cljs.core.not.call(null, catch_block);
              if (and__4323__auto____$1) {
                return(new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472)).cljs$core$IFn$_invoke$arity$1(exception_frame);
              } else {
                return and__4323__auto____$1;
              }
            } else {
              return and__4323__auto__;
            }
          }())) {
            var statearr_15194 = state;
            statearr_15194[cljs.core.async.impl.ioc_helpers.STATE_IDX] = (new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472)).cljs$core$IFn$_invoke$arity$1(exception_frame);
            statearr_15194[cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES] = cljs.core.assoc.call(null, exception_frame, new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472), null);
            return statearr_15194;
          } else {
            if (cljs.core.truth_(function() {
              var and__4323__auto__ = cljs.core.not.call(null, exception);
              if (and__4323__auto__) {
                return(new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472)).cljs$core$IFn$_invoke$arity$1(exception_frame);
              } else {
                return and__4323__auto__;
              }
            }())) {
              var statearr_15195 = state;
              statearr_15195[cljs.core.async.impl.ioc_helpers.STATE_IDX] = (new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472)).cljs$core$IFn$_invoke$arity$1(exception_frame);
              statearr_15195[cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES] = cljs.core.assoc.call(null, exception_frame, new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472), null);
              return statearr_15195;
            } else {
              if (cljs.core.not.call(null, exception) && cljs.core.not.call(null, (new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472)).cljs$core$IFn$_invoke$arity$1(exception_frame))) {
                var statearr_15196 = state;
                statearr_15196[cljs.core.async.impl.ioc_helpers.STATE_IDX] = (new cljs.core.Keyword(null, "continue-block", "continue-block", -1852047850)).cljs$core$IFn$_invoke$arity$1(exception_frame);
                statearr_15196[cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES] = (new cljs.core.Keyword(null, "prev", "prev", -1597069226)).cljs$core$IFn$_invoke$arity$1(exception_frame);
                return statearr_15196;
              } else {
                throw new Error("No matching clause");
              }
            }
          }
        }
      }
    }
    break;
  }
};
goog.provide("cljs.core.async.impl.timers");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.channels");
goog.require("cljs.core.async.impl.protocols");
cljs.core.async.impl.timers.MAX_LEVEL = 15;
cljs.core.async.impl.timers.P = 1 / 2;
cljs.core.async.impl.timers.random_level = function cljs$core$async$impl$timers$random_level() {
  var G__15123 = arguments.length;
  switch(G__15123) {
    case 0:
      return cljs.core.async.impl.timers.random_level.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.async.impl.timers.random_level.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.async.impl.timers.random_level.cljs$core$IFn$_invoke$arity$0 = function() {
  return cljs.core.async.impl.timers.random_level.call(null, 0);
};
cljs.core.async.impl.timers.random_level.cljs$core$IFn$_invoke$arity$1 = function(level) {
  while (true) {
    if (Math.random() < cljs.core.async.impl.timers.P && level < cljs.core.async.impl.timers.MAX_LEVEL) {
      var G__15125 = level + 1;
      level = G__15125;
      continue;
    } else {
      return level;
    }
    break;
  }
};
cljs.core.async.impl.timers.random_level.cljs$lang$maxFixedArity = 1;
cljs.core.async.impl.timers.SkipListNode = function(key, val, forward) {
  this.key = key;
  this.val = val;
  this.forward = forward;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2155872256;
};
cljs.core.async.impl.timers.SkipListNode.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.async.impl.timers.SkipListNode.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, self__.val), self__.key);
};
cljs.core.async.impl.timers.SkipListNode.cljs$lang$type = true;
cljs.core.async.impl.timers.SkipListNode.cljs$lang$ctorStr = "cljs.core.async.impl.timers/SkipListNode";
cljs.core.async.impl.timers.SkipListNode.cljs$lang$ctorPrWriter = function(this__4914__auto__, writer__4915__auto__, opt__4916__auto__) {
  return cljs.core._write.call(null, writer__4915__auto__, "cljs.core.async.impl.timers/SkipListNode");
};
cljs.core.async.impl.timers.__GT_SkipListNode = function cljs$core$async$impl$timers$__GT_SkipListNode(key, val, forward) {
  return new cljs.core.async.impl.timers.SkipListNode(key, val, forward);
};
cljs.core.async.impl.timers.skip_list_node = function cljs$core$async$impl$timers$skip_list_node() {
  var G__15127 = arguments.length;
  switch(G__15127) {
    case 1:
      return cljs.core.async.impl.timers.skip_list_node.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 3:
      return cljs.core.async.impl.timers.skip_list_node.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.async.impl.timers.skip_list_node.cljs$core$IFn$_invoke$arity$1 = function(level) {
  return cljs.core.async.impl.timers.skip_list_node.call(null, null, null, level);
};
cljs.core.async.impl.timers.skip_list_node.cljs$core$IFn$_invoke$arity$3 = function(k, v, level) {
  var arr = new Array(level + 1);
  var i_15129 = 0;
  while (true) {
    if (i_15129 < arr.length) {
      arr[i_15129] = null;
      var G__15130 = i_15129 + 1;
      i_15129 = G__15130;
      continue;
    } else {
    }
    break;
  }
  return new cljs.core.async.impl.timers.SkipListNode(k, v, arr);
};
cljs.core.async.impl.timers.skip_list_node.cljs$lang$maxFixedArity = 3;
cljs.core.async.impl.timers.least_greater_node = function cljs$core$async$impl$timers$least_greater_node() {
  var G__15132 = arguments.length;
  switch(G__15132) {
    case 3:
      return cljs.core.async.impl.timers.least_greater_node.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.async.impl.timers.least_greater_node.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.async.impl.timers.least_greater_node.cljs$core$IFn$_invoke$arity$3 = function(x, k, level) {
  return cljs.core.async.impl.timers.least_greater_node.call(null, x, k, level, null);
};
cljs.core.async.impl.timers.least_greater_node.cljs$core$IFn$_invoke$arity$4 = function(x, k, level, update) {
  while (true) {
    if (!(level < 0)) {
      var x__$1 = function() {
        var x__$1 = x;
        while (true) {
          var temp__4124__auto__ = x__$1.forward[level];
          if (cljs.core.truth_(temp__4124__auto__)) {
            var x_SINGLEQUOTE_ = temp__4124__auto__;
            if (x_SINGLEQUOTE_.key < k) {
              var G__15134 = x_SINGLEQUOTE_;
              x__$1 = G__15134;
              continue;
            } else {
              return x__$1;
            }
          } else {
            return x__$1;
          }
          break;
        }
      }();
      if (update == null) {
      } else {
        update[level] = x__$1;
      }
      var G__15135 = x__$1;
      var G__15136 = k;
      var G__15137 = level - 1;
      var G__15138 = update;
      x = G__15135;
      k = G__15136;
      level = G__15137;
      update = G__15138;
      continue;
    } else {
      return x;
    }
    break;
  }
};
cljs.core.async.impl.timers.least_greater_node.cljs$lang$maxFixedArity = 4;
cljs.core.async.impl.timers.SkipList = function(header, level) {
  this.header = header;
  this.level = level;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2155872256;
};
cljs.core.async.impl.timers.SkipList.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var self__ = this;
  var coll__$1 = this;
  var pr_pair = function(coll__$1) {
    return function(keyval) {
      return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "", " ", "", opts, keyval);
    };
  }(coll__$1);
  return cljs.core.pr_sequential_writer.call(null, writer, pr_pair, "{", ", ", "}", opts, coll__$1);
};
cljs.core.async.impl.timers.SkipList.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var iter = function(coll__$1) {
    return function cljs$core$async$impl$timers$iter(node) {
      return new cljs.core.LazySeq(null, function(coll__$1) {
        return function() {
          if (node == null) {
            return null;
          } else {
            return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [node.key, node.val], null), cljs$core$async$impl$timers$iter.call(null, node.forward[0]));
          }
        };
      }(coll__$1), null, null);
    };
  }(coll__$1);
  return iter.call(null, self__.header.forward[0]);
};
cljs.core.async.impl.timers.SkipList.prototype.put = function(k, v) {
  var self__ = this;
  var coll = this;
  var update = new Array(cljs.core.async.impl.timers.MAX_LEVEL);
  var x = cljs.core.async.impl.timers.least_greater_node.call(null, self__.header, k, self__.level, update);
  var x__$1 = x.forward[0];
  if (!(x__$1 == null) && x__$1.key === k) {
    return x__$1.val = v;
  } else {
    var new_level = cljs.core.async.impl.timers.random_level.call(null);
    if (new_level > self__.level) {
      var i_15139 = self__.level + 1;
      while (true) {
        if (i_15139 <= new_level + 1) {
          update[i_15139] = self__.header;
          var G__15140 = i_15139 + 1;
          i_15139 = G__15140;
          continue;
        } else {
        }
        break;
      }
      self__.level = new_level;
    } else {
    }
    var x__$2 = cljs.core.async.impl.timers.skip_list_node.call(null, k, v, new Array(new_level));
    var i = 0;
    while (true) {
      if (i <= self__.level) {
        var links = update[i].forward;
        x__$2.forward[i] = links[i];
        return links[i] = x__$2;
      } else {
        return null;
      }
      break;
    }
  }
};
cljs.core.async.impl.timers.SkipList.prototype.remove = function(k) {
  var self__ = this;
  var coll = this;
  var update = new Array(cljs.core.async.impl.timers.MAX_LEVEL);
  var x = cljs.core.async.impl.timers.least_greater_node.call(null, self__.header, k, self__.level, update);
  var x__$1 = x.forward[0];
  if (!(x__$1 == null) && x__$1.key === k) {
    var i_15141 = 0;
    while (true) {
      if (i_15141 <= self__.level) {
        var links_15142 = update[i_15141].forward;
        if (links_15142[i_15141] === x__$1) {
          links_15142[i_15141] = x__$1.forward[i_15141];
          var G__15143 = i_15141 + 1;
          i_15141 = G__15143;
          continue;
        } else {
          var G__15144 = i_15141 + 1;
          i_15141 = G__15144;
          continue;
        }
      } else {
      }
      break;
    }
    while (true) {
      if (self__.level > 0 && self__.header.forward[self__.level] == null) {
        self__.level = self__.level - 1;
        continue;
      } else {
        return null;
      }
      break;
    }
  } else {
    return null;
  }
};
cljs.core.async.impl.timers.SkipList.prototype.ceilingEntry = function(k) {
  var self__ = this;
  var coll = this;
  var x = self__.header;
  var level__$1 = self__.level;
  while (true) {
    if (!(level__$1 < 0)) {
      var nx = function() {
        var x__$1 = x;
        while (true) {
          var x_SINGLEQUOTE_ = x__$1.forward[level__$1];
          if (x_SINGLEQUOTE_ == null) {
            return null;
          } else {
            if (x_SINGLEQUOTE_.key >= k) {
              return x_SINGLEQUOTE_;
            } else {
              var G__15145 = x_SINGLEQUOTE_;
              x__$1 = G__15145;
              continue;
            }
          }
          break;
        }
      }();
      if (!(nx == null)) {
        var G__15146 = nx;
        var G__15147 = level__$1 - 1;
        x = G__15146;
        level__$1 = G__15147;
        continue;
      } else {
        var G__15148 = x;
        var G__15149 = level__$1 - 1;
        x = G__15148;
        level__$1 = G__15149;
        continue;
      }
    } else {
      if (x === self__.header) {
        return null;
      } else {
        return x;
      }
    }
    break;
  }
};
cljs.core.async.impl.timers.SkipList.prototype.floorEntry = function(k) {
  var self__ = this;
  var coll = this;
  var x = self__.header;
  var level__$1 = self__.level;
  while (true) {
    if (!(level__$1 < 0)) {
      var nx = function() {
        var x__$1 = x;
        while (true) {
          var x_SINGLEQUOTE_ = x__$1.forward[level__$1];
          if (!(x_SINGLEQUOTE_ == null)) {
            if (x_SINGLEQUOTE_.key > k) {
              return x__$1;
            } else {
              var G__15150 = x_SINGLEQUOTE_;
              x__$1 = G__15150;
              continue;
            }
          } else {
            if (level__$1 === 0) {
              return x__$1;
            } else {
              return null;
            }
          }
          break;
        }
      }();
      if (cljs.core.truth_(nx)) {
        var G__15151 = nx;
        var G__15152 = level__$1 - 1;
        x = G__15151;
        level__$1 = G__15152;
        continue;
      } else {
        var G__15153 = x;
        var G__15154 = level__$1 - 1;
        x = G__15153;
        level__$1 = G__15154;
        continue;
      }
    } else {
      if (x === self__.header) {
        return null;
      } else {
        return x;
      }
    }
    break;
  }
};
cljs.core.async.impl.timers.SkipList.cljs$lang$type = true;
cljs.core.async.impl.timers.SkipList.cljs$lang$ctorStr = "cljs.core.async.impl.timers/SkipList";
cljs.core.async.impl.timers.SkipList.cljs$lang$ctorPrWriter = function(this__4914__auto__, writer__4915__auto__, opt__4916__auto__) {
  return cljs.core._write.call(null, writer__4915__auto__, "cljs.core.async.impl.timers/SkipList");
};
cljs.core.async.impl.timers.__GT_SkipList = function cljs$core$async$impl$timers$__GT_SkipList(header, level) {
  return new cljs.core.async.impl.timers.SkipList(header, level);
};
cljs.core.async.impl.timers.skip_list = function cljs$core$async$impl$timers$skip_list() {
  return new cljs.core.async.impl.timers.SkipList(cljs.core.async.impl.timers.skip_list_node.call(null, 0), 0);
};
cljs.core.async.impl.timers.timeouts_map = cljs.core.async.impl.timers.skip_list.call(null);
cljs.core.async.impl.timers.TIMEOUT_RESOLUTION_MS = 10;
cljs.core.async.impl.timers.timeout = function cljs$core$async$impl$timers$timeout(msecs) {
  var timeout__$1 = (new Date).valueOf() + msecs;
  var me = cljs.core.async.impl.timers.timeouts_map.ceilingEntry(timeout__$1);
  var or__4335__auto__ = cljs.core.truth_(function() {
    var and__4323__auto__ = me;
    if (cljs.core.truth_(and__4323__auto__)) {
      return me.key < timeout__$1 + cljs.core.async.impl.timers.TIMEOUT_RESOLUTION_MS;
    } else {
      return and__4323__auto__;
    }
  }()) ? me.val : null;
  if (cljs.core.truth_(or__4335__auto__)) {
    return or__4335__auto__;
  } else {
    var timeout_channel = cljs.core.async.impl.channels.chan.call(null, null);
    cljs.core.async.impl.timers.timeouts_map.put(timeout__$1, timeout_channel);
    cljs.core.async.impl.dispatch.queue_delay.call(null, function(timeout_channel, or__4335__auto__, timeout__$1, me) {
      return function() {
        cljs.core.async.impl.timers.timeouts_map.remove(timeout__$1);
        return cljs.core.async.impl.protocols.close_BANG_.call(null, timeout_channel);
      };
    }(timeout_channel, or__4335__auto__, timeout__$1, me), msecs);
    return timeout_channel;
  }
};
goog.provide("cljs.core.async");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.channels");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.ioc_helpers");
goog.require("cljs.core.async.impl.protocols");
goog.require("cljs.core.async.impl.buffers");
goog.require("cljs.core.async.impl.timers");
cljs.core.async.fn_handler = function cljs$core$async$fn_handler(f) {
  if (typeof cljs.core.async.t12629 !== "undefined") {
  } else {
    cljs.core.async.t12629 = function(f, fn_handler, meta12630) {
      this.f = f;
      this.fn_handler = fn_handler;
      this.meta12630 = meta12630;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.t12629.prototype.cljs$core$async$impl$protocols$Handler$ = true;
    cljs.core.async.t12629.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return true;
    };
    cljs.core.async.t12629.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return self__.f;
    };
    cljs.core.async.t12629.prototype.cljs$core$IMeta$_meta$arity$1 = function(_12631) {
      var self__ = this;
      var _12631__$1 = this;
      return self__.meta12630;
    };
    cljs.core.async.t12629.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_12631, meta12630__$1) {
      var self__ = this;
      var _12631__$1 = this;
      return new cljs.core.async.t12629(self__.f, self__.fn_handler, meta12630__$1);
    };
    cljs.core.async.t12629.cljs$lang$type = true;
    cljs.core.async.t12629.cljs$lang$ctorStr = "cljs.core.async/t12629";
    cljs.core.async.t12629.cljs$lang$ctorPrWriter = function(this__4914__auto__, writer__4915__auto__, opt__4916__auto__) {
      return cljs.core._write.call(null, writer__4915__auto__, "cljs.core.async/t12629");
    };
    cljs.core.async.__GT_t12629 = function cljs$core$async$fn_handler_$___GT_t12629(f__$1, fn_handler__$1, meta12630) {
      return new cljs.core.async.t12629(f__$1, fn_handler__$1, meta12630);
    };
  }
  return new cljs.core.async.t12629(f, cljs$core$async$fn_handler, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.core.async.buffer = function cljs$core$async$buffer(n) {
  return cljs.core.async.impl.buffers.fixed_buffer.call(null, n);
};
cljs.core.async.dropping_buffer = function cljs$core$async$dropping_buffer(n) {
  return cljs.core.async.impl.buffers.dropping_buffer.call(null, n);
};
cljs.core.async.sliding_buffer = function cljs$core$async$sliding_buffer(n) {
  return cljs.core.async.impl.buffers.sliding_buffer.call(null, n);
};
cljs.core.async.unblocking_buffer_QMARK_ = function cljs$core$async$unblocking_buffer_QMARK_(buff) {
  var G__12633 = buff;
  if (G__12633) {
    var bit__5009__auto__ = null;
    if (cljs.core.truth_(function() {
      var or__4335__auto__ = bit__5009__auto__;
      if (cljs.core.truth_(or__4335__auto__)) {
        return or__4335__auto__;
      } else {
        return G__12633.cljs$core$async$impl$protocols$UnblockingBuffer$;
      }
    }())) {
      return true;
    } else {
      if (!G__12633.cljs$lang$protocol_mask$partition$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.async.impl.protocols.UnblockingBuffer, G__12633);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.async.impl.protocols.UnblockingBuffer, G__12633);
  }
};
cljs.core.async.chan = function cljs$core$async$chan() {
  var G__12635 = arguments.length;
  switch(G__12635) {
    case 0:
      return cljs.core.async.chan.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.async.chan.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.async.chan.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.async.chan.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.async.chan.cljs$core$IFn$_invoke$arity$0 = function() {
  return cljs.core.async.chan.call(null, null);
};
cljs.core.async.chan.cljs$core$IFn$_invoke$arity$1 = function(buf_or_n) {
  return cljs.core.async.chan.call(null, buf_or_n, null, null);
};
cljs.core.async.chan.cljs$core$IFn$_invoke$arity$2 = function(buf_or_n, xform) {
  return cljs.core.async.chan.call(null, buf_or_n, xform, null);
};
cljs.core.async.chan.cljs$core$IFn$_invoke$arity$3 = function(buf_or_n, xform, ex_handler) {
  var buf_or_n__$1 = cljs.core._EQ_.call(null, buf_or_n, 0) ? null : buf_or_n;
  if (cljs.core.truth_(xform)) {
    if (cljs.core.truth_(buf_or_n__$1)) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("buffer must be supplied when transducer is"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, new cljs.core.Symbol(null, "buf-or-n", "buf-or-n", -1646815050, null)))].join(""));
    }
  } else {
  }
  return cljs.core.async.impl.channels.chan.call(null, typeof buf_or_n__$1 === "number" ? cljs.core.async.buffer.call(null, buf_or_n__$1) : buf_or_n__$1, xform, ex_handler);
};
cljs.core.async.chan.cljs$lang$maxFixedArity = 3;
cljs.core.async.timeout = function cljs$core$async$timeout(msecs) {
  return cljs.core.async.impl.timers.timeout.call(null, msecs);
};
cljs.core.async._LT__BANG_ = function cljs$core$async$_LT__BANG_(port) {
  throw new Error("\x3c! used not in (go ...) block");
};
cljs.core.async.take_BANG_ = function cljs$core$async$take_BANG_() {
  var G__12638 = arguments.length;
  switch(G__12638) {
    case 2:
      return cljs.core.async.take_BANG_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.async.take_BANG_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.async.take_BANG_.cljs$core$IFn$_invoke$arity$2 = function(port, fn1) {
  return cljs.core.async.take_BANG_.call(null, port, fn1, true);
};
cljs.core.async.take_BANG_.cljs$core$IFn$_invoke$arity$3 = function(port, fn1, on_caller_QMARK_) {
  var ret = cljs.core.async.impl.protocols.take_BANG_.call(null, port, cljs.core.async.fn_handler.call(null, fn1));
  if (cljs.core.truth_(ret)) {
    var val_12640 = cljs.core.deref.call(null, ret);
    if (cljs.core.truth_(on_caller_QMARK_)) {
      fn1.call(null, val_12640);
    } else {
      cljs.core.async.impl.dispatch.run.call(null, function(val_12640, ret) {
        return function() {
          return fn1.call(null, val_12640);
        };
      }(val_12640, ret));
    }
  } else {
  }
  return null;
};
cljs.core.async.take_BANG_.cljs$lang$maxFixedArity = 3;
cljs.core.async.nop = function cljs$core$async$nop(_) {
  return null;
};
cljs.core.async.fhnop = cljs.core.async.fn_handler.call(null, cljs.core.async.nop);
cljs.core.async._GT__BANG_ = function cljs$core$async$_GT__BANG_(port, val) {
  throw new Error("\x3e! used not in (go ...) block");
};
cljs.core.async.put_BANG_ = function cljs$core$async$put_BANG_() {
  var G__12642 = arguments.length;
  switch(G__12642) {
    case 2:
      return cljs.core.async.put_BANG_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.async.put_BANG_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.async.put_BANG_.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.async.put_BANG_.cljs$core$IFn$_invoke$arity$2 = function(port, val) {
  var temp__4124__auto__ = cljs.core.async.impl.protocols.put_BANG_.call(null, port, val, cljs.core.async.fhnop);
  if (cljs.core.truth_(temp__4124__auto__)) {
    var ret = temp__4124__auto__;
    return cljs.core.deref.call(null, ret);
  } else {
    return true;
  }
};
cljs.core.async.put_BANG_.cljs$core$IFn$_invoke$arity$3 = function(port, val, fn1) {
  return cljs.core.async.put_BANG_.call(null, port, val, fn1, true);
};
cljs.core.async.put_BANG_.cljs$core$IFn$_invoke$arity$4 = function(port, val, fn1, on_caller_QMARK_) {
  var temp__4124__auto__ = cljs.core.async.impl.protocols.put_BANG_.call(null, port, val, cljs.core.async.fn_handler.call(null, fn1));
  if (cljs.core.truth_(temp__4124__auto__)) {
    var retb = temp__4124__auto__;
    var ret = cljs.core.deref.call(null, retb);
    if (cljs.core.truth_(on_caller_QMARK_)) {
      fn1.call(null, ret);
    } else {
      cljs.core.async.impl.dispatch.run.call(null, function(ret, retb, temp__4124__auto__) {
        return function() {
          return fn1.call(null, ret);
        };
      }(ret, retb, temp__4124__auto__));
    }
    return ret;
  } else {
    return true;
  }
};
cljs.core.async.put_BANG_.cljs$lang$maxFixedArity = 4;
cljs.core.async.close_BANG_ = function cljs$core$async$close_BANG_(port) {
  return cljs.core.async.impl.protocols.close_BANG_.call(null, port);
};
cljs.core.async.random_array = function cljs$core$async$random_array(n) {
  var a = new Array(n);
  var n__5220__auto___12644 = n;
  var x_12645 = 0;
  while (true) {
    if (x_12645 < n__5220__auto___12644) {
      a[x_12645] = 0;
      var G__12646 = x_12645 + 1;
      x_12645 = G__12646;
      continue;
    } else {
    }
    break;
  }
  var i = 1;
  while (true) {
    if (cljs.core._EQ_.call(null, i, n)) {
      return a;
    } else {
      var j = cljs.core.rand_int.call(null, i);
      a[i] = a[j];
      a[j] = i;
      var G__12647 = i + 1;
      i = G__12647;
      continue;
    }
    break;
  }
};
cljs.core.async.alt_flag = function cljs$core$async$alt_flag() {
  var flag = cljs.core.atom.call(null, true);
  if (typeof cljs.core.async.t12651 !== "undefined") {
  } else {
    cljs.core.async.t12651 = function(flag, alt_flag, meta12652) {
      this.flag = flag;
      this.alt_flag = alt_flag;
      this.meta12652 = meta12652;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.t12651.prototype.cljs$core$async$impl$protocols$Handler$ = true;
    cljs.core.async.t12651.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(flag) {
      return function(_) {
        var self__ = this;
        var ___$1 = this;
        return cljs.core.deref.call(null, self__.flag);
      };
    }(flag);
    cljs.core.async.t12651.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(flag) {
      return function(_) {
        var self__ = this;
        var ___$1 = this;
        cljs.core.reset_BANG_.call(null, self__.flag, null);
        return true;
      };
    }(flag);
    cljs.core.async.t12651.prototype.cljs$core$IMeta$_meta$arity$1 = function(flag) {
      return function(_12653) {
        var self__ = this;
        var _12653__$1 = this;
        return self__.meta12652;
      };
    }(flag);
    cljs.core.async.t12651.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(flag) {
      return function(_12653, meta12652__$1) {
        var self__ = this;
        var _12653__$1 = this;
        return new cljs.core.async.t12651(self__.flag, self__.alt_flag, meta12652__$1);
      };
    }(flag);
    cljs.core.async.t12651.cljs$lang$type = true;
    cljs.core.async.t12651.cljs$lang$ctorStr = "cljs.core.async/t12651";
    cljs.core.async.t12651.cljs$lang$ctorPrWriter = function(flag) {
      return function(this__4914__auto__, writer__4915__auto__, opt__4916__auto__) {
        return cljs.core._write.call(null, writer__4915__auto__, "cljs.core.async/t12651");
      };
    }(flag);
    cljs.core.async.__GT_t12651 = function(flag) {
      return function cljs$core$async$alt_flag_$___GT_t12651(flag__$1, alt_flag__$1, meta12652) {
        return new cljs.core.async.t12651(flag__$1, alt_flag__$1, meta12652);
      };
    }(flag);
  }
  return new cljs.core.async.t12651(flag, cljs$core$async$alt_flag, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.core.async.alt_handler = function cljs$core$async$alt_handler(flag, cb) {
  if (typeof cljs.core.async.t12657 !== "undefined") {
  } else {
    cljs.core.async.t12657 = function(cb, flag, alt_handler, meta12658) {
      this.cb = cb;
      this.flag = flag;
      this.alt_handler = alt_handler;
      this.meta12658 = meta12658;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.t12657.prototype.cljs$core$async$impl$protocols$Handler$ = true;
    cljs.core.async.t12657.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.active_QMARK_.call(null, self__.flag);
    };
    cljs.core.async.t12657.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      cljs.core.async.impl.protocols.commit.call(null, self__.flag);
      return self__.cb;
    };
    cljs.core.async.t12657.prototype.cljs$core$IMeta$_meta$arity$1 = function(_12659) {
      var self__ = this;
      var _12659__$1 = this;
      return self__.meta12658;
    };
    cljs.core.async.t12657.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_12659, meta12658__$1) {
      var self__ = this;
      var _12659__$1 = this;
      return new cljs.core.async.t12657(self__.cb, self__.flag, self__.alt_handler, meta12658__$1);
    };
    cljs.core.async.t12657.cljs$lang$type = true;
    cljs.core.async.t12657.cljs$lang$ctorStr = "cljs.core.async/t12657";
    cljs.core.async.t12657.cljs$lang$ctorPrWriter = function(this__4914__auto__, writer__4915__auto__, opt__4916__auto__) {
      return cljs.core._write.call(null, writer__4915__auto__, "cljs.core.async/t12657");
    };
    cljs.core.async.__GT_t12657 = function cljs$core$async$alt_handler_$___GT_t12657(cb__$1, flag__$1, alt_handler__$1, meta12658) {
      return new cljs.core.async.t12657(cb__$1, flag__$1, alt_handler__$1, meta12658);
    };
  }
  return new cljs.core.async.t12657(cb, flag, cljs$core$async$alt_handler, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.core.async.do_alts = function cljs$core$async$do_alts(fret, ports, opts) {
  var flag = cljs.core.async.alt_flag.call(null);
  var n = cljs.core.count.call(null, ports);
  var idxs = cljs.core.async.random_array.call(null, n);
  var priority = (new cljs.core.Keyword(null, "priority", "priority", 1431093715)).cljs$core$IFn$_invoke$arity$1(opts);
  var ret = function() {
    var i = 0;
    while (true) {
      if (i < n) {
        var idx = cljs.core.truth_(priority) ? i : idxs[i];
        var port = cljs.core.nth.call(null, ports, idx);
        var wport = cljs.core.vector_QMARK_.call(null, port) ? port.call(null, 0) : null;
        var vbox = cljs.core.truth_(wport) ? function() {
          var val = port.call(null, 1);
          return cljs.core.async.impl.protocols.put_BANG_.call(null, wport, val, cljs.core.async.alt_handler.call(null, flag, function(i, val, idx, port, wport, flag, n, idxs, priority) {
            return function(p1__12660_SHARP_) {
              return fret.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [p1__12660_SHARP_, wport], null));
            };
          }(i, val, idx, port, wport, flag, n, idxs, priority)));
        }() : cljs.core.async.impl.protocols.take_BANG_.call(null, port, cljs.core.async.alt_handler.call(null, flag, function(i, idx, port, wport, flag, n, idxs, priority) {
          return function(p1__12661_SHARP_) {
            return fret.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [p1__12661_SHARP_, port], null));
          };
        }(i, idx, port, wport, flag, n, idxs, priority)));
        if (cljs.core.truth_(vbox)) {
          return cljs.core.async.impl.channels.box.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.deref.call(null, vbox), function() {
            var or__4335__auto__ = wport;
            if (cljs.core.truth_(or__4335__auto__)) {
              return or__4335__auto__;
            } else {
              return port;
            }
          }()], null));
        } else {
          var G__12662 = i + 1;
          i = G__12662;
          continue;
        }
      } else {
        return null;
      }
      break;
    }
  }();
  var or__4335__auto__ = ret;
  if (cljs.core.truth_(or__4335__auto__)) {
    return or__4335__auto__;
  } else {
    if (cljs.core.contains_QMARK_.call(null, opts, new cljs.core.Keyword(null, "default", "default", -1987822328))) {
      var temp__4126__auto__ = function() {
        var and__4323__auto__ = cljs.core.async.impl.protocols.active_QMARK_.call(null, flag);
        if (cljs.core.truth_(and__4323__auto__)) {
          return cljs.core.async.impl.protocols.commit.call(null, flag);
        } else {
          return and__4323__auto__;
        }
      }();
      if (cljs.core.truth_(temp__4126__auto__)) {
        var got = temp__4126__auto__;
        return cljs.core.async.impl.channels.box.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(new cljs.core.Keyword(null, "default", "default", -1987822328)).cljs$core$IFn$_invoke$arity$1(opts), new cljs.core.Keyword(null, "default", "default", -1987822328)], null));
      } else {
        return null;
      }
    } else {
      return null;
    }
  }
};
cljs.core.async.alts_BANG_ = function cljs$core$async$alts_BANG_() {
  var argseq__5375__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return cljs.core.async.alts_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5375__auto__);
};
cljs.core.async.alts_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(ports, p__12665) {
  var map__12666 = p__12665;
  var map__12666__$1 = cljs.core.seq_QMARK_.call(null, map__12666) ? cljs.core.apply.call(null, cljs.core.hash_map, map__12666) : map__12666;
  var opts = map__12666__$1;
  throw new Error("alts! used not in (go ...) block");
};
cljs.core.async.alts_BANG_.cljs$lang$maxFixedArity = 1;
cljs.core.async.alts_BANG_.cljs$lang$applyTo = function(seq12663) {
  var G__12664 = cljs.core.first.call(null, seq12663);
  var seq12663__$1 = cljs.core.next.call(null, seq12663);
  return cljs.core.async.alts_BANG_.cljs$core$IFn$_invoke$arity$variadic(G__12664, seq12663__$1);
};
cljs.core.async.pipe = function cljs$core$async$pipe() {
  var G__12668 = arguments.length;
  switch(G__12668) {
    case 2:
      return cljs.core.async.pipe.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.async.pipe.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.async.pipe.cljs$core$IFn$_invoke$arity$2 = function(from, to) {
  return cljs.core.async.pipe.call(null, from, to, true);
};
cljs.core.async.pipe.cljs$core$IFn$_invoke$arity$3 = function(from, to, close_QMARK_) {
  var c__7864__auto___12717 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__7864__auto___12717) {
    return function() {
      var f__7865__auto__ = function() {
        var switch__7802__auto__ = function(c__7864__auto___12717) {
          return function(state_12692) {
            var state_val_12693 = state_12692[1];
            if (state_val_12693 === 7) {
              var inst_12688 = state_12692[2];
              var state_12692__$1 = state_12692;
              var statearr_12694_12718 = state_12692__$1;
              statearr_12694_12718[2] = inst_12688;
              statearr_12694_12718[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_12693 === 1) {
                var state_12692__$1 = state_12692;
                var statearr_12695_12719 = state_12692__$1;
                statearr_12695_12719[2] = null;
                statearr_12695_12719[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_12693 === 4) {
                  var inst_12671 = state_12692[7];
                  var inst_12671__$1 = state_12692[2];
                  var inst_12672 = inst_12671__$1 == null;
                  var state_12692__$1 = function() {
                    var statearr_12696 = state_12692;
                    statearr_12696[7] = inst_12671__$1;
                    return statearr_12696;
                  }();
                  if (cljs.core.truth_(inst_12672)) {
                    var statearr_12697_12720 = state_12692__$1;
                    statearr_12697_12720[1] = 5;
                  } else {
                    var statearr_12698_12721 = state_12692__$1;
                    statearr_12698_12721[1] = 6;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_12693 === 13) {
                    var state_12692__$1 = state_12692;
                    var statearr_12699_12722 = state_12692__$1;
                    statearr_12699_12722[2] = null;
                    statearr_12699_12722[1] = 14;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_12693 === 6) {
                      var inst_12671 = state_12692[7];
                      var state_12692__$1 = state_12692;
                      return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_12692__$1, 11, to, inst_12671);
                    } else {
                      if (state_val_12693 === 3) {
                        var inst_12690 = state_12692[2];
                        var state_12692__$1 = state_12692;
                        return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_12692__$1, inst_12690);
                      } else {
                        if (state_val_12693 === 12) {
                          var state_12692__$1 = state_12692;
                          var statearr_12700_12723 = state_12692__$1;
                          statearr_12700_12723[2] = null;
                          statearr_12700_12723[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_12693 === 2) {
                            var state_12692__$1 = state_12692;
                            return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_12692__$1, 4, from);
                          } else {
                            if (state_val_12693 === 11) {
                              var inst_12681 = state_12692[2];
                              var state_12692__$1 = state_12692;
                              if (cljs.core.truth_(inst_12681)) {
                                var statearr_12701_12724 = state_12692__$1;
                                statearr_12701_12724[1] = 12;
                              } else {
                                var statearr_12702_12725 = state_12692__$1;
                                statearr_12702_12725[1] = 13;
                              }
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_12693 === 9) {
                                var state_12692__$1 = state_12692;
                                var statearr_12703_12726 = state_12692__$1;
                                statearr_12703_12726[2] = null;
                                statearr_12703_12726[1] = 10;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_12693 === 5) {
                                  var state_12692__$1 = state_12692;
                                  if (cljs.core.truth_(close_QMARK_)) {
                                    var statearr_12704_12727 = state_12692__$1;
                                    statearr_12704_12727[1] = 8;
                                  } else {
                                    var statearr_12705_12728 = state_12692__$1;
                                    statearr_12705_12728[1] = 9;
                                  }
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_12693 === 14) {
                                    var inst_12686 = state_12692[2];
                                    var state_12692__$1 = state_12692;
                                    var statearr_12706_12729 = state_12692__$1;
                                    statearr_12706_12729[2] = inst_12686;
                                    statearr_12706_12729[1] = 7;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_12693 === 10) {
                                      var inst_12678 = state_12692[2];
                                      var state_12692__$1 = state_12692;
                                      var statearr_12707_12730 = state_12692__$1;
                                      statearr_12707_12730[2] = inst_12678;
                                      statearr_12707_12730[1] = 7;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_12693 === 8) {
                                        var inst_12675 = cljs.core.async.close_BANG_.call(null, to);
                                        var state_12692__$1 = state_12692;
                                        var statearr_12708_12731 = state_12692__$1;
                                        statearr_12708_12731[2] = inst_12675;
                                        statearr_12708_12731[1] = 10;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        return null;
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__7864__auto___12717);
        return function(switch__7802__auto__, c__7864__auto___12717) {
          return function() {
            var cljs$core$async$state_machine__7803__auto__ = null;
            var cljs$core$async$state_machine__7803__auto____0 = function() {
              var statearr_12712 = [null, null, null, null, null, null, null, null];
              statearr_12712[0] = cljs$core$async$state_machine__7803__auto__;
              statearr_12712[1] = 1;
              return statearr_12712;
            };
            var cljs$core$async$state_machine__7803__auto____1 = function(state_12692) {
              while (true) {
                var ret_value__7804__auto__ = function() {
                  try {
                    while (true) {
                      var result__7805__auto__ = switch__7802__auto__.call(null, state_12692);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__7805__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__7805__auto__;
                      }
                      break;
                    }
                  } catch (e12713) {
                    if (e12713 instanceof Object) {
                      var ex__7806__auto__ = e12713;
                      var statearr_12714_12732 = state_12692;
                      statearr_12714_12732[5] = ex__7806__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_12692);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e12713;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__7804__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__12733 = state_12692;
                  state_12692 = G__12733;
                  continue;
                } else {
                  return ret_value__7804__auto__;
                }
                break;
              }
            };
            cljs$core$async$state_machine__7803__auto__ = function(state_12692) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$state_machine__7803__auto____0.call(this);
                case 1:
                  return cljs$core$async$state_machine__7803__auto____1.call(this, state_12692);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            cljs$core$async$state_machine__7803__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$state_machine__7803__auto____0;
            cljs$core$async$state_machine__7803__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$state_machine__7803__auto____1;
            return cljs$core$async$state_machine__7803__auto__;
          }();
        }(switch__7802__auto__, c__7864__auto___12717);
      }();
      var state__7866__auto__ = function() {
        var statearr_12715 = f__7865__auto__.call(null);
        statearr_12715[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__7864__auto___12717;
        return statearr_12715;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__7866__auto__);
    };
  }(c__7864__auto___12717));
  return to;
};
cljs.core.async.pipe.cljs$lang$maxFixedArity = 3;
cljs.core.async.pipeline_STAR_ = function cljs$core$async$pipeline_STAR_(n, to, xf, from, close_QMARK_, ex_handler, type) {
  if (n > 0) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "pos?", "pos?", -244377722, null), new cljs.core.Symbol(null, "n", "n", -2092305744, null))))].join(""));
  }
  var jobs = cljs.core.async.chan.call(null, n);
  var results = cljs.core.async.chan.call(null, n);
  var process = function(jobs, results) {
    return function(p__12917) {
      var vec__12918 = p__12917;
      var v = cljs.core.nth.call(null, vec__12918, 0, null);
      var p = cljs.core.nth.call(null, vec__12918, 1, null);
      var job = vec__12918;
      if (job == null) {
        cljs.core.async.close_BANG_.call(null, results);
        return null;
      } else {
        var res = cljs.core.async.chan.call(null, 1, xf, ex_handler);
        var c__7864__auto___13100 = cljs.core.async.chan.call(null, 1);
        cljs.core.async.impl.dispatch.run.call(null, function(c__7864__auto___13100, res, vec__12918, v, p, job, jobs, results) {
          return function() {
            var f__7865__auto__ = function() {
              var switch__7802__auto__ = function(c__7864__auto___13100, res, vec__12918, v, p, job, jobs, results) {
                return function(state_12923) {
                  var state_val_12924 = state_12923[1];
                  if (state_val_12924 === 2) {
                    var inst_12920 = state_12923[2];
                    var inst_12921 = cljs.core.async.close_BANG_.call(null, res);
                    var state_12923__$1 = function() {
                      var statearr_12925 = state_12923;
                      statearr_12925[7] = inst_12920;
                      return statearr_12925;
                    }();
                    return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_12923__$1, inst_12921);
                  } else {
                    if (state_val_12924 === 1) {
                      var state_12923__$1 = state_12923;
                      return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_12923__$1, 2, res, v);
                    } else {
                      return null;
                    }
                  }
                };
              }(c__7864__auto___13100, res, vec__12918, v, p, job, jobs, results);
              return function(switch__7802__auto__, c__7864__auto___13100, res, vec__12918, v, p, job, jobs, results) {
                return function() {
                  var cljs$core$async$pipeline_STAR__$_state_machine__7803__auto__ = null;
                  var cljs$core$async$pipeline_STAR__$_state_machine__7803__auto____0 = function() {
                    var statearr_12929 = [null, null, null, null, null, null, null, null];
                    statearr_12929[0] = cljs$core$async$pipeline_STAR__$_state_machine__7803__auto__;
                    statearr_12929[1] = 1;
                    return statearr_12929;
                  };
                  var cljs$core$async$pipeline_STAR__$_state_machine__7803__auto____1 = function(state_12923) {
                    while (true) {
                      var ret_value__7804__auto__ = function() {
                        try {
                          while (true) {
                            var result__7805__auto__ = switch__7802__auto__.call(null, state_12923);
                            if (cljs.core.keyword_identical_QMARK_.call(null, result__7805__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                              continue;
                            } else {
                              return result__7805__auto__;
                            }
                            break;
                          }
                        } catch (e12930) {
                          if (e12930 instanceof Object) {
                            var ex__7806__auto__ = e12930;
                            var statearr_12931_13101 = state_12923;
                            statearr_12931_13101[5] = ex__7806__auto__;
                            cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_12923);
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            throw e12930;
                          }
                        }
                      }();
                      if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__7804__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        var G__13102 = state_12923;
                        state_12923 = G__13102;
                        continue;
                      } else {
                        return ret_value__7804__auto__;
                      }
                      break;
                    }
                  };
                  cljs$core$async$pipeline_STAR__$_state_machine__7803__auto__ = function(state_12923) {
                    switch(arguments.length) {
                      case 0:
                        return cljs$core$async$pipeline_STAR__$_state_machine__7803__auto____0.call(this);
                      case 1:
                        return cljs$core$async$pipeline_STAR__$_state_machine__7803__auto____1.call(this, state_12923);
                    }
                    throw new Error("Invalid arity: " + arguments.length);
                  };
                  cljs$core$async$pipeline_STAR__$_state_machine__7803__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$pipeline_STAR__$_state_machine__7803__auto____0;
                  cljs$core$async$pipeline_STAR__$_state_machine__7803__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$pipeline_STAR__$_state_machine__7803__auto____1;
                  return cljs$core$async$pipeline_STAR__$_state_machine__7803__auto__;
                }();
              }(switch__7802__auto__, c__7864__auto___13100, res, vec__12918, v, p, job, jobs, results);
            }();
            var state__7866__auto__ = function() {
              var statearr_12932 = f__7865__auto__.call(null);
              statearr_12932[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__7864__auto___13100;
              return statearr_12932;
            }();
            return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__7866__auto__);
          };
        }(c__7864__auto___13100, res, vec__12918, v, p, job, jobs, results));
        cljs.core.async.put_BANG_.call(null, p, res);
        return true;
      }
    };
  }(jobs, results);
  var async = function(jobs, results, process) {
    return function(p__12933) {
      var vec__12934 = p__12933;
      var v = cljs.core.nth.call(null, vec__12934, 0, null);
      var p = cljs.core.nth.call(null, vec__12934, 1, null);
      var job = vec__12934;
      if (job == null) {
        cljs.core.async.close_BANG_.call(null, results);
        return null;
      } else {
        var res = cljs.core.async.chan.call(null, 1);
        xf.call(null, v, res);
        cljs.core.async.put_BANG_.call(null, p, res);
        return true;
      }
    };
  }(jobs, results, process);
  var n__5220__auto___13103 = n;
  var __13104 = 0;
  while (true) {
    if (__13104 < n__5220__auto___13103) {
      var G__12935_13105 = type instanceof cljs.core.Keyword ? type.fqn : null;
      switch(G__12935_13105) {
        case "async":
          var c__7864__auto___13107 = cljs.core.async.chan.call(null, 1);
          cljs.core.async.impl.dispatch.run.call(null, function(__13104, c__7864__auto___13107, G__12935_13105, n__5220__auto___13103, jobs, results, process, async) {
            return function() {
              var f__7865__auto__ = function() {
                var switch__7802__auto__ = function(__13104, c__7864__auto___13107, G__12935_13105, n__5220__auto___13103, jobs, results, process, async) {
                  return function(state_12948) {
                    var state_val_12949 = state_12948[1];
                    if (state_val_12949 === 7) {
                      var inst_12944 = state_12948[2];
                      var state_12948__$1 = state_12948;
                      var statearr_12950_13108 = state_12948__$1;
                      statearr_12950_13108[2] = inst_12944;
                      statearr_12950_13108[1] = 3;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_12949 === 6) {
                        var state_12948__$1 = state_12948;
                        var statearr_12951_13109 = state_12948__$1;
                        statearr_12951_13109[2] = null;
                        statearr_12951_13109[1] = 7;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_12949 === 5) {
                          var state_12948__$1 = state_12948;
                          var statearr_12952_13110 = state_12948__$1;
                          statearr_12952_13110[2] = null;
                          statearr_12952_13110[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_12949 === 4) {
                            var inst_12938 = state_12948[2];
                            var inst_12939 = async.call(null, inst_12938);
                            var state_12948__$1 = state_12948;
                            if (cljs.core.truth_(inst_12939)) {
                              var statearr_12953_13111 = state_12948__$1;
                              statearr_12953_13111[1] = 5;
                            } else {
                              var statearr_12954_13112 = state_12948__$1;
                              statearr_12954_13112[1] = 6;
                            }
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_12949 === 3) {
                              var inst_12946 = state_12948[2];
                              var state_12948__$1 = state_12948;
                              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_12948__$1, inst_12946);
                            } else {
                              if (state_val_12949 === 2) {
                                var state_12948__$1 = state_12948;
                                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_12948__$1, 4, jobs);
                              } else {
                                if (state_val_12949 === 1) {
                                  var state_12948__$1 = state_12948;
                                  var statearr_12955_13113 = state_12948__$1;
                                  statearr_12955_13113[2] = null;
                                  statearr_12955_13113[1] = 2;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  return null;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  };
                }(__13104, c__7864__auto___13107, G__12935_13105, n__5220__auto___13103, jobs, results, process, async);
                return function(__13104, switch__7802__auto__, c__7864__auto___13107, G__12935_13105, n__5220__auto___13103, jobs, results, process, async) {
                  return function() {
                    var cljs$core$async$pipeline_STAR__$_state_machine__7803__auto__ = null;
                    var cljs$core$async$pipeline_STAR__$_state_machine__7803__auto____0 = function() {
                      var statearr_12959 = [null, null, null, null, null, null, null];
                      statearr_12959[0] = cljs$core$async$pipeline_STAR__$_state_machine__7803__auto__;
                      statearr_12959[1] = 1;
                      return statearr_12959;
                    };
                    var cljs$core$async$pipeline_STAR__$_state_machine__7803__auto____1 = function(state_12948) {
                      while (true) {
                        var ret_value__7804__auto__ = function() {
                          try {
                            while (true) {
                              var result__7805__auto__ = switch__7802__auto__.call(null, state_12948);
                              if (cljs.core.keyword_identical_QMARK_.call(null, result__7805__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                                continue;
                              } else {
                                return result__7805__auto__;
                              }
                              break;
                            }
                          } catch (e12960) {
                            if (e12960 instanceof Object) {
                              var ex__7806__auto__ = e12960;
                              var statearr_12961_13114 = state_12948;
                              statearr_12961_13114[5] = ex__7806__auto__;
                              cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_12948);
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              throw e12960;
                            }
                          }
                        }();
                        if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__7804__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          var G__13115 = state_12948;
                          state_12948 = G__13115;
                          continue;
                        } else {
                          return ret_value__7804__auto__;
                        }
                        break;
                      }
                    };
                    cljs$core$async$pipeline_STAR__$_state_machine__7803__auto__ = function(state_12948) {
                      switch(arguments.length) {
                        case 0:
                          return cljs$core$async$pipeline_STAR__$_state_machine__7803__auto____0.call(this);
                        case 1:
                          return cljs$core$async$pipeline_STAR__$_state_machine__7803__auto____1.call(this, state_12948);
                      }
                      throw new Error("Invalid arity: " + arguments.length);
                    };
                    cljs$core$async$pipeline_STAR__$_state_machine__7803__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$pipeline_STAR__$_state_machine__7803__auto____0;
                    cljs$core$async$pipeline_STAR__$_state_machine__7803__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$pipeline_STAR__$_state_machine__7803__auto____1;
                    return cljs$core$async$pipeline_STAR__$_state_machine__7803__auto__;
                  }();
                }(__13104, switch__7802__auto__, c__7864__auto___13107, G__12935_13105, n__5220__auto___13103, jobs, results, process, async);
              }();
              var state__7866__auto__ = function() {
                var statearr_12962 = f__7865__auto__.call(null);
                statearr_12962[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__7864__auto___13107;
                return statearr_12962;
              }();
              return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__7866__auto__);
            };
          }(__13104, c__7864__auto___13107, G__12935_13105, n__5220__auto___13103, jobs, results, process, async));
          break;
        case "compute":
          var c__7864__auto___13116 = cljs.core.async.chan.call(null, 1);
          cljs.core.async.impl.dispatch.run.call(null, function(__13104, c__7864__auto___13116, G__12935_13105, n__5220__auto___13103, jobs, results, process, async) {
            return function() {
              var f__7865__auto__ = function() {
                var switch__7802__auto__ = function(__13104, c__7864__auto___13116, G__12935_13105, n__5220__auto___13103, jobs, results, process, async) {
                  return function(state_12975) {
                    var state_val_12976 = state_12975[1];
                    if (state_val_12976 === 7) {
                      var inst_12971 = state_12975[2];
                      var state_12975__$1 = state_12975;
                      var statearr_12977_13117 = state_12975__$1;
                      statearr_12977_13117[2] = inst_12971;
                      statearr_12977_13117[1] = 3;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_12976 === 6) {
                        var state_12975__$1 = state_12975;
                        var statearr_12978_13118 = state_12975__$1;
                        statearr_12978_13118[2] = null;
                        statearr_12978_13118[1] = 7;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_12976 === 5) {
                          var state_12975__$1 = state_12975;
                          var statearr_12979_13119 = state_12975__$1;
                          statearr_12979_13119[2] = null;
                          statearr_12979_13119[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_12976 === 4) {
                            var inst_12965 = state_12975[2];
                            var inst_12966 = process.call(null, inst_12965);
                            var state_12975__$1 = state_12975;
                            if (cljs.core.truth_(inst_12966)) {
                              var statearr_12980_13120 = state_12975__$1;
                              statearr_12980_13120[1] = 5;
                            } else {
                              var statearr_12981_13121 = state_12975__$1;
                              statearr_12981_13121[1] = 6;
                            }
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_12976 === 3) {
                              var inst_12973 = state_12975[2];
                              var state_12975__$1 = state_12975;
                              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_12975__$1, inst_12973);
                            } else {
                              if (state_val_12976 === 2) {
                                var state_12975__$1 = state_12975;
                                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_12975__$1, 4, jobs);
                              } else {
                                if (state_val_12976 === 1) {
                                  var state_12975__$1 = state_12975;
                                  var statearr_12982_13122 = state_12975__$1;
                                  statearr_12982_13122[2] = null;
                                  statearr_12982_13122[1] = 2;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  return null;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  };
                }(__13104, c__7864__auto___13116, G__12935_13105, n__5220__auto___13103, jobs, results, process, async);
                return function(__13104, switch__7802__auto__, c__7864__auto___13116, G__12935_13105, n__5220__auto___13103, jobs, results, process, async) {
                  return function() {
                    var cljs$core$async$pipeline_STAR__$_state_machine__7803__auto__ = null;
                    var cljs$core$async$pipeline_STAR__$_state_machine__7803__auto____0 = function() {
                      var statearr_12986 = [null, null, null, null, null, null, null];
                      statearr_12986[0] = cljs$core$async$pipeline_STAR__$_state_machine__7803__auto__;
                      statearr_12986[1] = 1;
                      return statearr_12986;
                    };
                    var cljs$core$async$pipeline_STAR__$_state_machine__7803__auto____1 = function(state_12975) {
                      while (true) {
                        var ret_value__7804__auto__ = function() {
                          try {
                            while (true) {
                              var result__7805__auto__ = switch__7802__auto__.call(null, state_12975);
                              if (cljs.core.keyword_identical_QMARK_.call(null, result__7805__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                                continue;
                              } else {
                                return result__7805__auto__;
                              }
                              break;
                            }
                          } catch (e12987) {
                            if (e12987 instanceof Object) {
                              var ex__7806__auto__ = e12987;
                              var statearr_12988_13123 = state_12975;
                              statearr_12988_13123[5] = ex__7806__auto__;
                              cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_12975);
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              throw e12987;
                            }
                          }
                        }();
                        if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__7804__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          var G__13124 = state_12975;
                          state_12975 = G__13124;
                          continue;
                        } else {
                          return ret_value__7804__auto__;
                        }
                        break;
                      }
                    };
                    cljs$core$async$pipeline_STAR__$_state_machine__7803__auto__ = function(state_12975) {
                      switch(arguments.length) {
                        case 0:
                          return cljs$core$async$pipeline_STAR__$_state_machine__7803__auto____0.call(this);
                        case 1:
                          return cljs$core$async$pipeline_STAR__$_state_machine__7803__auto____1.call(this, state_12975);
                      }
                      throw new Error("Invalid arity: " + arguments.length);
                    };
                    cljs$core$async$pipeline_STAR__$_state_machine__7803__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$pipeline_STAR__$_state_machine__7803__auto____0;
                    cljs$core$async$pipeline_STAR__$_state_machine__7803__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$pipeline_STAR__$_state_machine__7803__auto____1;
                    return cljs$core$async$pipeline_STAR__$_state_machine__7803__auto__;
                  }();
                }(__13104, switch__7802__auto__, c__7864__auto___13116, G__12935_13105, n__5220__auto___13103, jobs, results, process, async);
              }();
              var state__7866__auto__ = function() {
                var statearr_12989 = f__7865__auto__.call(null);
                statearr_12989[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__7864__auto___13116;
                return statearr_12989;
              }();
              return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__7866__auto__);
            };
          }(__13104, c__7864__auto___13116, G__12935_13105, n__5220__auto___13103, jobs, results, process, async));
          break;
        default:
          throw new Error([cljs.core.str("No matching clause: "), cljs.core.str(type)].join(""));;
      }
      var G__13125 = __13104 + 1;
      __13104 = G__13125;
      continue;
    } else {
    }
    break;
  }
  var c__7864__auto___13126 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__7864__auto___13126, jobs, results, process, async) {
    return function() {
      var f__7865__auto__ = function() {
        var switch__7802__auto__ = function(c__7864__auto___13126, jobs, results, process, async) {
          return function(state_13011) {
            var state_val_13012 = state_13011[1];
            if (state_val_13012 === 9) {
              var inst_13004 = state_13011[2];
              var state_13011__$1 = function() {
                var statearr_13013 = state_13011;
                statearr_13013[7] = inst_13004;
                return statearr_13013;
              }();
              var statearr_13014_13127 = state_13011__$1;
              statearr_13014_13127[2] = null;
              statearr_13014_13127[1] = 2;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_13012 === 8) {
                var inst_12997 = state_13011[8];
                var inst_13002 = state_13011[2];
                var state_13011__$1 = function() {
                  var statearr_13015 = state_13011;
                  statearr_13015[9] = inst_13002;
                  return statearr_13015;
                }();
                return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_13011__$1, 9, results, inst_12997);
              } else {
                if (state_val_13012 === 7) {
                  var inst_13007 = state_13011[2];
                  var state_13011__$1 = state_13011;
                  var statearr_13016_13128 = state_13011__$1;
                  statearr_13016_13128[2] = inst_13007;
                  statearr_13016_13128[1] = 3;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_13012 === 6) {
                    var inst_12997 = state_13011[8];
                    var inst_12992 = state_13011[10];
                    var inst_12997__$1 = cljs.core.async.chan.call(null, 1);
                    var inst_12998 = cljs.core.PersistentVector.EMPTY_NODE;
                    var inst_12999 = [inst_12992, inst_12997__$1];
                    var inst_13000 = new cljs.core.PersistentVector(null, 2, 5, inst_12998, inst_12999, null);
                    var state_13011__$1 = function() {
                      var statearr_13017 = state_13011;
                      statearr_13017[8] = inst_12997__$1;
                      return statearr_13017;
                    }();
                    return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_13011__$1, 8, jobs, inst_13000);
                  } else {
                    if (state_val_13012 === 5) {
                      var inst_12995 = cljs.core.async.close_BANG_.call(null, jobs);
                      var state_13011__$1 = state_13011;
                      var statearr_13018_13129 = state_13011__$1;
                      statearr_13018_13129[2] = inst_12995;
                      statearr_13018_13129[1] = 7;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_13012 === 4) {
                        var inst_12992 = state_13011[10];
                        var inst_12992__$1 = state_13011[2];
                        var inst_12993 = inst_12992__$1 == null;
                        var state_13011__$1 = function() {
                          var statearr_13019 = state_13011;
                          statearr_13019[10] = inst_12992__$1;
                          return statearr_13019;
                        }();
                        if (cljs.core.truth_(inst_12993)) {
                          var statearr_13020_13130 = state_13011__$1;
                          statearr_13020_13130[1] = 5;
                        } else {
                          var statearr_13021_13131 = state_13011__$1;
                          statearr_13021_13131[1] = 6;
                        }
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_13012 === 3) {
                          var inst_13009 = state_13011[2];
                          var state_13011__$1 = state_13011;
                          return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_13011__$1, inst_13009);
                        } else {
                          if (state_val_13012 === 2) {
                            var state_13011__$1 = state_13011;
                            return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_13011__$1, 4, from);
                          } else {
                            if (state_val_13012 === 1) {
                              var state_13011__$1 = state_13011;
                              var statearr_13022_13132 = state_13011__$1;
                              statearr_13022_13132[2] = null;
                              statearr_13022_13132[1] = 2;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              return null;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__7864__auto___13126, jobs, results, process, async);
        return function(switch__7802__auto__, c__7864__auto___13126, jobs, results, process, async) {
          return function() {
            var cljs$core$async$pipeline_STAR__$_state_machine__7803__auto__ = null;
            var cljs$core$async$pipeline_STAR__$_state_machine__7803__auto____0 = function() {
              var statearr_13026 = [null, null, null, null, null, null, null, null, null, null, null];
              statearr_13026[0] = cljs$core$async$pipeline_STAR__$_state_machine__7803__auto__;
              statearr_13026[1] = 1;
              return statearr_13026;
            };
            var cljs$core$async$pipeline_STAR__$_state_machine__7803__auto____1 = function(state_13011) {
              while (true) {
                var ret_value__7804__auto__ = function() {
                  try {
                    while (true) {
                      var result__7805__auto__ = switch__7802__auto__.call(null, state_13011);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__7805__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__7805__auto__;
                      }
                      break;
                    }
                  } catch (e13027) {
                    if (e13027 instanceof Object) {
                      var ex__7806__auto__ = e13027;
                      var statearr_13028_13133 = state_13011;
                      statearr_13028_13133[5] = ex__7806__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_13011);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e13027;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__7804__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__13134 = state_13011;
                  state_13011 = G__13134;
                  continue;
                } else {
                  return ret_value__7804__auto__;
                }
                break;
              }
            };
            cljs$core$async$pipeline_STAR__$_state_machine__7803__auto__ = function(state_13011) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$pipeline_STAR__$_state_machine__7803__auto____0.call(this);
                case 1:
                  return cljs$core$async$pipeline_STAR__$_state_machine__7803__auto____1.call(this, state_13011);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            cljs$core$async$pipeline_STAR__$_state_machine__7803__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$pipeline_STAR__$_state_machine__7803__auto____0;
            cljs$core$async$pipeline_STAR__$_state_machine__7803__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$pipeline_STAR__$_state_machine__7803__auto____1;
            return cljs$core$async$pipeline_STAR__$_state_machine__7803__auto__;
          }();
        }(switch__7802__auto__, c__7864__auto___13126, jobs, results, process, async);
      }();
      var state__7866__auto__ = function() {
        var statearr_13029 = f__7865__auto__.call(null);
        statearr_13029[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__7864__auto___13126;
        return statearr_13029;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__7866__auto__);
    };
  }(c__7864__auto___13126, jobs, results, process, async));
  var c__7864__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__7864__auto__, jobs, results, process, async) {
    return function() {
      var f__7865__auto__ = function() {
        var switch__7802__auto__ = function(c__7864__auto__, jobs, results, process, async) {
          return function(state_13067) {
            var state_val_13068 = state_13067[1];
            if (state_val_13068 === 7) {
              var inst_13063 = state_13067[2];
              var state_13067__$1 = state_13067;
              var statearr_13069_13135 = state_13067__$1;
              statearr_13069_13135[2] = inst_13063;
              statearr_13069_13135[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_13068 === 20) {
                var state_13067__$1 = state_13067;
                var statearr_13070_13136 = state_13067__$1;
                statearr_13070_13136[2] = null;
                statearr_13070_13136[1] = 21;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_13068 === 1) {
                  var state_13067__$1 = state_13067;
                  var statearr_13071_13137 = state_13067__$1;
                  statearr_13071_13137[2] = null;
                  statearr_13071_13137[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_13068 === 4) {
                    var inst_13032 = state_13067[7];
                    var inst_13032__$1 = state_13067[2];
                    var inst_13033 = inst_13032__$1 == null;
                    var state_13067__$1 = function() {
                      var statearr_13072 = state_13067;
                      statearr_13072[7] = inst_13032__$1;
                      return statearr_13072;
                    }();
                    if (cljs.core.truth_(inst_13033)) {
                      var statearr_13073_13138 = state_13067__$1;
                      statearr_13073_13138[1] = 5;
                    } else {
                      var statearr_13074_13139 = state_13067__$1;
                      statearr_13074_13139[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_13068 === 15) {
                      var inst_13045 = state_13067[8];
                      var state_13067__$1 = state_13067;
                      return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_13067__$1, 18, to, inst_13045);
                    } else {
                      if (state_val_13068 === 21) {
                        var inst_13058 = state_13067[2];
                        var state_13067__$1 = state_13067;
                        var statearr_13075_13140 = state_13067__$1;
                        statearr_13075_13140[2] = inst_13058;
                        statearr_13075_13140[1] = 13;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_13068 === 13) {
                          var inst_13060 = state_13067[2];
                          var state_13067__$1 = function() {
                            var statearr_13076 = state_13067;
                            statearr_13076[9] = inst_13060;
                            return statearr_13076;
                          }();
                          var statearr_13077_13141 = state_13067__$1;
                          statearr_13077_13141[2] = null;
                          statearr_13077_13141[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_13068 === 6) {
                            var inst_13032 = state_13067[7];
                            var state_13067__$1 = state_13067;
                            return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_13067__$1, 11, inst_13032);
                          } else {
                            if (state_val_13068 === 17) {
                              var inst_13053 = state_13067[2];
                              var state_13067__$1 = state_13067;
                              if (cljs.core.truth_(inst_13053)) {
                                var statearr_13078_13142 = state_13067__$1;
                                statearr_13078_13142[1] = 19;
                              } else {
                                var statearr_13079_13143 = state_13067__$1;
                                statearr_13079_13143[1] = 20;
                              }
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_13068 === 3) {
                                var inst_13065 = state_13067[2];
                                var state_13067__$1 = state_13067;
                                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_13067__$1, inst_13065);
                              } else {
                                if (state_val_13068 === 12) {
                                  var inst_13042 = state_13067[10];
                                  var state_13067__$1 = state_13067;
                                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_13067__$1, 14, inst_13042);
                                } else {
                                  if (state_val_13068 === 2) {
                                    var state_13067__$1 = state_13067;
                                    return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_13067__$1, 4, results);
                                  } else {
                                    if (state_val_13068 === 19) {
                                      var state_13067__$1 = state_13067;
                                      var statearr_13080_13144 = state_13067__$1;
                                      statearr_13080_13144[2] = null;
                                      statearr_13080_13144[1] = 12;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_13068 === 11) {
                                        var inst_13042 = state_13067[2];
                                        var state_13067__$1 = function() {
                                          var statearr_13081 = state_13067;
                                          statearr_13081[10] = inst_13042;
                                          return statearr_13081;
                                        }();
                                        var statearr_13082_13145 = state_13067__$1;
                                        statearr_13082_13145[2] = null;
                                        statearr_13082_13145[1] = 12;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_13068 === 9) {
                                          var state_13067__$1 = state_13067;
                                          var statearr_13083_13146 = state_13067__$1;
                                          statearr_13083_13146[2] = null;
                                          statearr_13083_13146[1] = 10;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_13068 === 5) {
                                            var state_13067__$1 = state_13067;
                                            if (cljs.core.truth_(close_QMARK_)) {
                                              var statearr_13084_13147 = state_13067__$1;
                                              statearr_13084_13147[1] = 8;
                                            } else {
                                              var statearr_13085_13148 = state_13067__$1;
                                              statearr_13085_13148[1] = 9;
                                            }
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            if (state_val_13068 === 14) {
                                              var inst_13047 = state_13067[11];
                                              var inst_13045 = state_13067[8];
                                              var inst_13045__$1 = state_13067[2];
                                              var inst_13046 = inst_13045__$1 == null;
                                              var inst_13047__$1 = cljs.core.not.call(null, inst_13046);
                                              var state_13067__$1 = function() {
                                                var statearr_13086 = state_13067;
                                                statearr_13086[11] = inst_13047__$1;
                                                statearr_13086[8] = inst_13045__$1;
                                                return statearr_13086;
                                              }();
                                              if (inst_13047__$1) {
                                                var statearr_13087_13149 = state_13067__$1;
                                                statearr_13087_13149[1] = 15;
                                              } else {
                                                var statearr_13088_13150 = state_13067__$1;
                                                statearr_13088_13150[1] = 16;
                                              }
                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                            } else {
                                              if (state_val_13068 === 16) {
                                                var inst_13047 = state_13067[11];
                                                var state_13067__$1 = state_13067;
                                                var statearr_13089_13151 = state_13067__$1;
                                                statearr_13089_13151[2] = inst_13047;
                                                statearr_13089_13151[1] = 17;
                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                              } else {
                                                if (state_val_13068 === 10) {
                                                  var inst_13039 = state_13067[2];
                                                  var state_13067__$1 = state_13067;
                                                  var statearr_13090_13152 = state_13067__$1;
                                                  statearr_13090_13152[2] = inst_13039;
                                                  statearr_13090_13152[1] = 7;
                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                } else {
                                                  if (state_val_13068 === 18) {
                                                    var inst_13050 = state_13067[2];
                                                    var state_13067__$1 = state_13067;
                                                    var statearr_13091_13153 = state_13067__$1;
                                                    statearr_13091_13153[2] = inst_13050;
                                                    statearr_13091_13153[1] = 17;
                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                  } else {
                                                    if (state_val_13068 === 8) {
                                                      var inst_13036 = cljs.core.async.close_BANG_.call(null, to);
                                                      var state_13067__$1 = state_13067;
                                                      var statearr_13092_13154 = state_13067__$1;
                                                      statearr_13092_13154[2] = inst_13036;
                                                      statearr_13092_13154[1] = 10;
                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                    } else {
                                                      return null;
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__7864__auto__, jobs, results, process, async);
        return function(switch__7802__auto__, c__7864__auto__, jobs, results, process, async) {
          return function() {
            var cljs$core$async$pipeline_STAR__$_state_machine__7803__auto__ = null;
            var cljs$core$async$pipeline_STAR__$_state_machine__7803__auto____0 = function() {
              var statearr_13096 = [null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_13096[0] = cljs$core$async$pipeline_STAR__$_state_machine__7803__auto__;
              statearr_13096[1] = 1;
              return statearr_13096;
            };
            var cljs$core$async$pipeline_STAR__$_state_machine__7803__auto____1 = function(state_13067) {
              while (true) {
                var ret_value__7804__auto__ = function() {
                  try {
                    while (true) {
                      var result__7805__auto__ = switch__7802__auto__.call(null, state_13067);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__7805__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__7805__auto__;
                      }
                      break;
                    }
                  } catch (e13097) {
                    if (e13097 instanceof Object) {
                      var ex__7806__auto__ = e13097;
                      var statearr_13098_13155 = state_13067;
                      statearr_13098_13155[5] = ex__7806__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_13067);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e13097;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__7804__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__13156 = state_13067;
                  state_13067 = G__13156;
                  continue;
                } else {
                  return ret_value__7804__auto__;
                }
                break;
              }
            };
            cljs$core$async$pipeline_STAR__$_state_machine__7803__auto__ = function(state_13067) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$pipeline_STAR__$_state_machine__7803__auto____0.call(this);
                case 1:
                  return cljs$core$async$pipeline_STAR__$_state_machine__7803__auto____1.call(this, state_13067);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            cljs$core$async$pipeline_STAR__$_state_machine__7803__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$pipeline_STAR__$_state_machine__7803__auto____0;
            cljs$core$async$pipeline_STAR__$_state_machine__7803__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$pipeline_STAR__$_state_machine__7803__auto____1;
            return cljs$core$async$pipeline_STAR__$_state_machine__7803__auto__;
          }();
        }(switch__7802__auto__, c__7864__auto__, jobs, results, process, async);
      }();
      var state__7866__auto__ = function() {
        var statearr_13099 = f__7865__auto__.call(null);
        statearr_13099[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__7864__auto__;
        return statearr_13099;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__7866__auto__);
    };
  }(c__7864__auto__, jobs, results, process, async));
  return c__7864__auto__;
};
cljs.core.async.pipeline_async = function cljs$core$async$pipeline_async() {
  var G__13158 = arguments.length;
  switch(G__13158) {
    case 4:
      return cljs.core.async.pipeline_async.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    case 5:
      return cljs.core.async.pipeline_async.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.async.pipeline_async.cljs$core$IFn$_invoke$arity$4 = function(n, to, af, from) {
  return cljs.core.async.pipeline_async.call(null, n, to, af, from, true);
};
cljs.core.async.pipeline_async.cljs$core$IFn$_invoke$arity$5 = function(n, to, af, from, close_QMARK_) {
  return cljs.core.async.pipeline_STAR_.call(null, n, to, af, from, close_QMARK_, null, new cljs.core.Keyword(null, "async", "async", 1050769601));
};
cljs.core.async.pipeline_async.cljs$lang$maxFixedArity = 5;
cljs.core.async.pipeline = function cljs$core$async$pipeline() {
  var G__13161 = arguments.length;
  switch(G__13161) {
    case 4:
      return cljs.core.async.pipeline.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    case 5:
      return cljs.core.async.pipeline.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    case 6:
      return cljs.core.async.pipeline.cljs$core$IFn$_invoke$arity$6(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.async.pipeline.cljs$core$IFn$_invoke$arity$4 = function(n, to, xf, from) {
  return cljs.core.async.pipeline.call(null, n, to, xf, from, true);
};
cljs.core.async.pipeline.cljs$core$IFn$_invoke$arity$5 = function(n, to, xf, from, close_QMARK_) {
  return cljs.core.async.pipeline.call(null, n, to, xf, from, close_QMARK_, null);
};
cljs.core.async.pipeline.cljs$core$IFn$_invoke$arity$6 = function(n, to, xf, from, close_QMARK_, ex_handler) {
  return cljs.core.async.pipeline_STAR_.call(null, n, to, xf, from, close_QMARK_, ex_handler, new cljs.core.Keyword(null, "compute", "compute", 1555393130));
};
cljs.core.async.pipeline.cljs$lang$maxFixedArity = 6;
cljs.core.async.split = function cljs$core$async$split() {
  var G__13164 = arguments.length;
  switch(G__13164) {
    case 2:
      return cljs.core.async.split.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 4:
      return cljs.core.async.split.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.async.split.cljs$core$IFn$_invoke$arity$2 = function(p, ch) {
  return cljs.core.async.split.call(null, p, ch, null, null);
};
cljs.core.async.split.cljs$core$IFn$_invoke$arity$4 = function(p, ch, t_buf_or_n, f_buf_or_n) {
  var tc = cljs.core.async.chan.call(null, t_buf_or_n);
  var fc = cljs.core.async.chan.call(null, f_buf_or_n);
  var c__7864__auto___13216 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__7864__auto___13216, tc, fc) {
    return function() {
      var f__7865__auto__ = function() {
        var switch__7802__auto__ = function(c__7864__auto___13216, tc, fc) {
          return function(state_13190) {
            var state_val_13191 = state_13190[1];
            if (state_val_13191 === 7) {
              var inst_13186 = state_13190[2];
              var state_13190__$1 = state_13190;
              var statearr_13192_13217 = state_13190__$1;
              statearr_13192_13217[2] = inst_13186;
              statearr_13192_13217[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_13191 === 1) {
                var state_13190__$1 = state_13190;
                var statearr_13193_13218 = state_13190__$1;
                statearr_13193_13218[2] = null;
                statearr_13193_13218[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_13191 === 4) {
                  var inst_13167 = state_13190[7];
                  var inst_13167__$1 = state_13190[2];
                  var inst_13168 = inst_13167__$1 == null;
                  var state_13190__$1 = function() {
                    var statearr_13194 = state_13190;
                    statearr_13194[7] = inst_13167__$1;
                    return statearr_13194;
                  }();
                  if (cljs.core.truth_(inst_13168)) {
                    var statearr_13195_13219 = state_13190__$1;
                    statearr_13195_13219[1] = 5;
                  } else {
                    var statearr_13196_13220 = state_13190__$1;
                    statearr_13196_13220[1] = 6;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_13191 === 13) {
                    var state_13190__$1 = state_13190;
                    var statearr_13197_13221 = state_13190__$1;
                    statearr_13197_13221[2] = null;
                    statearr_13197_13221[1] = 14;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_13191 === 6) {
                      var inst_13167 = state_13190[7];
                      var inst_13173 = p.call(null, inst_13167);
                      var state_13190__$1 = state_13190;
                      if (cljs.core.truth_(inst_13173)) {
                        var statearr_13198_13222 = state_13190__$1;
                        statearr_13198_13222[1] = 9;
                      } else {
                        var statearr_13199_13223 = state_13190__$1;
                        statearr_13199_13223[1] = 10;
                      }
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_13191 === 3) {
                        var inst_13188 = state_13190[2];
                        var state_13190__$1 = state_13190;
                        return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_13190__$1, inst_13188);
                      } else {
                        if (state_val_13191 === 12) {
                          var state_13190__$1 = state_13190;
                          var statearr_13200_13224 = state_13190__$1;
                          statearr_13200_13224[2] = null;
                          statearr_13200_13224[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_13191 === 2) {
                            var state_13190__$1 = state_13190;
                            return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_13190__$1, 4, ch);
                          } else {
                            if (state_val_13191 === 11) {
                              var inst_13167 = state_13190[7];
                              var inst_13177 = state_13190[2];
                              var state_13190__$1 = state_13190;
                              return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_13190__$1, 8, inst_13177, inst_13167);
                            } else {
                              if (state_val_13191 === 9) {
                                var state_13190__$1 = state_13190;
                                var statearr_13201_13225 = state_13190__$1;
                                statearr_13201_13225[2] = tc;
                                statearr_13201_13225[1] = 11;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_13191 === 5) {
                                  var inst_13170 = cljs.core.async.close_BANG_.call(null, tc);
                                  var inst_13171 = cljs.core.async.close_BANG_.call(null, fc);
                                  var state_13190__$1 = function() {
                                    var statearr_13202 = state_13190;
                                    statearr_13202[8] = inst_13170;
                                    return statearr_13202;
                                  }();
                                  var statearr_13203_13226 = state_13190__$1;
                                  statearr_13203_13226[2] = inst_13171;
                                  statearr_13203_13226[1] = 7;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_13191 === 14) {
                                    var inst_13184 = state_13190[2];
                                    var state_13190__$1 = state_13190;
                                    var statearr_13204_13227 = state_13190__$1;
                                    statearr_13204_13227[2] = inst_13184;
                                    statearr_13204_13227[1] = 7;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_13191 === 10) {
                                      var state_13190__$1 = state_13190;
                                      var statearr_13205_13228 = state_13190__$1;
                                      statearr_13205_13228[2] = fc;
                                      statearr_13205_13228[1] = 11;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_13191 === 8) {
                                        var inst_13179 = state_13190[2];
                                        var state_13190__$1 = state_13190;
                                        if (cljs.core.truth_(inst_13179)) {
                                          var statearr_13206_13229 = state_13190__$1;
                                          statearr_13206_13229[1] = 12;
                                        } else {
                                          var statearr_13207_13230 = state_13190__$1;
                                          statearr_13207_13230[1] = 13;
                                        }
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        return null;
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__7864__auto___13216, tc, fc);
        return function(switch__7802__auto__, c__7864__auto___13216, tc, fc) {
          return function() {
            var cljs$core$async$state_machine__7803__auto__ = null;
            var cljs$core$async$state_machine__7803__auto____0 = function() {
              var statearr_13211 = [null, null, null, null, null, null, null, null, null];
              statearr_13211[0] = cljs$core$async$state_machine__7803__auto__;
              statearr_13211[1] = 1;
              return statearr_13211;
            };
            var cljs$core$async$state_machine__7803__auto____1 = function(state_13190) {
              while (true) {
                var ret_value__7804__auto__ = function() {
                  try {
                    while (true) {
                      var result__7805__auto__ = switch__7802__auto__.call(null, state_13190);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__7805__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__7805__auto__;
                      }
                      break;
                    }
                  } catch (e13212) {
                    if (e13212 instanceof Object) {
                      var ex__7806__auto__ = e13212;
                      var statearr_13213_13231 = state_13190;
                      statearr_13213_13231[5] = ex__7806__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_13190);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e13212;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__7804__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__13232 = state_13190;
                  state_13190 = G__13232;
                  continue;
                } else {
                  return ret_value__7804__auto__;
                }
                break;
              }
            };
            cljs$core$async$state_machine__7803__auto__ = function(state_13190) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$state_machine__7803__auto____0.call(this);
                case 1:
                  return cljs$core$async$state_machine__7803__auto____1.call(this, state_13190);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            cljs$core$async$state_machine__7803__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$state_machine__7803__auto____0;
            cljs$core$async$state_machine__7803__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$state_machine__7803__auto____1;
            return cljs$core$async$state_machine__7803__auto__;
          }();
        }(switch__7802__auto__, c__7864__auto___13216, tc, fc);
      }();
      var state__7866__auto__ = function() {
        var statearr_13214 = f__7865__auto__.call(null);
        statearr_13214[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__7864__auto___13216;
        return statearr_13214;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__7866__auto__);
    };
  }(c__7864__auto___13216, tc, fc));
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [tc, fc], null);
};
cljs.core.async.split.cljs$lang$maxFixedArity = 4;
cljs.core.async.reduce = function cljs$core$async$reduce(f, init, ch) {
  var c__7864__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__7864__auto__) {
    return function() {
      var f__7865__auto__ = function() {
        var switch__7802__auto__ = function(c__7864__auto__) {
          return function(state_13279) {
            var state_val_13280 = state_13279[1];
            if (state_val_13280 === 7) {
              var inst_13275 = state_13279[2];
              var state_13279__$1 = state_13279;
              var statearr_13281_13297 = state_13279__$1;
              statearr_13281_13297[2] = inst_13275;
              statearr_13281_13297[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_13280 === 6) {
                var inst_13265 = state_13279[7];
                var inst_13268 = state_13279[8];
                var inst_13272 = f.call(null, inst_13265, inst_13268);
                var inst_13265__$1 = inst_13272;
                var state_13279__$1 = function() {
                  var statearr_13282 = state_13279;
                  statearr_13282[7] = inst_13265__$1;
                  return statearr_13282;
                }();
                var statearr_13283_13298 = state_13279__$1;
                statearr_13283_13298[2] = null;
                statearr_13283_13298[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_13280 === 5) {
                  var inst_13265 = state_13279[7];
                  var state_13279__$1 = state_13279;
                  var statearr_13284_13299 = state_13279__$1;
                  statearr_13284_13299[2] = inst_13265;
                  statearr_13284_13299[1] = 7;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_13280 === 4) {
                    var inst_13268 = state_13279[8];
                    var inst_13268__$1 = state_13279[2];
                    var inst_13269 = inst_13268__$1 == null;
                    var state_13279__$1 = function() {
                      var statearr_13285 = state_13279;
                      statearr_13285[8] = inst_13268__$1;
                      return statearr_13285;
                    }();
                    if (cljs.core.truth_(inst_13269)) {
                      var statearr_13286_13300 = state_13279__$1;
                      statearr_13286_13300[1] = 5;
                    } else {
                      var statearr_13287_13301 = state_13279__$1;
                      statearr_13287_13301[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_13280 === 3) {
                      var inst_13277 = state_13279[2];
                      var state_13279__$1 = state_13279;
                      return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_13279__$1, inst_13277);
                    } else {
                      if (state_val_13280 === 2) {
                        var state_13279__$1 = state_13279;
                        return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_13279__$1, 4, ch);
                      } else {
                        if (state_val_13280 === 1) {
                          var inst_13265 = init;
                          var state_13279__$1 = function() {
                            var statearr_13288 = state_13279;
                            statearr_13288[7] = inst_13265;
                            return statearr_13288;
                          }();
                          var statearr_13289_13302 = state_13279__$1;
                          statearr_13289_13302[2] = null;
                          statearr_13289_13302[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          return null;
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__7864__auto__);
        return function(switch__7802__auto__, c__7864__auto__) {
          return function() {
            var cljs$core$async$reduce_$_state_machine__7803__auto__ = null;
            var cljs$core$async$reduce_$_state_machine__7803__auto____0 = function() {
              var statearr_13293 = [null, null, null, null, null, null, null, null, null];
              statearr_13293[0] = cljs$core$async$reduce_$_state_machine__7803__auto__;
              statearr_13293[1] = 1;
              return statearr_13293;
            };
            var cljs$core$async$reduce_$_state_machine__7803__auto____1 = function(state_13279) {
              while (true) {
                var ret_value__7804__auto__ = function() {
                  try {
                    while (true) {
                      var result__7805__auto__ = switch__7802__auto__.call(null, state_13279);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__7805__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__7805__auto__;
                      }
                      break;
                    }
                  } catch (e13294) {
                    if (e13294 instanceof Object) {
                      var ex__7806__auto__ = e13294;
                      var statearr_13295_13303 = state_13279;
                      statearr_13295_13303[5] = ex__7806__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_13279);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e13294;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__7804__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__13304 = state_13279;
                  state_13279 = G__13304;
                  continue;
                } else {
                  return ret_value__7804__auto__;
                }
                break;
              }
            };
            cljs$core$async$reduce_$_state_machine__7803__auto__ = function(state_13279) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$reduce_$_state_machine__7803__auto____0.call(this);
                case 1:
                  return cljs$core$async$reduce_$_state_machine__7803__auto____1.call(this, state_13279);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            cljs$core$async$reduce_$_state_machine__7803__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$reduce_$_state_machine__7803__auto____0;
            cljs$core$async$reduce_$_state_machine__7803__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$reduce_$_state_machine__7803__auto____1;
            return cljs$core$async$reduce_$_state_machine__7803__auto__;
          }();
        }(switch__7802__auto__, c__7864__auto__);
      }();
      var state__7866__auto__ = function() {
        var statearr_13296 = f__7865__auto__.call(null);
        statearr_13296[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__7864__auto__;
        return statearr_13296;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__7866__auto__);
    };
  }(c__7864__auto__));
  return c__7864__auto__;
};
cljs.core.async.onto_chan = function cljs$core$async$onto_chan() {
  var G__13306 = arguments.length;
  switch(G__13306) {
    case 2:
      return cljs.core.async.onto_chan.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.async.onto_chan.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.async.onto_chan.cljs$core$IFn$_invoke$arity$2 = function(ch, coll) {
  return cljs.core.async.onto_chan.call(null, ch, coll, true);
};
cljs.core.async.onto_chan.cljs$core$IFn$_invoke$arity$3 = function(ch, coll, close_QMARK_) {
  var c__7864__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__7864__auto__) {
    return function() {
      var f__7865__auto__ = function() {
        var switch__7802__auto__ = function(c__7864__auto__) {
          return function(state_13331) {
            var state_val_13332 = state_13331[1];
            if (state_val_13332 === 7) {
              var inst_13313 = state_13331[2];
              var state_13331__$1 = state_13331;
              var statearr_13333_13357 = state_13331__$1;
              statearr_13333_13357[2] = inst_13313;
              statearr_13333_13357[1] = 6;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_13332 === 1) {
                var inst_13307 = cljs.core.seq.call(null, coll);
                var inst_13308 = inst_13307;
                var state_13331__$1 = function() {
                  var statearr_13334 = state_13331;
                  statearr_13334[7] = inst_13308;
                  return statearr_13334;
                }();
                var statearr_13335_13358 = state_13331__$1;
                statearr_13335_13358[2] = null;
                statearr_13335_13358[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_13332 === 4) {
                  var inst_13308 = state_13331[7];
                  var inst_13311 = cljs.core.first.call(null, inst_13308);
                  var state_13331__$1 = state_13331;
                  return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_13331__$1, 7, ch, inst_13311);
                } else {
                  if (state_val_13332 === 13) {
                    var inst_13325 = state_13331[2];
                    var state_13331__$1 = state_13331;
                    var statearr_13336_13359 = state_13331__$1;
                    statearr_13336_13359[2] = inst_13325;
                    statearr_13336_13359[1] = 10;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_13332 === 6) {
                      var inst_13316 = state_13331[2];
                      var state_13331__$1 = state_13331;
                      if (cljs.core.truth_(inst_13316)) {
                        var statearr_13337_13360 = state_13331__$1;
                        statearr_13337_13360[1] = 8;
                      } else {
                        var statearr_13338_13361 = state_13331__$1;
                        statearr_13338_13361[1] = 9;
                      }
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_13332 === 3) {
                        var inst_13329 = state_13331[2];
                        var state_13331__$1 = state_13331;
                        return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_13331__$1, inst_13329);
                      } else {
                        if (state_val_13332 === 12) {
                          var state_13331__$1 = state_13331;
                          var statearr_13339_13362 = state_13331__$1;
                          statearr_13339_13362[2] = null;
                          statearr_13339_13362[1] = 13;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_13332 === 2) {
                            var inst_13308 = state_13331[7];
                            var state_13331__$1 = state_13331;
                            if (cljs.core.truth_(inst_13308)) {
                              var statearr_13340_13363 = state_13331__$1;
                              statearr_13340_13363[1] = 4;
                            } else {
                              var statearr_13341_13364 = state_13331__$1;
                              statearr_13341_13364[1] = 5;
                            }
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_13332 === 11) {
                              var inst_13322 = cljs.core.async.close_BANG_.call(null, ch);
                              var state_13331__$1 = state_13331;
                              var statearr_13342_13365 = state_13331__$1;
                              statearr_13342_13365[2] = inst_13322;
                              statearr_13342_13365[1] = 13;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_13332 === 9) {
                                var state_13331__$1 = state_13331;
                                if (cljs.core.truth_(close_QMARK_)) {
                                  var statearr_13343_13366 = state_13331__$1;
                                  statearr_13343_13366[1] = 11;
                                } else {
                                  var statearr_13344_13367 = state_13331__$1;
                                  statearr_13344_13367[1] = 12;
                                }
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_13332 === 5) {
                                  var inst_13308 = state_13331[7];
                                  var state_13331__$1 = state_13331;
                                  var statearr_13345_13368 = state_13331__$1;
                                  statearr_13345_13368[2] = inst_13308;
                                  statearr_13345_13368[1] = 6;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_13332 === 10) {
                                    var inst_13327 = state_13331[2];
                                    var state_13331__$1 = state_13331;
                                    var statearr_13346_13369 = state_13331__$1;
                                    statearr_13346_13369[2] = inst_13327;
                                    statearr_13346_13369[1] = 3;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_13332 === 8) {
                                      var inst_13308 = state_13331[7];
                                      var inst_13318 = cljs.core.next.call(null, inst_13308);
                                      var inst_13308__$1 = inst_13318;
                                      var state_13331__$1 = function() {
                                        var statearr_13347 = state_13331;
                                        statearr_13347[7] = inst_13308__$1;
                                        return statearr_13347;
                                      }();
                                      var statearr_13348_13370 = state_13331__$1;
                                      statearr_13348_13370[2] = null;
                                      statearr_13348_13370[1] = 2;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      return null;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__7864__auto__);
        return function(switch__7802__auto__, c__7864__auto__) {
          return function() {
            var cljs$core$async$state_machine__7803__auto__ = null;
            var cljs$core$async$state_machine__7803__auto____0 = function() {
              var statearr_13352 = [null, null, null, null, null, null, null, null];
              statearr_13352[0] = cljs$core$async$state_machine__7803__auto__;
              statearr_13352[1] = 1;
              return statearr_13352;
            };
            var cljs$core$async$state_machine__7803__auto____1 = function(state_13331) {
              while (true) {
                var ret_value__7804__auto__ = function() {
                  try {
                    while (true) {
                      var result__7805__auto__ = switch__7802__auto__.call(null, state_13331);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__7805__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__7805__auto__;
                      }
                      break;
                    }
                  } catch (e13353) {
                    if (e13353 instanceof Object) {
                      var ex__7806__auto__ = e13353;
                      var statearr_13354_13371 = state_13331;
                      statearr_13354_13371[5] = ex__7806__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_13331);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e13353;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__7804__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__13372 = state_13331;
                  state_13331 = G__13372;
                  continue;
                } else {
                  return ret_value__7804__auto__;
                }
                break;
              }
            };
            cljs$core$async$state_machine__7803__auto__ = function(state_13331) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$state_machine__7803__auto____0.call(this);
                case 1:
                  return cljs$core$async$state_machine__7803__auto____1.call(this, state_13331);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            cljs$core$async$state_machine__7803__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$state_machine__7803__auto____0;
            cljs$core$async$state_machine__7803__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$state_machine__7803__auto____1;
            return cljs$core$async$state_machine__7803__auto__;
          }();
        }(switch__7802__auto__, c__7864__auto__);
      }();
      var state__7866__auto__ = function() {
        var statearr_13355 = f__7865__auto__.call(null);
        statearr_13355[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__7864__auto__;
        return statearr_13355;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__7866__auto__);
    };
  }(c__7864__auto__));
  return c__7864__auto__;
};
cljs.core.async.onto_chan.cljs$lang$maxFixedArity = 3;
cljs.core.async.to_chan = function cljs$core$async$to_chan(coll) {
  var ch = cljs.core.async.chan.call(null, cljs.core.bounded_count.call(null, 100, coll));
  cljs.core.async.onto_chan.call(null, ch, coll);
  return ch;
};
cljs.core.async.Mux = function() {
  var obj13374 = {};
  return obj13374;
}();
cljs.core.async.muxch_STAR_ = function cljs$core$async$muxch_STAR_(_) {
  if (function() {
    var and__4323__auto__ = _;
    if (and__4323__auto__) {
      return _.cljs$core$async$Mux$muxch_STAR_$arity$1;
    } else {
      return and__4323__auto__;
    }
  }()) {
    return _.cljs$core$async$Mux$muxch_STAR_$arity$1(_);
  } else {
    var x__4971__auto__ = _ == null ? null : _;
    return function() {
      var or__4335__auto__ = cljs.core.async.muxch_STAR_[goog.typeOf(x__4971__auto__)];
      if (or__4335__auto__) {
        return or__4335__auto__;
      } else {
        var or__4335__auto____$1 = cljs.core.async.muxch_STAR_["_"];
        if (or__4335__auto____$1) {
          return or__4335__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mux.muxch*", _);
        }
      }
    }().call(null, _);
  }
};
cljs.core.async.Mult = function() {
  var obj13376 = {};
  return obj13376;
}();
cljs.core.async.tap_STAR_ = function cljs$core$async$tap_STAR_(m, ch, close_QMARK_) {
  if (function() {
    var and__4323__auto__ = m;
    if (and__4323__auto__) {
      return m.cljs$core$async$Mult$tap_STAR_$arity$3;
    } else {
      return and__4323__auto__;
    }
  }()) {
    return m.cljs$core$async$Mult$tap_STAR_$arity$3(m, ch, close_QMARK_);
  } else {
    var x__4971__auto__ = m == null ? null : m;
    return function() {
      var or__4335__auto__ = cljs.core.async.tap_STAR_[goog.typeOf(x__4971__auto__)];
      if (or__4335__auto__) {
        return or__4335__auto__;
      } else {
        var or__4335__auto____$1 = cljs.core.async.tap_STAR_["_"];
        if (or__4335__auto____$1) {
          return or__4335__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mult.tap*", m);
        }
      }
    }().call(null, m, ch, close_QMARK_);
  }
};
cljs.core.async.untap_STAR_ = function cljs$core$async$untap_STAR_(m, ch) {
  if (function() {
    var and__4323__auto__ = m;
    if (and__4323__auto__) {
      return m.cljs$core$async$Mult$untap_STAR_$arity$2;
    } else {
      return and__4323__auto__;
    }
  }()) {
    return m.cljs$core$async$Mult$untap_STAR_$arity$2(m, ch);
  } else {
    var x__4971__auto__ = m == null ? null : m;
    return function() {
      var or__4335__auto__ = cljs.core.async.untap_STAR_[goog.typeOf(x__4971__auto__)];
      if (or__4335__auto__) {
        return or__4335__auto__;
      } else {
        var or__4335__auto____$1 = cljs.core.async.untap_STAR_["_"];
        if (or__4335__auto____$1) {
          return or__4335__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mult.untap*", m);
        }
      }
    }().call(null, m, ch);
  }
};
cljs.core.async.untap_all_STAR_ = function cljs$core$async$untap_all_STAR_(m) {
  if (function() {
    var and__4323__auto__ = m;
    if (and__4323__auto__) {
      return m.cljs$core$async$Mult$untap_all_STAR_$arity$1;
    } else {
      return and__4323__auto__;
    }
  }()) {
    return m.cljs$core$async$Mult$untap_all_STAR_$arity$1(m);
  } else {
    var x__4971__auto__ = m == null ? null : m;
    return function() {
      var or__4335__auto__ = cljs.core.async.untap_all_STAR_[goog.typeOf(x__4971__auto__)];
      if (or__4335__auto__) {
        return or__4335__auto__;
      } else {
        var or__4335__auto____$1 = cljs.core.async.untap_all_STAR_["_"];
        if (or__4335__auto____$1) {
          return or__4335__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mult.untap-all*", m);
        }
      }
    }().call(null, m);
  }
};
cljs.core.async.mult = function cljs$core$async$mult(ch) {
  var cs = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var m = function() {
    if (typeof cljs.core.async.t13598 !== "undefined") {
    } else {
      cljs.core.async.t13598 = function(cs, ch, mult, meta13599) {
        this.cs = cs;
        this.ch = ch;
        this.mult = mult;
        this.meta13599 = meta13599;
        this.cljs$lang$protocol_mask$partition1$ = 0;
        this.cljs$lang$protocol_mask$partition0$ = 393216;
      };
      cljs.core.async.t13598.prototype.cljs$core$async$Mult$ = true;
      cljs.core.async.t13598.prototype.cljs$core$async$Mult$tap_STAR_$arity$3 = function(cs) {
        return function(_, ch__$1, close_QMARK_) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.assoc, ch__$1, close_QMARK_);
          return null;
        };
      }(cs);
      cljs.core.async.t13598.prototype.cljs$core$async$Mult$untap_STAR_$arity$2 = function(cs) {
        return function(_, ch__$1) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.dissoc, ch__$1);
          return null;
        };
      }(cs);
      cljs.core.async.t13598.prototype.cljs$core$async$Mult$untap_all_STAR_$arity$1 = function(cs) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.reset_BANG_.call(null, self__.cs, cljs.core.PersistentArrayMap.EMPTY);
          return null;
        };
      }(cs);
      cljs.core.async.t13598.prototype.cljs$core$async$Mux$ = true;
      cljs.core.async.t13598.prototype.cljs$core$async$Mux$muxch_STAR_$arity$1 = function(cs) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          return self__.ch;
        };
      }(cs);
      cljs.core.async.t13598.prototype.cljs$core$IMeta$_meta$arity$1 = function(cs) {
        return function(_13600) {
          var self__ = this;
          var _13600__$1 = this;
          return self__.meta13599;
        };
      }(cs);
      cljs.core.async.t13598.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(cs) {
        return function(_13600, meta13599__$1) {
          var self__ = this;
          var _13600__$1 = this;
          return new cljs.core.async.t13598(self__.cs, self__.ch, self__.mult, meta13599__$1);
        };
      }(cs);
      cljs.core.async.t13598.cljs$lang$type = true;
      cljs.core.async.t13598.cljs$lang$ctorStr = "cljs.core.async/t13598";
      cljs.core.async.t13598.cljs$lang$ctorPrWriter = function(cs) {
        return function(this__4914__auto__, writer__4915__auto__, opt__4916__auto__) {
          return cljs.core._write.call(null, writer__4915__auto__, "cljs.core.async/t13598");
        };
      }(cs);
      cljs.core.async.__GT_t13598 = function(cs) {
        return function cljs$core$async$mult_$___GT_t13598(cs__$1, ch__$1, mult__$1, meta13599) {
          return new cljs.core.async.t13598(cs__$1, ch__$1, mult__$1, meta13599);
        };
      }(cs);
    }
    return new cljs.core.async.t13598(cs, ch, cljs$core$async$mult, cljs.core.PersistentArrayMap.EMPTY);
  }();
  var dchan = cljs.core.async.chan.call(null, 1);
  var dctr = cljs.core.atom.call(null, null);
  var done = function(cs, m, dchan, dctr) {
    return function(_) {
      if (cljs.core.swap_BANG_.call(null, dctr, cljs.core.dec) === 0) {
        return cljs.core.async.put_BANG_.call(null, dchan, true);
      } else {
        return null;
      }
    };
  }(cs, m, dchan, dctr);
  var c__7864__auto___13819 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__7864__auto___13819, cs, m, dchan, dctr, done) {
    return function() {
      var f__7865__auto__ = function() {
        var switch__7802__auto__ = function(c__7864__auto___13819, cs, m, dchan, dctr, done) {
          return function(state_13731) {
            var state_val_13732 = state_13731[1];
            if (state_val_13732 === 7) {
              var inst_13727 = state_13731[2];
              var state_13731__$1 = state_13731;
              var statearr_13733_13820 = state_13731__$1;
              statearr_13733_13820[2] = inst_13727;
              statearr_13733_13820[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_13732 === 20) {
                var inst_13632 = state_13731[7];
                var inst_13642 = cljs.core.first.call(null, inst_13632);
                var inst_13643 = cljs.core.nth.call(null, inst_13642, 0, null);
                var inst_13644 = cljs.core.nth.call(null, inst_13642, 1, null);
                var state_13731__$1 = function() {
                  var statearr_13734 = state_13731;
                  statearr_13734[8] = inst_13643;
                  return statearr_13734;
                }();
                if (cljs.core.truth_(inst_13644)) {
                  var statearr_13735_13821 = state_13731__$1;
                  statearr_13735_13821[1] = 22;
                } else {
                  var statearr_13736_13822 = state_13731__$1;
                  statearr_13736_13822[1] = 23;
                }
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_13732 === 27) {
                  var inst_13674 = state_13731[9];
                  var inst_13672 = state_13731[10];
                  var inst_13603 = state_13731[11];
                  var inst_13679 = state_13731[12];
                  var inst_13679__$1 = cljs.core._nth.call(null, inst_13672, inst_13674);
                  var inst_13680 = cljs.core.async.put_BANG_.call(null, inst_13679__$1, inst_13603, done);
                  var state_13731__$1 = function() {
                    var statearr_13737 = state_13731;
                    statearr_13737[12] = inst_13679__$1;
                    return statearr_13737;
                  }();
                  if (cljs.core.truth_(inst_13680)) {
                    var statearr_13738_13823 = state_13731__$1;
                    statearr_13738_13823[1] = 30;
                  } else {
                    var statearr_13739_13824 = state_13731__$1;
                    statearr_13739_13824[1] = 31;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_13732 === 1) {
                    var state_13731__$1 = state_13731;
                    var statearr_13740_13825 = state_13731__$1;
                    statearr_13740_13825[2] = null;
                    statearr_13740_13825[1] = 2;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_13732 === 24) {
                      var inst_13632 = state_13731[7];
                      var inst_13649 = state_13731[2];
                      var inst_13650 = cljs.core.next.call(null, inst_13632);
                      var inst_13612 = inst_13650;
                      var inst_13613 = null;
                      var inst_13614 = 0;
                      var inst_13615 = 0;
                      var state_13731__$1 = function() {
                        var statearr_13741 = state_13731;
                        statearr_13741[13] = inst_13615;
                        statearr_13741[14] = inst_13614;
                        statearr_13741[15] = inst_13649;
                        statearr_13741[16] = inst_13612;
                        statearr_13741[17] = inst_13613;
                        return statearr_13741;
                      }();
                      var statearr_13742_13826 = state_13731__$1;
                      statearr_13742_13826[2] = null;
                      statearr_13742_13826[1] = 8;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_13732 === 39) {
                        var state_13731__$1 = state_13731;
                        var statearr_13746_13827 = state_13731__$1;
                        statearr_13746_13827[2] = null;
                        statearr_13746_13827[1] = 41;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_13732 === 4) {
                          var inst_13603 = state_13731[11];
                          var inst_13603__$1 = state_13731[2];
                          var inst_13604 = inst_13603__$1 == null;
                          var state_13731__$1 = function() {
                            var statearr_13747 = state_13731;
                            statearr_13747[11] = inst_13603__$1;
                            return statearr_13747;
                          }();
                          if (cljs.core.truth_(inst_13604)) {
                            var statearr_13748_13828 = state_13731__$1;
                            statearr_13748_13828[1] = 5;
                          } else {
                            var statearr_13749_13829 = state_13731__$1;
                            statearr_13749_13829[1] = 6;
                          }
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_13732 === 15) {
                            var inst_13615 = state_13731[13];
                            var inst_13614 = state_13731[14];
                            var inst_13612 = state_13731[16];
                            var inst_13613 = state_13731[17];
                            var inst_13628 = state_13731[2];
                            var inst_13629 = inst_13615 + 1;
                            var tmp13743 = inst_13614;
                            var tmp13744 = inst_13612;
                            var tmp13745 = inst_13613;
                            var inst_13612__$1 = tmp13744;
                            var inst_13613__$1 = tmp13745;
                            var inst_13614__$1 = tmp13743;
                            var inst_13615__$1 = inst_13629;
                            var state_13731__$1 = function() {
                              var statearr_13750 = state_13731;
                              statearr_13750[18] = inst_13628;
                              statearr_13750[13] = inst_13615__$1;
                              statearr_13750[14] = inst_13614__$1;
                              statearr_13750[16] = inst_13612__$1;
                              statearr_13750[17] = inst_13613__$1;
                              return statearr_13750;
                            }();
                            var statearr_13751_13830 = state_13731__$1;
                            statearr_13751_13830[2] = null;
                            statearr_13751_13830[1] = 8;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_13732 === 21) {
                              var inst_13653 = state_13731[2];
                              var state_13731__$1 = state_13731;
                              var statearr_13755_13831 = state_13731__$1;
                              statearr_13755_13831[2] = inst_13653;
                              statearr_13755_13831[1] = 18;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_13732 === 31) {
                                var inst_13679 = state_13731[12];
                                var inst_13683 = done.call(null, null);
                                var inst_13684 = cljs.core.async.untap_STAR_.call(null, m, inst_13679);
                                var state_13731__$1 = function() {
                                  var statearr_13756 = state_13731;
                                  statearr_13756[19] = inst_13683;
                                  return statearr_13756;
                                }();
                                var statearr_13757_13832 = state_13731__$1;
                                statearr_13757_13832[2] = inst_13684;
                                statearr_13757_13832[1] = 32;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_13732 === 32) {
                                  var inst_13674 = state_13731[9];
                                  var inst_13671 = state_13731[20];
                                  var inst_13672 = state_13731[10];
                                  var inst_13673 = state_13731[21];
                                  var inst_13686 = state_13731[2];
                                  var inst_13687 = inst_13674 + 1;
                                  var tmp13752 = inst_13671;
                                  var tmp13753 = inst_13672;
                                  var tmp13754 = inst_13673;
                                  var inst_13671__$1 = tmp13752;
                                  var inst_13672__$1 = tmp13753;
                                  var inst_13673__$1 = tmp13754;
                                  var inst_13674__$1 = inst_13687;
                                  var state_13731__$1 = function() {
                                    var statearr_13758 = state_13731;
                                    statearr_13758[9] = inst_13674__$1;
                                    statearr_13758[20] = inst_13671__$1;
                                    statearr_13758[10] = inst_13672__$1;
                                    statearr_13758[22] = inst_13686;
                                    statearr_13758[21] = inst_13673__$1;
                                    return statearr_13758;
                                  }();
                                  var statearr_13759_13833 = state_13731__$1;
                                  statearr_13759_13833[2] = null;
                                  statearr_13759_13833[1] = 25;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_13732 === 40) {
                                    var inst_13699 = state_13731[23];
                                    var inst_13703 = done.call(null, null);
                                    var inst_13704 = cljs.core.async.untap_STAR_.call(null, m, inst_13699);
                                    var state_13731__$1 = function() {
                                      var statearr_13760 = state_13731;
                                      statearr_13760[24] = inst_13703;
                                      return statearr_13760;
                                    }();
                                    var statearr_13761_13834 = state_13731__$1;
                                    statearr_13761_13834[2] = inst_13704;
                                    statearr_13761_13834[1] = 41;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_13732 === 33) {
                                      var inst_13690 = state_13731[25];
                                      var inst_13692 = cljs.core.chunked_seq_QMARK_.call(null, inst_13690);
                                      var state_13731__$1 = state_13731;
                                      if (inst_13692) {
                                        var statearr_13762_13835 = state_13731__$1;
                                        statearr_13762_13835[1] = 36;
                                      } else {
                                        var statearr_13763_13836 = state_13731__$1;
                                        statearr_13763_13836[1] = 37;
                                      }
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_13732 === 13) {
                                        var inst_13622 = state_13731[26];
                                        var inst_13625 = cljs.core.async.close_BANG_.call(null, inst_13622);
                                        var state_13731__$1 = state_13731;
                                        var statearr_13764_13837 = state_13731__$1;
                                        statearr_13764_13837[2] = inst_13625;
                                        statearr_13764_13837[1] = 15;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_13732 === 22) {
                                          var inst_13643 = state_13731[8];
                                          var inst_13646 = cljs.core.async.close_BANG_.call(null, inst_13643);
                                          var state_13731__$1 = state_13731;
                                          var statearr_13765_13838 = state_13731__$1;
                                          statearr_13765_13838[2] = inst_13646;
                                          statearr_13765_13838[1] = 24;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_13732 === 36) {
                                            var inst_13690 = state_13731[25];
                                            var inst_13694 = cljs.core.chunk_first.call(null, inst_13690);
                                            var inst_13695 = cljs.core.chunk_rest.call(null, inst_13690);
                                            var inst_13696 = cljs.core.count.call(null, inst_13694);
                                            var inst_13671 = inst_13695;
                                            var inst_13672 = inst_13694;
                                            var inst_13673 = inst_13696;
                                            var inst_13674 = 0;
                                            var state_13731__$1 = function() {
                                              var statearr_13766 = state_13731;
                                              statearr_13766[9] = inst_13674;
                                              statearr_13766[20] = inst_13671;
                                              statearr_13766[10] = inst_13672;
                                              statearr_13766[21] = inst_13673;
                                              return statearr_13766;
                                            }();
                                            var statearr_13767_13839 = state_13731__$1;
                                            statearr_13767_13839[2] = null;
                                            statearr_13767_13839[1] = 25;
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            if (state_val_13732 === 41) {
                                              var inst_13690 = state_13731[25];
                                              var inst_13706 = state_13731[2];
                                              var inst_13707 = cljs.core.next.call(null, inst_13690);
                                              var inst_13671 = inst_13707;
                                              var inst_13672 = null;
                                              var inst_13673 = 0;
                                              var inst_13674 = 0;
                                              var state_13731__$1 = function() {
                                                var statearr_13768 = state_13731;
                                                statearr_13768[9] = inst_13674;
                                                statearr_13768[27] = inst_13706;
                                                statearr_13768[20] = inst_13671;
                                                statearr_13768[10] = inst_13672;
                                                statearr_13768[21] = inst_13673;
                                                return statearr_13768;
                                              }();
                                              var statearr_13769_13840 = state_13731__$1;
                                              statearr_13769_13840[2] = null;
                                              statearr_13769_13840[1] = 25;
                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                            } else {
                                              if (state_val_13732 === 43) {
                                                var state_13731__$1 = state_13731;
                                                var statearr_13770_13841 = state_13731__$1;
                                                statearr_13770_13841[2] = null;
                                                statearr_13770_13841[1] = 44;
                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                              } else {
                                                if (state_val_13732 === 29) {
                                                  var inst_13715 = state_13731[2];
                                                  var state_13731__$1 = state_13731;
                                                  var statearr_13771_13842 = state_13731__$1;
                                                  statearr_13771_13842[2] = inst_13715;
                                                  statearr_13771_13842[1] = 26;
                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                } else {
                                                  if (state_val_13732 === 44) {
                                                    var inst_13724 = state_13731[2];
                                                    var state_13731__$1 = function() {
                                                      var statearr_13772 = state_13731;
                                                      statearr_13772[28] = inst_13724;
                                                      return statearr_13772;
                                                    }();
                                                    var statearr_13773_13843 = state_13731__$1;
                                                    statearr_13773_13843[2] = null;
                                                    statearr_13773_13843[1] = 2;
                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                  } else {
                                                    if (state_val_13732 === 6) {
                                                      var inst_13663 = state_13731[29];
                                                      var inst_13662 = cljs.core.deref.call(null, cs);
                                                      var inst_13663__$1 = cljs.core.keys.call(null, inst_13662);
                                                      var inst_13664 = cljs.core.count.call(null, inst_13663__$1);
                                                      var inst_13665 = cljs.core.reset_BANG_.call(null, dctr, inst_13664);
                                                      var inst_13670 = cljs.core.seq.call(null, inst_13663__$1);
                                                      var inst_13671 = inst_13670;
                                                      var inst_13672 = null;
                                                      var inst_13673 = 0;
                                                      var inst_13674 = 0;
                                                      var state_13731__$1 = function() {
                                                        var statearr_13774 = state_13731;
                                                        statearr_13774[9] = inst_13674;
                                                        statearr_13774[20] = inst_13671;
                                                        statearr_13774[10] = inst_13672;
                                                        statearr_13774[30] = inst_13665;
                                                        statearr_13774[29] = inst_13663__$1;
                                                        statearr_13774[21] = inst_13673;
                                                        return statearr_13774;
                                                      }();
                                                      var statearr_13775_13844 = state_13731__$1;
                                                      statearr_13775_13844[2] = null;
                                                      statearr_13775_13844[1] = 25;
                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                    } else {
                                                      if (state_val_13732 === 28) {
                                                        var inst_13690 = state_13731[25];
                                                        var inst_13671 = state_13731[20];
                                                        var inst_13690__$1 = cljs.core.seq.call(null, inst_13671);
                                                        var state_13731__$1 = function() {
                                                          var statearr_13776 = state_13731;
                                                          statearr_13776[25] = inst_13690__$1;
                                                          return statearr_13776;
                                                        }();
                                                        if (inst_13690__$1) {
                                                          var statearr_13777_13845 = state_13731__$1;
                                                          statearr_13777_13845[1] = 33;
                                                        } else {
                                                          var statearr_13778_13846 = state_13731__$1;
                                                          statearr_13778_13846[1] = 34;
                                                        }
                                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                      } else {
                                                        if (state_val_13732 === 25) {
                                                          var inst_13674 = state_13731[9];
                                                          var inst_13673 = state_13731[21];
                                                          var inst_13676 = inst_13674 < inst_13673;
                                                          var inst_13677 = inst_13676;
                                                          var state_13731__$1 = state_13731;
                                                          if (cljs.core.truth_(inst_13677)) {
                                                            var statearr_13779_13847 = state_13731__$1;
                                                            statearr_13779_13847[1] = 27;
                                                          } else {
                                                            var statearr_13780_13848 = state_13731__$1;
                                                            statearr_13780_13848[1] = 28;
                                                          }
                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                        } else {
                                                          if (state_val_13732 === 34) {
                                                            var state_13731__$1 = state_13731;
                                                            var statearr_13781_13849 = state_13731__$1;
                                                            statearr_13781_13849[2] = null;
                                                            statearr_13781_13849[1] = 35;
                                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                          } else {
                                                            if (state_val_13732 === 17) {
                                                              var state_13731__$1 = state_13731;
                                                              var statearr_13782_13850 = state_13731__$1;
                                                              statearr_13782_13850[2] = null;
                                                              statearr_13782_13850[1] = 18;
                                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                            } else {
                                                              if (state_val_13732 === 3) {
                                                                var inst_13729 = state_13731[2];
                                                                var state_13731__$1 = state_13731;
                                                                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_13731__$1, inst_13729);
                                                              } else {
                                                                if (state_val_13732 === 12) {
                                                                  var inst_13658 = state_13731[2];
                                                                  var state_13731__$1 = state_13731;
                                                                  var statearr_13783_13851 = state_13731__$1;
                                                                  statearr_13783_13851[2] = inst_13658;
                                                                  statearr_13783_13851[1] = 9;
                                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                } else {
                                                                  if (state_val_13732 === 2) {
                                                                    var state_13731__$1 = state_13731;
                                                                    return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_13731__$1, 4, ch);
                                                                  } else {
                                                                    if (state_val_13732 === 23) {
                                                                      var state_13731__$1 = state_13731;
                                                                      var statearr_13784_13852 = state_13731__$1;
                                                                      statearr_13784_13852[2] = null;
                                                                      statearr_13784_13852[1] = 24;
                                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                    } else {
                                                                      if (state_val_13732 === 35) {
                                                                        var inst_13713 = state_13731[2];
                                                                        var state_13731__$1 = state_13731;
                                                                        var statearr_13785_13853 = state_13731__$1;
                                                                        statearr_13785_13853[2] = inst_13713;
                                                                        statearr_13785_13853[1] = 29;
                                                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                      } else {
                                                                        if (state_val_13732 === 19) {
                                                                          var inst_13632 = state_13731[7];
                                                                          var inst_13636 = cljs.core.chunk_first.call(null, inst_13632);
                                                                          var inst_13637 = cljs.core.chunk_rest.call(null, inst_13632);
                                                                          var inst_13638 = cljs.core.count.call(null, inst_13636);
                                                                          var inst_13612 = inst_13637;
                                                                          var inst_13613 = inst_13636;
                                                                          var inst_13614 = inst_13638;
                                                                          var inst_13615 = 0;
                                                                          var state_13731__$1 = function() {
                                                                            var statearr_13786 = state_13731;
                                                                            statearr_13786[13] = inst_13615;
                                                                            statearr_13786[14] = inst_13614;
                                                                            statearr_13786[16] = inst_13612;
                                                                            statearr_13786[17] = inst_13613;
                                                                            return statearr_13786;
                                                                          }();
                                                                          var statearr_13787_13854 = state_13731__$1;
                                                                          statearr_13787_13854[2] = null;
                                                                          statearr_13787_13854[1] = 8;
                                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                        } else {
                                                                          if (state_val_13732 === 11) {
                                                                            var inst_13632 = state_13731[7];
                                                                            var inst_13612 = state_13731[16];
                                                                            var inst_13632__$1 = cljs.core.seq.call(null, inst_13612);
                                                                            var state_13731__$1 = function() {
                                                                              var statearr_13788 = state_13731;
                                                                              statearr_13788[7] = inst_13632__$1;
                                                                              return statearr_13788;
                                                                            }();
                                                                            if (inst_13632__$1) {
                                                                              var statearr_13789_13855 = state_13731__$1;
                                                                              statearr_13789_13855[1] = 16;
                                                                            } else {
                                                                              var statearr_13790_13856 = state_13731__$1;
                                                                              statearr_13790_13856[1] = 17;
                                                                            }
                                                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                          } else {
                                                                            if (state_val_13732 === 9) {
                                                                              var inst_13660 = state_13731[2];
                                                                              var state_13731__$1 = state_13731;
                                                                              var statearr_13791_13857 = state_13731__$1;
                                                                              statearr_13791_13857[2] = inst_13660;
                                                                              statearr_13791_13857[1] = 7;
                                                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                            } else {
                                                                              if (state_val_13732 === 5) {
                                                                                var inst_13610 = cljs.core.deref.call(null, cs);
                                                                                var inst_13611 = cljs.core.seq.call(null, inst_13610);
                                                                                var inst_13612 = inst_13611;
                                                                                var inst_13613 = null;
                                                                                var inst_13614 = 0;
                                                                                var inst_13615 = 0;
                                                                                var state_13731__$1 = function() {
                                                                                  var statearr_13792 = state_13731;
                                                                                  statearr_13792[13] = inst_13615;
                                                                                  statearr_13792[14] = inst_13614;
                                                                                  statearr_13792[16] = inst_13612;
                                                                                  statearr_13792[17] = inst_13613;
                                                                                  return statearr_13792;
                                                                                }();
                                                                                var statearr_13793_13858 = state_13731__$1;
                                                                                statearr_13793_13858[2] = null;
                                                                                statearr_13793_13858[1] = 8;
                                                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                              } else {
                                                                                if (state_val_13732 === 14) {
                                                                                  var state_13731__$1 = state_13731;
                                                                                  var statearr_13794_13859 = state_13731__$1;
                                                                                  statearr_13794_13859[2] = null;
                                                                                  statearr_13794_13859[1] = 15;
                                                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                } else {
                                                                                  if (state_val_13732 === 45) {
                                                                                    var inst_13721 = state_13731[2];
                                                                                    var state_13731__$1 = state_13731;
                                                                                    var statearr_13795_13860 = state_13731__$1;
                                                                                    statearr_13795_13860[2] = inst_13721;
                                                                                    statearr_13795_13860[1] = 44;
                                                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                  } else {
                                                                                    if (state_val_13732 === 26) {
                                                                                      var inst_13663 = state_13731[29];
                                                                                      var inst_13717 = state_13731[2];
                                                                                      var inst_13718 = cljs.core.seq.call(null, inst_13663);
                                                                                      var state_13731__$1 = function() {
                                                                                        var statearr_13796 = state_13731;
                                                                                        statearr_13796[31] = inst_13717;
                                                                                        return statearr_13796;
                                                                                      }();
                                                                                      if (inst_13718) {
                                                                                        var statearr_13797_13861 = state_13731__$1;
                                                                                        statearr_13797_13861[1] = 42;
                                                                                      } else {
                                                                                        var statearr_13798_13862 = state_13731__$1;
                                                                                        statearr_13798_13862[1] = 43;
                                                                                      }
                                                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                    } else {
                                                                                      if (state_val_13732 === 16) {
                                                                                        var inst_13632 = state_13731[7];
                                                                                        var inst_13634 = cljs.core.chunked_seq_QMARK_.call(null, inst_13632);
                                                                                        var state_13731__$1 = state_13731;
                                                                                        if (inst_13634) {
                                                                                          var statearr_13799_13863 = state_13731__$1;
                                                                                          statearr_13799_13863[1] = 19;
                                                                                        } else {
                                                                                          var statearr_13800_13864 = state_13731__$1;
                                                                                          statearr_13800_13864[1] = 20;
                                                                                        }
                                                                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                      } else {
                                                                                        if (state_val_13732 === 38) {
                                                                                          var inst_13710 = state_13731[2];
                                                                                          var state_13731__$1 = state_13731;
                                                                                          var statearr_13801_13865 = state_13731__$1;
                                                                                          statearr_13801_13865[2] = inst_13710;
                                                                                          statearr_13801_13865[1] = 35;
                                                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                        } else {
                                                                                          if (state_val_13732 === 30) {
                                                                                            var state_13731__$1 = state_13731;
                                                                                            var statearr_13802_13866 = state_13731__$1;
                                                                                            statearr_13802_13866[2] = null;
                                                                                            statearr_13802_13866[1] = 32;
                                                                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                          } else {
                                                                                            if (state_val_13732 === 10) {
                                                                                              var inst_13615 = state_13731[13];
                                                                                              var inst_13613 = state_13731[17];
                                                                                              var inst_13621 = cljs.core._nth.call(null, inst_13613, inst_13615);
                                                                                              var inst_13622 = cljs.core.nth.call(null, inst_13621, 0, null);
                                                                                              var inst_13623 = cljs.core.nth.call(null, inst_13621, 1, null);
                                                                                              var state_13731__$1 = function() {
                                                                                                var statearr_13803 = state_13731;
                                                                                                statearr_13803[26] = inst_13622;
                                                                                                return statearr_13803;
                                                                                              }();
                                                                                              if (cljs.core.truth_(inst_13623)) {
                                                                                                var statearr_13804_13867 = state_13731__$1;
                                                                                                statearr_13804_13867[1] = 13;
                                                                                              } else {
                                                                                                var statearr_13805_13868 = state_13731__$1;
                                                                                                statearr_13805_13868[1] = 14;
                                                                                              }
                                                                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                            } else {
                                                                                              if (state_val_13732 === 18) {
                                                                                                var inst_13656 = state_13731[2];
                                                                                                var state_13731__$1 = state_13731;
                                                                                                var statearr_13806_13869 = state_13731__$1;
                                                                                                statearr_13806_13869[2] = inst_13656;
                                                                                                statearr_13806_13869[1] = 12;
                                                                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                              } else {
                                                                                                if (state_val_13732 === 42) {
                                                                                                  var state_13731__$1 = state_13731;
                                                                                                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_13731__$1, 45, dchan);
                                                                                                } else {
                                                                                                  if (state_val_13732 === 37) {
                                                                                                    var inst_13690 = state_13731[25];
                                                                                                    var inst_13603 = state_13731[11];
                                                                                                    var inst_13699 = state_13731[23];
                                                                                                    var inst_13699__$1 = cljs.core.first.call(null, inst_13690);
                                                                                                    var inst_13700 = cljs.core.async.put_BANG_.call(null, inst_13699__$1, inst_13603, done);
                                                                                                    var state_13731__$1 = function() {
                                                                                                      var statearr_13807 = state_13731;
                                                                                                      statearr_13807[23] = inst_13699__$1;
                                                                                                      return statearr_13807;
                                                                                                    }();
                                                                                                    if (cljs.core.truth_(inst_13700)) {
                                                                                                      var statearr_13808_13870 = state_13731__$1;
                                                                                                      statearr_13808_13870[1] = 39;
                                                                                                    } else {
                                                                                                      var statearr_13809_13871 = state_13731__$1;
                                                                                                      statearr_13809_13871[1] = 40;
                                                                                                    }
                                                                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                                  } else {
                                                                                                    if (state_val_13732 === 8) {
                                                                                                      var inst_13615 = state_13731[13];
                                                                                                      var inst_13614 = state_13731[14];
                                                                                                      var inst_13617 = inst_13615 < inst_13614;
                                                                                                      var inst_13618 = inst_13617;
                                                                                                      var state_13731__$1 = state_13731;
                                                                                                      if (cljs.core.truth_(inst_13618)) {
                                                                                                        var statearr_13810_13872 = state_13731__$1;
                                                                                                        statearr_13810_13872[1] = 10;
                                                                                                      } else {
                                                                                                        var statearr_13811_13873 = state_13731__$1;
                                                                                                        statearr_13811_13873[1] = 11;
                                                                                                      }
                                                                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                                    } else {
                                                                                                      return null;
                                                                                                    }
                                                                                                  }
                                                                                                }
                                                                                              }
                                                                                            }
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__7864__auto___13819, cs, m, dchan, dctr, done);
        return function(switch__7802__auto__, c__7864__auto___13819, cs, m, dchan, dctr, done) {
          return function() {
            var cljs$core$async$mult_$_state_machine__7803__auto__ = null;
            var cljs$core$async$mult_$_state_machine__7803__auto____0 = function() {
              var statearr_13815 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_13815[0] = cljs$core$async$mult_$_state_machine__7803__auto__;
              statearr_13815[1] = 1;
              return statearr_13815;
            };
            var cljs$core$async$mult_$_state_machine__7803__auto____1 = function(state_13731) {
              while (true) {
                var ret_value__7804__auto__ = function() {
                  try {
                    while (true) {
                      var result__7805__auto__ = switch__7802__auto__.call(null, state_13731);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__7805__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__7805__auto__;
                      }
                      break;
                    }
                  } catch (e13816) {
                    if (e13816 instanceof Object) {
                      var ex__7806__auto__ = e13816;
                      var statearr_13817_13874 = state_13731;
                      statearr_13817_13874[5] = ex__7806__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_13731);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e13816;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__7804__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__13875 = state_13731;
                  state_13731 = G__13875;
                  continue;
                } else {
                  return ret_value__7804__auto__;
                }
                break;
              }
            };
            cljs$core$async$mult_$_state_machine__7803__auto__ = function(state_13731) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$mult_$_state_machine__7803__auto____0.call(this);
                case 1:
                  return cljs$core$async$mult_$_state_machine__7803__auto____1.call(this, state_13731);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            cljs$core$async$mult_$_state_machine__7803__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$mult_$_state_machine__7803__auto____0;
            cljs$core$async$mult_$_state_machine__7803__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$mult_$_state_machine__7803__auto____1;
            return cljs$core$async$mult_$_state_machine__7803__auto__;
          }();
        }(switch__7802__auto__, c__7864__auto___13819, cs, m, dchan, dctr, done);
      }();
      var state__7866__auto__ = function() {
        var statearr_13818 = f__7865__auto__.call(null);
        statearr_13818[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__7864__auto___13819;
        return statearr_13818;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__7866__auto__);
    };
  }(c__7864__auto___13819, cs, m, dchan, dctr, done));
  return m;
};
cljs.core.async.tap = function cljs$core$async$tap() {
  var G__13877 = arguments.length;
  switch(G__13877) {
    case 2:
      return cljs.core.async.tap.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.async.tap.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.async.tap.cljs$core$IFn$_invoke$arity$2 = function(mult, ch) {
  return cljs.core.async.tap.call(null, mult, ch, true);
};
cljs.core.async.tap.cljs$core$IFn$_invoke$arity$3 = function(mult, ch, close_QMARK_) {
  cljs.core.async.tap_STAR_.call(null, mult, ch, close_QMARK_);
  return ch;
};
cljs.core.async.tap.cljs$lang$maxFixedArity = 3;
cljs.core.async.untap = function cljs$core$async$untap(mult, ch) {
  return cljs.core.async.untap_STAR_.call(null, mult, ch);
};
cljs.core.async.untap_all = function cljs$core$async$untap_all(mult) {
  return cljs.core.async.untap_all_STAR_.call(null, mult);
};
cljs.core.async.Mix = function() {
  var obj13880 = {};
  return obj13880;
}();
cljs.core.async.admix_STAR_ = function cljs$core$async$admix_STAR_(m, ch) {
  if (function() {
    var and__4323__auto__ = m;
    if (and__4323__auto__) {
      return m.cljs$core$async$Mix$admix_STAR_$arity$2;
    } else {
      return and__4323__auto__;
    }
  }()) {
    return m.cljs$core$async$Mix$admix_STAR_$arity$2(m, ch);
  } else {
    var x__4971__auto__ = m == null ? null : m;
    return function() {
      var or__4335__auto__ = cljs.core.async.admix_STAR_[goog.typeOf(x__4971__auto__)];
      if (or__4335__auto__) {
        return or__4335__auto__;
      } else {
        var or__4335__auto____$1 = cljs.core.async.admix_STAR_["_"];
        if (or__4335__auto____$1) {
          return or__4335__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mix.admix*", m);
        }
      }
    }().call(null, m, ch);
  }
};
cljs.core.async.unmix_STAR_ = function cljs$core$async$unmix_STAR_(m, ch) {
  if (function() {
    var and__4323__auto__ = m;
    if (and__4323__auto__) {
      return m.cljs$core$async$Mix$unmix_STAR_$arity$2;
    } else {
      return and__4323__auto__;
    }
  }()) {
    return m.cljs$core$async$Mix$unmix_STAR_$arity$2(m, ch);
  } else {
    var x__4971__auto__ = m == null ? null : m;
    return function() {
      var or__4335__auto__ = cljs.core.async.unmix_STAR_[goog.typeOf(x__4971__auto__)];
      if (or__4335__auto__) {
        return or__4335__auto__;
      } else {
        var or__4335__auto____$1 = cljs.core.async.unmix_STAR_["_"];
        if (or__4335__auto____$1) {
          return or__4335__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mix.unmix*", m);
        }
      }
    }().call(null, m, ch);
  }
};
cljs.core.async.unmix_all_STAR_ = function cljs$core$async$unmix_all_STAR_(m) {
  if (function() {
    var and__4323__auto__ = m;
    if (and__4323__auto__) {
      return m.cljs$core$async$Mix$unmix_all_STAR_$arity$1;
    } else {
      return and__4323__auto__;
    }
  }()) {
    return m.cljs$core$async$Mix$unmix_all_STAR_$arity$1(m);
  } else {
    var x__4971__auto__ = m == null ? null : m;
    return function() {
      var or__4335__auto__ = cljs.core.async.unmix_all_STAR_[goog.typeOf(x__4971__auto__)];
      if (or__4335__auto__) {
        return or__4335__auto__;
      } else {
        var or__4335__auto____$1 = cljs.core.async.unmix_all_STAR_["_"];
        if (or__4335__auto____$1) {
          return or__4335__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mix.unmix-all*", m);
        }
      }
    }().call(null, m);
  }
};
cljs.core.async.toggle_STAR_ = function cljs$core$async$toggle_STAR_(m, state_map) {
  if (function() {
    var and__4323__auto__ = m;
    if (and__4323__auto__) {
      return m.cljs$core$async$Mix$toggle_STAR_$arity$2;
    } else {
      return and__4323__auto__;
    }
  }()) {
    return m.cljs$core$async$Mix$toggle_STAR_$arity$2(m, state_map);
  } else {
    var x__4971__auto__ = m == null ? null : m;
    return function() {
      var or__4335__auto__ = cljs.core.async.toggle_STAR_[goog.typeOf(x__4971__auto__)];
      if (or__4335__auto__) {
        return or__4335__auto__;
      } else {
        var or__4335__auto____$1 = cljs.core.async.toggle_STAR_["_"];
        if (or__4335__auto____$1) {
          return or__4335__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mix.toggle*", m);
        }
      }
    }().call(null, m, state_map);
  }
};
cljs.core.async.solo_mode_STAR_ = function cljs$core$async$solo_mode_STAR_(m, mode) {
  if (function() {
    var and__4323__auto__ = m;
    if (and__4323__auto__) {
      return m.cljs$core$async$Mix$solo_mode_STAR_$arity$2;
    } else {
      return and__4323__auto__;
    }
  }()) {
    return m.cljs$core$async$Mix$solo_mode_STAR_$arity$2(m, mode);
  } else {
    var x__4971__auto__ = m == null ? null : m;
    return function() {
      var or__4335__auto__ = cljs.core.async.solo_mode_STAR_[goog.typeOf(x__4971__auto__)];
      if (or__4335__auto__) {
        return or__4335__auto__;
      } else {
        var or__4335__auto____$1 = cljs.core.async.solo_mode_STAR_["_"];
        if (or__4335__auto____$1) {
          return or__4335__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mix.solo-mode*", m);
        }
      }
    }().call(null, m, mode);
  }
};
cljs.core.async.ioc_alts_BANG_ = function cljs$core$async$ioc_alts_BANG_() {
  var argseq__5375__auto__ = 3 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 3), 0) : null;
  return cljs.core.async.ioc_alts_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__5375__auto__);
};
cljs.core.async.ioc_alts_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(state, cont_block, ports, p__13885) {
  var map__13886 = p__13885;
  var map__13886__$1 = cljs.core.seq_QMARK_.call(null, map__13886) ? cljs.core.apply.call(null, cljs.core.hash_map, map__13886) : map__13886;
  var opts = map__13886__$1;
  var statearr_13887_13890 = state;
  statearr_13887_13890[cljs.core.async.impl.ioc_helpers.STATE_IDX] = cont_block;
  var temp__4126__auto__ = cljs.core.async.do_alts.call(null, function(map__13886, map__13886__$1, opts) {
    return function(val) {
      var statearr_13888_13891 = state;
      statearr_13888_13891[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = val;
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state);
    };
  }(map__13886, map__13886__$1, opts), ports, opts);
  if (cljs.core.truth_(temp__4126__auto__)) {
    var cb = temp__4126__auto__;
    var statearr_13889_13892 = state;
    statearr_13889_13892[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = cljs.core.deref.call(null, cb);
    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
  } else {
    return null;
  }
};
cljs.core.async.ioc_alts_BANG_.cljs$lang$maxFixedArity = 3;
cljs.core.async.ioc_alts_BANG_.cljs$lang$applyTo = function(seq13881) {
  var G__13882 = cljs.core.first.call(null, seq13881);
  var seq13881__$1 = cljs.core.next.call(null, seq13881);
  var G__13883 = cljs.core.first.call(null, seq13881__$1);
  var seq13881__$2 = cljs.core.next.call(null, seq13881__$1);
  var G__13884 = cljs.core.first.call(null, seq13881__$2);
  var seq13881__$3 = cljs.core.next.call(null, seq13881__$2);
  return cljs.core.async.ioc_alts_BANG_.cljs$core$IFn$_invoke$arity$variadic(G__13882, G__13883, G__13884, seq13881__$3);
};
cljs.core.async.mix = function cljs$core$async$mix(out) {
  var cs = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var solo_modes = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "pause", "pause", -2095325672), null, new cljs.core.Keyword(null, "mute", "mute", 1151223646), null], null), null);
  var attrs = cljs.core.conj.call(null, solo_modes, new cljs.core.Keyword(null, "solo", "solo", -316350075));
  var solo_mode = cljs.core.atom.call(null, new cljs.core.Keyword(null, "mute", "mute", 1151223646));
  var change = cljs.core.async.chan.call(null);
  var changed = function(cs, solo_modes, attrs, solo_mode, change) {
    return function() {
      return cljs.core.async.put_BANG_.call(null, change, true);
    };
  }(cs, solo_modes, attrs, solo_mode, change);
  var pick = function(cs, solo_modes, attrs, solo_mode, change, changed) {
    return function(attr, chs) {
      return cljs.core.reduce_kv.call(null, function(cs, solo_modes, attrs, solo_mode, change, changed) {
        return function(ret, c, v) {
          if (cljs.core.truth_(attr.call(null, v))) {
            return cljs.core.conj.call(null, ret, c);
          } else {
            return ret;
          }
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed), cljs.core.PersistentHashSet.EMPTY, chs);
    };
  }(cs, solo_modes, attrs, solo_mode, change, changed);
  var calc_state = function(cs, solo_modes, attrs, solo_mode, change, changed, pick) {
    return function() {
      var chs = cljs.core.deref.call(null, cs);
      var mode = cljs.core.deref.call(null, solo_mode);
      var solos = pick.call(null, new cljs.core.Keyword(null, "solo", "solo", -316350075), chs);
      var pauses = pick.call(null, new cljs.core.Keyword(null, "pause", "pause", -2095325672), chs);
      return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "solos", "solos", 1441458643), solos, new cljs.core.Keyword(null, "mutes", "mutes", 1068806309), pick.call(null, new cljs.core.Keyword(null, "mute", "mute", 1151223646), chs), new cljs.core.Keyword(null, "reads", "reads", -1215067361), cljs.core.conj.call(null, cljs.core._EQ_.call(null, mode, new cljs.core.Keyword(null, "pause", "pause", -2095325672)) && !cljs.core.empty_QMARK_.call(null, solos) ? cljs.core.vec.call(null, 
      solos) : cljs.core.vec.call(null, cljs.core.remove.call(null, pauses, cljs.core.keys.call(null, chs))), change)], null);
    };
  }(cs, solo_modes, attrs, solo_mode, change, changed, pick);
  var m = function() {
    if (typeof cljs.core.async.t14012 !== "undefined") {
    } else {
      cljs.core.async.t14012 = function(change, mix, solo_mode, pick, cs, calc_state, out, changed, solo_modes, attrs, meta14013) {
        this.change = change;
        this.mix = mix;
        this.solo_mode = solo_mode;
        this.pick = pick;
        this.cs = cs;
        this.calc_state = calc_state;
        this.out = out;
        this.changed = changed;
        this.solo_modes = solo_modes;
        this.attrs = attrs;
        this.meta14013 = meta14013;
        this.cljs$lang$protocol_mask$partition1$ = 0;
        this.cljs$lang$protocol_mask$partition0$ = 393216;
      };
      cljs.core.async.t14012.prototype.cljs$core$async$Mix$ = true;
      cljs.core.async.t14012.prototype.cljs$core$async$Mix$admix_STAR_$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_, ch) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.assoc, ch, cljs.core.PersistentArrayMap.EMPTY);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t14012.prototype.cljs$core$async$Mix$unmix_STAR_$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_, ch) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.dissoc, ch);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t14012.prototype.cljs$core$async$Mix$unmix_all_STAR_$arity$1 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.reset_BANG_.call(null, self__.cs, cljs.core.PersistentArrayMap.EMPTY);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t14012.prototype.cljs$core$async$Mix$toggle_STAR_$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_, state_map) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.partial.call(null, cljs.core.merge_with, cljs.core.merge), state_map);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t14012.prototype.cljs$core$async$Mix$solo_mode_STAR_$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_, mode) {
          var self__ = this;
          var ___$1 = this;
          if (cljs.core.truth_(self__.solo_modes.call(null, mode))) {
          } else {
            throw new Error([cljs.core.str("Assert failed: "), cljs.core.str([cljs.core.str("mode must be one of: "), cljs.core.str(self__.solo_modes)].join("")), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "solo-modes", "solo-modes", 882180540, null), new cljs.core.Symbol(null, "mode", "mode", -2000032078, null))))].join(""));
          }
          cljs.core.reset_BANG_.call(null, self__.solo_mode, mode);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t14012.prototype.cljs$core$async$Mux$ = true;
      cljs.core.async.t14012.prototype.cljs$core$async$Mux$muxch_STAR_$arity$1 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          return self__.out;
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t14012.prototype.cljs$core$IMeta$_meta$arity$1 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_14014) {
          var self__ = this;
          var _14014__$1 = this;
          return self__.meta14013;
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t14012.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_14014, meta14013__$1) {
          var self__ = this;
          var _14014__$1 = this;
          return new cljs.core.async.t14012(self__.change, self__.mix, self__.solo_mode, self__.pick, self__.cs, self__.calc_state, self__.out, self__.changed, self__.solo_modes, self__.attrs, meta14013__$1);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t14012.cljs$lang$type = true;
      cljs.core.async.t14012.cljs$lang$ctorStr = "cljs.core.async/t14012";
      cljs.core.async.t14012.cljs$lang$ctorPrWriter = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(this__4914__auto__, writer__4915__auto__, opt__4916__auto__) {
          return cljs.core._write.call(null, writer__4915__auto__, "cljs.core.async/t14012");
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.__GT_t14012 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function cljs$core$async$mix_$___GT_t14012(change__$1, mix__$1, solo_mode__$1, pick__$1, cs__$1, calc_state__$1, out__$1, changed__$1, solo_modes__$1, attrs__$1, meta14013) {
          return new cljs.core.async.t14012(change__$1, mix__$1, solo_mode__$1, pick__$1, cs__$1, calc_state__$1, out__$1, changed__$1, solo_modes__$1, attrs__$1, meta14013);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
    }
    return new cljs.core.async.t14012(change, cljs$core$async$mix, solo_mode, pick, cs, calc_state, out, changed, solo_modes, attrs, cljs.core.PersistentArrayMap.EMPTY);
  }();
  var c__7864__auto___14131 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__7864__auto___14131, cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state, m) {
    return function() {
      var f__7865__auto__ = function() {
        var switch__7802__auto__ = function(c__7864__auto___14131, cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state, m) {
          return function(state_14084) {
            var state_val_14085 = state_14084[1];
            if (state_val_14085 === 7) {
              var inst_14028 = state_14084[7];
              var inst_14033 = cljs.core.apply.call(null, cljs.core.hash_map, inst_14028);
              var state_14084__$1 = state_14084;
              var statearr_14086_14132 = state_14084__$1;
              statearr_14086_14132[2] = inst_14033;
              statearr_14086_14132[1] = 9;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_14085 === 20) {
                var inst_14043 = state_14084[8];
                var state_14084__$1 = state_14084;
                return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_14084__$1, 23, out, inst_14043);
              } else {
                if (state_val_14085 === 1) {
                  var inst_14018 = state_14084[9];
                  var inst_14018__$1 = calc_state.call(null);
                  var inst_14019 = cljs.core.seq_QMARK_.call(null, inst_14018__$1);
                  var state_14084__$1 = function() {
                    var statearr_14087 = state_14084;
                    statearr_14087[9] = inst_14018__$1;
                    return statearr_14087;
                  }();
                  if (inst_14019) {
                    var statearr_14088_14133 = state_14084__$1;
                    statearr_14088_14133[1] = 2;
                  } else {
                    var statearr_14089_14134 = state_14084__$1;
                    statearr_14089_14134[1] = 3;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_14085 === 24) {
                    var inst_14036 = state_14084[10];
                    var inst_14028 = inst_14036;
                    var state_14084__$1 = function() {
                      var statearr_14090 = state_14084;
                      statearr_14090[7] = inst_14028;
                      return statearr_14090;
                    }();
                    var statearr_14091_14135 = state_14084__$1;
                    statearr_14091_14135[2] = null;
                    statearr_14091_14135[1] = 5;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_14085 === 4) {
                      var inst_14018 = state_14084[9];
                      var inst_14024 = state_14084[2];
                      var inst_14025 = cljs.core.get.call(null, inst_14024, new cljs.core.Keyword(null, "reads", "reads", -1215067361));
                      var inst_14026 = cljs.core.get.call(null, inst_14024, new cljs.core.Keyword(null, "mutes", "mutes", 1068806309));
                      var inst_14027 = cljs.core.get.call(null, inst_14024, new cljs.core.Keyword(null, "solos", "solos", 1441458643));
                      var inst_14028 = inst_14018;
                      var state_14084__$1 = function() {
                        var statearr_14092 = state_14084;
                        statearr_14092[11] = inst_14027;
                        statearr_14092[7] = inst_14028;
                        statearr_14092[12] = inst_14026;
                        statearr_14092[13] = inst_14025;
                        return statearr_14092;
                      }();
                      var statearr_14093_14136 = state_14084__$1;
                      statearr_14093_14136[2] = null;
                      statearr_14093_14136[1] = 5;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_14085 === 15) {
                        var state_14084__$1 = state_14084;
                        var statearr_14094_14137 = state_14084__$1;
                        statearr_14094_14137[2] = null;
                        statearr_14094_14137[1] = 16;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_14085 === 21) {
                          var inst_14036 = state_14084[10];
                          var inst_14028 = inst_14036;
                          var state_14084__$1 = function() {
                            var statearr_14095 = state_14084;
                            statearr_14095[7] = inst_14028;
                            return statearr_14095;
                          }();
                          var statearr_14096_14138 = state_14084__$1;
                          statearr_14096_14138[2] = null;
                          statearr_14096_14138[1] = 5;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_14085 === 13) {
                            var inst_14080 = state_14084[2];
                            var state_14084__$1 = state_14084;
                            var statearr_14097_14139 = state_14084__$1;
                            statearr_14097_14139[2] = inst_14080;
                            statearr_14097_14139[1] = 6;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_14085 === 22) {
                              var inst_14078 = state_14084[2];
                              var state_14084__$1 = state_14084;
                              var statearr_14098_14140 = state_14084__$1;
                              statearr_14098_14140[2] = inst_14078;
                              statearr_14098_14140[1] = 13;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_14085 === 6) {
                                var inst_14082 = state_14084[2];
                                var state_14084__$1 = state_14084;
                                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_14084__$1, inst_14082);
                              } else {
                                if (state_val_14085 === 25) {
                                  var state_14084__$1 = state_14084;
                                  var statearr_14099_14141 = state_14084__$1;
                                  statearr_14099_14141[2] = null;
                                  statearr_14099_14141[1] = 26;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_14085 === 17) {
                                    var inst_14058 = state_14084[14];
                                    var state_14084__$1 = state_14084;
                                    var statearr_14100_14142 = state_14084__$1;
                                    statearr_14100_14142[2] = inst_14058;
                                    statearr_14100_14142[1] = 19;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_14085 === 3) {
                                      var inst_14018 = state_14084[9];
                                      var state_14084__$1 = state_14084;
                                      var statearr_14101_14143 = state_14084__$1;
                                      statearr_14101_14143[2] = inst_14018;
                                      statearr_14101_14143[1] = 4;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_14085 === 12) {
                                        var inst_14044 = state_14084[15];
                                        var inst_14058 = state_14084[14];
                                        var inst_14039 = state_14084[16];
                                        var inst_14058__$1 = inst_14039.call(null, inst_14044);
                                        var state_14084__$1 = function() {
                                          var statearr_14102 = state_14084;
                                          statearr_14102[14] = inst_14058__$1;
                                          return statearr_14102;
                                        }();
                                        if (cljs.core.truth_(inst_14058__$1)) {
                                          var statearr_14103_14144 = state_14084__$1;
                                          statearr_14103_14144[1] = 17;
                                        } else {
                                          var statearr_14104_14145 = state_14084__$1;
                                          statearr_14104_14145[1] = 18;
                                        }
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_14085 === 2) {
                                          var inst_14018 = state_14084[9];
                                          var inst_14021 = cljs.core.apply.call(null, cljs.core.hash_map, inst_14018);
                                          var state_14084__$1 = state_14084;
                                          var statearr_14105_14146 = state_14084__$1;
                                          statearr_14105_14146[2] = inst_14021;
                                          statearr_14105_14146[1] = 4;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_14085 === 23) {
                                            var inst_14069 = state_14084[2];
                                            var state_14084__$1 = state_14084;
                                            if (cljs.core.truth_(inst_14069)) {
                                              var statearr_14106_14147 = state_14084__$1;
                                              statearr_14106_14147[1] = 24;
                                            } else {
                                              var statearr_14107_14148 = state_14084__$1;
                                              statearr_14107_14148[1] = 25;
                                            }
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            if (state_val_14085 === 19) {
                                              var inst_14066 = state_14084[2];
                                              var state_14084__$1 = state_14084;
                                              if (cljs.core.truth_(inst_14066)) {
                                                var statearr_14108_14149 = state_14084__$1;
                                                statearr_14108_14149[1] = 20;
                                              } else {
                                                var statearr_14109_14150 = state_14084__$1;
                                                statearr_14109_14150[1] = 21;
                                              }
                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                            } else {
                                              if (state_val_14085 === 11) {
                                                var inst_14043 = state_14084[8];
                                                var inst_14049 = inst_14043 == null;
                                                var state_14084__$1 = state_14084;
                                                if (cljs.core.truth_(inst_14049)) {
                                                  var statearr_14110_14151 = state_14084__$1;
                                                  statearr_14110_14151[1] = 14;
                                                } else {
                                                  var statearr_14111_14152 = state_14084__$1;
                                                  statearr_14111_14152[1] = 15;
                                                }
                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                              } else {
                                                if (state_val_14085 === 9) {
                                                  var inst_14036 = state_14084[10];
                                                  var inst_14036__$1 = state_14084[2];
                                                  var inst_14037 = cljs.core.get.call(null, inst_14036__$1, new cljs.core.Keyword(null, "reads", "reads", -1215067361));
                                                  var inst_14038 = cljs.core.get.call(null, inst_14036__$1, new cljs.core.Keyword(null, "mutes", "mutes", 1068806309));
                                                  var inst_14039 = cljs.core.get.call(null, inst_14036__$1, new cljs.core.Keyword(null, "solos", "solos", 1441458643));
                                                  var state_14084__$1 = function() {
                                                    var statearr_14112 = state_14084;
                                                    statearr_14112[17] = inst_14038;
                                                    statearr_14112[10] = inst_14036__$1;
                                                    statearr_14112[16] = inst_14039;
                                                    return statearr_14112;
                                                  }();
                                                  return cljs.core.async.ioc_alts_BANG_.call(null, state_14084__$1, 10, inst_14037);
                                                } else {
                                                  if (state_val_14085 === 5) {
                                                    var inst_14028 = state_14084[7];
                                                    var inst_14031 = cljs.core.seq_QMARK_.call(null, inst_14028);
                                                    var state_14084__$1 = state_14084;
                                                    if (inst_14031) {
                                                      var statearr_14113_14153 = state_14084__$1;
                                                      statearr_14113_14153[1] = 7;
                                                    } else {
                                                      var statearr_14114_14154 = state_14084__$1;
                                                      statearr_14114_14154[1] = 8;
                                                    }
                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                  } else {
                                                    if (state_val_14085 === 14) {
                                                      var inst_14044 = state_14084[15];
                                                      var inst_14051 = cljs.core.swap_BANG_.call(null, cs, cljs.core.dissoc, inst_14044);
                                                      var state_14084__$1 = state_14084;
                                                      var statearr_14115_14155 = state_14084__$1;
                                                      statearr_14115_14155[2] = inst_14051;
                                                      statearr_14115_14155[1] = 16;
                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                    } else {
                                                      if (state_val_14085 === 26) {
                                                        var inst_14074 = state_14084[2];
                                                        var state_14084__$1 = state_14084;
                                                        var statearr_14116_14156 = state_14084__$1;
                                                        statearr_14116_14156[2] = inst_14074;
                                                        statearr_14116_14156[1] = 22;
                                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                      } else {
                                                        if (state_val_14085 === 16) {
                                                          var inst_14054 = state_14084[2];
                                                          var inst_14055 = calc_state.call(null);
                                                          var inst_14028 = inst_14055;
                                                          var state_14084__$1 = function() {
                                                            var statearr_14117 = state_14084;
                                                            statearr_14117[7] = inst_14028;
                                                            statearr_14117[18] = inst_14054;
                                                            return statearr_14117;
                                                          }();
                                                          var statearr_14118_14157 = state_14084__$1;
                                                          statearr_14118_14157[2] = null;
                                                          statearr_14118_14157[1] = 5;
                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                        } else {
                                                          if (state_val_14085 === 10) {
                                                            var inst_14044 = state_14084[15];
                                                            var inst_14043 = state_14084[8];
                                                            var inst_14042 = state_14084[2];
                                                            var inst_14043__$1 = cljs.core.nth.call(null, inst_14042, 0, null);
                                                            var inst_14044__$1 = cljs.core.nth.call(null, inst_14042, 1, null);
                                                            var inst_14045 = inst_14043__$1 == null;
                                                            var inst_14046 = cljs.core._EQ_.call(null, inst_14044__$1, change);
                                                            var inst_14047 = inst_14045 || inst_14046;
                                                            var state_14084__$1 = function() {
                                                              var statearr_14119 = state_14084;
                                                              statearr_14119[15] = inst_14044__$1;
                                                              statearr_14119[8] = inst_14043__$1;
                                                              return statearr_14119;
                                                            }();
                                                            if (cljs.core.truth_(inst_14047)) {
                                                              var statearr_14120_14158 = state_14084__$1;
                                                              statearr_14120_14158[1] = 11;
                                                            } else {
                                                              var statearr_14121_14159 = state_14084__$1;
                                                              statearr_14121_14159[1] = 12;
                                                            }
                                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                          } else {
                                                            if (state_val_14085 === 18) {
                                                              var inst_14044 = state_14084[15];
                                                              var inst_14038 = state_14084[17];
                                                              var inst_14039 = state_14084[16];
                                                              var inst_14061 = cljs.core.empty_QMARK_.call(null, inst_14039);
                                                              var inst_14062 = inst_14038.call(null, inst_14044);
                                                              var inst_14063 = cljs.core.not.call(null, inst_14062);
                                                              var inst_14064 = inst_14061 && inst_14063;
                                                              var state_14084__$1 = state_14084;
                                                              var statearr_14122_14160 = state_14084__$1;
                                                              statearr_14122_14160[2] = inst_14064;
                                                              statearr_14122_14160[1] = 19;
                                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                            } else {
                                                              if (state_val_14085 === 8) {
                                                                var inst_14028 = state_14084[7];
                                                                var state_14084__$1 = state_14084;
                                                                var statearr_14123_14161 = state_14084__$1;
                                                                statearr_14123_14161[2] = inst_14028;
                                                                statearr_14123_14161[1] = 9;
                                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                              } else {
                                                                return null;
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__7864__auto___14131, cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state, m);
        return function(switch__7802__auto__, c__7864__auto___14131, cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state, m) {
          return function() {
            var cljs$core$async$mix_$_state_machine__7803__auto__ = null;
            var cljs$core$async$mix_$_state_machine__7803__auto____0 = function() {
              var statearr_14127 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_14127[0] = cljs$core$async$mix_$_state_machine__7803__auto__;
              statearr_14127[1] = 1;
              return statearr_14127;
            };
            var cljs$core$async$mix_$_state_machine__7803__auto____1 = function(state_14084) {
              while (true) {
                var ret_value__7804__auto__ = function() {
                  try {
                    while (true) {
                      var result__7805__auto__ = switch__7802__auto__.call(null, state_14084);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__7805__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__7805__auto__;
                      }
                      break;
                    }
                  } catch (e14128) {
                    if (e14128 instanceof Object) {
                      var ex__7806__auto__ = e14128;
                      var statearr_14129_14162 = state_14084;
                      statearr_14129_14162[5] = ex__7806__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_14084);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e14128;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__7804__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__14163 = state_14084;
                  state_14084 = G__14163;
                  continue;
                } else {
                  return ret_value__7804__auto__;
                }
                break;
              }
            };
            cljs$core$async$mix_$_state_machine__7803__auto__ = function(state_14084) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$mix_$_state_machine__7803__auto____0.call(this);
                case 1:
                  return cljs$core$async$mix_$_state_machine__7803__auto____1.call(this, state_14084);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            cljs$core$async$mix_$_state_machine__7803__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$mix_$_state_machine__7803__auto____0;
            cljs$core$async$mix_$_state_machine__7803__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$mix_$_state_machine__7803__auto____1;
            return cljs$core$async$mix_$_state_machine__7803__auto__;
          }();
        }(switch__7802__auto__, c__7864__auto___14131, cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state, m);
      }();
      var state__7866__auto__ = function() {
        var statearr_14130 = f__7865__auto__.call(null);
        statearr_14130[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__7864__auto___14131;
        return statearr_14130;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__7866__auto__);
    };
  }(c__7864__auto___14131, cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state, m));
  return m;
};
cljs.core.async.admix = function cljs$core$async$admix(mix, ch) {
  return cljs.core.async.admix_STAR_.call(null, mix, ch);
};
cljs.core.async.unmix = function cljs$core$async$unmix(mix, ch) {
  return cljs.core.async.unmix_STAR_.call(null, mix, ch);
};
cljs.core.async.unmix_all = function cljs$core$async$unmix_all(mix) {
  return cljs.core.async.unmix_all_STAR_.call(null, mix);
};
cljs.core.async.toggle = function cljs$core$async$toggle(mix, state_map) {
  return cljs.core.async.toggle_STAR_.call(null, mix, state_map);
};
cljs.core.async.solo_mode = function cljs$core$async$solo_mode(mix, mode) {
  return cljs.core.async.solo_mode_STAR_.call(null, mix, mode);
};
cljs.core.async.Pub = function() {
  var obj14165 = {};
  return obj14165;
}();
cljs.core.async.sub_STAR_ = function cljs$core$async$sub_STAR_(p, v, ch, close_QMARK_) {
  if (function() {
    var and__4323__auto__ = p;
    if (and__4323__auto__) {
      return p.cljs$core$async$Pub$sub_STAR_$arity$4;
    } else {
      return and__4323__auto__;
    }
  }()) {
    return p.cljs$core$async$Pub$sub_STAR_$arity$4(p, v, ch, close_QMARK_);
  } else {
    var x__4971__auto__ = p == null ? null : p;
    return function() {
      var or__4335__auto__ = cljs.core.async.sub_STAR_[goog.typeOf(x__4971__auto__)];
      if (or__4335__auto__) {
        return or__4335__auto__;
      } else {
        var or__4335__auto____$1 = cljs.core.async.sub_STAR_["_"];
        if (or__4335__auto____$1) {
          return or__4335__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Pub.sub*", p);
        }
      }
    }().call(null, p, v, ch, close_QMARK_);
  }
};
cljs.core.async.unsub_STAR_ = function cljs$core$async$unsub_STAR_(p, v, ch) {
  if (function() {
    var and__4323__auto__ = p;
    if (and__4323__auto__) {
      return p.cljs$core$async$Pub$unsub_STAR_$arity$3;
    } else {
      return and__4323__auto__;
    }
  }()) {
    return p.cljs$core$async$Pub$unsub_STAR_$arity$3(p, v, ch);
  } else {
    var x__4971__auto__ = p == null ? null : p;
    return function() {
      var or__4335__auto__ = cljs.core.async.unsub_STAR_[goog.typeOf(x__4971__auto__)];
      if (or__4335__auto__) {
        return or__4335__auto__;
      } else {
        var or__4335__auto____$1 = cljs.core.async.unsub_STAR_["_"];
        if (or__4335__auto____$1) {
          return or__4335__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Pub.unsub*", p);
        }
      }
    }().call(null, p, v, ch);
  }
};
cljs.core.async.unsub_all_STAR_ = function cljs$core$async$unsub_all_STAR_() {
  var G__14167 = arguments.length;
  switch(G__14167) {
    case 1:
      return cljs.core.async.unsub_all_STAR_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.async.unsub_all_STAR_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.async.unsub_all_STAR_.cljs$core$IFn$_invoke$arity$1 = function(p) {
  if (function() {
    var and__4323__auto__ = p;
    if (and__4323__auto__) {
      return p.cljs$core$async$Pub$unsub_all_STAR_$arity$1;
    } else {
      return and__4323__auto__;
    }
  }()) {
    return p.cljs$core$async$Pub$unsub_all_STAR_$arity$1(p);
  } else {
    var x__4971__auto__ = p == null ? null : p;
    return function() {
      var or__4335__auto__ = cljs.core.async.unsub_all_STAR_[goog.typeOf(x__4971__auto__)];
      if (or__4335__auto__) {
        return or__4335__auto__;
      } else {
        var or__4335__auto____$1 = cljs.core.async.unsub_all_STAR_["_"];
        if (or__4335__auto____$1) {
          return or__4335__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Pub.unsub-all*", p);
        }
      }
    }().call(null, p);
  }
};
cljs.core.async.unsub_all_STAR_.cljs$core$IFn$_invoke$arity$2 = function(p, v) {
  if (function() {
    var and__4323__auto__ = p;
    if (and__4323__auto__) {
      return p.cljs$core$async$Pub$unsub_all_STAR_$arity$2;
    } else {
      return and__4323__auto__;
    }
  }()) {
    return p.cljs$core$async$Pub$unsub_all_STAR_$arity$2(p, v);
  } else {
    var x__4971__auto__ = p == null ? null : p;
    return function() {
      var or__4335__auto__ = cljs.core.async.unsub_all_STAR_[goog.typeOf(x__4971__auto__)];
      if (or__4335__auto__) {
        return or__4335__auto__;
      } else {
        var or__4335__auto____$1 = cljs.core.async.unsub_all_STAR_["_"];
        if (or__4335__auto____$1) {
          return or__4335__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Pub.unsub-all*", p);
        }
      }
    }().call(null, p, v);
  }
};
cljs.core.async.unsub_all_STAR_.cljs$lang$maxFixedArity = 2;
cljs.core.async.pub = function cljs$core$async$pub() {
  var G__14171 = arguments.length;
  switch(G__14171) {
    case 2:
      return cljs.core.async.pub.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.async.pub.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.async.pub.cljs$core$IFn$_invoke$arity$2 = function(ch, topic_fn) {
  return cljs.core.async.pub.call(null, ch, topic_fn, cljs.core.constantly.call(null, null));
};
cljs.core.async.pub.cljs$core$IFn$_invoke$arity$3 = function(ch, topic_fn, buf_fn) {
  var mults = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var ensure_mult = function(mults) {
    return function(topic) {
      var or__4335__auto__ = cljs.core.get.call(null, cljs.core.deref.call(null, mults), topic);
      if (cljs.core.truth_(or__4335__auto__)) {
        return or__4335__auto__;
      } else {
        return cljs.core.get.call(null, cljs.core.swap_BANG_.call(null, mults, function(or__4335__auto__, mults) {
          return function(p1__14169_SHARP_) {
            if (cljs.core.truth_(p1__14169_SHARP_.call(null, topic))) {
              return p1__14169_SHARP_;
            } else {
              return cljs.core.assoc.call(null, p1__14169_SHARP_, topic, cljs.core.async.mult.call(null, cljs.core.async.chan.call(null, buf_fn.call(null, topic))));
            }
          };
        }(or__4335__auto__, mults)), topic);
      }
    };
  }(mults);
  var p = function() {
    if (typeof cljs.core.async.t14172 !== "undefined") {
    } else {
      cljs.core.async.t14172 = function(ensure_mult, mults, buf_fn, topic_fn, ch, meta14173) {
        this.ensure_mult = ensure_mult;
        this.mults = mults;
        this.buf_fn = buf_fn;
        this.topic_fn = topic_fn;
        this.ch = ch;
        this.meta14173 = meta14173;
        this.cljs$lang$protocol_mask$partition1$ = 0;
        this.cljs$lang$protocol_mask$partition0$ = 393216;
      };
      cljs.core.async.t14172.prototype.cljs$core$async$Pub$ = true;
      cljs.core.async.t14172.prototype.cljs$core$async$Pub$sub_STAR_$arity$4 = function(mults, ensure_mult) {
        return function(p, topic, ch__$1, close_QMARK_) {
          var self__ = this;
          var p__$1 = this;
          var m = self__.ensure_mult.call(null, topic);
          return cljs.core.async.tap.call(null, m, ch__$1, close_QMARK_);
        };
      }(mults, ensure_mult);
      cljs.core.async.t14172.prototype.cljs$core$async$Pub$unsub_STAR_$arity$3 = function(mults, ensure_mult) {
        return function(p, topic, ch__$1) {
          var self__ = this;
          var p__$1 = this;
          var temp__4126__auto__ = cljs.core.get.call(null, cljs.core.deref.call(null, self__.mults), topic);
          if (cljs.core.truth_(temp__4126__auto__)) {
            var m = temp__4126__auto__;
            return cljs.core.async.untap.call(null, m, ch__$1);
          } else {
            return null;
          }
        };
      }(mults, ensure_mult);
      cljs.core.async.t14172.prototype.cljs$core$async$Pub$unsub_all_STAR_$arity$1 = function(mults, ensure_mult) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          return cljs.core.reset_BANG_.call(null, self__.mults, cljs.core.PersistentArrayMap.EMPTY);
        };
      }(mults, ensure_mult);
      cljs.core.async.t14172.prototype.cljs$core$async$Pub$unsub_all_STAR_$arity$2 = function(mults, ensure_mult) {
        return function(_, topic) {
          var self__ = this;
          var ___$1 = this;
          return cljs.core.swap_BANG_.call(null, self__.mults, cljs.core.dissoc, topic);
        };
      }(mults, ensure_mult);
      cljs.core.async.t14172.prototype.cljs$core$async$Mux$ = true;
      cljs.core.async.t14172.prototype.cljs$core$async$Mux$muxch_STAR_$arity$1 = function(mults, ensure_mult) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          return self__.ch;
        };
      }(mults, ensure_mult);
      cljs.core.async.t14172.prototype.cljs$core$IMeta$_meta$arity$1 = function(mults, ensure_mult) {
        return function(_14174) {
          var self__ = this;
          var _14174__$1 = this;
          return self__.meta14173;
        };
      }(mults, ensure_mult);
      cljs.core.async.t14172.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(mults, ensure_mult) {
        return function(_14174, meta14173__$1) {
          var self__ = this;
          var _14174__$1 = this;
          return new cljs.core.async.t14172(self__.ensure_mult, self__.mults, self__.buf_fn, self__.topic_fn, self__.ch, meta14173__$1);
        };
      }(mults, ensure_mult);
      cljs.core.async.t14172.cljs$lang$type = true;
      cljs.core.async.t14172.cljs$lang$ctorStr = "cljs.core.async/t14172";
      cljs.core.async.t14172.cljs$lang$ctorPrWriter = function(mults, ensure_mult) {
        return function(this__4914__auto__, writer__4915__auto__, opt__4916__auto__) {
          return cljs.core._write.call(null, writer__4915__auto__, "cljs.core.async/t14172");
        };
      }(mults, ensure_mult);
      cljs.core.async.__GT_t14172 = function(mults, ensure_mult) {
        return function cljs$core$async$__GT_t14172(ensure_mult__$1, mults__$1, buf_fn__$1, topic_fn__$1, ch__$1, meta14173) {
          return new cljs.core.async.t14172(ensure_mult__$1, mults__$1, buf_fn__$1, topic_fn__$1, ch__$1, meta14173);
        };
      }(mults, ensure_mult);
    }
    return new cljs.core.async.t14172(ensure_mult, mults, buf_fn, topic_fn, ch, cljs.core.PersistentArrayMap.EMPTY);
  }();
  var c__7864__auto___14295 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__7864__auto___14295, mults, ensure_mult, p) {
    return function() {
      var f__7865__auto__ = function() {
        var switch__7802__auto__ = function(c__7864__auto___14295, mults, ensure_mult, p) {
          return function(state_14246) {
            var state_val_14247 = state_14246[1];
            if (state_val_14247 === 7) {
              var inst_14242 = state_14246[2];
              var state_14246__$1 = state_14246;
              var statearr_14248_14296 = state_14246__$1;
              statearr_14248_14296[2] = inst_14242;
              statearr_14248_14296[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_14247 === 20) {
                var state_14246__$1 = state_14246;
                var statearr_14249_14297 = state_14246__$1;
                statearr_14249_14297[2] = null;
                statearr_14249_14297[1] = 21;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_14247 === 1) {
                  var state_14246__$1 = state_14246;
                  var statearr_14250_14298 = state_14246__$1;
                  statearr_14250_14298[2] = null;
                  statearr_14250_14298[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_14247 === 24) {
                    var inst_14225 = state_14246[7];
                    var inst_14234 = cljs.core.swap_BANG_.call(null, mults, cljs.core.dissoc, inst_14225);
                    var state_14246__$1 = state_14246;
                    var statearr_14251_14299 = state_14246__$1;
                    statearr_14251_14299[2] = inst_14234;
                    statearr_14251_14299[1] = 25;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_14247 === 4) {
                      var inst_14177 = state_14246[8];
                      var inst_14177__$1 = state_14246[2];
                      var inst_14178 = inst_14177__$1 == null;
                      var state_14246__$1 = function() {
                        var statearr_14252 = state_14246;
                        statearr_14252[8] = inst_14177__$1;
                        return statearr_14252;
                      }();
                      if (cljs.core.truth_(inst_14178)) {
                        var statearr_14253_14300 = state_14246__$1;
                        statearr_14253_14300[1] = 5;
                      } else {
                        var statearr_14254_14301 = state_14246__$1;
                        statearr_14254_14301[1] = 6;
                      }
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_14247 === 15) {
                        var inst_14219 = state_14246[2];
                        var state_14246__$1 = state_14246;
                        var statearr_14255_14302 = state_14246__$1;
                        statearr_14255_14302[2] = inst_14219;
                        statearr_14255_14302[1] = 12;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_14247 === 21) {
                          var inst_14239 = state_14246[2];
                          var state_14246__$1 = function() {
                            var statearr_14256 = state_14246;
                            statearr_14256[9] = inst_14239;
                            return statearr_14256;
                          }();
                          var statearr_14257_14303 = state_14246__$1;
                          statearr_14257_14303[2] = null;
                          statearr_14257_14303[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_14247 === 13) {
                            var inst_14201 = state_14246[10];
                            var inst_14203 = cljs.core.chunked_seq_QMARK_.call(null, inst_14201);
                            var state_14246__$1 = state_14246;
                            if (inst_14203) {
                              var statearr_14258_14304 = state_14246__$1;
                              statearr_14258_14304[1] = 16;
                            } else {
                              var statearr_14259_14305 = state_14246__$1;
                              statearr_14259_14305[1] = 17;
                            }
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_14247 === 22) {
                              var inst_14231 = state_14246[2];
                              var state_14246__$1 = state_14246;
                              if (cljs.core.truth_(inst_14231)) {
                                var statearr_14260_14306 = state_14246__$1;
                                statearr_14260_14306[1] = 23;
                              } else {
                                var statearr_14261_14307 = state_14246__$1;
                                statearr_14261_14307[1] = 24;
                              }
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_14247 === 6) {
                                var inst_14225 = state_14246[7];
                                var inst_14227 = state_14246[11];
                                var inst_14177 = state_14246[8];
                                var inst_14225__$1 = topic_fn.call(null, inst_14177);
                                var inst_14226 = cljs.core.deref.call(null, mults);
                                var inst_14227__$1 = cljs.core.get.call(null, inst_14226, inst_14225__$1);
                                var state_14246__$1 = function() {
                                  var statearr_14262 = state_14246;
                                  statearr_14262[7] = inst_14225__$1;
                                  statearr_14262[11] = inst_14227__$1;
                                  return statearr_14262;
                                }();
                                if (cljs.core.truth_(inst_14227__$1)) {
                                  var statearr_14263_14308 = state_14246__$1;
                                  statearr_14263_14308[1] = 19;
                                } else {
                                  var statearr_14264_14309 = state_14246__$1;
                                  statearr_14264_14309[1] = 20;
                                }
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_14247 === 25) {
                                  var inst_14236 = state_14246[2];
                                  var state_14246__$1 = state_14246;
                                  var statearr_14265_14310 = state_14246__$1;
                                  statearr_14265_14310[2] = inst_14236;
                                  statearr_14265_14310[1] = 21;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_14247 === 17) {
                                    var inst_14201 = state_14246[10];
                                    var inst_14210 = cljs.core.first.call(null, inst_14201);
                                    var inst_14211 = cljs.core.async.muxch_STAR_.call(null, inst_14210);
                                    var inst_14212 = cljs.core.async.close_BANG_.call(null, inst_14211);
                                    var inst_14213 = cljs.core.next.call(null, inst_14201);
                                    var inst_14187 = inst_14213;
                                    var inst_14188 = null;
                                    var inst_14189 = 0;
                                    var inst_14190 = 0;
                                    var state_14246__$1 = function() {
                                      var statearr_14266 = state_14246;
                                      statearr_14266[12] = inst_14190;
                                      statearr_14266[13] = inst_14188;
                                      statearr_14266[14] = inst_14187;
                                      statearr_14266[15] = inst_14212;
                                      statearr_14266[16] = inst_14189;
                                      return statearr_14266;
                                    }();
                                    var statearr_14267_14311 = state_14246__$1;
                                    statearr_14267_14311[2] = null;
                                    statearr_14267_14311[1] = 8;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_14247 === 3) {
                                      var inst_14244 = state_14246[2];
                                      var state_14246__$1 = state_14246;
                                      return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_14246__$1, inst_14244);
                                    } else {
                                      if (state_val_14247 === 12) {
                                        var inst_14221 = state_14246[2];
                                        var state_14246__$1 = state_14246;
                                        var statearr_14268_14312 = state_14246__$1;
                                        statearr_14268_14312[2] = inst_14221;
                                        statearr_14268_14312[1] = 9;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_14247 === 2) {
                                          var state_14246__$1 = state_14246;
                                          return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_14246__$1, 4, ch);
                                        } else {
                                          if (state_val_14247 === 23) {
                                            var state_14246__$1 = state_14246;
                                            var statearr_14269_14313 = state_14246__$1;
                                            statearr_14269_14313[2] = null;
                                            statearr_14269_14313[1] = 25;
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            if (state_val_14247 === 19) {
                                              var inst_14227 = state_14246[11];
                                              var inst_14177 = state_14246[8];
                                              var inst_14229 = cljs.core.async.muxch_STAR_.call(null, inst_14227);
                                              var state_14246__$1 = state_14246;
                                              return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_14246__$1, 22, inst_14229, inst_14177);
                                            } else {
                                              if (state_val_14247 === 11) {
                                                var inst_14187 = state_14246[14];
                                                var inst_14201 = state_14246[10];
                                                var inst_14201__$1 = cljs.core.seq.call(null, inst_14187);
                                                var state_14246__$1 = function() {
                                                  var statearr_14270 = state_14246;
                                                  statearr_14270[10] = inst_14201__$1;
                                                  return statearr_14270;
                                                }();
                                                if (inst_14201__$1) {
                                                  var statearr_14271_14314 = state_14246__$1;
                                                  statearr_14271_14314[1] = 13;
                                                } else {
                                                  var statearr_14272_14315 = state_14246__$1;
                                                  statearr_14272_14315[1] = 14;
                                                }
                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                              } else {
                                                if (state_val_14247 === 9) {
                                                  var inst_14223 = state_14246[2];
                                                  var state_14246__$1 = state_14246;
                                                  var statearr_14273_14316 = state_14246__$1;
                                                  statearr_14273_14316[2] = inst_14223;
                                                  statearr_14273_14316[1] = 7;
                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                } else {
                                                  if (state_val_14247 === 5) {
                                                    var inst_14184 = cljs.core.deref.call(null, mults);
                                                    var inst_14185 = cljs.core.vals.call(null, inst_14184);
                                                    var inst_14186 = cljs.core.seq.call(null, inst_14185);
                                                    var inst_14187 = inst_14186;
                                                    var inst_14188 = null;
                                                    var inst_14189 = 0;
                                                    var inst_14190 = 0;
                                                    var state_14246__$1 = function() {
                                                      var statearr_14274 = state_14246;
                                                      statearr_14274[12] = inst_14190;
                                                      statearr_14274[13] = inst_14188;
                                                      statearr_14274[14] = inst_14187;
                                                      statearr_14274[16] = inst_14189;
                                                      return statearr_14274;
                                                    }();
                                                    var statearr_14275_14317 = state_14246__$1;
                                                    statearr_14275_14317[2] = null;
                                                    statearr_14275_14317[1] = 8;
                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                  } else {
                                                    if (state_val_14247 === 14) {
                                                      var state_14246__$1 = state_14246;
                                                      var statearr_14279_14318 = state_14246__$1;
                                                      statearr_14279_14318[2] = null;
                                                      statearr_14279_14318[1] = 15;
                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                    } else {
                                                      if (state_val_14247 === 16) {
                                                        var inst_14201 = state_14246[10];
                                                        var inst_14205 = cljs.core.chunk_first.call(null, inst_14201);
                                                        var inst_14206 = cljs.core.chunk_rest.call(null, inst_14201);
                                                        var inst_14207 = cljs.core.count.call(null, inst_14205);
                                                        var inst_14187 = inst_14206;
                                                        var inst_14188 = inst_14205;
                                                        var inst_14189 = inst_14207;
                                                        var inst_14190 = 0;
                                                        var state_14246__$1 = function() {
                                                          var statearr_14280 = state_14246;
                                                          statearr_14280[12] = inst_14190;
                                                          statearr_14280[13] = inst_14188;
                                                          statearr_14280[14] = inst_14187;
                                                          statearr_14280[16] = inst_14189;
                                                          return statearr_14280;
                                                        }();
                                                        var statearr_14281_14319 = state_14246__$1;
                                                        statearr_14281_14319[2] = null;
                                                        statearr_14281_14319[1] = 8;
                                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                      } else {
                                                        if (state_val_14247 === 10) {
                                                          var inst_14190 = state_14246[12];
                                                          var inst_14188 = state_14246[13];
                                                          var inst_14187 = state_14246[14];
                                                          var inst_14189 = state_14246[16];
                                                          var inst_14195 = cljs.core._nth.call(null, inst_14188, inst_14190);
                                                          var inst_14196 = cljs.core.async.muxch_STAR_.call(null, inst_14195);
                                                          var inst_14197 = cljs.core.async.close_BANG_.call(null, inst_14196);
                                                          var inst_14198 = inst_14190 + 1;
                                                          var tmp14276 = inst_14188;
                                                          var tmp14277 = inst_14187;
                                                          var tmp14278 = inst_14189;
                                                          var inst_14187__$1 = tmp14277;
                                                          var inst_14188__$1 = tmp14276;
                                                          var inst_14189__$1 = tmp14278;
                                                          var inst_14190__$1 = inst_14198;
                                                          var state_14246__$1 = function() {
                                                            var statearr_14282 = state_14246;
                                                            statearr_14282[12] = inst_14190__$1;
                                                            statearr_14282[17] = inst_14197;
                                                            statearr_14282[13] = inst_14188__$1;
                                                            statearr_14282[14] = inst_14187__$1;
                                                            statearr_14282[16] = inst_14189__$1;
                                                            return statearr_14282;
                                                          }();
                                                          var statearr_14283_14320 = state_14246__$1;
                                                          statearr_14283_14320[2] = null;
                                                          statearr_14283_14320[1] = 8;
                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                        } else {
                                                          if (state_val_14247 === 18) {
                                                            var inst_14216 = state_14246[2];
                                                            var state_14246__$1 = state_14246;
                                                            var statearr_14284_14321 = state_14246__$1;
                                                            statearr_14284_14321[2] = inst_14216;
                                                            statearr_14284_14321[1] = 15;
                                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                          } else {
                                                            if (state_val_14247 === 8) {
                                                              var inst_14190 = state_14246[12];
                                                              var inst_14189 = state_14246[16];
                                                              var inst_14192 = inst_14190 < inst_14189;
                                                              var inst_14193 = inst_14192;
                                                              var state_14246__$1 = state_14246;
                                                              if (cljs.core.truth_(inst_14193)) {
                                                                var statearr_14285_14322 = state_14246__$1;
                                                                statearr_14285_14322[1] = 10;
                                                              } else {
                                                                var statearr_14286_14323 = state_14246__$1;
                                                                statearr_14286_14323[1] = 11;
                                                              }
                                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                            } else {
                                                              return null;
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__7864__auto___14295, mults, ensure_mult, p);
        return function(switch__7802__auto__, c__7864__auto___14295, mults, ensure_mult, p) {
          return function() {
            var cljs$core$async$state_machine__7803__auto__ = null;
            var cljs$core$async$state_machine__7803__auto____0 = function() {
              var statearr_14290 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_14290[0] = cljs$core$async$state_machine__7803__auto__;
              statearr_14290[1] = 1;
              return statearr_14290;
            };
            var cljs$core$async$state_machine__7803__auto____1 = function(state_14246) {
              while (true) {
                var ret_value__7804__auto__ = function() {
                  try {
                    while (true) {
                      var result__7805__auto__ = switch__7802__auto__.call(null, state_14246);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__7805__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__7805__auto__;
                      }
                      break;
                    }
                  } catch (e14291) {
                    if (e14291 instanceof Object) {
                      var ex__7806__auto__ = e14291;
                      var statearr_14292_14324 = state_14246;
                      statearr_14292_14324[5] = ex__7806__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_14246);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e14291;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__7804__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__14325 = state_14246;
                  state_14246 = G__14325;
                  continue;
                } else {
                  return ret_value__7804__auto__;
                }
                break;
              }
            };
            cljs$core$async$state_machine__7803__auto__ = function(state_14246) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$state_machine__7803__auto____0.call(this);
                case 1:
                  return cljs$core$async$state_machine__7803__auto____1.call(this, state_14246);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            cljs$core$async$state_machine__7803__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$state_machine__7803__auto____0;
            cljs$core$async$state_machine__7803__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$state_machine__7803__auto____1;
            return cljs$core$async$state_machine__7803__auto__;
          }();
        }(switch__7802__auto__, c__7864__auto___14295, mults, ensure_mult, p);
      }();
      var state__7866__auto__ = function() {
        var statearr_14293 = f__7865__auto__.call(null);
        statearr_14293[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__7864__auto___14295;
        return statearr_14293;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__7866__auto__);
    };
  }(c__7864__auto___14295, mults, ensure_mult, p));
  return p;
};
cljs.core.async.pub.cljs$lang$maxFixedArity = 3;
cljs.core.async.sub = function cljs$core$async$sub() {
  var G__14327 = arguments.length;
  switch(G__14327) {
    case 3:
      return cljs.core.async.sub.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.async.sub.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.async.sub.cljs$core$IFn$_invoke$arity$3 = function(p, topic, ch) {
  return cljs.core.async.sub.call(null, p, topic, ch, true);
};
cljs.core.async.sub.cljs$core$IFn$_invoke$arity$4 = function(p, topic, ch, close_QMARK_) {
  return cljs.core.async.sub_STAR_.call(null, p, topic, ch, close_QMARK_);
};
cljs.core.async.sub.cljs$lang$maxFixedArity = 4;
cljs.core.async.unsub = function cljs$core$async$unsub(p, topic, ch) {
  return cljs.core.async.unsub_STAR_.call(null, p, topic, ch);
};
cljs.core.async.unsub_all = function cljs$core$async$unsub_all() {
  var G__14330 = arguments.length;
  switch(G__14330) {
    case 1:
      return cljs.core.async.unsub_all.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.async.unsub_all.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.async.unsub_all.cljs$core$IFn$_invoke$arity$1 = function(p) {
  return cljs.core.async.unsub_all_STAR_.call(null, p);
};
cljs.core.async.unsub_all.cljs$core$IFn$_invoke$arity$2 = function(p, topic) {
  return cljs.core.async.unsub_all_STAR_.call(null, p, topic);
};
cljs.core.async.unsub_all.cljs$lang$maxFixedArity = 2;
cljs.core.async.map = function cljs$core$async$map() {
  var G__14333 = arguments.length;
  switch(G__14333) {
    case 2:
      return cljs.core.async.map.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.async.map.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.async.map.cljs$core$IFn$_invoke$arity$2 = function(f, chs) {
  return cljs.core.async.map.call(null, f, chs, null);
};
cljs.core.async.map.cljs$core$IFn$_invoke$arity$3 = function(f, chs, buf_or_n) {
  var chs__$1 = cljs.core.vec.call(null, chs);
  var out = cljs.core.async.chan.call(null, buf_or_n);
  var cnt = cljs.core.count.call(null, chs__$1);
  var rets = cljs.core.object_array.call(null, cnt);
  var dchan = cljs.core.async.chan.call(null, 1);
  var dctr = cljs.core.atom.call(null, null);
  var done = cljs.core.mapv.call(null, function(chs__$1, out, cnt, rets, dchan, dctr) {
    return function(i) {
      return function(chs__$1, out, cnt, rets, dchan, dctr) {
        return function(ret) {
          rets[i] = ret;
          if (cljs.core.swap_BANG_.call(null, dctr, cljs.core.dec) === 0) {
            return cljs.core.async.put_BANG_.call(null, dchan, rets.slice(0));
          } else {
            return null;
          }
        };
      }(chs__$1, out, cnt, rets, dchan, dctr);
    };
  }(chs__$1, out, cnt, rets, dchan, dctr), cljs.core.range.call(null, cnt));
  var c__7864__auto___14403 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__7864__auto___14403, chs__$1, out, cnt, rets, dchan, dctr, done) {
    return function() {
      var f__7865__auto__ = function() {
        var switch__7802__auto__ = function(c__7864__auto___14403, chs__$1, out, cnt, rets, dchan, dctr, done) {
          return function(state_14372) {
            var state_val_14373 = state_14372[1];
            if (state_val_14373 === 7) {
              var state_14372__$1 = state_14372;
              var statearr_14374_14404 = state_14372__$1;
              statearr_14374_14404[2] = null;
              statearr_14374_14404[1] = 8;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_14373 === 1) {
                var state_14372__$1 = state_14372;
                var statearr_14375_14405 = state_14372__$1;
                statearr_14375_14405[2] = null;
                statearr_14375_14405[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_14373 === 4) {
                  var inst_14336 = state_14372[7];
                  var inst_14338 = inst_14336 < cnt;
                  var state_14372__$1 = state_14372;
                  if (cljs.core.truth_(inst_14338)) {
                    var statearr_14376_14406 = state_14372__$1;
                    statearr_14376_14406[1] = 6;
                  } else {
                    var statearr_14377_14407 = state_14372__$1;
                    statearr_14377_14407[1] = 7;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_14373 === 15) {
                    var inst_14368 = state_14372[2];
                    var state_14372__$1 = state_14372;
                    var statearr_14378_14408 = state_14372__$1;
                    statearr_14378_14408[2] = inst_14368;
                    statearr_14378_14408[1] = 3;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_14373 === 13) {
                      var inst_14361 = cljs.core.async.close_BANG_.call(null, out);
                      var state_14372__$1 = state_14372;
                      var statearr_14379_14409 = state_14372__$1;
                      statearr_14379_14409[2] = inst_14361;
                      statearr_14379_14409[1] = 15;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_14373 === 6) {
                        var state_14372__$1 = state_14372;
                        var statearr_14380_14410 = state_14372__$1;
                        statearr_14380_14410[2] = null;
                        statearr_14380_14410[1] = 11;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_14373 === 3) {
                          var inst_14370 = state_14372[2];
                          var state_14372__$1 = state_14372;
                          return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_14372__$1, inst_14370);
                        } else {
                          if (state_val_14373 === 12) {
                            var inst_14358 = state_14372[8];
                            var inst_14358__$1 = state_14372[2];
                            var inst_14359 = cljs.core.some.call(null, cljs.core.nil_QMARK_, inst_14358__$1);
                            var state_14372__$1 = function() {
                              var statearr_14381 = state_14372;
                              statearr_14381[8] = inst_14358__$1;
                              return statearr_14381;
                            }();
                            if (cljs.core.truth_(inst_14359)) {
                              var statearr_14382_14411 = state_14372__$1;
                              statearr_14382_14411[1] = 13;
                            } else {
                              var statearr_14383_14412 = state_14372__$1;
                              statearr_14383_14412[1] = 14;
                            }
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_14373 === 2) {
                              var inst_14335 = cljs.core.reset_BANG_.call(null, dctr, cnt);
                              var inst_14336 = 0;
                              var state_14372__$1 = function() {
                                var statearr_14384 = state_14372;
                                statearr_14384[7] = inst_14336;
                                statearr_14384[9] = inst_14335;
                                return statearr_14384;
                              }();
                              var statearr_14385_14413 = state_14372__$1;
                              statearr_14385_14413[2] = null;
                              statearr_14385_14413[1] = 4;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_14373 === 11) {
                                var inst_14336 = state_14372[7];
                                var _ = cljs.core.async.impl.ioc_helpers.add_exception_frame.call(null, state_14372, 10, Object, null, 9);
                                var inst_14345 = chs__$1.call(null, inst_14336);
                                var inst_14346 = done.call(null, inst_14336);
                                var inst_14347 = cljs.core.async.take_BANG_.call(null, inst_14345, inst_14346);
                                var state_14372__$1 = state_14372;
                                var statearr_14386_14414 = state_14372__$1;
                                statearr_14386_14414[2] = inst_14347;
                                cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_14372__$1);
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_14373 === 9) {
                                  var inst_14336 = state_14372[7];
                                  var inst_14349 = state_14372[2];
                                  var inst_14350 = inst_14336 + 1;
                                  var inst_14336__$1 = inst_14350;
                                  var state_14372__$1 = function() {
                                    var statearr_14387 = state_14372;
                                    statearr_14387[10] = inst_14349;
                                    statearr_14387[7] = inst_14336__$1;
                                    return statearr_14387;
                                  }();
                                  var statearr_14388_14415 = state_14372__$1;
                                  statearr_14388_14415[2] = null;
                                  statearr_14388_14415[1] = 4;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_14373 === 5) {
                                    var inst_14356 = state_14372[2];
                                    var state_14372__$1 = function() {
                                      var statearr_14389 = state_14372;
                                      statearr_14389[11] = inst_14356;
                                      return statearr_14389;
                                    }();
                                    return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_14372__$1, 12, dchan);
                                  } else {
                                    if (state_val_14373 === 14) {
                                      var inst_14358 = state_14372[8];
                                      var inst_14363 = cljs.core.apply.call(null, f, inst_14358);
                                      var state_14372__$1 = state_14372;
                                      return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_14372__$1, 16, out, inst_14363);
                                    } else {
                                      if (state_val_14373 === 16) {
                                        var inst_14365 = state_14372[2];
                                        var state_14372__$1 = function() {
                                          var statearr_14390 = state_14372;
                                          statearr_14390[12] = inst_14365;
                                          return statearr_14390;
                                        }();
                                        var statearr_14391_14416 = state_14372__$1;
                                        statearr_14391_14416[2] = null;
                                        statearr_14391_14416[1] = 2;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_14373 === 10) {
                                          var inst_14340 = state_14372[2];
                                          var inst_14341 = cljs.core.swap_BANG_.call(null, dctr, cljs.core.dec);
                                          var state_14372__$1 = function() {
                                            var statearr_14392 = state_14372;
                                            statearr_14392[13] = inst_14340;
                                            return statearr_14392;
                                          }();
                                          var statearr_14393_14417 = state_14372__$1;
                                          statearr_14393_14417[2] = inst_14341;
                                          cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_14372__$1);
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_14373 === 8) {
                                            var inst_14354 = state_14372[2];
                                            var state_14372__$1 = state_14372;
                                            var statearr_14394_14418 = state_14372__$1;
                                            statearr_14394_14418[2] = inst_14354;
                                            statearr_14394_14418[1] = 5;
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            return null;
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__7864__auto___14403, chs__$1, out, cnt, rets, dchan, dctr, done);
        return function(switch__7802__auto__, c__7864__auto___14403, chs__$1, out, cnt, rets, dchan, dctr, done) {
          return function() {
            var cljs$core$async$state_machine__7803__auto__ = null;
            var cljs$core$async$state_machine__7803__auto____0 = function() {
              var statearr_14398 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_14398[0] = cljs$core$async$state_machine__7803__auto__;
              statearr_14398[1] = 1;
              return statearr_14398;
            };
            var cljs$core$async$state_machine__7803__auto____1 = function(state_14372) {
              while (true) {
                var ret_value__7804__auto__ = function() {
                  try {
                    while (true) {
                      var result__7805__auto__ = switch__7802__auto__.call(null, state_14372);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__7805__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__7805__auto__;
                      }
                      break;
                    }
                  } catch (e14399) {
                    if (e14399 instanceof Object) {
                      var ex__7806__auto__ = e14399;
                      var statearr_14400_14419 = state_14372;
                      statearr_14400_14419[5] = ex__7806__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_14372);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e14399;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__7804__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__14420 = state_14372;
                  state_14372 = G__14420;
                  continue;
                } else {
                  return ret_value__7804__auto__;
                }
                break;
              }
            };
            cljs$core$async$state_machine__7803__auto__ = function(state_14372) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$state_machine__7803__auto____0.call(this);
                case 1:
                  return cljs$core$async$state_machine__7803__auto____1.call(this, state_14372);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            cljs$core$async$state_machine__7803__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$state_machine__7803__auto____0;
            cljs$core$async$state_machine__7803__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$state_machine__7803__auto____1;
            return cljs$core$async$state_machine__7803__auto__;
          }();
        }(switch__7802__auto__, c__7864__auto___14403, chs__$1, out, cnt, rets, dchan, dctr, done);
      }();
      var state__7866__auto__ = function() {
        var statearr_14401 = f__7865__auto__.call(null);
        statearr_14401[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__7864__auto___14403;
        return statearr_14401;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__7866__auto__);
    };
  }(c__7864__auto___14403, chs__$1, out, cnt, rets, dchan, dctr, done));
  return out;
};
cljs.core.async.map.cljs$lang$maxFixedArity = 3;
cljs.core.async.merge = function cljs$core$async$merge() {
  var G__14423 = arguments.length;
  switch(G__14423) {
    case 1:
      return cljs.core.async.merge.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.async.merge.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.async.merge.cljs$core$IFn$_invoke$arity$1 = function(chs) {
  return cljs.core.async.merge.call(null, chs, null);
};
cljs.core.async.merge.cljs$core$IFn$_invoke$arity$2 = function(chs, buf_or_n) {
  var out = cljs.core.async.chan.call(null, buf_or_n);
  var c__7864__auto___14478 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__7864__auto___14478, out) {
    return function() {
      var f__7865__auto__ = function() {
        var switch__7802__auto__ = function(c__7864__auto___14478, out) {
          return function(state_14453) {
            var state_val_14454 = state_14453[1];
            if (state_val_14454 === 7) {
              var inst_14432 = state_14453[7];
              var inst_14433 = state_14453[8];
              var inst_14432__$1 = state_14453[2];
              var inst_14433__$1 = cljs.core.nth.call(null, inst_14432__$1, 0, null);
              var inst_14434 = cljs.core.nth.call(null, inst_14432__$1, 1, null);
              var inst_14435 = inst_14433__$1 == null;
              var state_14453__$1 = function() {
                var statearr_14455 = state_14453;
                statearr_14455[9] = inst_14434;
                statearr_14455[7] = inst_14432__$1;
                statearr_14455[8] = inst_14433__$1;
                return statearr_14455;
              }();
              if (cljs.core.truth_(inst_14435)) {
                var statearr_14456_14479 = state_14453__$1;
                statearr_14456_14479[1] = 8;
              } else {
                var statearr_14457_14480 = state_14453__$1;
                statearr_14457_14480[1] = 9;
              }
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_14454 === 1) {
                var inst_14424 = cljs.core.vec.call(null, chs);
                var inst_14425 = inst_14424;
                var state_14453__$1 = function() {
                  var statearr_14458 = state_14453;
                  statearr_14458[10] = inst_14425;
                  return statearr_14458;
                }();
                var statearr_14459_14481 = state_14453__$1;
                statearr_14459_14481[2] = null;
                statearr_14459_14481[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_14454 === 4) {
                  var inst_14425 = state_14453[10];
                  var state_14453__$1 = state_14453;
                  return cljs.core.async.ioc_alts_BANG_.call(null, state_14453__$1, 7, inst_14425);
                } else {
                  if (state_val_14454 === 6) {
                    var inst_14449 = state_14453[2];
                    var state_14453__$1 = state_14453;
                    var statearr_14460_14482 = state_14453__$1;
                    statearr_14460_14482[2] = inst_14449;
                    statearr_14460_14482[1] = 3;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_14454 === 3) {
                      var inst_14451 = state_14453[2];
                      var state_14453__$1 = state_14453;
                      return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_14453__$1, inst_14451);
                    } else {
                      if (state_val_14454 === 2) {
                        var inst_14425 = state_14453[10];
                        var inst_14427 = cljs.core.count.call(null, inst_14425);
                        var inst_14428 = inst_14427 > 0;
                        var state_14453__$1 = state_14453;
                        if (cljs.core.truth_(inst_14428)) {
                          var statearr_14462_14483 = state_14453__$1;
                          statearr_14462_14483[1] = 4;
                        } else {
                          var statearr_14463_14484 = state_14453__$1;
                          statearr_14463_14484[1] = 5;
                        }
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_14454 === 11) {
                          var inst_14425 = state_14453[10];
                          var inst_14442 = state_14453[2];
                          var tmp14461 = inst_14425;
                          var inst_14425__$1 = tmp14461;
                          var state_14453__$1 = function() {
                            var statearr_14464 = state_14453;
                            statearr_14464[10] = inst_14425__$1;
                            statearr_14464[11] = inst_14442;
                            return statearr_14464;
                          }();
                          var statearr_14465_14485 = state_14453__$1;
                          statearr_14465_14485[2] = null;
                          statearr_14465_14485[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_14454 === 9) {
                            var inst_14433 = state_14453[8];
                            var state_14453__$1 = state_14453;
                            return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_14453__$1, 11, out, inst_14433);
                          } else {
                            if (state_val_14454 === 5) {
                              var inst_14447 = cljs.core.async.close_BANG_.call(null, out);
                              var state_14453__$1 = state_14453;
                              var statearr_14466_14486 = state_14453__$1;
                              statearr_14466_14486[2] = inst_14447;
                              statearr_14466_14486[1] = 6;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_14454 === 10) {
                                var inst_14445 = state_14453[2];
                                var state_14453__$1 = state_14453;
                                var statearr_14467_14487 = state_14453__$1;
                                statearr_14467_14487[2] = inst_14445;
                                statearr_14467_14487[1] = 6;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_14454 === 8) {
                                  var inst_14434 = state_14453[9];
                                  var inst_14425 = state_14453[10];
                                  var inst_14432 = state_14453[7];
                                  var inst_14433 = state_14453[8];
                                  var inst_14437 = function() {
                                    var c = inst_14434;
                                    var v = inst_14433;
                                    var vec__14430 = inst_14432;
                                    var cs = inst_14425;
                                    return function(c, v, vec__14430, cs, inst_14434, inst_14425, inst_14432, inst_14433, state_val_14454, c__7864__auto___14478, out) {
                                      return function(p1__14421_SHARP_) {
                                        return cljs.core.not_EQ_.call(null, c, p1__14421_SHARP_);
                                      };
                                    }(c, v, vec__14430, cs, inst_14434, inst_14425, inst_14432, inst_14433, state_val_14454, c__7864__auto___14478, out);
                                  }();
                                  var inst_14438 = cljs.core.filterv.call(null, inst_14437, inst_14425);
                                  var inst_14425__$1 = inst_14438;
                                  var state_14453__$1 = function() {
                                    var statearr_14468 = state_14453;
                                    statearr_14468[10] = inst_14425__$1;
                                    return statearr_14468;
                                  }();
                                  var statearr_14469_14488 = state_14453__$1;
                                  statearr_14469_14488[2] = null;
                                  statearr_14469_14488[1] = 2;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  return null;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__7864__auto___14478, out);
        return function(switch__7802__auto__, c__7864__auto___14478, out) {
          return function() {
            var cljs$core$async$state_machine__7803__auto__ = null;
            var cljs$core$async$state_machine__7803__auto____0 = function() {
              var statearr_14473 = [null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_14473[0] = cljs$core$async$state_machine__7803__auto__;
              statearr_14473[1] = 1;
              return statearr_14473;
            };
            var cljs$core$async$state_machine__7803__auto____1 = function(state_14453) {
              while (true) {
                var ret_value__7804__auto__ = function() {
                  try {
                    while (true) {
                      var result__7805__auto__ = switch__7802__auto__.call(null, state_14453);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__7805__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__7805__auto__;
                      }
                      break;
                    }
                  } catch (e14474) {
                    if (e14474 instanceof Object) {
                      var ex__7806__auto__ = e14474;
                      var statearr_14475_14489 = state_14453;
                      statearr_14475_14489[5] = ex__7806__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_14453);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e14474;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__7804__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__14490 = state_14453;
                  state_14453 = G__14490;
                  continue;
                } else {
                  return ret_value__7804__auto__;
                }
                break;
              }
            };
            cljs$core$async$state_machine__7803__auto__ = function(state_14453) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$state_machine__7803__auto____0.call(this);
                case 1:
                  return cljs$core$async$state_machine__7803__auto____1.call(this, state_14453);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            cljs$core$async$state_machine__7803__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$state_machine__7803__auto____0;
            cljs$core$async$state_machine__7803__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$state_machine__7803__auto____1;
            return cljs$core$async$state_machine__7803__auto__;
          }();
        }(switch__7802__auto__, c__7864__auto___14478, out);
      }();
      var state__7866__auto__ = function() {
        var statearr_14476 = f__7865__auto__.call(null);
        statearr_14476[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__7864__auto___14478;
        return statearr_14476;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__7866__auto__);
    };
  }(c__7864__auto___14478, out));
  return out;
};
cljs.core.async.merge.cljs$lang$maxFixedArity = 2;
cljs.core.async.into = function cljs$core$async$into(coll, ch) {
  return cljs.core.async.reduce.call(null, cljs.core.conj, coll, ch);
};
cljs.core.async.take = function cljs$core$async$take() {
  var G__14492 = arguments.length;
  switch(G__14492) {
    case 2:
      return cljs.core.async.take.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.async.take.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.async.take.cljs$core$IFn$_invoke$arity$2 = function(n, ch) {
  return cljs.core.async.take.call(null, n, ch, null);
};
cljs.core.async.take.cljs$core$IFn$_invoke$arity$3 = function(n, ch, buf_or_n) {
  var out = cljs.core.async.chan.call(null, buf_or_n);
  var c__7864__auto___14540 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__7864__auto___14540, out) {
    return function() {
      var f__7865__auto__ = function() {
        var switch__7802__auto__ = function(c__7864__auto___14540, out) {
          return function(state_14516) {
            var state_val_14517 = state_14516[1];
            if (state_val_14517 === 7) {
              var inst_14498 = state_14516[7];
              var inst_14498__$1 = state_14516[2];
              var inst_14499 = inst_14498__$1 == null;
              var inst_14500 = cljs.core.not.call(null, inst_14499);
              var state_14516__$1 = function() {
                var statearr_14518 = state_14516;
                statearr_14518[7] = inst_14498__$1;
                return statearr_14518;
              }();
              if (inst_14500) {
                var statearr_14519_14541 = state_14516__$1;
                statearr_14519_14541[1] = 8;
              } else {
                var statearr_14520_14542 = state_14516__$1;
                statearr_14520_14542[1] = 9;
              }
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_14517 === 1) {
                var inst_14493 = 0;
                var state_14516__$1 = function() {
                  var statearr_14521 = state_14516;
                  statearr_14521[8] = inst_14493;
                  return statearr_14521;
                }();
                var statearr_14522_14543 = state_14516__$1;
                statearr_14522_14543[2] = null;
                statearr_14522_14543[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_14517 === 4) {
                  var state_14516__$1 = state_14516;
                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_14516__$1, 7, ch);
                } else {
                  if (state_val_14517 === 6) {
                    var inst_14511 = state_14516[2];
                    var state_14516__$1 = state_14516;
                    var statearr_14523_14544 = state_14516__$1;
                    statearr_14523_14544[2] = inst_14511;
                    statearr_14523_14544[1] = 3;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_14517 === 3) {
                      var inst_14513 = state_14516[2];
                      var inst_14514 = cljs.core.async.close_BANG_.call(null, out);
                      var state_14516__$1 = function() {
                        var statearr_14524 = state_14516;
                        statearr_14524[9] = inst_14513;
                        return statearr_14524;
                      }();
                      return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_14516__$1, inst_14514);
                    } else {
                      if (state_val_14517 === 2) {
                        var inst_14493 = state_14516[8];
                        var inst_14495 = inst_14493 < n;
                        var state_14516__$1 = state_14516;
                        if (cljs.core.truth_(inst_14495)) {
                          var statearr_14525_14545 = state_14516__$1;
                          statearr_14525_14545[1] = 4;
                        } else {
                          var statearr_14526_14546 = state_14516__$1;
                          statearr_14526_14546[1] = 5;
                        }
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_14517 === 11) {
                          var inst_14493 = state_14516[8];
                          var inst_14503 = state_14516[2];
                          var inst_14504 = inst_14493 + 1;
                          var inst_14493__$1 = inst_14504;
                          var state_14516__$1 = function() {
                            var statearr_14527 = state_14516;
                            statearr_14527[10] = inst_14503;
                            statearr_14527[8] = inst_14493__$1;
                            return statearr_14527;
                          }();
                          var statearr_14528_14547 = state_14516__$1;
                          statearr_14528_14547[2] = null;
                          statearr_14528_14547[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_14517 === 9) {
                            var state_14516__$1 = state_14516;
                            var statearr_14529_14548 = state_14516__$1;
                            statearr_14529_14548[2] = null;
                            statearr_14529_14548[1] = 10;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_14517 === 5) {
                              var state_14516__$1 = state_14516;
                              var statearr_14530_14549 = state_14516__$1;
                              statearr_14530_14549[2] = null;
                              statearr_14530_14549[1] = 6;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_14517 === 10) {
                                var inst_14508 = state_14516[2];
                                var state_14516__$1 = state_14516;
                                var statearr_14531_14550 = state_14516__$1;
                                statearr_14531_14550[2] = inst_14508;
                                statearr_14531_14550[1] = 6;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_14517 === 8) {
                                  var inst_14498 = state_14516[7];
                                  var state_14516__$1 = state_14516;
                                  return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_14516__$1, 11, out, inst_14498);
                                } else {
                                  return null;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__7864__auto___14540, out);
        return function(switch__7802__auto__, c__7864__auto___14540, out) {
          return function() {
            var cljs$core$async$state_machine__7803__auto__ = null;
            var cljs$core$async$state_machine__7803__auto____0 = function() {
              var statearr_14535 = [null, null, null, null, null, null, null, null, null, null, null];
              statearr_14535[0] = cljs$core$async$state_machine__7803__auto__;
              statearr_14535[1] = 1;
              return statearr_14535;
            };
            var cljs$core$async$state_machine__7803__auto____1 = function(state_14516) {
              while (true) {
                var ret_value__7804__auto__ = function() {
                  try {
                    while (true) {
                      var result__7805__auto__ = switch__7802__auto__.call(null, state_14516);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__7805__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__7805__auto__;
                      }
                      break;
                    }
                  } catch (e14536) {
                    if (e14536 instanceof Object) {
                      var ex__7806__auto__ = e14536;
                      var statearr_14537_14551 = state_14516;
                      statearr_14537_14551[5] = ex__7806__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_14516);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e14536;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__7804__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__14552 = state_14516;
                  state_14516 = G__14552;
                  continue;
                } else {
                  return ret_value__7804__auto__;
                }
                break;
              }
            };
            cljs$core$async$state_machine__7803__auto__ = function(state_14516) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$state_machine__7803__auto____0.call(this);
                case 1:
                  return cljs$core$async$state_machine__7803__auto____1.call(this, state_14516);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            cljs$core$async$state_machine__7803__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$state_machine__7803__auto____0;
            cljs$core$async$state_machine__7803__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$state_machine__7803__auto____1;
            return cljs$core$async$state_machine__7803__auto__;
          }();
        }(switch__7802__auto__, c__7864__auto___14540, out);
      }();
      var state__7866__auto__ = function() {
        var statearr_14538 = f__7865__auto__.call(null);
        statearr_14538[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__7864__auto___14540;
        return statearr_14538;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__7866__auto__);
    };
  }(c__7864__auto___14540, out));
  return out;
};
cljs.core.async.take.cljs$lang$maxFixedArity = 3;
cljs.core.async.map_LT_ = function cljs$core$async$map_LT_(f, ch) {
  if (typeof cljs.core.async.t14560 !== "undefined") {
  } else {
    cljs.core.async.t14560 = function(ch, f, map_LT_, meta14561) {
      this.ch = ch;
      this.f = f;
      this.map_LT_ = map_LT_;
      this.meta14561 = meta14561;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.t14560.prototype.cljs$core$async$impl$protocols$WritePort$ = true;
    cljs.core.async.t14560.prototype.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3 = function(_, val, fn1) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.put_BANG_.call(null, self__.ch, val, fn1);
    };
    cljs.core.async.t14560.prototype.cljs$core$async$impl$protocols$ReadPort$ = true;
    cljs.core.async.t14560.prototype.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 = function(_, fn1) {
      var self__ = this;
      var ___$1 = this;
      var ret = cljs.core.async.impl.protocols.take_BANG_.call(null, self__.ch, function() {
        if (typeof cljs.core.async.t14563 !== "undefined") {
        } else {
          cljs.core.async.t14563 = function(fn1, _, meta14561, map_LT_, f, ch, meta14564) {
            this.fn1 = fn1;
            this._ = _;
            this.meta14561 = meta14561;
            this.map_LT_ = map_LT_;
            this.f = f;
            this.ch = ch;
            this.meta14564 = meta14564;
            this.cljs$lang$protocol_mask$partition1$ = 0;
            this.cljs$lang$protocol_mask$partition0$ = 393216;
          };
          cljs.core.async.t14563.prototype.cljs$core$async$impl$protocols$Handler$ = true;
          cljs.core.async.t14563.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(___$1) {
            return function(___$1) {
              var self__ = this;
              var ___$2 = this;
              return cljs.core.async.impl.protocols.active_QMARK_.call(null, self__.fn1);
            };
          }(___$1);
          cljs.core.async.t14563.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(___$1) {
            return function(___$1) {
              var self__ = this;
              var ___$2 = this;
              var f1 = cljs.core.async.impl.protocols.commit.call(null, self__.fn1);
              return function(f1, ___$2, ___$1) {
                return function(p1__14553_SHARP_) {
                  return f1.call(null, p1__14553_SHARP_ == null ? null : self__.f.call(null, p1__14553_SHARP_));
                };
              }(f1, ___$2, ___$1);
            };
          }(___$1);
          cljs.core.async.t14563.prototype.cljs$core$IMeta$_meta$arity$1 = function(___$1) {
            return function(_14565) {
              var self__ = this;
              var _14565__$1 = this;
              return self__.meta14564;
            };
          }(___$1);
          cljs.core.async.t14563.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(___$1) {
            return function(_14565, meta14564__$1) {
              var self__ = this;
              var _14565__$1 = this;
              return new cljs.core.async.t14563(self__.fn1, self__._, self__.meta14561, self__.map_LT_, self__.f, self__.ch, meta14564__$1);
            };
          }(___$1);
          cljs.core.async.t14563.cljs$lang$type = true;
          cljs.core.async.t14563.cljs$lang$ctorStr = "cljs.core.async/t14563";
          cljs.core.async.t14563.cljs$lang$ctorPrWriter = function(___$1) {
            return function(this__4914__auto__, writer__4915__auto__, opt__4916__auto__) {
              return cljs.core._write.call(null, writer__4915__auto__, "cljs.core.async/t14563");
            };
          }(___$1);
          cljs.core.async.__GT_t14563 = function(___$1) {
            return function cljs$core$async$map_LT__$___GT_t14563(fn1__$1, ___$2, meta14561__$1, map_LT___$1, f__$1, ch__$1, meta14564) {
              return new cljs.core.async.t14563(fn1__$1, ___$2, meta14561__$1, map_LT___$1, f__$1, ch__$1, meta14564);
            };
          }(___$1);
        }
        return new cljs.core.async.t14563(fn1, ___$1, self__.meta14561, self__.map_LT_, self__.f, self__.ch, cljs.core.PersistentArrayMap.EMPTY);
      }());
      if (cljs.core.truth_(function() {
        var and__4323__auto__ = ret;
        if (cljs.core.truth_(and__4323__auto__)) {
          return!(cljs.core.deref.call(null, ret) == null);
        } else {
          return and__4323__auto__;
        }
      }())) {
        return cljs.core.async.impl.channels.box.call(null, self__.f.call(null, cljs.core.deref.call(null, ret)));
      } else {
        return ret;
      }
    };
    cljs.core.async.t14560.prototype.cljs$core$async$impl$protocols$Channel$ = true;
    cljs.core.async.t14560.prototype.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.close_BANG_.call(null, self__.ch);
    };
    cljs.core.async.t14560.prototype.cljs$core$async$impl$protocols$Channel$closed_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.closed_QMARK_.call(null, self__.ch);
    };
    cljs.core.async.t14560.prototype.cljs$core$IMeta$_meta$arity$1 = function(_14562) {
      var self__ = this;
      var _14562__$1 = this;
      return self__.meta14561;
    };
    cljs.core.async.t14560.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_14562, meta14561__$1) {
      var self__ = this;
      var _14562__$1 = this;
      return new cljs.core.async.t14560(self__.ch, self__.f, self__.map_LT_, meta14561__$1);
    };
    cljs.core.async.t14560.cljs$lang$type = true;
    cljs.core.async.t14560.cljs$lang$ctorStr = "cljs.core.async/t14560";
    cljs.core.async.t14560.cljs$lang$ctorPrWriter = function(this__4914__auto__, writer__4915__auto__, opt__4916__auto__) {
      return cljs.core._write.call(null, writer__4915__auto__, "cljs.core.async/t14560");
    };
    cljs.core.async.__GT_t14560 = function cljs$core$async$map_LT__$___GT_t14560(ch__$1, f__$1, map_LT___$1, meta14561) {
      return new cljs.core.async.t14560(ch__$1, f__$1, map_LT___$1, meta14561);
    };
  }
  return new cljs.core.async.t14560(ch, f, cljs$core$async$map_LT_, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.core.async.map_GT_ = function cljs$core$async$map_GT_(f, ch) {
  if (typeof cljs.core.async.t14569 !== "undefined") {
  } else {
    cljs.core.async.t14569 = function(ch, f, map_GT_, meta14570) {
      this.ch = ch;
      this.f = f;
      this.map_GT_ = map_GT_;
      this.meta14570 = meta14570;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.t14569.prototype.cljs$core$async$impl$protocols$WritePort$ = true;
    cljs.core.async.t14569.prototype.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3 = function(_, val, fn1) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.put_BANG_.call(null, self__.ch, self__.f.call(null, val), fn1);
    };
    cljs.core.async.t14569.prototype.cljs$core$async$impl$protocols$ReadPort$ = true;
    cljs.core.async.t14569.prototype.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 = function(_, fn1) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.take_BANG_.call(null, self__.ch, fn1);
    };
    cljs.core.async.t14569.prototype.cljs$core$async$impl$protocols$Channel$ = true;
    cljs.core.async.t14569.prototype.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.close_BANG_.call(null, self__.ch);
    };
    cljs.core.async.t14569.prototype.cljs$core$IMeta$_meta$arity$1 = function(_14571) {
      var self__ = this;
      var _14571__$1 = this;
      return self__.meta14570;
    };
    cljs.core.async.t14569.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_14571, meta14570__$1) {
      var self__ = this;
      var _14571__$1 = this;
      return new cljs.core.async.t14569(self__.ch, self__.f, self__.map_GT_, meta14570__$1);
    };
    cljs.core.async.t14569.cljs$lang$type = true;
    cljs.core.async.t14569.cljs$lang$ctorStr = "cljs.core.async/t14569";
    cljs.core.async.t14569.cljs$lang$ctorPrWriter = function(this__4914__auto__, writer__4915__auto__, opt__4916__auto__) {
      return cljs.core._write.call(null, writer__4915__auto__, "cljs.core.async/t14569");
    };
    cljs.core.async.__GT_t14569 = function cljs$core$async$map_GT__$___GT_t14569(ch__$1, f__$1, map_GT___$1, meta14570) {
      return new cljs.core.async.t14569(ch__$1, f__$1, map_GT___$1, meta14570);
    };
  }
  return new cljs.core.async.t14569(ch, f, cljs$core$async$map_GT_, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.core.async.filter_GT_ = function cljs$core$async$filter_GT_(p, ch) {
  if (typeof cljs.core.async.t14575 !== "undefined") {
  } else {
    cljs.core.async.t14575 = function(ch, p, filter_GT_, meta14576) {
      this.ch = ch;
      this.p = p;
      this.filter_GT_ = filter_GT_;
      this.meta14576 = meta14576;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.t14575.prototype.cljs$core$async$impl$protocols$WritePort$ = true;
    cljs.core.async.t14575.prototype.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3 = function(_, val, fn1) {
      var self__ = this;
      var ___$1 = this;
      if (cljs.core.truth_(self__.p.call(null, val))) {
        return cljs.core.async.impl.protocols.put_BANG_.call(null, self__.ch, val, fn1);
      } else {
        return cljs.core.async.impl.channels.box.call(null, cljs.core.not.call(null, cljs.core.async.impl.protocols.closed_QMARK_.call(null, self__.ch)));
      }
    };
    cljs.core.async.t14575.prototype.cljs$core$async$impl$protocols$ReadPort$ = true;
    cljs.core.async.t14575.prototype.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 = function(_, fn1) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.take_BANG_.call(null, self__.ch, fn1);
    };
    cljs.core.async.t14575.prototype.cljs$core$async$impl$protocols$Channel$ = true;
    cljs.core.async.t14575.prototype.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.close_BANG_.call(null, self__.ch);
    };
    cljs.core.async.t14575.prototype.cljs$core$async$impl$protocols$Channel$closed_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.closed_QMARK_.call(null, self__.ch);
    };
    cljs.core.async.t14575.prototype.cljs$core$IMeta$_meta$arity$1 = function(_14577) {
      var self__ = this;
      var _14577__$1 = this;
      return self__.meta14576;
    };
    cljs.core.async.t14575.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_14577, meta14576__$1) {
      var self__ = this;
      var _14577__$1 = this;
      return new cljs.core.async.t14575(self__.ch, self__.p, self__.filter_GT_, meta14576__$1);
    };
    cljs.core.async.t14575.cljs$lang$type = true;
    cljs.core.async.t14575.cljs$lang$ctorStr = "cljs.core.async/t14575";
    cljs.core.async.t14575.cljs$lang$ctorPrWriter = function(this__4914__auto__, writer__4915__auto__, opt__4916__auto__) {
      return cljs.core._write.call(null, writer__4915__auto__, "cljs.core.async/t14575");
    };
    cljs.core.async.__GT_t14575 = function cljs$core$async$filter_GT__$___GT_t14575(ch__$1, p__$1, filter_GT___$1, meta14576) {
      return new cljs.core.async.t14575(ch__$1, p__$1, filter_GT___$1, meta14576);
    };
  }
  return new cljs.core.async.t14575(ch, p, cljs$core$async$filter_GT_, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.core.async.remove_GT_ = function cljs$core$async$remove_GT_(p, ch) {
  return cljs.core.async.filter_GT_.call(null, cljs.core.complement.call(null, p), ch);
};
cljs.core.async.filter_LT_ = function cljs$core$async$filter_LT_() {
  var G__14579 = arguments.length;
  switch(G__14579) {
    case 2:
      return cljs.core.async.filter_LT_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.async.filter_LT_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.async.filter_LT_.cljs$core$IFn$_invoke$arity$2 = function(p, ch) {
  return cljs.core.async.filter_LT_.call(null, p, ch, null);
};
cljs.core.async.filter_LT_.cljs$core$IFn$_invoke$arity$3 = function(p, ch, buf_or_n) {
  var out = cljs.core.async.chan.call(null, buf_or_n);
  var c__7864__auto___14622 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__7864__auto___14622, out) {
    return function() {
      var f__7865__auto__ = function() {
        var switch__7802__auto__ = function(c__7864__auto___14622, out) {
          return function(state_14600) {
            var state_val_14601 = state_14600[1];
            if (state_val_14601 === 7) {
              var inst_14596 = state_14600[2];
              var state_14600__$1 = state_14600;
              var statearr_14602_14623 = state_14600__$1;
              statearr_14602_14623[2] = inst_14596;
              statearr_14602_14623[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_14601 === 1) {
                var state_14600__$1 = state_14600;
                var statearr_14603_14624 = state_14600__$1;
                statearr_14603_14624[2] = null;
                statearr_14603_14624[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_14601 === 4) {
                  var inst_14582 = state_14600[7];
                  var inst_14582__$1 = state_14600[2];
                  var inst_14583 = inst_14582__$1 == null;
                  var state_14600__$1 = function() {
                    var statearr_14604 = state_14600;
                    statearr_14604[7] = inst_14582__$1;
                    return statearr_14604;
                  }();
                  if (cljs.core.truth_(inst_14583)) {
                    var statearr_14605_14625 = state_14600__$1;
                    statearr_14605_14625[1] = 5;
                  } else {
                    var statearr_14606_14626 = state_14600__$1;
                    statearr_14606_14626[1] = 6;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_14601 === 6) {
                    var inst_14582 = state_14600[7];
                    var inst_14587 = p.call(null, inst_14582);
                    var state_14600__$1 = state_14600;
                    if (cljs.core.truth_(inst_14587)) {
                      var statearr_14607_14627 = state_14600__$1;
                      statearr_14607_14627[1] = 8;
                    } else {
                      var statearr_14608_14628 = state_14600__$1;
                      statearr_14608_14628[1] = 9;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_14601 === 3) {
                      var inst_14598 = state_14600[2];
                      var state_14600__$1 = state_14600;
                      return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_14600__$1, inst_14598);
                    } else {
                      if (state_val_14601 === 2) {
                        var state_14600__$1 = state_14600;
                        return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_14600__$1, 4, ch);
                      } else {
                        if (state_val_14601 === 11) {
                          var inst_14590 = state_14600[2];
                          var state_14600__$1 = state_14600;
                          var statearr_14609_14629 = state_14600__$1;
                          statearr_14609_14629[2] = inst_14590;
                          statearr_14609_14629[1] = 10;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_14601 === 9) {
                            var state_14600__$1 = state_14600;
                            var statearr_14610_14630 = state_14600__$1;
                            statearr_14610_14630[2] = null;
                            statearr_14610_14630[1] = 10;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_14601 === 5) {
                              var inst_14585 = cljs.core.async.close_BANG_.call(null, out);
                              var state_14600__$1 = state_14600;
                              var statearr_14611_14631 = state_14600__$1;
                              statearr_14611_14631[2] = inst_14585;
                              statearr_14611_14631[1] = 7;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_14601 === 10) {
                                var inst_14593 = state_14600[2];
                                var state_14600__$1 = function() {
                                  var statearr_14612 = state_14600;
                                  statearr_14612[8] = inst_14593;
                                  return statearr_14612;
                                }();
                                var statearr_14613_14632 = state_14600__$1;
                                statearr_14613_14632[2] = null;
                                statearr_14613_14632[1] = 2;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_14601 === 8) {
                                  var inst_14582 = state_14600[7];
                                  var state_14600__$1 = state_14600;
                                  return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_14600__$1, 11, out, inst_14582);
                                } else {
                                  return null;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__7864__auto___14622, out);
        return function(switch__7802__auto__, c__7864__auto___14622, out) {
          return function() {
            var cljs$core$async$state_machine__7803__auto__ = null;
            var cljs$core$async$state_machine__7803__auto____0 = function() {
              var statearr_14617 = [null, null, null, null, null, null, null, null, null];
              statearr_14617[0] = cljs$core$async$state_machine__7803__auto__;
              statearr_14617[1] = 1;
              return statearr_14617;
            };
            var cljs$core$async$state_machine__7803__auto____1 = function(state_14600) {
              while (true) {
                var ret_value__7804__auto__ = function() {
                  try {
                    while (true) {
                      var result__7805__auto__ = switch__7802__auto__.call(null, state_14600);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__7805__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__7805__auto__;
                      }
                      break;
                    }
                  } catch (e14618) {
                    if (e14618 instanceof Object) {
                      var ex__7806__auto__ = e14618;
                      var statearr_14619_14633 = state_14600;
                      statearr_14619_14633[5] = ex__7806__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_14600);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e14618;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__7804__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__14634 = state_14600;
                  state_14600 = G__14634;
                  continue;
                } else {
                  return ret_value__7804__auto__;
                }
                break;
              }
            };
            cljs$core$async$state_machine__7803__auto__ = function(state_14600) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$state_machine__7803__auto____0.call(this);
                case 1:
                  return cljs$core$async$state_machine__7803__auto____1.call(this, state_14600);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            cljs$core$async$state_machine__7803__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$state_machine__7803__auto____0;
            cljs$core$async$state_machine__7803__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$state_machine__7803__auto____1;
            return cljs$core$async$state_machine__7803__auto__;
          }();
        }(switch__7802__auto__, c__7864__auto___14622, out);
      }();
      var state__7866__auto__ = function() {
        var statearr_14620 = f__7865__auto__.call(null);
        statearr_14620[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__7864__auto___14622;
        return statearr_14620;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__7866__auto__);
    };
  }(c__7864__auto___14622, out));
  return out;
};
cljs.core.async.filter_LT_.cljs$lang$maxFixedArity = 3;
cljs.core.async.remove_LT_ = function cljs$core$async$remove_LT_() {
  var G__14636 = arguments.length;
  switch(G__14636) {
    case 2:
      return cljs.core.async.remove_LT_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.async.remove_LT_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.async.remove_LT_.cljs$core$IFn$_invoke$arity$2 = function(p, ch) {
  return cljs.core.async.remove_LT_.call(null, p, ch, null);
};
cljs.core.async.remove_LT_.cljs$core$IFn$_invoke$arity$3 = function(p, ch, buf_or_n) {
  return cljs.core.async.filter_LT_.call(null, cljs.core.complement.call(null, p), ch, buf_or_n);
};
cljs.core.async.remove_LT_.cljs$lang$maxFixedArity = 3;
cljs.core.async.mapcat_STAR_ = function cljs$core$async$mapcat_STAR_(f, in$, out) {
  var c__7864__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__7864__auto__) {
    return function() {
      var f__7865__auto__ = function() {
        var switch__7802__auto__ = function(c__7864__auto__) {
          return function(state_14803) {
            var state_val_14804 = state_14803[1];
            if (state_val_14804 === 7) {
              var inst_14799 = state_14803[2];
              var state_14803__$1 = state_14803;
              var statearr_14805_14846 = state_14803__$1;
              statearr_14805_14846[2] = inst_14799;
              statearr_14805_14846[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_14804 === 20) {
                var inst_14769 = state_14803[7];
                var inst_14780 = state_14803[2];
                var inst_14781 = cljs.core.next.call(null, inst_14769);
                var inst_14755 = inst_14781;
                var inst_14756 = null;
                var inst_14757 = 0;
                var inst_14758 = 0;
                var state_14803__$1 = function() {
                  var statearr_14806 = state_14803;
                  statearr_14806[8] = inst_14756;
                  statearr_14806[9] = inst_14780;
                  statearr_14806[10] = inst_14755;
                  statearr_14806[11] = inst_14758;
                  statearr_14806[12] = inst_14757;
                  return statearr_14806;
                }();
                var statearr_14807_14847 = state_14803__$1;
                statearr_14807_14847[2] = null;
                statearr_14807_14847[1] = 8;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_14804 === 1) {
                  var state_14803__$1 = state_14803;
                  var statearr_14808_14848 = state_14803__$1;
                  statearr_14808_14848[2] = null;
                  statearr_14808_14848[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_14804 === 4) {
                    var inst_14744 = state_14803[13];
                    var inst_14744__$1 = state_14803[2];
                    var inst_14745 = inst_14744__$1 == null;
                    var state_14803__$1 = function() {
                      var statearr_14809 = state_14803;
                      statearr_14809[13] = inst_14744__$1;
                      return statearr_14809;
                    }();
                    if (cljs.core.truth_(inst_14745)) {
                      var statearr_14810_14849 = state_14803__$1;
                      statearr_14810_14849[1] = 5;
                    } else {
                      var statearr_14811_14850 = state_14803__$1;
                      statearr_14811_14850[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_14804 === 15) {
                      var state_14803__$1 = state_14803;
                      var statearr_14815_14851 = state_14803__$1;
                      statearr_14815_14851[2] = null;
                      statearr_14815_14851[1] = 16;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_14804 === 21) {
                        var state_14803__$1 = state_14803;
                        var statearr_14816_14852 = state_14803__$1;
                        statearr_14816_14852[2] = null;
                        statearr_14816_14852[1] = 23;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_14804 === 13) {
                          var inst_14756 = state_14803[8];
                          var inst_14755 = state_14803[10];
                          var inst_14758 = state_14803[11];
                          var inst_14757 = state_14803[12];
                          var inst_14765 = state_14803[2];
                          var inst_14766 = inst_14758 + 1;
                          var tmp14812 = inst_14756;
                          var tmp14813 = inst_14755;
                          var tmp14814 = inst_14757;
                          var inst_14755__$1 = tmp14813;
                          var inst_14756__$1 = tmp14812;
                          var inst_14757__$1 = tmp14814;
                          var inst_14758__$1 = inst_14766;
                          var state_14803__$1 = function() {
                            var statearr_14817 = state_14803;
                            statearr_14817[14] = inst_14765;
                            statearr_14817[8] = inst_14756__$1;
                            statearr_14817[10] = inst_14755__$1;
                            statearr_14817[11] = inst_14758__$1;
                            statearr_14817[12] = inst_14757__$1;
                            return statearr_14817;
                          }();
                          var statearr_14818_14853 = state_14803__$1;
                          statearr_14818_14853[2] = null;
                          statearr_14818_14853[1] = 8;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_14804 === 22) {
                            var state_14803__$1 = state_14803;
                            var statearr_14819_14854 = state_14803__$1;
                            statearr_14819_14854[2] = null;
                            statearr_14819_14854[1] = 2;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_14804 === 6) {
                              var inst_14744 = state_14803[13];
                              var inst_14753 = f.call(null, inst_14744);
                              var inst_14754 = cljs.core.seq.call(null, inst_14753);
                              var inst_14755 = inst_14754;
                              var inst_14756 = null;
                              var inst_14757 = 0;
                              var inst_14758 = 0;
                              var state_14803__$1 = function() {
                                var statearr_14820 = state_14803;
                                statearr_14820[8] = inst_14756;
                                statearr_14820[10] = inst_14755;
                                statearr_14820[11] = inst_14758;
                                statearr_14820[12] = inst_14757;
                                return statearr_14820;
                              }();
                              var statearr_14821_14855 = state_14803__$1;
                              statearr_14821_14855[2] = null;
                              statearr_14821_14855[1] = 8;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_14804 === 17) {
                                var inst_14769 = state_14803[7];
                                var inst_14773 = cljs.core.chunk_first.call(null, inst_14769);
                                var inst_14774 = cljs.core.chunk_rest.call(null, inst_14769);
                                var inst_14775 = cljs.core.count.call(null, inst_14773);
                                var inst_14755 = inst_14774;
                                var inst_14756 = inst_14773;
                                var inst_14757 = inst_14775;
                                var inst_14758 = 0;
                                var state_14803__$1 = function() {
                                  var statearr_14822 = state_14803;
                                  statearr_14822[8] = inst_14756;
                                  statearr_14822[10] = inst_14755;
                                  statearr_14822[11] = inst_14758;
                                  statearr_14822[12] = inst_14757;
                                  return statearr_14822;
                                }();
                                var statearr_14823_14856 = state_14803__$1;
                                statearr_14823_14856[2] = null;
                                statearr_14823_14856[1] = 8;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_14804 === 3) {
                                  var inst_14801 = state_14803[2];
                                  var state_14803__$1 = state_14803;
                                  return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_14803__$1, inst_14801);
                                } else {
                                  if (state_val_14804 === 12) {
                                    var inst_14789 = state_14803[2];
                                    var state_14803__$1 = state_14803;
                                    var statearr_14824_14857 = state_14803__$1;
                                    statearr_14824_14857[2] = inst_14789;
                                    statearr_14824_14857[1] = 9;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_14804 === 2) {
                                      var state_14803__$1 = state_14803;
                                      return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_14803__$1, 4, in$);
                                    } else {
                                      if (state_val_14804 === 23) {
                                        var inst_14797 = state_14803[2];
                                        var state_14803__$1 = state_14803;
                                        var statearr_14825_14858 = state_14803__$1;
                                        statearr_14825_14858[2] = inst_14797;
                                        statearr_14825_14858[1] = 7;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_14804 === 19) {
                                          var inst_14784 = state_14803[2];
                                          var state_14803__$1 = state_14803;
                                          var statearr_14826_14859 = state_14803__$1;
                                          statearr_14826_14859[2] = inst_14784;
                                          statearr_14826_14859[1] = 16;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_14804 === 11) {
                                            var inst_14769 = state_14803[7];
                                            var inst_14755 = state_14803[10];
                                            var inst_14769__$1 = cljs.core.seq.call(null, inst_14755);
                                            var state_14803__$1 = function() {
                                              var statearr_14827 = state_14803;
                                              statearr_14827[7] = inst_14769__$1;
                                              return statearr_14827;
                                            }();
                                            if (inst_14769__$1) {
                                              var statearr_14828_14860 = state_14803__$1;
                                              statearr_14828_14860[1] = 14;
                                            } else {
                                              var statearr_14829_14861 = state_14803__$1;
                                              statearr_14829_14861[1] = 15;
                                            }
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            if (state_val_14804 === 9) {
                                              var inst_14791 = state_14803[2];
                                              var inst_14792 = cljs.core.async.impl.protocols.closed_QMARK_.call(null, out);
                                              var state_14803__$1 = function() {
                                                var statearr_14830 = state_14803;
                                                statearr_14830[15] = inst_14791;
                                                return statearr_14830;
                                              }();
                                              if (cljs.core.truth_(inst_14792)) {
                                                var statearr_14831_14862 = state_14803__$1;
                                                statearr_14831_14862[1] = 21;
                                              } else {
                                                var statearr_14832_14863 = state_14803__$1;
                                                statearr_14832_14863[1] = 22;
                                              }
                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                            } else {
                                              if (state_val_14804 === 5) {
                                                var inst_14747 = cljs.core.async.close_BANG_.call(null, out);
                                                var state_14803__$1 = state_14803;
                                                var statearr_14833_14864 = state_14803__$1;
                                                statearr_14833_14864[2] = inst_14747;
                                                statearr_14833_14864[1] = 7;
                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                              } else {
                                                if (state_val_14804 === 14) {
                                                  var inst_14769 = state_14803[7];
                                                  var inst_14771 = cljs.core.chunked_seq_QMARK_.call(null, inst_14769);
                                                  var state_14803__$1 = state_14803;
                                                  if (inst_14771) {
                                                    var statearr_14834_14865 = state_14803__$1;
                                                    statearr_14834_14865[1] = 17;
                                                  } else {
                                                    var statearr_14835_14866 = state_14803__$1;
                                                    statearr_14835_14866[1] = 18;
                                                  }
                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                } else {
                                                  if (state_val_14804 === 16) {
                                                    var inst_14787 = state_14803[2];
                                                    var state_14803__$1 = state_14803;
                                                    var statearr_14836_14867 = state_14803__$1;
                                                    statearr_14836_14867[2] = inst_14787;
                                                    statearr_14836_14867[1] = 12;
                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                  } else {
                                                    if (state_val_14804 === 10) {
                                                      var inst_14756 = state_14803[8];
                                                      var inst_14758 = state_14803[11];
                                                      var inst_14763 = cljs.core._nth.call(null, inst_14756, inst_14758);
                                                      var state_14803__$1 = state_14803;
                                                      return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_14803__$1, 13, out, inst_14763);
                                                    } else {
                                                      if (state_val_14804 === 18) {
                                                        var inst_14769 = state_14803[7];
                                                        var inst_14778 = cljs.core.first.call(null, inst_14769);
                                                        var state_14803__$1 = state_14803;
                                                        return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_14803__$1, 20, out, inst_14778);
                                                      } else {
                                                        if (state_val_14804 === 8) {
                                                          var inst_14758 = state_14803[11];
                                                          var inst_14757 = state_14803[12];
                                                          var inst_14760 = inst_14758 < inst_14757;
                                                          var inst_14761 = inst_14760;
                                                          var state_14803__$1 = state_14803;
                                                          if (cljs.core.truth_(inst_14761)) {
                                                            var statearr_14837_14868 = state_14803__$1;
                                                            statearr_14837_14868[1] = 10;
                                                          } else {
                                                            var statearr_14838_14869 = state_14803__$1;
                                                            statearr_14838_14869[1] = 11;
                                                          }
                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                        } else {
                                                          return null;
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__7864__auto__);
        return function(switch__7802__auto__, c__7864__auto__) {
          return function() {
            var cljs$core$async$mapcat_STAR__$_state_machine__7803__auto__ = null;
            var cljs$core$async$mapcat_STAR__$_state_machine__7803__auto____0 = function() {
              var statearr_14842 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_14842[0] = cljs$core$async$mapcat_STAR__$_state_machine__7803__auto__;
              statearr_14842[1] = 1;
              return statearr_14842;
            };
            var cljs$core$async$mapcat_STAR__$_state_machine__7803__auto____1 = function(state_14803) {
              while (true) {
                var ret_value__7804__auto__ = function() {
                  try {
                    while (true) {
                      var result__7805__auto__ = switch__7802__auto__.call(null, state_14803);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__7805__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__7805__auto__;
                      }
                      break;
                    }
                  } catch (e14843) {
                    if (e14843 instanceof Object) {
                      var ex__7806__auto__ = e14843;
                      var statearr_14844_14870 = state_14803;
                      statearr_14844_14870[5] = ex__7806__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_14803);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e14843;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__7804__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__14871 = state_14803;
                  state_14803 = G__14871;
                  continue;
                } else {
                  return ret_value__7804__auto__;
                }
                break;
              }
            };
            cljs$core$async$mapcat_STAR__$_state_machine__7803__auto__ = function(state_14803) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$mapcat_STAR__$_state_machine__7803__auto____0.call(this);
                case 1:
                  return cljs$core$async$mapcat_STAR__$_state_machine__7803__auto____1.call(this, state_14803);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            cljs$core$async$mapcat_STAR__$_state_machine__7803__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$mapcat_STAR__$_state_machine__7803__auto____0;
            cljs$core$async$mapcat_STAR__$_state_machine__7803__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$mapcat_STAR__$_state_machine__7803__auto____1;
            return cljs$core$async$mapcat_STAR__$_state_machine__7803__auto__;
          }();
        }(switch__7802__auto__, c__7864__auto__);
      }();
      var state__7866__auto__ = function() {
        var statearr_14845 = f__7865__auto__.call(null);
        statearr_14845[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__7864__auto__;
        return statearr_14845;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__7866__auto__);
    };
  }(c__7864__auto__));
  return c__7864__auto__;
};
cljs.core.async.mapcat_LT_ = function cljs$core$async$mapcat_LT_() {
  var G__14873 = arguments.length;
  switch(G__14873) {
    case 2:
      return cljs.core.async.mapcat_LT_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.async.mapcat_LT_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.async.mapcat_LT_.cljs$core$IFn$_invoke$arity$2 = function(f, in$) {
  return cljs.core.async.mapcat_LT_.call(null, f, in$, null);
};
cljs.core.async.mapcat_LT_.cljs$core$IFn$_invoke$arity$3 = function(f, in$, buf_or_n) {
  var out = cljs.core.async.chan.call(null, buf_or_n);
  cljs.core.async.mapcat_STAR_.call(null, f, in$, out);
  return out;
};
cljs.core.async.mapcat_LT_.cljs$lang$maxFixedArity = 3;
cljs.core.async.mapcat_GT_ = function cljs$core$async$mapcat_GT_() {
  var G__14876 = arguments.length;
  switch(G__14876) {
    case 2:
      return cljs.core.async.mapcat_GT_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.async.mapcat_GT_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.async.mapcat_GT_.cljs$core$IFn$_invoke$arity$2 = function(f, out) {
  return cljs.core.async.mapcat_GT_.call(null, f, out, null);
};
cljs.core.async.mapcat_GT_.cljs$core$IFn$_invoke$arity$3 = function(f, out, buf_or_n) {
  var in$ = cljs.core.async.chan.call(null, buf_or_n);
  cljs.core.async.mapcat_STAR_.call(null, f, in$, out);
  return in$;
};
cljs.core.async.mapcat_GT_.cljs$lang$maxFixedArity = 3;
cljs.core.async.unique = function cljs$core$async$unique() {
  var G__14879 = arguments.length;
  switch(G__14879) {
    case 1:
      return cljs.core.async.unique.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.async.unique.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.async.unique.cljs$core$IFn$_invoke$arity$1 = function(ch) {
  return cljs.core.async.unique.call(null, ch, null);
};
cljs.core.async.unique.cljs$core$IFn$_invoke$arity$2 = function(ch, buf_or_n) {
  var out = cljs.core.async.chan.call(null, buf_or_n);
  var c__7864__auto___14929 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__7864__auto___14929, out) {
    return function() {
      var f__7865__auto__ = function() {
        var switch__7802__auto__ = function(c__7864__auto___14929, out) {
          return function(state_14903) {
            var state_val_14904 = state_14903[1];
            if (state_val_14904 === 7) {
              var inst_14898 = state_14903[2];
              var state_14903__$1 = state_14903;
              var statearr_14905_14930 = state_14903__$1;
              statearr_14905_14930[2] = inst_14898;
              statearr_14905_14930[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_14904 === 1) {
                var inst_14880 = null;
                var state_14903__$1 = function() {
                  var statearr_14906 = state_14903;
                  statearr_14906[7] = inst_14880;
                  return statearr_14906;
                }();
                var statearr_14907_14931 = state_14903__$1;
                statearr_14907_14931[2] = null;
                statearr_14907_14931[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_14904 === 4) {
                  var inst_14883 = state_14903[8];
                  var inst_14883__$1 = state_14903[2];
                  var inst_14884 = inst_14883__$1 == null;
                  var inst_14885 = cljs.core.not.call(null, inst_14884);
                  var state_14903__$1 = function() {
                    var statearr_14908 = state_14903;
                    statearr_14908[8] = inst_14883__$1;
                    return statearr_14908;
                  }();
                  if (inst_14885) {
                    var statearr_14909_14932 = state_14903__$1;
                    statearr_14909_14932[1] = 5;
                  } else {
                    var statearr_14910_14933 = state_14903__$1;
                    statearr_14910_14933[1] = 6;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_14904 === 6) {
                    var state_14903__$1 = state_14903;
                    var statearr_14911_14934 = state_14903__$1;
                    statearr_14911_14934[2] = null;
                    statearr_14911_14934[1] = 7;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_14904 === 3) {
                      var inst_14900 = state_14903[2];
                      var inst_14901 = cljs.core.async.close_BANG_.call(null, out);
                      var state_14903__$1 = function() {
                        var statearr_14912 = state_14903;
                        statearr_14912[9] = inst_14900;
                        return statearr_14912;
                      }();
                      return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_14903__$1, inst_14901);
                    } else {
                      if (state_val_14904 === 2) {
                        var state_14903__$1 = state_14903;
                        return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_14903__$1, 4, ch);
                      } else {
                        if (state_val_14904 === 11) {
                          var inst_14883 = state_14903[8];
                          var inst_14892 = state_14903[2];
                          var inst_14880 = inst_14883;
                          var state_14903__$1 = function() {
                            var statearr_14913 = state_14903;
                            statearr_14913[10] = inst_14892;
                            statearr_14913[7] = inst_14880;
                            return statearr_14913;
                          }();
                          var statearr_14914_14935 = state_14903__$1;
                          statearr_14914_14935[2] = null;
                          statearr_14914_14935[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_14904 === 9) {
                            var inst_14883 = state_14903[8];
                            var state_14903__$1 = state_14903;
                            return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_14903__$1, 11, out, inst_14883);
                          } else {
                            if (state_val_14904 === 5) {
                              var inst_14883 = state_14903[8];
                              var inst_14880 = state_14903[7];
                              var inst_14887 = cljs.core._EQ_.call(null, inst_14883, inst_14880);
                              var state_14903__$1 = state_14903;
                              if (inst_14887) {
                                var statearr_14916_14936 = state_14903__$1;
                                statearr_14916_14936[1] = 8;
                              } else {
                                var statearr_14917_14937 = state_14903__$1;
                                statearr_14917_14937[1] = 9;
                              }
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_14904 === 10) {
                                var inst_14895 = state_14903[2];
                                var state_14903__$1 = state_14903;
                                var statearr_14918_14938 = state_14903__$1;
                                statearr_14918_14938[2] = inst_14895;
                                statearr_14918_14938[1] = 7;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_14904 === 8) {
                                  var inst_14880 = state_14903[7];
                                  var tmp14915 = inst_14880;
                                  var inst_14880__$1 = tmp14915;
                                  var state_14903__$1 = function() {
                                    var statearr_14919 = state_14903;
                                    statearr_14919[7] = inst_14880__$1;
                                    return statearr_14919;
                                  }();
                                  var statearr_14920_14939 = state_14903__$1;
                                  statearr_14920_14939[2] = null;
                                  statearr_14920_14939[1] = 2;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  return null;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__7864__auto___14929, out);
        return function(switch__7802__auto__, c__7864__auto___14929, out) {
          return function() {
            var cljs$core$async$state_machine__7803__auto__ = null;
            var cljs$core$async$state_machine__7803__auto____0 = function() {
              var statearr_14924 = [null, null, null, null, null, null, null, null, null, null, null];
              statearr_14924[0] = cljs$core$async$state_machine__7803__auto__;
              statearr_14924[1] = 1;
              return statearr_14924;
            };
            var cljs$core$async$state_machine__7803__auto____1 = function(state_14903) {
              while (true) {
                var ret_value__7804__auto__ = function() {
                  try {
                    while (true) {
                      var result__7805__auto__ = switch__7802__auto__.call(null, state_14903);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__7805__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__7805__auto__;
                      }
                      break;
                    }
                  } catch (e14925) {
                    if (e14925 instanceof Object) {
                      var ex__7806__auto__ = e14925;
                      var statearr_14926_14940 = state_14903;
                      statearr_14926_14940[5] = ex__7806__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_14903);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e14925;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__7804__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__14941 = state_14903;
                  state_14903 = G__14941;
                  continue;
                } else {
                  return ret_value__7804__auto__;
                }
                break;
              }
            };
            cljs$core$async$state_machine__7803__auto__ = function(state_14903) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$state_machine__7803__auto____0.call(this);
                case 1:
                  return cljs$core$async$state_machine__7803__auto____1.call(this, state_14903);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            cljs$core$async$state_machine__7803__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$state_machine__7803__auto____0;
            cljs$core$async$state_machine__7803__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$state_machine__7803__auto____1;
            return cljs$core$async$state_machine__7803__auto__;
          }();
        }(switch__7802__auto__, c__7864__auto___14929, out);
      }();
      var state__7866__auto__ = function() {
        var statearr_14927 = f__7865__auto__.call(null);
        statearr_14927[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__7864__auto___14929;
        return statearr_14927;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__7866__auto__);
    };
  }(c__7864__auto___14929, out));
  return out;
};
cljs.core.async.unique.cljs$lang$maxFixedArity = 2;
cljs.core.async.partition = function cljs$core$async$partition() {
  var G__14943 = arguments.length;
  switch(G__14943) {
    case 2:
      return cljs.core.async.partition.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.async.partition.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.async.partition.cljs$core$IFn$_invoke$arity$2 = function(n, ch) {
  return cljs.core.async.partition.call(null, n, ch, null);
};
cljs.core.async.partition.cljs$core$IFn$_invoke$arity$3 = function(n, ch, buf_or_n) {
  var out = cljs.core.async.chan.call(null, buf_or_n);
  var c__7864__auto___15012 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__7864__auto___15012, out) {
    return function() {
      var f__7865__auto__ = function() {
        var switch__7802__auto__ = function(c__7864__auto___15012, out) {
          return function(state_14981) {
            var state_val_14982 = state_14981[1];
            if (state_val_14982 === 7) {
              var inst_14977 = state_14981[2];
              var state_14981__$1 = state_14981;
              var statearr_14983_15013 = state_14981__$1;
              statearr_14983_15013[2] = inst_14977;
              statearr_14983_15013[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_14982 === 1) {
                var inst_14944 = new Array(n);
                var inst_14945 = inst_14944;
                var inst_14946 = 0;
                var state_14981__$1 = function() {
                  var statearr_14984 = state_14981;
                  statearr_14984[7] = inst_14945;
                  statearr_14984[8] = inst_14946;
                  return statearr_14984;
                }();
                var statearr_14985_15014 = state_14981__$1;
                statearr_14985_15014[2] = null;
                statearr_14985_15014[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_14982 === 4) {
                  var inst_14949 = state_14981[9];
                  var inst_14949__$1 = state_14981[2];
                  var inst_14950 = inst_14949__$1 == null;
                  var inst_14951 = cljs.core.not.call(null, inst_14950);
                  var state_14981__$1 = function() {
                    var statearr_14986 = state_14981;
                    statearr_14986[9] = inst_14949__$1;
                    return statearr_14986;
                  }();
                  if (inst_14951) {
                    var statearr_14987_15015 = state_14981__$1;
                    statearr_14987_15015[1] = 5;
                  } else {
                    var statearr_14988_15016 = state_14981__$1;
                    statearr_14988_15016[1] = 6;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_14982 === 15) {
                    var inst_14971 = state_14981[2];
                    var state_14981__$1 = state_14981;
                    var statearr_14989_15017 = state_14981__$1;
                    statearr_14989_15017[2] = inst_14971;
                    statearr_14989_15017[1] = 14;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_14982 === 13) {
                      var state_14981__$1 = state_14981;
                      var statearr_14990_15018 = state_14981__$1;
                      statearr_14990_15018[2] = null;
                      statearr_14990_15018[1] = 14;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_14982 === 6) {
                        var inst_14946 = state_14981[8];
                        var inst_14967 = inst_14946 > 0;
                        var state_14981__$1 = state_14981;
                        if (cljs.core.truth_(inst_14967)) {
                          var statearr_14991_15019 = state_14981__$1;
                          statearr_14991_15019[1] = 12;
                        } else {
                          var statearr_14992_15020 = state_14981__$1;
                          statearr_14992_15020[1] = 13;
                        }
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_14982 === 3) {
                          var inst_14979 = state_14981[2];
                          var state_14981__$1 = state_14981;
                          return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_14981__$1, inst_14979);
                        } else {
                          if (state_val_14982 === 12) {
                            var inst_14945 = state_14981[7];
                            var inst_14969 = cljs.core.vec.call(null, inst_14945);
                            var state_14981__$1 = state_14981;
                            return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_14981__$1, 15, out, inst_14969);
                          } else {
                            if (state_val_14982 === 2) {
                              var state_14981__$1 = state_14981;
                              return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_14981__$1, 4, ch);
                            } else {
                              if (state_val_14982 === 11) {
                                var inst_14961 = state_14981[2];
                                var inst_14962 = new Array(n);
                                var inst_14945 = inst_14962;
                                var inst_14946 = 0;
                                var state_14981__$1 = function() {
                                  var statearr_14993 = state_14981;
                                  statearr_14993[7] = inst_14945;
                                  statearr_14993[8] = inst_14946;
                                  statearr_14993[10] = inst_14961;
                                  return statearr_14993;
                                }();
                                var statearr_14994_15021 = state_14981__$1;
                                statearr_14994_15021[2] = null;
                                statearr_14994_15021[1] = 2;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_14982 === 9) {
                                  var inst_14945 = state_14981[7];
                                  var inst_14959 = cljs.core.vec.call(null, inst_14945);
                                  var state_14981__$1 = state_14981;
                                  return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_14981__$1, 11, out, inst_14959);
                                } else {
                                  if (state_val_14982 === 5) {
                                    var inst_14949 = state_14981[9];
                                    var inst_14945 = state_14981[7];
                                    var inst_14954 = state_14981[11];
                                    var inst_14946 = state_14981[8];
                                    var inst_14953 = inst_14945[inst_14946] = inst_14949;
                                    var inst_14954__$1 = inst_14946 + 1;
                                    var inst_14955 = inst_14954__$1 < n;
                                    var state_14981__$1 = function() {
                                      var statearr_14995 = state_14981;
                                      statearr_14995[11] = inst_14954__$1;
                                      statearr_14995[12] = inst_14953;
                                      return statearr_14995;
                                    }();
                                    if (cljs.core.truth_(inst_14955)) {
                                      var statearr_14996_15022 = state_14981__$1;
                                      statearr_14996_15022[1] = 8;
                                    } else {
                                      var statearr_14997_15023 = state_14981__$1;
                                      statearr_14997_15023[1] = 9;
                                    }
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_14982 === 14) {
                                      var inst_14974 = state_14981[2];
                                      var inst_14975 = cljs.core.async.close_BANG_.call(null, out);
                                      var state_14981__$1 = function() {
                                        var statearr_14999 = state_14981;
                                        statearr_14999[13] = inst_14974;
                                        return statearr_14999;
                                      }();
                                      var statearr_15000_15024 = state_14981__$1;
                                      statearr_15000_15024[2] = inst_14975;
                                      statearr_15000_15024[1] = 7;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_14982 === 10) {
                                        var inst_14965 = state_14981[2];
                                        var state_14981__$1 = state_14981;
                                        var statearr_15001_15025 = state_14981__$1;
                                        statearr_15001_15025[2] = inst_14965;
                                        statearr_15001_15025[1] = 7;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_14982 === 8) {
                                          var inst_14945 = state_14981[7];
                                          var inst_14954 = state_14981[11];
                                          var tmp14998 = inst_14945;
                                          var inst_14945__$1 = tmp14998;
                                          var inst_14946 = inst_14954;
                                          var state_14981__$1 = function() {
                                            var statearr_15002 = state_14981;
                                            statearr_15002[7] = inst_14945__$1;
                                            statearr_15002[8] = inst_14946;
                                            return statearr_15002;
                                          }();
                                          var statearr_15003_15026 = state_14981__$1;
                                          statearr_15003_15026[2] = null;
                                          statearr_15003_15026[1] = 2;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          return null;
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__7864__auto___15012, out);
        return function(switch__7802__auto__, c__7864__auto___15012, out) {
          return function() {
            var cljs$core$async$state_machine__7803__auto__ = null;
            var cljs$core$async$state_machine__7803__auto____0 = function() {
              var statearr_15007 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_15007[0] = cljs$core$async$state_machine__7803__auto__;
              statearr_15007[1] = 1;
              return statearr_15007;
            };
            var cljs$core$async$state_machine__7803__auto____1 = function(state_14981) {
              while (true) {
                var ret_value__7804__auto__ = function() {
                  try {
                    while (true) {
                      var result__7805__auto__ = switch__7802__auto__.call(null, state_14981);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__7805__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__7805__auto__;
                      }
                      break;
                    }
                  } catch (e15008) {
                    if (e15008 instanceof Object) {
                      var ex__7806__auto__ = e15008;
                      var statearr_15009_15027 = state_14981;
                      statearr_15009_15027[5] = ex__7806__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_14981);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e15008;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__7804__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__15028 = state_14981;
                  state_14981 = G__15028;
                  continue;
                } else {
                  return ret_value__7804__auto__;
                }
                break;
              }
            };
            cljs$core$async$state_machine__7803__auto__ = function(state_14981) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$state_machine__7803__auto____0.call(this);
                case 1:
                  return cljs$core$async$state_machine__7803__auto____1.call(this, state_14981);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            cljs$core$async$state_machine__7803__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$state_machine__7803__auto____0;
            cljs$core$async$state_machine__7803__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$state_machine__7803__auto____1;
            return cljs$core$async$state_machine__7803__auto__;
          }();
        }(switch__7802__auto__, c__7864__auto___15012, out);
      }();
      var state__7866__auto__ = function() {
        var statearr_15010 = f__7865__auto__.call(null);
        statearr_15010[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__7864__auto___15012;
        return statearr_15010;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__7866__auto__);
    };
  }(c__7864__auto___15012, out));
  return out;
};
cljs.core.async.partition.cljs$lang$maxFixedArity = 3;
cljs.core.async.partition_by = function cljs$core$async$partition_by() {
  var G__15030 = arguments.length;
  switch(G__15030) {
    case 2:
      return cljs.core.async.partition_by.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.async.partition_by.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.async.partition_by.cljs$core$IFn$_invoke$arity$2 = function(f, ch) {
  return cljs.core.async.partition_by.call(null, f, ch, null);
};
cljs.core.async.partition_by.cljs$core$IFn$_invoke$arity$3 = function(f, ch, buf_or_n) {
  var out = cljs.core.async.chan.call(null, buf_or_n);
  var c__7864__auto___15103 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__7864__auto___15103, out) {
    return function() {
      var f__7865__auto__ = function() {
        var switch__7802__auto__ = function(c__7864__auto___15103, out) {
          return function(state_15072) {
            var state_val_15073 = state_15072[1];
            if (state_val_15073 === 7) {
              var inst_15068 = state_15072[2];
              var state_15072__$1 = state_15072;
              var statearr_15074_15104 = state_15072__$1;
              statearr_15074_15104[2] = inst_15068;
              statearr_15074_15104[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_15073 === 1) {
                var inst_15031 = [];
                var inst_15032 = inst_15031;
                var inst_15033 = new cljs.core.Keyword("cljs.core.async", "nothing", "cljs.core.async/nothing", -69252123);
                var state_15072__$1 = function() {
                  var statearr_15075 = state_15072;
                  statearr_15075[7] = inst_15033;
                  statearr_15075[8] = inst_15032;
                  return statearr_15075;
                }();
                var statearr_15076_15105 = state_15072__$1;
                statearr_15076_15105[2] = null;
                statearr_15076_15105[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_15073 === 4) {
                  var inst_15036 = state_15072[9];
                  var inst_15036__$1 = state_15072[2];
                  var inst_15037 = inst_15036__$1 == null;
                  var inst_15038 = cljs.core.not.call(null, inst_15037);
                  var state_15072__$1 = function() {
                    var statearr_15077 = state_15072;
                    statearr_15077[9] = inst_15036__$1;
                    return statearr_15077;
                  }();
                  if (inst_15038) {
                    var statearr_15078_15106 = state_15072__$1;
                    statearr_15078_15106[1] = 5;
                  } else {
                    var statearr_15079_15107 = state_15072__$1;
                    statearr_15079_15107[1] = 6;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_15073 === 15) {
                    var inst_15062 = state_15072[2];
                    var state_15072__$1 = state_15072;
                    var statearr_15080_15108 = state_15072__$1;
                    statearr_15080_15108[2] = inst_15062;
                    statearr_15080_15108[1] = 14;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_15073 === 13) {
                      var state_15072__$1 = state_15072;
                      var statearr_15081_15109 = state_15072__$1;
                      statearr_15081_15109[2] = null;
                      statearr_15081_15109[1] = 14;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_15073 === 6) {
                        var inst_15032 = state_15072[8];
                        var inst_15057 = inst_15032.length;
                        var inst_15058 = inst_15057 > 0;
                        var state_15072__$1 = state_15072;
                        if (cljs.core.truth_(inst_15058)) {
                          var statearr_15082_15110 = state_15072__$1;
                          statearr_15082_15110[1] = 12;
                        } else {
                          var statearr_15083_15111 = state_15072__$1;
                          statearr_15083_15111[1] = 13;
                        }
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_15073 === 3) {
                          var inst_15070 = state_15072[2];
                          var state_15072__$1 = state_15072;
                          return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_15072__$1, inst_15070);
                        } else {
                          if (state_val_15073 === 12) {
                            var inst_15032 = state_15072[8];
                            var inst_15060 = cljs.core.vec.call(null, inst_15032);
                            var state_15072__$1 = state_15072;
                            return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_15072__$1, 15, out, inst_15060);
                          } else {
                            if (state_val_15073 === 2) {
                              var state_15072__$1 = state_15072;
                              return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_15072__$1, 4, ch);
                            } else {
                              if (state_val_15073 === 11) {
                                var inst_15040 = state_15072[10];
                                var inst_15036 = state_15072[9];
                                var inst_15050 = state_15072[2];
                                var inst_15051 = [];
                                var inst_15052 = inst_15051.push(inst_15036);
                                var inst_15032 = inst_15051;
                                var inst_15033 = inst_15040;
                                var state_15072__$1 = function() {
                                  var statearr_15084 = state_15072;
                                  statearr_15084[7] = inst_15033;
                                  statearr_15084[11] = inst_15052;
                                  statearr_15084[12] = inst_15050;
                                  statearr_15084[8] = inst_15032;
                                  return statearr_15084;
                                }();
                                var statearr_15085_15112 = state_15072__$1;
                                statearr_15085_15112[2] = null;
                                statearr_15085_15112[1] = 2;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_15073 === 9) {
                                  var inst_15032 = state_15072[8];
                                  var inst_15048 = cljs.core.vec.call(null, inst_15032);
                                  var state_15072__$1 = state_15072;
                                  return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_15072__$1, 11, out, inst_15048);
                                } else {
                                  if (state_val_15073 === 5) {
                                    var inst_15040 = state_15072[10];
                                    var inst_15033 = state_15072[7];
                                    var inst_15036 = state_15072[9];
                                    var inst_15040__$1 = f.call(null, inst_15036);
                                    var inst_15041 = cljs.core._EQ_.call(null, inst_15040__$1, inst_15033);
                                    var inst_15042 = cljs.core.keyword_identical_QMARK_.call(null, inst_15033, new cljs.core.Keyword("cljs.core.async", "nothing", "cljs.core.async/nothing", -69252123));
                                    var inst_15043 = inst_15041 || inst_15042;
                                    var state_15072__$1 = function() {
                                      var statearr_15086 = state_15072;
                                      statearr_15086[10] = inst_15040__$1;
                                      return statearr_15086;
                                    }();
                                    if (cljs.core.truth_(inst_15043)) {
                                      var statearr_15087_15113 = state_15072__$1;
                                      statearr_15087_15113[1] = 8;
                                    } else {
                                      var statearr_15088_15114 = state_15072__$1;
                                      statearr_15088_15114[1] = 9;
                                    }
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_15073 === 14) {
                                      var inst_15065 = state_15072[2];
                                      var inst_15066 = cljs.core.async.close_BANG_.call(null, out);
                                      var state_15072__$1 = function() {
                                        var statearr_15090 = state_15072;
                                        statearr_15090[13] = inst_15065;
                                        return statearr_15090;
                                      }();
                                      var statearr_15091_15115 = state_15072__$1;
                                      statearr_15091_15115[2] = inst_15066;
                                      statearr_15091_15115[1] = 7;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_15073 === 10) {
                                        var inst_15055 = state_15072[2];
                                        var state_15072__$1 = state_15072;
                                        var statearr_15092_15116 = state_15072__$1;
                                        statearr_15092_15116[2] = inst_15055;
                                        statearr_15092_15116[1] = 7;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_15073 === 8) {
                                          var inst_15040 = state_15072[10];
                                          var inst_15036 = state_15072[9];
                                          var inst_15032 = state_15072[8];
                                          var inst_15045 = inst_15032.push(inst_15036);
                                          var tmp15089 = inst_15032;
                                          var inst_15032__$1 = tmp15089;
                                          var inst_15033 = inst_15040;
                                          var state_15072__$1 = function() {
                                            var statearr_15093 = state_15072;
                                            statearr_15093[14] = inst_15045;
                                            statearr_15093[7] = inst_15033;
                                            statearr_15093[8] = inst_15032__$1;
                                            return statearr_15093;
                                          }();
                                          var statearr_15094_15117 = state_15072__$1;
                                          statearr_15094_15117[2] = null;
                                          statearr_15094_15117[1] = 2;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          return null;
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__7864__auto___15103, out);
        return function(switch__7802__auto__, c__7864__auto___15103, out) {
          return function() {
            var cljs$core$async$state_machine__7803__auto__ = null;
            var cljs$core$async$state_machine__7803__auto____0 = function() {
              var statearr_15098 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_15098[0] = cljs$core$async$state_machine__7803__auto__;
              statearr_15098[1] = 1;
              return statearr_15098;
            };
            var cljs$core$async$state_machine__7803__auto____1 = function(state_15072) {
              while (true) {
                var ret_value__7804__auto__ = function() {
                  try {
                    while (true) {
                      var result__7805__auto__ = switch__7802__auto__.call(null, state_15072);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__7805__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__7805__auto__;
                      }
                      break;
                    }
                  } catch (e15099) {
                    if (e15099 instanceof Object) {
                      var ex__7806__auto__ = e15099;
                      var statearr_15100_15118 = state_15072;
                      statearr_15100_15118[5] = ex__7806__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_15072);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e15099;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__7804__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__15119 = state_15072;
                  state_15072 = G__15119;
                  continue;
                } else {
                  return ret_value__7804__auto__;
                }
                break;
              }
            };
            cljs$core$async$state_machine__7803__auto__ = function(state_15072) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$state_machine__7803__auto____0.call(this);
                case 1:
                  return cljs$core$async$state_machine__7803__auto____1.call(this, state_15072);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            cljs$core$async$state_machine__7803__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$state_machine__7803__auto____0;
            cljs$core$async$state_machine__7803__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$state_machine__7803__auto____1;
            return cljs$core$async$state_machine__7803__auto__;
          }();
        }(switch__7802__auto__, c__7864__auto___15103, out);
      }();
      var state__7866__auto__ = function() {
        var statearr_15101 = f__7865__auto__.call(null);
        statearr_15101[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__7864__auto___15103;
        return statearr_15101;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__7866__auto__);
    };
  }(c__7864__auto___15103, out));
  return out;
};
cljs.core.async.partition_by.cljs$lang$maxFixedArity = 3;
goog.provide("clojure.set");
goog.require("cljs.core");
clojure.set.bubble_max_key = function clojure$set$bubble_max_key(k, coll) {
  var max = cljs.core.apply.call(null, cljs.core.max_key, k, coll);
  return cljs.core.cons.call(null, max, cljs.core.remove.call(null, function(max) {
    return function(p1__12410_SHARP_) {
      return max === p1__12410_SHARP_;
    };
  }(max), coll));
};
clojure.set.union = function clojure$set$union() {
  var G__12415 = arguments.length;
  switch(G__12415) {
    case 0:
      return clojure.set.union.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return clojure.set.union.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return clojure.set.union.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5386__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return clojure.set.union.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5386__auto__);
  }
};
clojure.set.union.cljs$core$IFn$_invoke$arity$0 = function() {
  return cljs.core.PersistentHashSet.EMPTY;
};
clojure.set.union.cljs$core$IFn$_invoke$arity$1 = function(s1) {
  return s1;
};
clojure.set.union.cljs$core$IFn$_invoke$arity$2 = function(s1, s2) {
  if (cljs.core.count.call(null, s1) < cljs.core.count.call(null, s2)) {
    return cljs.core.reduce.call(null, cljs.core.conj, s2, s1);
  } else {
    return cljs.core.reduce.call(null, cljs.core.conj, s1, s2);
  }
};
clojure.set.union.cljs$core$IFn$_invoke$arity$variadic = function(s1, s2, sets) {
  var bubbled_sets = clojure.set.bubble_max_key.call(null, cljs.core.count, cljs.core.conj.call(null, sets, s2, s1));
  return cljs.core.reduce.call(null, cljs.core.into, cljs.core.first.call(null, bubbled_sets), cljs.core.rest.call(null, bubbled_sets));
};
clojure.set.union.cljs$lang$applyTo = function(seq12411) {
  var G__12412 = cljs.core.first.call(null, seq12411);
  var seq12411__$1 = cljs.core.next.call(null, seq12411);
  var G__12413 = cljs.core.first.call(null, seq12411__$1);
  var seq12411__$2 = cljs.core.next.call(null, seq12411__$1);
  return clojure.set.union.cljs$core$IFn$_invoke$arity$variadic(G__12412, G__12413, seq12411__$2);
};
clojure.set.union.cljs$lang$maxFixedArity = 2;
clojure.set.intersection = function clojure$set$intersection() {
  var G__12422 = arguments.length;
  switch(G__12422) {
    case 1:
      return clojure.set.intersection.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return clojure.set.intersection.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5386__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return clojure.set.intersection.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5386__auto__);
  }
};
clojure.set.intersection.cljs$core$IFn$_invoke$arity$1 = function(s1) {
  return s1;
};
clojure.set.intersection.cljs$core$IFn$_invoke$arity$2 = function(s1, s2) {
  while (true) {
    if (cljs.core.count.call(null, s2) < cljs.core.count.call(null, s1)) {
      var G__12424 = s2;
      var G__12425 = s1;
      s1 = G__12424;
      s2 = G__12425;
      continue;
    } else {
      return cljs.core.reduce.call(null, function(s1, s2) {
        return function(result, item) {
          if (cljs.core.contains_QMARK_.call(null, s2, item)) {
            return result;
          } else {
            return cljs.core.disj.call(null, result, item);
          }
        };
      }(s1, s2), s1, s1);
    }
    break;
  }
};
clojure.set.intersection.cljs$core$IFn$_invoke$arity$variadic = function(s1, s2, sets) {
  var bubbled_sets = clojure.set.bubble_max_key.call(null, function(p1__12417_SHARP_) {
    return-cljs.core.count.call(null, p1__12417_SHARP_);
  }, cljs.core.conj.call(null, sets, s2, s1));
  return cljs.core.reduce.call(null, clojure.set.intersection, cljs.core.first.call(null, bubbled_sets), cljs.core.rest.call(null, bubbled_sets));
};
clojure.set.intersection.cljs$lang$applyTo = function(seq12418) {
  var G__12419 = cljs.core.first.call(null, seq12418);
  var seq12418__$1 = cljs.core.next.call(null, seq12418);
  var G__12420 = cljs.core.first.call(null, seq12418__$1);
  var seq12418__$2 = cljs.core.next.call(null, seq12418__$1);
  return clojure.set.intersection.cljs$core$IFn$_invoke$arity$variadic(G__12419, G__12420, seq12418__$2);
};
clojure.set.intersection.cljs$lang$maxFixedArity = 2;
clojure.set.difference = function clojure$set$difference() {
  var G__12430 = arguments.length;
  switch(G__12430) {
    case 1:
      return clojure.set.difference.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return clojure.set.difference.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5386__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return clojure.set.difference.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5386__auto__);
  }
};
clojure.set.difference.cljs$core$IFn$_invoke$arity$1 = function(s1) {
  return s1;
};
clojure.set.difference.cljs$core$IFn$_invoke$arity$2 = function(s1, s2) {
  if (cljs.core.count.call(null, s1) < cljs.core.count.call(null, s2)) {
    return cljs.core.reduce.call(null, function(result, item) {
      if (cljs.core.contains_QMARK_.call(null, s2, item)) {
        return cljs.core.disj.call(null, result, item);
      } else {
        return result;
      }
    }, s1, s1);
  } else {
    return cljs.core.reduce.call(null, cljs.core.disj, s1, s2);
  }
};
clojure.set.difference.cljs$core$IFn$_invoke$arity$variadic = function(s1, s2, sets) {
  return cljs.core.reduce.call(null, clojure.set.difference, s1, cljs.core.conj.call(null, sets, s2));
};
clojure.set.difference.cljs$lang$applyTo = function(seq12426) {
  var G__12427 = cljs.core.first.call(null, seq12426);
  var seq12426__$1 = cljs.core.next.call(null, seq12426);
  var G__12428 = cljs.core.first.call(null, seq12426__$1);
  var seq12426__$2 = cljs.core.next.call(null, seq12426__$1);
  return clojure.set.difference.cljs$core$IFn$_invoke$arity$variadic(G__12427, G__12428, seq12426__$2);
};
clojure.set.difference.cljs$lang$maxFixedArity = 2;
clojure.set.select = function clojure$set$select(pred, xset) {
  return cljs.core.reduce.call(null, function(s, k) {
    if (cljs.core.truth_(pred.call(null, k))) {
      return s;
    } else {
      return cljs.core.disj.call(null, s, k);
    }
  }, xset, xset);
};
clojure.set.project = function clojure$set$project(xrel, ks) {
  return cljs.core.set.call(null, cljs.core.map.call(null, function(p1__12432_SHARP_) {
    return cljs.core.select_keys.call(null, p1__12432_SHARP_, ks);
  }, xrel));
};
clojure.set.rename_keys = function clojure$set$rename_keys(map, kmap) {
  return cljs.core.reduce.call(null, function(m, p__12435) {
    var vec__12436 = p__12435;
    var old = cljs.core.nth.call(null, vec__12436, 0, null);
    var new$ = cljs.core.nth.call(null, vec__12436, 1, null);
    if (cljs.core.contains_QMARK_.call(null, map, old)) {
      return cljs.core.assoc.call(null, m, new$, cljs.core.get.call(null, map, old));
    } else {
      return m;
    }
  }, cljs.core.apply.call(null, cljs.core.dissoc, map, cljs.core.keys.call(null, kmap)), kmap);
};
clojure.set.rename = function clojure$set$rename(xrel, kmap) {
  return cljs.core.set.call(null, cljs.core.map.call(null, function(p1__12437_SHARP_) {
    return clojure.set.rename_keys.call(null, p1__12437_SHARP_, kmap);
  }, xrel));
};
clojure.set.index = function clojure$set$index(xrel, ks) {
  return cljs.core.reduce.call(null, function(m, x) {
    var ik = cljs.core.select_keys.call(null, x, ks);
    return cljs.core.assoc.call(null, m, ik, cljs.core.conj.call(null, cljs.core.get.call(null, m, ik, cljs.core.PersistentHashSet.EMPTY), x));
  }, cljs.core.PersistentArrayMap.EMPTY, xrel);
};
clojure.set.map_invert = function clojure$set$map_invert(m) {
  return cljs.core.reduce.call(null, function(m__$1, p__12440) {
    var vec__12441 = p__12440;
    var k = cljs.core.nth.call(null, vec__12441, 0, null);
    var v = cljs.core.nth.call(null, vec__12441, 1, null);
    return cljs.core.assoc.call(null, m__$1, v, k);
  }, cljs.core.PersistentArrayMap.EMPTY, m);
};
clojure.set.join = function clojure$set$join() {
  var G__12447 = arguments.length;
  switch(G__12447) {
    case 2:
      return clojure.set.join.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return clojure.set.join.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
clojure.set.join.cljs$core$IFn$_invoke$arity$2 = function(xrel, yrel) {
  if (cljs.core.seq.call(null, xrel) && cljs.core.seq.call(null, yrel)) {
    var ks = clojure.set.intersection.call(null, cljs.core.set.call(null, cljs.core.keys.call(null, cljs.core.first.call(null, xrel))), cljs.core.set.call(null, cljs.core.keys.call(null, cljs.core.first.call(null, yrel))));
    var vec__12448 = cljs.core.count.call(null, xrel) <= cljs.core.count.call(null, yrel) ? new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [xrel, yrel], null) : new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [yrel, xrel], null);
    var r = cljs.core.nth.call(null, vec__12448, 0, null);
    var s = cljs.core.nth.call(null, vec__12448, 1, null);
    var idx = clojure.set.index.call(null, r, ks);
    return cljs.core.reduce.call(null, function(ks, vec__12448, r, s, idx) {
      return function(ret, x) {
        var found = idx.call(null, cljs.core.select_keys.call(null, x, ks));
        if (cljs.core.truth_(found)) {
          return cljs.core.reduce.call(null, function(found, ks, vec__12448, r, s, idx) {
            return function(p1__12442_SHARP_, p2__12443_SHARP_) {
              return cljs.core.conj.call(null, p1__12442_SHARP_, cljs.core.merge.call(null, p2__12443_SHARP_, x));
            };
          }(found, ks, vec__12448, r, s, idx), ret, found);
        } else {
          return ret;
        }
      };
    }(ks, vec__12448, r, s, idx), cljs.core.PersistentHashSet.EMPTY, s);
  } else {
    return cljs.core.PersistentHashSet.EMPTY;
  }
};
clojure.set.join.cljs$core$IFn$_invoke$arity$3 = function(xrel, yrel, km) {
  var vec__12449 = cljs.core.count.call(null, xrel) <= cljs.core.count.call(null, yrel) ? new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [xrel, yrel, clojure.set.map_invert.call(null, km)], null) : new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [yrel, xrel, km], null);
  var r = cljs.core.nth.call(null, vec__12449, 0, null);
  var s = cljs.core.nth.call(null, vec__12449, 1, null);
  var k = cljs.core.nth.call(null, vec__12449, 2, null);
  var idx = clojure.set.index.call(null, r, cljs.core.vals.call(null, k));
  return cljs.core.reduce.call(null, function(vec__12449, r, s, k, idx) {
    return function(ret, x) {
      var found = idx.call(null, clojure.set.rename_keys.call(null, cljs.core.select_keys.call(null, x, cljs.core.keys.call(null, k)), k));
      if (cljs.core.truth_(found)) {
        return cljs.core.reduce.call(null, function(found, vec__12449, r, s, k, idx) {
          return function(p1__12444_SHARP_, p2__12445_SHARP_) {
            return cljs.core.conj.call(null, p1__12444_SHARP_, cljs.core.merge.call(null, p2__12445_SHARP_, x));
          };
        }(found, vec__12449, r, s, k, idx), ret, found);
      } else {
        return ret;
      }
    };
  }(vec__12449, r, s, k, idx), cljs.core.PersistentHashSet.EMPTY, s);
};
clojure.set.join.cljs$lang$maxFixedArity = 3;
clojure.set.subset_QMARK_ = function clojure$set$subset_QMARK_(set1, set2) {
  return cljs.core.count.call(null, set1) <= cljs.core.count.call(null, set2) && cljs.core.every_QMARK_.call(null, function(p1__12451_SHARP_) {
    return cljs.core.contains_QMARK_.call(null, set2, p1__12451_SHARP_);
  }, set1);
};
clojure.set.superset_QMARK_ = function clojure$set$superset_QMARK_(set1, set2) {
  return cljs.core.count.call(null, set1) >= cljs.core.count.call(null, set2) && cljs.core.every_QMARK_.call(null, function(p1__12452_SHARP_) {
    return cljs.core.contains_QMARK_.call(null, set1, p1__12452_SHARP_);
  }, set2);
};
goog.provide("re_frame.utils");
goog.require("cljs.core");
goog.require("clojure.set");
re_frame.utils.default_loggers = new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "log", "log", -1595516004), function(p1__12496_SHARP_) {
  return console.log(p1__12496_SHARP_);
}, new cljs.core.Keyword(null, "warn", "warn", -436710552), function(p1__12497_SHARP_) {
  return console.warn(p1__12497_SHARP_);
}, new cljs.core.Keyword(null, "error", "error", -978969032), function(p1__12498_SHARP_) {
  return console.error(p1__12498_SHARP_);
}, new cljs.core.Keyword(null, "group", "group", 582596132), function(p1__12499_SHARP_) {
  if (cljs.core.truth_(console.group())) {
    return console.group(p1__12499_SHARP_);
  } else {
    return console.log(p1__12499_SHARP_);
  }
}, new cljs.core.Keyword(null, "groupEnd", "groupEnd", -337721382), function() {
  if (cljs.core.truth_(console.groupEnd())) {
    return console.groupEnd();
  } else {
    return null;
  }
}], null);
re_frame.utils.loggers = cljs.core.atom.call(null, re_frame.utils.default_loggers);
re_frame.utils.set_loggers_BANG_ = function re_frame$utils$set_loggers_BANG_(new_loggers) {
  if (cljs.core.empty_QMARK_.call(null, clojure.set.difference.call(null, cljs.core.set.call(null, cljs.core.keys.call(null, new_loggers)), cljs.core.set.call(null, cljs.core.keys.call(null, re_frame.utils.default_loggers))))) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("Unknown keys in new-loggers"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "empty?", "empty?", 76408555, null), cljs.core.list(new cljs.core.Symbol(null, "difference", "difference", -738334373, null), cljs.core.list(new cljs.core.Symbol(null, "set", "set", 1945134081, null), cljs.core.list(new cljs.core.Symbol(null, "keys", "keys", -1586012071, null), new cljs.core.Symbol(null, 
    "new-loggers", "new-loggers", -1268568509, null))), cljs.core.list(new cljs.core.Symbol(null, "set", "set", 1945134081, null), cljs.core.list(new cljs.core.Symbol(null, "keys", "keys", -1586012071, null), new cljs.core.Symbol(null, "default-loggers", "default-loggers", 387733219, null)))))))].join(""));
  }
  return cljs.core.swap_BANG_.call(null, re_frame.utils.loggers, cljs.core.merge, new_loggers);
};
re_frame.utils.log = function re_frame$utils$log() {
  var argseq__5375__auto__ = 0 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 0), 0) : null;
  return re_frame.utils.log.cljs$core$IFn$_invoke$arity$variadic(argseq__5375__auto__);
};
re_frame.utils.log.cljs$core$IFn$_invoke$arity$variadic = function(args) {
  return(new cljs.core.Keyword(null, "log", "log", -1595516004)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, re_frame.utils.loggers)).call(null, cljs.core.apply.call(null, cljs.core.str, args));
};
re_frame.utils.log.cljs$lang$maxFixedArity = 0;
re_frame.utils.log.cljs$lang$applyTo = function(seq12500) {
  return re_frame.utils.log.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq.call(null, seq12500));
};
re_frame.utils.warn = function re_frame$utils$warn() {
  var argseq__5375__auto__ = 0 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 0), 0) : null;
  return re_frame.utils.warn.cljs$core$IFn$_invoke$arity$variadic(argseq__5375__auto__);
};
re_frame.utils.warn.cljs$core$IFn$_invoke$arity$variadic = function(args) {
  return(new cljs.core.Keyword(null, "warn", "warn", -436710552)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, re_frame.utils.loggers)).call(null, cljs.core.apply.call(null, cljs.core.str, args));
};
re_frame.utils.warn.cljs$lang$maxFixedArity = 0;
re_frame.utils.warn.cljs$lang$applyTo = function(seq12501) {
  return re_frame.utils.warn.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq.call(null, seq12501));
};
re_frame.utils.group = function re_frame$utils$group() {
  var argseq__5375__auto__ = 0 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 0), 0) : null;
  return re_frame.utils.group.cljs$core$IFn$_invoke$arity$variadic(argseq__5375__auto__);
};
re_frame.utils.group.cljs$core$IFn$_invoke$arity$variadic = function(args) {
  return(new cljs.core.Keyword(null, "group", "group", 582596132)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, re_frame.utils.loggers)).call(null, cljs.core.apply.call(null, cljs.core.str, args));
};
re_frame.utils.group.cljs$lang$maxFixedArity = 0;
re_frame.utils.group.cljs$lang$applyTo = function(seq12502) {
  return re_frame.utils.group.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq.call(null, seq12502));
};
re_frame.utils.groupEnd = function re_frame$utils$groupEnd() {
  var argseq__5375__auto__ = 0 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 0), 0) : null;
  return re_frame.utils.groupEnd.cljs$core$IFn$_invoke$arity$variadic(argseq__5375__auto__);
};
re_frame.utils.groupEnd.cljs$core$IFn$_invoke$arity$variadic = function(args) {
  return(new cljs.core.Keyword(null, "groupEnd", "groupEnd", -337721382)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, re_frame.utils.loggers)).call(null, cljs.core.apply.call(null, cljs.core.str, args));
};
re_frame.utils.groupEnd.cljs$lang$maxFixedArity = 0;
re_frame.utils.groupEnd.cljs$lang$applyTo = function(seq12503) {
  return re_frame.utils.groupEnd.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq.call(null, seq12503));
};
re_frame.utils.error = function re_frame$utils$error() {
  var argseq__5375__auto__ = 0 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 0), 0) : null;
  return re_frame.utils.error.cljs$core$IFn$_invoke$arity$variadic(argseq__5375__auto__);
};
re_frame.utils.error.cljs$core$IFn$_invoke$arity$variadic = function(args) {
  return(new cljs.core.Keyword(null, "error", "error", -978969032)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, re_frame.utils.loggers)).call(null, cljs.core.apply.call(null, cljs.core.str, args));
};
re_frame.utils.error.cljs$lang$maxFixedArity = 0;
re_frame.utils.error.cljs$lang$applyTo = function(seq12504) {
  return re_frame.utils.error.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq.call(null, seq12504));
};
re_frame.utils.first_in_vector = function re_frame$utils$first_in_vector(v) {
  if (cljs.core.vector_QMARK_.call(null, v)) {
    return cljs.core.first.call(null, v);
  } else {
    return re_frame.utils.error.call(null, "re-frame: expected a vector event, but got: ", v);
  }
};
goog.provide("re_frame.db");
goog.require("cljs.core");
goog.require("reagent.core");
re_frame.db.app_db = reagent.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
goog.provide("re_frame.handlers");
goog.require("cljs.core");
goog.require("re_frame.utils");
goog.require("re_frame.db");
re_frame.handlers.report_middleware_factories = function re_frame$handlers$report_middleware_factories(v) {
  var name_of_factory = function re_frame$handlers$report_middleware_factories_$_name_of_factory(f) {
    return(new cljs.core.Keyword(null, "re-frame-factory-name", "re-frame-factory-name", -1205706462)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, f));
  };
  var factory_names_in = function re_frame$handlers$report_middleware_factories_$_factory_names_in(v__$1) {
    return cljs.core.remove.call(null, cljs.core.nil_QMARK_, cljs.core.map.call(null, name_of_factory, v__$1));
  };
  var seq__12473 = cljs.core.seq.call(null, factory_names_in.call(null, v));
  var chunk__12474 = null;
  var count__12475 = 0;
  var i__12476 = 0;
  while (true) {
    if (i__12476 < count__12475) {
      var name = cljs.core._nth.call(null, chunk__12474, i__12476);
      re_frame.utils.error.call(null, 're-frame: "', name, '" used incorrectly. Must be used like this "(', name, ' ...)", whereas you just used "', name, '".');
      var G__12477 = seq__12473;
      var G__12478 = chunk__12474;
      var G__12479 = count__12475;
      var G__12480 = i__12476 + 1;
      seq__12473 = G__12477;
      chunk__12474 = G__12478;
      count__12475 = G__12479;
      i__12476 = G__12480;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq.call(null, seq__12473);
      if (temp__4126__auto__) {
        var seq__12473__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__12473__$1)) {
          var c__5120__auto__ = cljs.core.chunk_first.call(null, seq__12473__$1);
          var G__12481 = cljs.core.chunk_rest.call(null, seq__12473__$1);
          var G__12482 = c__5120__auto__;
          var G__12483 = cljs.core.count.call(null, c__5120__auto__);
          var G__12484 = 0;
          seq__12473 = G__12481;
          chunk__12474 = G__12482;
          count__12475 = G__12483;
          i__12476 = G__12484;
          continue;
        } else {
          var name = cljs.core.first.call(null, seq__12473__$1);
          re_frame.utils.error.call(null, 're-frame: "', name, '" used incorrectly. Must be used like this "(', name, ' ...)", whereas you just used "', name, '".');
          var G__12485 = cljs.core.next.call(null, seq__12473__$1);
          var G__12486 = null;
          var G__12487 = 0;
          var G__12488 = 0;
          seq__12473 = G__12485;
          chunk__12474 = G__12486;
          count__12475 = G__12487;
          i__12476 = G__12488;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
re_frame.handlers.comp_middleware = function re_frame$handlers$comp_middleware(v) {
  if (cljs.core.fn_QMARK_.call(null, v)) {
    return v;
  } else {
    if (cljs.core.vector_QMARK_.call(null, v)) {
      var v__$1 = cljs.core.remove.call(null, cljs.core.nil_QMARK_, cljs.core.flatten.call(null, v));
      var _ = re_frame.handlers.report_middleware_factories.call(null, v__$1);
      if (cljs.core.empty_QMARK_.call(null, v__$1)) {
        return cljs.core.identity;
      } else {
        if (cljs.core._EQ_.call(null, 1, cljs.core.count.call(null, v__$1))) {
          return cljs.core.first.call(null, v__$1);
        } else {
          return cljs.core.apply.call(null, cljs.core.comp, v__$1);
        }
      }
    } else {
      return re_frame.utils.warn.call(null, "re-frame: comp-middleware expects a vector, got: ", v);
    }
  }
};
re_frame.handlers.id__GT_fn = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
re_frame.handlers.lookup_handler = function re_frame$handlers$lookup_handler(event_id) {
  return cljs.core.get.call(null, cljs.core.deref.call(null, re_frame.handlers.id__GT_fn), event_id);
};
re_frame.handlers.clear_handlers_BANG_ = function re_frame$handlers$clear_handlers_BANG_() {
  return cljs.core.reset_BANG_.call(null, re_frame.handlers.id__GT_fn, cljs.core.PersistentArrayMap.EMPTY);
};
re_frame.handlers.register_base = function re_frame$handlers$register_base() {
  var G__12490 = arguments.length;
  switch(G__12490) {
    case 2:
      return re_frame.handlers.register_base.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return re_frame.handlers.register_base.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
re_frame.handlers.register_base.cljs$core$IFn$_invoke$arity$2 = function(event_id, handler_fn) {
  if (cljs.core.contains_QMARK_.call(null, cljs.core.deref.call(null, re_frame.handlers.id__GT_fn), event_id)) {
    re_frame.utils.warn.call(null, "re-frame: overwriting an event-handler for: ", event_id);
  } else {
  }
  return cljs.core.swap_BANG_.call(null, re_frame.handlers.id__GT_fn, cljs.core.assoc, event_id, handler_fn);
};
re_frame.handlers.register_base.cljs$core$IFn$_invoke$arity$3 = function(event_id, middleware, handler_fn) {
  var mid_ware = re_frame.handlers.comp_middleware.call(null, middleware);
  var midware_PLUS_hfn = mid_ware.call(null, handler_fn);
  return re_frame.handlers.register_base.call(null, event_id, midware_PLUS_hfn);
};
re_frame.handlers.register_base.cljs$lang$maxFixedArity = 3;
re_frame.handlers._STAR_handling_STAR_ = null;
re_frame.handlers.handle = function re_frame$handlers$handle(event_v) {
  var event_id = re_frame.utils.first_in_vector.call(null, event_v);
  var handler_fn = re_frame.handlers.lookup_handler.call(null, event_id);
  if (handler_fn == null) {
    return re_frame.utils.error.call(null, 're-frame: no event handler registered for: "', event_id, '". Ignoring.');
  } else {
    if (cljs.core.truth_(re_frame.handlers._STAR_handling_STAR_)) {
      return re_frame.utils.error.call(null, 're-frame: while handling "', re_frame.handlers._STAR_handling_STAR_, '"  dispatch-sync was called for "', event_v, "\". You can't call dispatch-sync in an event handler.");
    } else {
      var _STAR_handling_STAR_12493 = re_frame.handlers._STAR_handling_STAR_;
      re_frame.handlers._STAR_handling_STAR_ = event_v;
      try {
        return handler_fn.call(null, re_frame.db.app_db, event_v);
      } finally {
        re_frame.handlers._STAR_handling_STAR_ = _STAR_handling_STAR_12493;
      }
    }
  }
};
goog.provide("re_frame.router");
goog.require("cljs.core");
goog.require("cljs.core.async");
goog.require("re_frame.utils");
goog.require("re_frame.handlers");
goog.require("reagent.core");
re_frame.router.event_chan = cljs.core.async.chan.call(null);
re_frame.router.purge_chan = function re_frame$router$purge_chan() {
  return null;
};
re_frame.router.router_loop = function re_frame$router$router_loop() {
  var c__7864__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__7864__auto__) {
    return function() {
      var f__7865__auto__ = function() {
        var switch__7802__auto__ = function(c__7864__auto__) {
          return function(state_12590) {
            var state_val_12591 = state_12590[1];
            if (state_val_12591 === 7) {
              var inst_12575 = state_12590[2];
              var state_12590__$1 = function() {
                var statearr_12592 = state_12590;
                statearr_12592[7] = inst_12575;
                return statearr_12592;
              }();
              var statearr_12593_12613 = state_12590__$1;
              statearr_12593_12613[2] = null;
              statearr_12593_12613[1] = 12;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_12591 === 1) {
                var state_12590__$1 = state_12590;
                var statearr_12594_12614 = state_12590__$1;
                statearr_12594_12614[2] = null;
                statearr_12594_12614[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_12591 === 4) {
                  var inst_12562 = state_12590[8];
                  var inst_12562__$1 = state_12590[2];
                  var inst_12563 = cljs.core.meta.call(null, inst_12562__$1);
                  var inst_12564 = (new cljs.core.Keyword(null, "flush-dom", "flush-dom", -933676816)).cljs$core$IFn$_invoke$arity$1(inst_12563);
                  var state_12590__$1 = function() {
                    var statearr_12595 = state_12590;
                    statearr_12595[8] = inst_12562__$1;
                    return statearr_12595;
                  }();
                  if (cljs.core.truth_(inst_12564)) {
                    var statearr_12596_12615 = state_12590__$1;
                    statearr_12596_12615[1] = 5;
                  } else {
                    var statearr_12597_12616 = state_12590__$1;
                    statearr_12597_12616[1] = 6;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_12591 === 6) {
                    var inst_12571 = cljs.core.async.timeout.call(null, 0);
                    var state_12590__$1 = state_12590;
                    return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_12590__$1, 9, inst_12571);
                  } else {
                    if (state_val_12591 === 3) {
                      var inst_12588 = state_12590[2];
                      var state_12590__$1 = state_12590;
                      return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_12590__$1, inst_12588);
                    } else {
                      if (state_val_12591 === 12) {
                        var inst_12562 = state_12590[8];
                        var _ = cljs.core.async.impl.ioc_helpers.add_exception_frame.call(null, state_12590, 11, Object, null, 10);
                        var inst_12583 = re_frame.handlers.handle.call(null, inst_12562);
                        var state_12590__$1 = state_12590;
                        var statearr_12598_12617 = state_12590__$1;
                        statearr_12598_12617[2] = inst_12583;
                        cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_12590__$1);
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_12591 === 2) {
                          var state_12590__$1 = state_12590;
                          return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_12590__$1, 4, re_frame.router.event_chan);
                        } else {
                          if (state_val_12591 === 11) {
                            var inst_12576 = state_12590[2];
                            var inst_12577 = re_frame.router.purge_chan.call(null);
                            var inst_12578 = re_frame$router$router_loop.call(null);
                            var inst_12579 = function() {
                              throw inst_12576;
                            }();
                            var state_12590__$1 = function() {
                              var statearr_12599 = state_12590;
                              statearr_12599[9] = inst_12578;
                              statearr_12599[10] = inst_12577;
                              return statearr_12599;
                            }();
                            var statearr_12600_12618 = state_12590__$1;
                            statearr_12600_12618[2] = inst_12579;
                            cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_12590__$1);
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_12591 === 9) {
                              var inst_12573 = state_12590[2];
                              var state_12590__$1 = state_12590;
                              var statearr_12601_12619 = state_12590__$1;
                              statearr_12601_12619[2] = inst_12573;
                              statearr_12601_12619[1] = 7;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_12591 === 5) {
                                var inst_12566 = reagent.core.flush.call(null);
                                var inst_12567 = cljs.core.async.timeout.call(null, 20);
                                var state_12590__$1 = function() {
                                  var statearr_12602 = state_12590;
                                  statearr_12602[11] = inst_12566;
                                  return statearr_12602;
                                }();
                                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_12590__$1, 8, inst_12567);
                              } else {
                                if (state_val_12591 === 10) {
                                  var inst_12585 = state_12590[2];
                                  var state_12590__$1 = function() {
                                    var statearr_12603 = state_12590;
                                    statearr_12603[12] = inst_12585;
                                    return statearr_12603;
                                  }();
                                  var statearr_12604_12620 = state_12590__$1;
                                  statearr_12604_12620[2] = null;
                                  statearr_12604_12620[1] = 2;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_12591 === 8) {
                                    var inst_12569 = state_12590[2];
                                    var state_12590__$1 = state_12590;
                                    var statearr_12605_12621 = state_12590__$1;
                                    statearr_12605_12621[2] = inst_12569;
                                    statearr_12605_12621[1] = 7;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    return null;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__7864__auto__);
        return function(switch__7802__auto__, c__7864__auto__) {
          return function() {
            var re_frame$router$router_loop_$_state_machine__7803__auto__ = null;
            var re_frame$router$router_loop_$_state_machine__7803__auto____0 = function() {
              var statearr_12609 = [null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_12609[0] = re_frame$router$router_loop_$_state_machine__7803__auto__;
              statearr_12609[1] = 1;
              return statearr_12609;
            };
            var re_frame$router$router_loop_$_state_machine__7803__auto____1 = function(state_12590) {
              while (true) {
                var ret_value__7804__auto__ = function() {
                  try {
                    while (true) {
                      var result__7805__auto__ = switch__7802__auto__.call(null, state_12590);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__7805__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__7805__auto__;
                      }
                      break;
                    }
                  } catch (e12610) {
                    if (e12610 instanceof Object) {
                      var ex__7806__auto__ = e12610;
                      var statearr_12611_12622 = state_12590;
                      statearr_12611_12622[5] = ex__7806__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_12590);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e12610;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__7804__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__12623 = state_12590;
                  state_12590 = G__12623;
                  continue;
                } else {
                  return ret_value__7804__auto__;
                }
                break;
              }
            };
            re_frame$router$router_loop_$_state_machine__7803__auto__ = function(state_12590) {
              switch(arguments.length) {
                case 0:
                  return re_frame$router$router_loop_$_state_machine__7803__auto____0.call(this);
                case 1:
                  return re_frame$router$router_loop_$_state_machine__7803__auto____1.call(this, state_12590);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            re_frame$router$router_loop_$_state_machine__7803__auto__.cljs$core$IFn$_invoke$arity$0 = re_frame$router$router_loop_$_state_machine__7803__auto____0;
            re_frame$router$router_loop_$_state_machine__7803__auto__.cljs$core$IFn$_invoke$arity$1 = re_frame$router$router_loop_$_state_machine__7803__auto____1;
            return re_frame$router$router_loop_$_state_machine__7803__auto__;
          }();
        }(switch__7802__auto__, c__7864__auto__);
      }();
      var state__7866__auto__ = function() {
        var statearr_12612 = f__7865__auto__.call(null);
        statearr_12612[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__7864__auto__;
        return statearr_12612;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__7866__auto__);
    };
  }(c__7864__auto__));
  return c__7864__auto__;
};
re_frame.router.router_loop.call(null);
re_frame.router.dispatch = function re_frame$router$dispatch(event_v) {
  if (event_v == null) {
    re_frame.utils.error.call(null, 're-frame: "dispatch" is ignoring a nil event.');
  } else {
    cljs.core.async.put_BANG_.call(null, re_frame.router.event_chan, event_v);
  }
  return null;
};
re_frame.router.dispatch_sync = function re_frame$router$dispatch_sync(event_v) {
  re_frame.handlers.handle.call(null, event_v);
  return null;
};
goog.provide("re_frame.subs");
goog.require("cljs.core");
goog.require("re_frame.utils");
goog.require("re_frame.db");
goog.require("reagent.ratom");
re_frame.subs.key__GT_fn = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
re_frame.subs.clear_handlers_BANG_ = function re_frame$subs$clear_handlers_BANG_() {
  return cljs.core.reset_BANG_.call(null, re_frame.subs.key__GT_fn, cljs.core.PersistentArrayMap.EMPTY);
};
re_frame.subs.register = function re_frame$subs$register(key_v, handler_fn) {
  if (cljs.core.contains_QMARK_.call(null, cljs.core.deref.call(null, re_frame.subs.key__GT_fn), key_v)) {
    re_frame.utils.warn.call(null, "re-frame: overwriting subscription-handler for: ", key_v);
  } else {
  }
  return cljs.core.swap_BANG_.call(null, re_frame.subs.key__GT_fn, cljs.core.assoc, key_v, handler_fn);
};
re_frame.subs.subscribe = function re_frame$subs$subscribe(v) {
  var key_v = re_frame.utils.first_in_vector.call(null, v);
  var handler_fn = cljs.core.get.call(null, cljs.core.deref.call(null, re_frame.subs.key__GT_fn), key_v);
  if (handler_fn == null) {
    return re_frame.utils.error.call(null, 're-frame: no subscription handler registered for: "', key_v, '".  Returning a nil subscription.');
  } else {
    return handler_fn.call(null, re_frame.db.app_db, v);
  }
};
goog.provide("re_frame.undo");
goog.require("cljs.core");
goog.require("re_frame.subs");
goog.require("re_frame.handlers");
goog.require("re_frame.db");
goog.require("re_frame.utils");
goog.require("reagent.core");
re_frame.undo.max_undos = cljs.core.atom.call(null, 50);
re_frame.undo.set_max_undos_BANG_ = function re_frame$undo$set_max_undos_BANG_(n) {
  return cljs.core.reset_BANG_.call(null, re_frame.undo.max_undos, n);
};
re_frame.undo.undo_list = reagent.core.atom.call(null, cljs.core.PersistentVector.EMPTY);
re_frame.undo.redo_list = reagent.core.atom.call(null, cljs.core.PersistentVector.EMPTY);
re_frame.undo.app_explain = reagent.core.atom.call(null, "");
re_frame.undo.undo_explain_list = reagent.core.atom.call(null, cljs.core.PersistentVector.EMPTY);
re_frame.undo.redo_explain_list = reagent.core.atom.call(null, cljs.core.PersistentVector.EMPTY);
re_frame.undo.clear_undos_BANG_ = function re_frame$undo$clear_undos_BANG_() {
  cljs.core.reset_BANG_.call(null, re_frame.undo.undo_list, cljs.core.PersistentVector.EMPTY);
  return cljs.core.reset_BANG_.call(null, re_frame.undo.undo_explain_list, cljs.core.PersistentVector.EMPTY);
};
re_frame.undo.clear_redos_BANG_ = function re_frame$undo$clear_redos_BANG_() {
  cljs.core.reset_BANG_.call(null, re_frame.undo.redo_list, cljs.core.PersistentVector.EMPTY);
  return cljs.core.reset_BANG_.call(null, re_frame.undo.redo_explain_list, cljs.core.PersistentVector.EMPTY);
};
re_frame.undo.clear_history_BANG_ = function re_frame$undo$clear_history_BANG_() {
  re_frame.undo.clear_undos_BANG_.call(null);
  re_frame.undo.clear_redos_BANG_.call(null);
  return cljs.core.reset_BANG_.call(null, re_frame.undo.app_explain, "");
};
re_frame.undo.store_now_BANG_ = function re_frame$undo$store_now_BANG_(explanation) {
  re_frame.undo.clear_redos_BANG_.call(null);
  cljs.core.reset_BANG_.call(null, re_frame.undo.undo_list, cljs.core.vec.call(null, cljs.core.take.call(null, cljs.core.deref.call(null, re_frame.undo.max_undos), cljs.core.conj.call(null, cljs.core.deref.call(null, re_frame.undo.undo_list), cljs.core.deref.call(null, re_frame.db.app_db)))));
  cljs.core.reset_BANG_.call(null, re_frame.undo.undo_explain_list, cljs.core.vec.call(null, cljs.core.take.call(null, cljs.core.deref.call(null, re_frame.undo.max_undos), cljs.core.conj.call(null, cljs.core.deref.call(null, re_frame.undo.undo_explain_list), cljs.core.deref.call(null, re_frame.undo.app_explain)))));
  return cljs.core.reset_BANG_.call(null, re_frame.undo.app_explain, explanation);
};
re_frame.undo.undos_QMARK_ = function re_frame$undo$undos_QMARK_() {
  return cljs.core.count.call(null, cljs.core.deref.call(null, re_frame.undo.undo_list)) > 0;
};
re_frame.undo.redos_QMARK_ = function re_frame$undo$redos_QMARK_() {
  return cljs.core.count.call(null, cljs.core.deref.call(null, re_frame.undo.redo_list)) > 0;
};
re_frame.undo.undo_explanations = function re_frame$undo$undo_explanations() {
  if (cljs.core.truth_(re_frame.undo.undos_QMARK_.call(null))) {
    return cljs.core.conj.call(null, cljs.core.deref.call(null, re_frame.undo.undo_explain_list), cljs.core.deref.call(null, re_frame.undo.app_explain));
  } else {
    return cljs.core.PersistentVector.EMPTY;
  }
};
re_frame.subs.register.call(null, new cljs.core.Keyword(null, "undos?", "undos?", -1094259081), function re_frame$undo$handler(_, ___$1) {
  return reagent.ratom.make_reaction.call(null, function() {
    return re_frame.undo.undos_QMARK_.call(null);
  });
});
re_frame.subs.register.call(null, new cljs.core.Keyword(null, "redos?", "redos?", 1340247550), function re_frame$undo$handler(_, ___$1) {
  return reagent.ratom.make_reaction.call(null, function() {
    return re_frame.undo.redos_QMARK_.call(null);
  });
});
re_frame.subs.register.call(null, new cljs.core.Keyword(null, "undo-explanations", "undo-explanations", 942251259), function re_frame$undo$handler(_, ___$1) {
  return reagent.ratom.make_reaction.call(null, function() {
    return re_frame.undo.undo_explanations.call(null);
  });
});
re_frame.subs.register.call(null, new cljs.core.Keyword(null, "redo-explanations", "redo-explanations", -1933832741), function re_frame$undo$handler(_, ___$1) {
  return reagent.ratom.make_reaction.call(null, function() {
    return cljs.core.deref.call(null, re_frame.undo.redo_explain_list);
  });
});
re_frame.undo.undo = function re_frame$undo$undo(undos, cur, redos) {
  var u = cljs.core.deref.call(null, undos);
  var r = cljs.core.cons.call(null, cljs.core.deref.call(null, cur), cljs.core.deref.call(null, redos));
  cljs.core.reset_BANG_.call(null, cur, cljs.core.last.call(null, u));
  cljs.core.reset_BANG_.call(null, redos, r);
  return cljs.core.reset_BANG_.call(null, undos, cljs.core.pop.call(null, u));
};
re_frame.undo.undo_n = function re_frame$undo$undo_n(n) {
  while (true) {
    if (cljs.core.truth_(function() {
      var and__4323__auto__ = n > 0;
      if (and__4323__auto__) {
        return re_frame.undo.undos_QMARK_.call(null);
      } else {
        return and__4323__auto__;
      }
    }())) {
      re_frame.undo.undo.call(null, re_frame.undo.undo_list, re_frame.db.app_db, re_frame.undo.redo_list);
      re_frame.undo.undo.call(null, re_frame.undo.undo_explain_list, re_frame.undo.app_explain, re_frame.undo.redo_explain_list);
      var G__12455 = n - 1;
      n = G__12455;
      continue;
    } else {
      return null;
    }
    break;
  }
};
re_frame.handlers.register_base.call(null, new cljs.core.Keyword(null, "undo", "undo", -1818036302), function re_frame$undo$handler(_, p__12456) {
  var vec__12458 = p__12456;
  var ___$1 = cljs.core.nth.call(null, vec__12458, 0, null);
  var n = cljs.core.nth.call(null, vec__12458, 1, null);
  if (cljs.core.not.call(null, re_frame.undo.undos_QMARK_.call(null))) {
    return re_frame.utils.warn.call(null, "re-frame: you did a (dispatch [:undo]), but there is nothing to undo.");
  } else {
    return re_frame.undo.undo_n.call(null, function() {
      var or__4335__auto__ = n;
      if (cljs.core.truth_(or__4335__auto__)) {
        return or__4335__auto__;
      } else {
        return 1;
      }
    }());
  }
});
re_frame.undo.redo = function re_frame$undo$redo(undos, cur, redos) {
  var u = cljs.core.conj.call(null, cljs.core.deref.call(null, undos), cljs.core.deref.call(null, cur));
  var r = cljs.core.deref.call(null, redos);
  cljs.core.reset_BANG_.call(null, cur, cljs.core.first.call(null, r));
  cljs.core.reset_BANG_.call(null, redos, cljs.core.rest.call(null, r));
  return cljs.core.reset_BANG_.call(null, undos, u);
};
re_frame.undo.redo_n = function re_frame$undo$redo_n(n) {
  while (true) {
    if (cljs.core.truth_(function() {
      var and__4323__auto__ = n > 0;
      if (and__4323__auto__) {
        return re_frame.undo.redos_QMARK_.call(null);
      } else {
        return and__4323__auto__;
      }
    }())) {
      re_frame.undo.redo.call(null, re_frame.undo.undo_list, re_frame.db.app_db, re_frame.undo.redo_list);
      re_frame.undo.redo.call(null, re_frame.undo.undo_explain_list, re_frame.undo.app_explain, re_frame.undo.redo_explain_list);
      var G__12459 = n - 1;
      n = G__12459;
      continue;
    } else {
      return null;
    }
    break;
  }
};
re_frame.handlers.register_base.call(null, new cljs.core.Keyword(null, "redo", "redo", 501190664), function re_frame$undo$handler(_, p__12460) {
  var vec__12462 = p__12460;
  var ___$1 = cljs.core.nth.call(null, vec__12462, 0, null);
  var n = cljs.core.nth.call(null, vec__12462, 1, null);
  if (cljs.core.not.call(null, re_frame.undo.redos_QMARK_.call(null))) {
    return re_frame.utils.warn.call(null, "re-frame: you did a (dispatch [:redo]), but there is nothing to redo.");
  } else {
    return re_frame.undo.redo_n.call(null, function() {
      var or__4335__auto__ = n;
      if (cljs.core.truth_(or__4335__auto__)) {
        return or__4335__auto__;
      } else {
        return 1;
      }
    }());
  }
});
re_frame.handlers.register_base.call(null, new cljs.core.Keyword(null, "purge-redos", "purge-redos", 1815721624), function re_frame$undo$handler(_, ___$1) {
  if (cljs.core.not.call(null, re_frame.undo.redos_QMARK_.call(null))) {
    return re_frame.utils.warn.call(null, "re-frame: you did a (dispatch [:purge-redos]), but there is nothing to redo.");
  } else {
    return re_frame.undo.clear_redos_BANG_.call(null);
  }
});
goog.provide("clojure.data");
goog.require("cljs.core");
goog.require("clojure.set");
clojure.data.atom_diff = function clojure$data$atom_diff(a, b) {
  if (cljs.core._EQ_.call(null, a, b)) {
    return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, null, a], null);
  } else {
    return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [a, b, null], null);
  }
};
clojure.data.vectorize = function clojure$data$vectorize(m) {
  if (cljs.core.seq.call(null, m)) {
    return cljs.core.reduce.call(null, function(result, p__12392) {
      var vec__12393 = p__12392;
      var k = cljs.core.nth.call(null, vec__12393, 0, null);
      var v = cljs.core.nth.call(null, vec__12393, 1, null);
      return cljs.core.assoc.call(null, result, k, v);
    }, cljs.core.vec.call(null, cljs.core.repeat.call(null, cljs.core.apply.call(null, cljs.core.max, cljs.core.keys.call(null, m)), null)), m);
  } else {
    return null;
  }
};
clojure.data.diff_associative_key = function clojure$data$diff_associative_key(a, b, k) {
  var va = cljs.core.get.call(null, a, k);
  var vb = cljs.core.get.call(null, b, k);
  var vec__12395 = clojure.data.diff.call(null, va, vb);
  var a_STAR_ = cljs.core.nth.call(null, vec__12395, 0, null);
  var b_STAR_ = cljs.core.nth.call(null, vec__12395, 1, null);
  var ab = cljs.core.nth.call(null, vec__12395, 2, null);
  var in_a = cljs.core.contains_QMARK_.call(null, a, k);
  var in_b = cljs.core.contains_QMARK_.call(null, b, k);
  var same = in_a && in_b && (!(ab == null) || va == null && vb == null);
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [in_a && (!(a_STAR_ == null) || !same) ? new cljs.core.PersistentArrayMap.fromArray([k, a_STAR_], true, false) : null, in_b && (!(b_STAR_ == null) || !same) ? new cljs.core.PersistentArrayMap.fromArray([k, b_STAR_], true, false) : null, same ? new cljs.core.PersistentArrayMap.fromArray([k, ab], true, false) : null], null);
};
clojure.data.diff_associative = function clojure$data$diff_associative() {
  var G__12397 = arguments.length;
  switch(G__12397) {
    case 2:
      return clojure.data.diff_associative.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return clojure.data.diff_associative.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
clojure.data.diff_associative.cljs$core$IFn$_invoke$arity$2 = function(a, b) {
  return clojure.data.diff_associative.call(null, a, b, clojure.set.union.call(null, cljs.core.keys.call(null, a), cljs.core.keys.call(null, b)));
};
clojure.data.diff_associative.cljs$core$IFn$_invoke$arity$3 = function(a, b, ks) {
  return cljs.core.reduce.call(null, function(diff1, diff2) {
    return cljs.core.doall.call(null, cljs.core.map.call(null, cljs.core.merge, diff1, diff2));
  }, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, null, null], null), cljs.core.map.call(null, cljs.core.partial.call(null, clojure.data.diff_associative_key, a, b), ks));
};
clojure.data.diff_associative.cljs$lang$maxFixedArity = 3;
clojure.data.diff_sequential = function clojure$data$diff_sequential(a, b) {
  return cljs.core.vec.call(null, cljs.core.map.call(null, clojure.data.vectorize, clojure.data.diff_associative.call(null, cljs.core.vector_QMARK_.call(null, a) ? a : cljs.core.vec.call(null, a), cljs.core.vector_QMARK_.call(null, b) ? b : cljs.core.vec.call(null, b), cljs.core.range.call(null, function() {
    var x__4647__auto__ = cljs.core.count.call(null, a);
    var y__4648__auto__ = cljs.core.count.call(null, b);
    return x__4647__auto__ > y__4648__auto__ ? x__4647__auto__ : y__4648__auto__;
  }()))));
};
clojure.data.diff_set = function clojure$data$diff_set(a, b) {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.not_empty.call(null, clojure.set.difference.call(null, a, b)), cljs.core.not_empty.call(null, clojure.set.difference.call(null, b, a)), cljs.core.not_empty.call(null, clojure.set.intersection.call(null, a, b))], null);
};
clojure.data.EqualityPartition = function() {
  var obj12400 = {};
  return obj12400;
}();
clojure.data.equality_partition = function clojure$data$equality_partition(x) {
  if (function() {
    var and__4323__auto__ = x;
    if (and__4323__auto__) {
      return x.clojure$data$EqualityPartition$equality_partition$arity$1;
    } else {
      return and__4323__auto__;
    }
  }()) {
    return x.clojure$data$EqualityPartition$equality_partition$arity$1(x);
  } else {
    var x__4971__auto__ = x == null ? null : x;
    return function() {
      var or__4335__auto__ = clojure.data.equality_partition[goog.typeOf(x__4971__auto__)];
      if (or__4335__auto__) {
        return or__4335__auto__;
      } else {
        var or__4335__auto____$1 = clojure.data.equality_partition["_"];
        if (or__4335__auto____$1) {
          return or__4335__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "EqualityPartition.equality-partition", x);
        }
      }
    }().call(null, x);
  }
};
clojure.data.Diff = function() {
  var obj12402 = {};
  return obj12402;
}();
clojure.data.diff_similar = function clojure$data$diff_similar(a, b) {
  if (function() {
    var and__4323__auto__ = a;
    if (and__4323__auto__) {
      return a.clojure$data$Diff$diff_similar$arity$2;
    } else {
      return and__4323__auto__;
    }
  }()) {
    return a.clojure$data$Diff$diff_similar$arity$2(a, b);
  } else {
    var x__4971__auto__ = a == null ? null : a;
    return function() {
      var or__4335__auto__ = clojure.data.diff_similar[goog.typeOf(x__4971__auto__)];
      if (or__4335__auto__) {
        return or__4335__auto__;
      } else {
        var or__4335__auto____$1 = clojure.data.diff_similar["_"];
        if (or__4335__auto____$1) {
          return or__4335__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Diff.diff-similar", a);
        }
      }
    }().call(null, a, b);
  }
};
clojure.data.EqualityPartition["_"] = true;
clojure.data.equality_partition["_"] = function(x) {
  if (function() {
    var G__12403 = x;
    if (G__12403) {
      var bit__5009__auto__ = G__12403.cljs$lang$protocol_mask$partition0$ & 1024;
      if (bit__5009__auto__ || G__12403.cljs$core$IMap$) {
        return true;
      } else {
        if (!G__12403.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMap, G__12403);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMap, G__12403);
    }
  }()) {
    return new cljs.core.Keyword(null, "map", "map", 1371690461);
  } else {
    if (function() {
      var G__12404 = x;
      if (G__12404) {
        var bit__5009__auto__ = G__12404.cljs$lang$protocol_mask$partition0$ & 4096;
        if (bit__5009__auto__ || G__12404.cljs$core$ISet$) {
          return true;
        } else {
          if (!G__12404.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISet, G__12404);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISet, G__12404);
      }
    }()) {
      return new cljs.core.Keyword(null, "set", "set", 304602554);
    } else {
      if (function() {
        var G__12405 = x;
        if (G__12405) {
          var bit__5009__auto__ = G__12405.cljs$lang$protocol_mask$partition0$ & 16777216;
          if (bit__5009__auto__ || G__12405.cljs$core$ISequential$) {
            return true;
          } else {
            if (!G__12405.cljs$lang$protocol_mask$partition0$) {
              return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISequential, G__12405);
            } else {
              return false;
            }
          }
        } else {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISequential, G__12405);
        }
      }()) {
        return new cljs.core.Keyword(null, "sequential", "sequential", -1082983960);
      } else {
        return new cljs.core.Keyword(null, "atom", "atom", -397043653);
      }
    }
  }
};
clojure.data.EqualityPartition["boolean"] = true;
clojure.data.equality_partition["boolean"] = function(x) {
  return new cljs.core.Keyword(null, "atom", "atom", -397043653);
};
clojure.data.EqualityPartition["function"] = true;
clojure.data.equality_partition["function"] = function(x) {
  return new cljs.core.Keyword(null, "atom", "atom", -397043653);
};
clojure.data.EqualityPartition["array"] = true;
clojure.data.equality_partition["array"] = function(x) {
  return new cljs.core.Keyword(null, "sequential", "sequential", -1082983960);
};
clojure.data.EqualityPartition["number"] = true;
clojure.data.equality_partition["number"] = function(x) {
  return new cljs.core.Keyword(null, "atom", "atom", -397043653);
};
clojure.data.EqualityPartition["string"] = true;
clojure.data.equality_partition["string"] = function(x) {
  return new cljs.core.Keyword(null, "atom", "atom", -397043653);
};
clojure.data.EqualityPartition["null"] = true;
clojure.data.equality_partition["null"] = function(x) {
  return new cljs.core.Keyword(null, "atom", "atom", -397043653);
};
clojure.data.Diff["_"] = true;
clojure.data.diff_similar["_"] = function(a, b) {
  return function() {
    var G__12406 = clojure.data.equality_partition.call(null, a) instanceof cljs.core.Keyword ? clojure.data.equality_partition.call(null, a).fqn : null;
    switch(G__12406) {
      case "map":
        return clojure.data.diff_associative;
        break;
      case "sequential":
        return clojure.data.diff_sequential;
        break;
      case "set":
        return clojure.data.diff_set;
        break;
      case "atom":
        return clojure.data.atom_diff;
        break;
      default:
        throw new Error([cljs.core.str("No matching clause: "), cljs.core.str(clojure.data.equality_partition.call(null, a))].join(""));;
    }
  }().call(null, a, b);
};
clojure.data.Diff["boolean"] = true;
clojure.data.diff_similar["boolean"] = function(a, b) {
  return clojure.data.atom_diff.call(null, a, b);
};
clojure.data.Diff["function"] = true;
clojure.data.diff_similar["function"] = function(a, b) {
  return clojure.data.atom_diff.call(null, a, b);
};
clojure.data.Diff["array"] = true;
clojure.data.diff_similar["array"] = function(a, b) {
  return clojure.data.diff_sequential.call(null, a, b);
};
clojure.data.Diff["number"] = true;
clojure.data.diff_similar["number"] = function(a, b) {
  return clojure.data.atom_diff.call(null, a, b);
};
clojure.data.Diff["string"] = true;
clojure.data.diff_similar["string"] = function(a, b) {
  return clojure.data.atom_diff.call(null, a, b);
};
clojure.data.Diff["null"] = true;
clojure.data.diff_similar["null"] = function(a, b) {
  return clojure.data.atom_diff.call(null, a, b);
};
clojure.data.diff = function clojure$data$diff(a, b) {
  if (cljs.core._EQ_.call(null, a, b)) {
    return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, null, a], null);
  } else {
    if (cljs.core._EQ_.call(null, clojure.data.equality_partition.call(null, a), clojure.data.equality_partition.call(null, b))) {
      return clojure.data.diff_similar.call(null, a, b);
    } else {
      return clojure.data.atom_diff.call(null, a, b);
    }
  }
};
goog.provide("re_frame.middleware");
goog.require("cljs.core");
goog.require("clojure.data");
goog.require("re_frame.utils");
goog.require("re_frame.undo");
goog.require("reagent.ratom");
re_frame.middleware.pure = function re_frame$middleware$pure(handler) {
  return function re_frame$middleware$pure_$_pure_handler(app_db, event_vec) {
    if (!function() {
      var G__12377 = app_db;
      if (G__12377) {
        var bit__5009__auto__ = null;
        if (cljs.core.truth_(function() {
          var or__4335__auto__ = bit__5009__auto__;
          if (cljs.core.truth_(or__4335__auto__)) {
            return or__4335__auto__;
          } else {
            return G__12377.reagent$ratom$IReactiveAtom$;
          }
        }())) {
          return true;
        } else {
          if (!G__12377.cljs$lang$protocol_mask$partition$) {
            return cljs.core.native_satisfies_QMARK_.call(null, reagent.ratom.IReactiveAtom, G__12377);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, reagent.ratom.IReactiveAtom, G__12377);
      }
    }()) {
      if (cljs.core.map_QMARK_.call(null, app_db)) {
        re_frame.utils.warn.call(null, 're-frame: Looks like "pure" is in the middleware pipeline twice. Ignoring.');
      } else {
        re_frame.utils.warn.call(null, 're-frame: "pure" middleware not given a Ratom.  Got: ', app_db);
      }
      return handler;
    } else {
      var db = cljs.core.deref.call(null, app_db);
      var new_db = handler.call(null, db, event_vec);
      if (new_db == null) {
        return re_frame.utils.error.call(null, "re-frame: your pure handler returned nil. It should return the new db state.");
      } else {
        if (!(db === new_db)) {
          return cljs.core.reset_BANG_.call(null, app_db, new_db);
        } else {
          return null;
        }
      }
    }
  };
};
re_frame.middleware.log_ex = function re_frame$middleware$log_ex(handler) {
  return function re_frame$middleware$log_ex_$_log_ex_handler(db, v) {
    re_frame.utils.warn.call(null, 're-frame: use of "log-ex" is deprecated. You don\'t need it any more IF YOU ARE USING CHROME 44. Chrome now seems to now produce good stack traces.');
    try {
      return handler.call(null, db, v);
    } catch (e12381) {
      var e = e12381;
      console.error(e.stack);
      throw e;
    }
  };
};
re_frame.middleware.debug = function re_frame$middleware$debug(handler) {
  return function re_frame$middleware$debug_$_debug_handler(db, v) {
    re_frame.utils.log.call(null, "-- New Event ----------------------------------------------------");
    re_frame.utils.group.call(null, "re-frame event: ", v);
    var new_db = handler.call(null, db, v);
    var diff = clojure.data.diff.call(null, db, new_db);
    re_frame.utils.log.call(null, "only before: ", cljs.core.first.call(null, diff));
    re_frame.utils.log.call(null, "only after : ", cljs.core.second.call(null, diff));
    re_frame.utils.groupEnd.call(null);
    return new_db;
  };
};
re_frame.middleware.trim_v = function re_frame$middleware$trim_v(handler) {
  return function re_frame$middleware$trim_v_$_trim_v_handler(db, v) {
    return handler.call(null, db, cljs.core.vec.call(null, cljs.core.rest.call(null, v)));
  };
};
re_frame.middleware.path = cljs.core.with_meta(function() {
  var re_frame$middleware$path__delegate = function(args) {
    var path__$1 = cljs.core.flatten.call(null, args);
    var _ = cljs.core.empty_QMARK_.call(null, path__$1) ? re_frame.utils.error.call(null, 're-frame: "path" middleware given no params.') : null;
    return function(path__$1, _) {
      return function re_frame$middleware$path_$_path_middleware(handler) {
        return function(path__$1, _) {
          return function re_frame$middleware$path_$_path_middleware_$_path_handler(db, v) {
            return cljs.core.assoc_in.call(null, db, path__$1, handler.call(null, cljs.core.get_in.call(null, db, path__$1), v));
          };
        }(path__$1, _);
      };
    }(path__$1, _);
  };
  var re_frame$middleware$path = function(var_args) {
    var args = null;
    if (arguments.length > 0) {
      var G__12382__i = 0, G__12382__a = new Array(arguments.length - 0);
      while (G__12382__i < G__12382__a.length) {
        G__12382__a[G__12382__i] = arguments[G__12382__i + 0];
        ++G__12382__i;
      }
      args = new cljs.core.IndexedSeq(G__12382__a, 0);
    }
    return re_frame$middleware$path__delegate.call(this, args);
  };
  re_frame$middleware$path.cljs$lang$maxFixedArity = 0;
  re_frame$middleware$path.cljs$lang$applyTo = function(arglist__12383) {
    var args = cljs.core.seq(arglist__12383);
    return re_frame$middleware$path__delegate(args);
  };
  re_frame$middleware$path.cljs$core$IFn$_invoke$arity$variadic = re_frame$middleware$path__delegate;
  return re_frame$middleware$path;
}(), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "re-frame-factory-name", "re-frame-factory-name", -1205706462), "path"], null));
re_frame.middleware.undoable = cljs.core.with_meta(function re_frame$middleware$undoable(explanation) {
  return function re_frame$middleware$undoable_$_undoable_middleware(handler) {
    return function re_frame$middleware$undoable_$_undoable_middleware_$_undoable_handler(db, event_vec) {
      var explanation__$1 = cljs.core.fn_QMARK_.call(null, explanation) ? explanation.call(null, db, event_vec) : typeof explanation === "string" ? explanation : explanation == null ? "" : re_frame.utils.error.call(null, 're-frame: "undoable" middleware given a bad parameter. Got: ', explanation);
      re_frame.undo.store_now_BANG_.call(null, explanation__$1);
      return handler.call(null, db, event_vec);
    };
  };
}, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "re-frame-factory-name", "re-frame-factory-name", -1205706462), "undoable"], null));
re_frame.middleware.enrich = cljs.core.with_meta(function re_frame$middleware$enrich(f) {
  return function re_frame$middleware$enrich_$_enrich_middleware(handler) {
    return function re_frame$middleware$enrich_$_enrich_middleware_$_enrich_handler(db, v) {
      return f.call(null, handler.call(null, db, v), v);
    };
  };
}, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "re-frame-factory-name", "re-frame-factory-name", -1205706462), "enrich"], null));
re_frame.middleware.after = cljs.core.with_meta(function re_frame$middleware$after(f) {
  return function re_frame$middleware$after_$_after_middleware(handler) {
    return function re_frame$middleware$after_$_after_middleware_$_after_handler(db, v) {
      var new_db = handler.call(null, db, v);
      f.call(null, new_db, v);
      return new_db;
    };
  };
}, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "re-frame-factory-name", "re-frame-factory-name", -1205706462), "after"], null));
re_frame.middleware.on_changes = cljs.core.with_meta(function() {
  var re_frame$middleware$on_changes__delegate = function(f, out_path, in_paths) {
    return function re_frame$middleware$on_changes_$_on_changed_middleware(handler) {
      return function re_frame$middleware$on_changes_$_on_changed_middleware_$_on_changed_handler(db, v) {
        var new_db = handler.call(null, db, v);
        var new_ins = cljs.core.map.call(null, function(new_db) {
          return function(p1__12384_SHARP_) {
            return cljs.core.get_in.call(null, new_db, p1__12384_SHARP_);
          };
        }(new_db), in_paths);
        var old_ins = cljs.core.map.call(null, function(new_db, new_ins) {
          return function(p1__12385_SHARP_) {
            return cljs.core.get_in.call(null, db, p1__12385_SHARP_);
          };
        }(new_db, new_ins), in_paths);
        var changed_ins_QMARK_ = cljs.core.some.call(null, cljs.core.false_QMARK_, cljs.core.map.call(null, cljs.core.identical_QMARK_, new_ins, old_ins));
        if (cljs.core.truth_(changed_ins_QMARK_)) {
          return cljs.core.assoc_in.call(null, new_db, out_path, cljs.core.apply.call(null, f, new_ins));
        } else {
          return new_db;
        }
      };
    };
  };
  var re_frame$middleware$on_changes = function(f, out_path, var_args) {
    var in_paths = null;
    if (arguments.length > 2) {
      var G__12386__i = 0, G__12386__a = new Array(arguments.length - 2);
      while (G__12386__i < G__12386__a.length) {
        G__12386__a[G__12386__i] = arguments[G__12386__i + 2];
        ++G__12386__i;
      }
      in_paths = new cljs.core.IndexedSeq(G__12386__a, 0);
    }
    return re_frame$middleware$on_changes__delegate.call(this, f, out_path, in_paths);
  };
  re_frame$middleware$on_changes.cljs$lang$maxFixedArity = 2;
  re_frame$middleware$on_changes.cljs$lang$applyTo = function(arglist__12387) {
    var f = cljs.core.first(arglist__12387);
    arglist__12387 = cljs.core.next(arglist__12387);
    var out_path = cljs.core.first(arglist__12387);
    var in_paths = cljs.core.rest(arglist__12387);
    return re_frame$middleware$on_changes__delegate(f, out_path, in_paths);
  };
  re_frame$middleware$on_changes.cljs$core$IFn$_invoke$arity$variadic = re_frame$middleware$on_changes__delegate;
  return re_frame$middleware$on_changes;
}(), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "re-frame-factory-name", "re-frame-factory-name", -1205706462), "on-changes"], null));
goog.provide("re_frame.core");
goog.require("cljs.core");
goog.require("re_frame.subs");
goog.require("re_frame.router");
goog.require("re_frame.utils");
goog.require("re_frame.handlers");
goog.require("re_frame.middleware");
re_frame.core.dispatch = re_frame.router.dispatch;
re_frame.core.dispatch_sync = re_frame.router.dispatch_sync;
re_frame.core.register_sub = re_frame.subs.register;
re_frame.core.clear_sub_handlers_BANG_ = re_frame.subs.clear_handlers_BANG_;
re_frame.core.subscribe = re_frame.subs.subscribe;
re_frame.core.clear_event_handlers_BANG_ = re_frame.handlers.clear_handlers_BANG_;
re_frame.core.pure = re_frame.middleware.pure;
re_frame.core.debug = re_frame.middleware.debug;
re_frame.core.undoable = re_frame.middleware.undoable;
re_frame.core.path = re_frame.middleware.path;
re_frame.core.enrich = re_frame.middleware.enrich;
re_frame.core.trim_v = re_frame.middleware.trim_v;
re_frame.core.after = re_frame.middleware.after;
re_frame.core.log_ex = re_frame.middleware.log_ex;
re_frame.core.on_changes = re_frame.middleware.on_changes;
re_frame.core.set_loggers_BANG_ = re_frame.utils.set_loggers_BANG_;
re_frame.core.register_handler = function re_frame$core$register_handler() {
  var G__12370 = arguments.length;
  switch(G__12370) {
    case 2:
      return re_frame.core.register_handler.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return re_frame.core.register_handler.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
re_frame.core.register_handler.cljs$core$IFn$_invoke$arity$2 = function(id, handler) {
  return re_frame.handlers.register_base.call(null, id, re_frame.core.pure, handler);
};
re_frame.core.register_handler.cljs$core$IFn$_invoke$arity$3 = function(id, middleware, handler) {
  return re_frame.handlers.register_base.call(null, id, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [re_frame.core.pure, middleware], null), handler);
};
re_frame.core.register_handler.cljs$lang$maxFixedArity = 3;
goog.provide("mind.routes");
goog.require("cljs.core");
goog.require("re_frame.core");
goog.require("goog.history.EventType");
goog.require("goog.events");
goog.require("secretary.core");
goog.require("goog.History");
mind.routes.hook_browser_navigation_BANG_ = function mind$routes$hook_browser_navigation_BANG_() {
  var G__10336 = new goog.History;
  goog.events.listen(G__10336, goog.history.EventType.NAVIGATE, function(G__10336) {
    return function(event) {
      return secretary.core.dispatch_BANG_.call(null, event.token);
    };
  }(G__10336));
  G__10336.setEnabled(true);
  return G__10336;
};
mind.routes.app_routes = function mind$routes$app_routes() {
  secretary.core.set_config_BANG_.call(null, new cljs.core.Keyword(null, "prefix", "prefix", -265908465), "#");
  var action__10245__auto___10349 = function(params__10246__auto__) {
    if (cljs.core.map_QMARK_.call(null, params__10246__auto__)) {
      var map__10343 = params__10246__auto__;
      var map__10343__$1 = cljs.core.seq_QMARK_.call(null, map__10343) ? cljs.core.apply.call(null, cljs.core.hash_map, map__10343) : map__10343;
      return re_frame.core.dispatch.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "set-active-panel", "set-active-panel", -965871124), new cljs.core.Keyword(null, "home-panel", "home-panel", 1226198754)], null));
    } else {
      if (cljs.core.vector_QMARK_.call(null, params__10246__auto__)) {
        var vec__10344 = params__10246__auto__;
        return re_frame.core.dispatch.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "set-active-panel", "set-active-panel", -965871124), new cljs.core.Keyword(null, "home-panel", "home-panel", 1226198754)], null));
      } else {
        return null;
      }
    }
  };
  secretary.core.add_route_BANG_.call(null, "/", action__10245__auto___10349);
  var action__10245__auto___10350 = function(params__10246__auto__) {
    if (cljs.core.map_QMARK_.call(null, params__10246__auto__)) {
      var map__10345 = params__10246__auto__;
      var map__10345__$1 = cljs.core.seq_QMARK_.call(null, map__10345) ? cljs.core.apply.call(null, cljs.core.hash_map, map__10345) : map__10345;
      return re_frame.core.dispatch.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "set-active-panel", "set-active-panel", -965871124), new cljs.core.Keyword(null, "about-panel", "about-panel", 334628515)], null));
    } else {
      if (cljs.core.vector_QMARK_.call(null, params__10246__auto__)) {
        var vec__10346 = params__10246__auto__;
        return re_frame.core.dispatch.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "set-active-panel", "set-active-panel", -965871124), new cljs.core.Keyword(null, "about-panel", "about-panel", 334628515)], null));
      } else {
        return null;
      }
    }
  };
  secretary.core.add_route_BANG_.call(null, "/about", action__10245__auto___10350);
  var action__10245__auto___10351 = function(params__10246__auto__) {
    if (cljs.core.map_QMARK_.call(null, params__10246__auto__)) {
      var map__10347 = params__10246__auto__;
      var map__10347__$1 = cljs.core.seq_QMARK_.call(null, map__10347) ? cljs.core.apply.call(null, cljs.core.hash_map, map__10347) : map__10347;
      return re_frame.core.dispatch.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "set-active-panel", "set-active-panel", -965871124), new cljs.core.Keyword(null, "timer-panel", "timer-panel", -1352071629)], null));
    } else {
      if (cljs.core.vector_QMARK_.call(null, params__10246__auto__)) {
        var vec__10348 = params__10246__auto__;
        return re_frame.core.dispatch.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "set-active-panel", "set-active-panel", -965871124), new cljs.core.Keyword(null, "timer-panel", "timer-panel", -1352071629)], null));
      } else {
        return null;
      }
    }
  };
  secretary.core.add_route_BANG_.call(null, "/timer", action__10245__auto___10351);
  return mind.routes.hook_browser_navigation_BANG_.call(null);
};
goog.provide("cljs.test");
goog.require("cljs.core");
goog.require("clojure.string");
cljs.test.empty_env = function cljs$test$empty_env() {
  var G__11900 = arguments.length;
  switch(G__11900) {
    case 0:
      return cljs.test.empty_env.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.test.empty_env.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.test.empty_env.cljs$core$IFn$_invoke$arity$0 = function() {
  return cljs.test.empty_env.call(null, new cljs.core.Keyword("cljs.test", "default", "cljs.test/default", -1581405322));
};
cljs.test.empty_env.cljs$core$IFn$_invoke$arity$1 = function(reporter) {
  return new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "report-counters", "report-counters", -1702609242), new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "test", "test", 577538877), 0, new cljs.core.Keyword(null, "pass", "pass", 1574159993), 0, new cljs.core.Keyword(null, "fail", "fail", 1706214930), 0, new cljs.core.Keyword(null, "error", "error", -978969032), 0], null), new cljs.core.Keyword(null, "testing-vars", "testing-vars", -2114769150), cljs.core.List.EMPTY, 
  new cljs.core.Keyword(null, "testing-contexts", "testing-contexts", -1485646523), cljs.core.List.EMPTY, new cljs.core.Keyword(null, "reporter", "reporter", -805360621), reporter], null);
};
cljs.test.empty_env.cljs$lang$maxFixedArity = 1;
cljs.test._STAR_current_env_STAR_ = null;
cljs.test.get_current_env = function cljs$test$get_current_env() {
  var or__4335__auto__ = cljs.test._STAR_current_env_STAR_;
  if (cljs.core.truth_(or__4335__auto__)) {
    return or__4335__auto__;
  } else {
    return cljs.test.empty_env.call(null);
  }
};
cljs.test.update_current_env_BANG_ = function cljs$test$update_current_env_BANG_() {
  var argseq__5375__auto__ = 2 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0) : null;
  return cljs.test.update_current_env_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5375__auto__);
};
cljs.test.update_current_env_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(ks, f, args) {
  return cljs.test._STAR_current_env_STAR_ = cljs.core.apply.call(null, cljs.core.update_in, cljs.test.get_current_env.call(null), ks, f, args);
};
cljs.test.update_current_env_BANG_.cljs$lang$maxFixedArity = 2;
cljs.test.update_current_env_BANG_.cljs$lang$applyTo = function(seq11902) {
  var G__11903 = cljs.core.first.call(null, seq11902);
  var seq11902__$1 = cljs.core.next.call(null, seq11902);
  var G__11904 = cljs.core.first.call(null, seq11902__$1);
  var seq11902__$2 = cljs.core.next.call(null, seq11902__$1);
  return cljs.test.update_current_env_BANG_.cljs$core$IFn$_invoke$arity$variadic(G__11903, G__11904, seq11902__$2);
};
cljs.test.set_env_BANG_ = function cljs$test$set_env_BANG_(new_env) {
  return cljs.test._STAR_current_env_STAR_ = new_env;
};
cljs.test.clear_env_BANG_ = function cljs$test$clear_env_BANG_() {
  return cljs.test._STAR_current_env_STAR_ = null;
};
cljs.test.get_and_clear_env_BANG_ = function cljs$test$get_and_clear_env_BANG_() {
  var env = cljs.test.get_current_env.call(null);
  cljs.test.clear_env_BANG_.call(null);
  return env;
};
cljs.test.testing_vars_str = function cljs$test$testing_vars_str(m) {
  var map__11907 = m;
  var map__11907__$1 = cljs.core.seq_QMARK_.call(null, map__11907) ? cljs.core.apply.call(null, cljs.core.hash_map, map__11907) : map__11907;
  var column = cljs.core.get.call(null, map__11907__$1, new cljs.core.Keyword(null, "column", "column", 2078222095));
  var line = cljs.core.get.call(null, map__11907__$1, new cljs.core.Keyword(null, "line", "line", 212345235));
  var file = cljs.core.get.call(null, map__11907__$1, new cljs.core.Keyword(null, "file", "file", -1269645878));
  return[cljs.core.str(cljs.core.reverse.call(null, cljs.core.map.call(null, function(map__11907, map__11907__$1, column, line, file) {
    return function(p1__11905_SHARP_) {
      return(new cljs.core.Keyword(null, "name", "name", 1843675177)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, p1__11905_SHARP_));
    };
  }(map__11907, map__11907__$1, column, line, file), (new cljs.core.Keyword(null, "testing-vars", "testing-vars", -2114769150)).cljs$core$IFn$_invoke$arity$1(cljs.test.get_current_env.call(null))))), cljs.core.str(" ("), cljs.core.str(file), cljs.core.str(":"), cljs.core.str(line), cljs.core.str(cljs.core.truth_(column) ? [cljs.core.str(":"), cljs.core.str(column)].join("") : null), cljs.core.str(")")].join("");
};
cljs.test.testing_contexts_str = function cljs$test$testing_contexts_str() {
  return cljs.core.apply.call(null, cljs.core.str, cljs.core.interpose.call(null, " ", cljs.core.reverse.call(null, (new cljs.core.Keyword(null, "testing-contexts", "testing-contexts", -1485646523)).cljs$core$IFn$_invoke$arity$1(cljs.test.get_current_env.call(null)))));
};
cljs.test.inc_report_counter_BANG_ = function cljs$test$inc_report_counter_BANG_(name) {
  if (cljs.core.truth_((new cljs.core.Keyword(null, "report-counters", "report-counters", -1702609242)).cljs$core$IFn$_invoke$arity$1(cljs.test.get_current_env.call(null)))) {
    return cljs.test.update_current_env_BANG_.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "report-counters", "report-counters", -1702609242), name], null), cljs.core.fnil.call(null, cljs.core.inc, 0));
  } else {
    return null;
  }
};
if (typeof cljs.test.report !== "undefined") {
} else {
  cljs.test.report = function() {
    var method_table__5230__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var prefer_table__5231__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var method_cache__5232__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var cached_hierarchy__5233__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var hierarchy__5234__auto__ = cljs.core.get.call(null, cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "hierarchy", "hierarchy", -1053470341), cljs.core.get_global_hierarchy.call(null));
    return new cljs.core.MultiFn(cljs.core.symbol.call(null, "cljs.test", "report"), function(method_table__5230__auto__, prefer_table__5231__auto__, method_cache__5232__auto__, cached_hierarchy__5233__auto__, hierarchy__5234__auto__) {
      return function(m) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(new cljs.core.Keyword(null, "reporter", "reporter", -805360621)).cljs$core$IFn$_invoke$arity$1(cljs.test.get_current_env.call(null)), (new cljs.core.Keyword(null, "type", "type", 1174270348)).cljs$core$IFn$_invoke$arity$1(m)], null);
      };
    }(method_table__5230__auto__, prefer_table__5231__auto__, method_cache__5232__auto__, cached_hierarchy__5233__auto__, hierarchy__5234__auto__), new cljs.core.Keyword(null, "default", "default", -1987822328), hierarchy__5234__auto__, method_table__5230__auto__, prefer_table__5231__auto__, method_cache__5232__auto__, cached_hierarchy__5233__auto__);
  }();
}
cljs.core._add_method.call(null, cljs.test.report, new cljs.core.Keyword(null, "default", "default", -1987822328), function(m) {
  return null;
});
cljs.core._add_method.call(null, cljs.test.report, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("cljs.test", "default", "cljs.test/default", -1581405322), new cljs.core.Keyword(null, "pass", "pass", 1574159993)], null), function(m) {
  return cljs.test.inc_report_counter_BANG_.call(null, new cljs.core.Keyword(null, "pass", "pass", 1574159993));
});
cljs.core._add_method.call(null, cljs.test.report, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("cljs.test", "default", "cljs.test/default", -1581405322), new cljs.core.Keyword(null, "fail", "fail", 1706214930)], null), function(m) {
  cljs.test.inc_report_counter_BANG_.call(null, new cljs.core.Keyword(null, "fail", "fail", 1706214930));
  cljs.core.println.call(null, "\nFAIL in", cljs.test.testing_vars_str.call(null, m));
  if (cljs.core.seq.call(null, (new cljs.core.Keyword(null, "testing-contexts", "testing-contexts", -1485646523)).cljs$core$IFn$_invoke$arity$1(cljs.test.get_current_env.call(null)))) {
    cljs.core.println.call(null, cljs.test.testing_contexts_str.call(null));
  } else {
  }
  var temp__4126__auto___11908 = (new cljs.core.Keyword(null, "message", "message", -406056002)).cljs$core$IFn$_invoke$arity$1(m);
  if (cljs.core.truth_(temp__4126__auto___11908)) {
    var message_11909 = temp__4126__auto___11908;
    cljs.core.println.call(null, message_11909);
  } else {
  }
  cljs.core.println.call(null, "expected:", cljs.core.pr_str.call(null, (new cljs.core.Keyword(null, "expected", "expected", 1583670997)).cljs$core$IFn$_invoke$arity$1(m)));
  return cljs.core.println.call(null, "  actual:", cljs.core.pr_str.call(null, (new cljs.core.Keyword(null, "actual", "actual", 107306363)).cljs$core$IFn$_invoke$arity$1(m)));
});
cljs.core._add_method.call(null, cljs.test.report, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("cljs.test", "default", "cljs.test/default", -1581405322), new cljs.core.Keyword(null, "error", "error", -978969032)], null), function(m) {
  cljs.test.inc_report_counter_BANG_.call(null, new cljs.core.Keyword(null, "error", "error", -978969032));
  cljs.core.println.call(null, "\nERROR in", cljs.test.testing_vars_str.call(null, m));
  if (cljs.core.seq.call(null, (new cljs.core.Keyword(null, "testing-contexts", "testing-contexts", -1485646523)).cljs$core$IFn$_invoke$arity$1(cljs.test.get_current_env.call(null)))) {
    cljs.core.println.call(null, cljs.test.testing_contexts_str.call(null));
  } else {
  }
  var temp__4126__auto___11910 = (new cljs.core.Keyword(null, "message", "message", -406056002)).cljs$core$IFn$_invoke$arity$1(m);
  if (cljs.core.truth_(temp__4126__auto___11910)) {
    var message_11911 = temp__4126__auto___11910;
    cljs.core.println.call(null, message_11911);
  } else {
  }
  cljs.core.println.call(null, "expected:", cljs.core.pr_str.call(null, (new cljs.core.Keyword(null, "expected", "expected", 1583670997)).cljs$core$IFn$_invoke$arity$1(m)));
  cljs.core.print.call(null, "  actual: ");
  return cljs.core.prn.call(null, (new cljs.core.Keyword(null, "actual", "actual", 107306363)).cljs$core$IFn$_invoke$arity$1(m));
});
cljs.core._add_method.call(null, cljs.test.report, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("cljs.test", "default", "cljs.test/default", -1581405322), new cljs.core.Keyword(null, "summary", "summary", 380847952)], null), function(m) {
  cljs.core.println.call(null, "\nRan", (new cljs.core.Keyword(null, "test", "test", 577538877)).cljs$core$IFn$_invoke$arity$1(m), "tests containing", (new cljs.core.Keyword(null, "pass", "pass", 1574159993)).cljs$core$IFn$_invoke$arity$1(m) + (new cljs.core.Keyword(null, "fail", "fail", 1706214930)).cljs$core$IFn$_invoke$arity$1(m) + (new cljs.core.Keyword(null, "error", "error", -978969032)).cljs$core$IFn$_invoke$arity$1(m), "assertions.");
  return cljs.core.println.call(null, (new cljs.core.Keyword(null, "fail", "fail", 1706214930)).cljs$core$IFn$_invoke$arity$1(m), "failures,", (new cljs.core.Keyword(null, "error", "error", -978969032)).cljs$core$IFn$_invoke$arity$1(m), "errors.");
});
cljs.core._add_method.call(null, cljs.test.report, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("cljs.test", "default", "cljs.test/default", -1581405322), new cljs.core.Keyword(null, "begin-test-ns", "begin-test-ns", -1701237033)], null), function(m) {
  return cljs.core.println.call(null, "\nTesting", cljs.core.name.call(null, (new cljs.core.Keyword(null, "ns", "ns", 441598760)).cljs$core$IFn$_invoke$arity$1(m)));
});
cljs.core._add_method.call(null, cljs.test.report, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("cljs.test", "default", "cljs.test/default", -1581405322), new cljs.core.Keyword(null, "end-test-ns", "end-test-ns", 1620675645)], null), function(m) {
  return null;
});
cljs.core._add_method.call(null, cljs.test.report, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("cljs.test", "default", "cljs.test/default", -1581405322), new cljs.core.Keyword(null, "begin-test-var", "begin-test-var", -908571100)], null), function(m) {
  return null;
});
cljs.core._add_method.call(null, cljs.test.report, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("cljs.test", "default", "cljs.test/default", -1581405322), new cljs.core.Keyword(null, "end-test-var", "end-test-var", 984198545)], null), function(m) {
  return null;
});
cljs.test.js_line_and_column = function cljs$test$js_line_and_column(stack_element) {
  var parts = stack_element.split(":");
  var cnt = cljs.core.count.call(null, parts);
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [parseInt(cljs.core.nth.call(null, parts, cnt - 2)), parseInt(cljs.core.nth.call(null, parts, cnt - 1))], null);
};
cljs.test.js_filename = function cljs$test$js_filename(stack_element) {
  return cljs.core.first.call(null, cljs.core.last.call(null, stack_element.split("/out/")).split(":"));
};
cljs.test.mapped_line_and_column = function cljs$test$mapped_line_and_column(filename, line, column) {
  var default$ = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [filename, line, column], null);
  var temp__4124__auto__ = (new cljs.core.Keyword(null, "source-map", "source-map", 1706252311)).cljs$core$IFn$_invoke$arity$1(cljs.test.get_current_env.call(null));
  if (cljs.core.truth_(temp__4124__auto__)) {
    var source_map = temp__4124__auto__;
    var temp__4124__auto____$1 = cljs.core.get_in.call(null, source_map, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [filename, line - 1], null));
    if (cljs.core.truth_(temp__4124__auto____$1)) {
      var columns = temp__4124__auto____$1;
      return cljs.core.vec.call(null, cljs.core.map.call(null, cljs.core.first.call(null, function() {
        var temp__4124__auto____$2 = cljs.core.get.call(null, columns, column - 1);
        if (cljs.core.truth_(temp__4124__auto____$2)) {
          var mapping = temp__4124__auto____$2;
          return mapping;
        } else {
          return cljs.core.second.call(null, cljs.core.first.call(null, columns));
        }
      }()), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "source", "source", -433931539), new cljs.core.Keyword(null, "line", "line", 212345235), new cljs.core.Keyword(null, "col", "col", -1959363084)], null)));
    } else {
      return default$;
    }
  } else {
    return default$;
  }
};
cljs.test.file_and_line = function cljs$test$file_and_line(exception, depth) {
  var temp__4124__auto__ = function() {
    var and__4323__auto__ = typeof exception.stack === "string";
    if (and__4323__auto__) {
      var G__11917 = exception.stack;
      var G__11917__$1 = G__11917 == null ? null : clojure.string.split_lines.call(null, G__11917);
      var G__11917__$2 = G__11917__$1 == null ? null : cljs.core.get.call(null, G__11917__$1, depth);
      var G__11917__$3 = G__11917__$2 == null ? null : clojure.string.trim.call(null, G__11917__$2);
      return G__11917__$3;
    } else {
      return and__4323__auto__;
    }
  }();
  if (cljs.core.truth_(temp__4124__auto__)) {
    var stack_element = temp__4124__auto__;
    var fname = cljs.test.js_filename.call(null, stack_element);
    var vec__11918 = cljs.test.js_line_and_column.call(null, stack_element);
    var line = cljs.core.nth.call(null, vec__11918, 0, null);
    var column = cljs.core.nth.call(null, vec__11918, 1, null);
    var vec__11919 = cljs.test.mapped_line_and_column.call(null, fname, line, column);
    var fname__$1 = cljs.core.nth.call(null, vec__11919, 0, null);
    var line__$1 = cljs.core.nth.call(null, vec__11919, 1, null);
    var column__$1 = cljs.core.nth.call(null, vec__11919, 2, null);
    return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "file", "file", -1269645878), fname__$1, new cljs.core.Keyword(null, "line", "line", 212345235), line__$1, new cljs.core.Keyword(null, "column", "column", 2078222095), column__$1], null);
  } else {
    return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "file", "file", -1269645878), exception.fileName, new cljs.core.Keyword(null, "line", "line", 212345235), exception.lineNumber], null);
  }
};
cljs.test.do_report = function cljs$test$do_report(m) {
  var m__$1 = function() {
    var G__11921 = (new cljs.core.Keyword(null, "type", "type", 1174270348)).cljs$core$IFn$_invoke$arity$1(m) instanceof cljs.core.Keyword ? (new cljs.core.Keyword(null, "type", "type", 1174270348)).cljs$core$IFn$_invoke$arity$1(m).fqn : null;
    switch(G__11921) {
      case "error":
        return cljs.core.merge.call(null, cljs.test.file_and_line.call(null, (new cljs.core.Keyword(null, "actual", "actual", 107306363)).cljs$core$IFn$_invoke$arity$1(m), 0), m);
        break;
      case "fail":
        return cljs.core.merge.call(null, cljs.test.file_and_line.call(null, new Error, 4), m);
        break;
      default:
        return m;
    }
  }();
  return cljs.test.report.call(null, m__$1);
};
cljs.test.IAsyncTest = function() {
  var obj11924 = {};
  return obj11924;
}();
cljs.test.async_QMARK_ = function cljs$test$async_QMARK_(x) {
  var G__11926 = x;
  if (G__11926) {
    var bit__5009__auto__ = null;
    if (cljs.core.truth_(function() {
      var or__4335__auto__ = bit__5009__auto__;
      if (cljs.core.truth_(or__4335__auto__)) {
        return or__4335__auto__;
      } else {
        return G__11926.cljs$test$IAsyncTest$;
      }
    }())) {
      return true;
    } else {
      if (!G__11926.cljs$lang$protocol_mask$partition$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.test.IAsyncTest, G__11926);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.test.IAsyncTest, G__11926);
  }
};
cljs.test.run_block = function cljs$test$run_block(fns) {
  while (true) {
    var temp__4126__auto__ = cljs.core.seq.call(null, fns);
    if (temp__4126__auto__) {
      var xs__4624__auto__ = temp__4126__auto__;
      var f = cljs.core.first.call(null, xs__4624__auto__);
      var obj = f.call(null);
      if (cljs.core.truth_(cljs.test.async_QMARK_.call(null, obj))) {
        return obj.call(null, function() {
          var d = new cljs.core.Delay(function(fns, obj, f, xs__4624__auto__, temp__4126__auto__) {
            return function() {
              return cljs$test$run_block.call(null, cljs.core.rest.call(null, fns));
            };
          }(fns, obj, f, xs__4624__auto__, temp__4126__auto__), null);
          return function(fns, d, obj, f, xs__4624__auto__, temp__4126__auto__) {
            return function() {
              if (cljs.core.realized_QMARK_.call(null, d)) {
                return cljs.core.println.call(null, "WARNING: Async test called done more than one time.");
              } else {
                return cljs.core.deref.call(null, d);
              }
            };
          }(fns, d, obj, f, xs__4624__auto__, temp__4126__auto__);
        }());
      } else {
        var G__11929 = function() {
          var G__11928 = cljs.core.rest.call(null, fns);
          var G__11928__$1 = cljs.core.truth_((new cljs.core.Keyword("cljs.test", "block?", "cljs.test/block?", 686379965)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, obj))) ? cljs.core.concat.call(null, obj, G__11928) : G__11928;
          return G__11928__$1;
        }();
        fns = G__11929;
        continue;
      }
    } else {
      return null;
    }
    break;
  }
};
cljs.test.block = function cljs$test$block(fns) {
  var G__11931 = fns;
  var G__11931__$1 = G__11931 == null ? null : cljs.core.vary_meta.call(null, G__11931, cljs.core.assoc, new cljs.core.Keyword("cljs.test", "block?", "cljs.test/block?", 686379965), true);
  return G__11931__$1;
};
cljs.test.test_var_block = function cljs$test$test_var_block(v) {
  if (v instanceof cljs.core.Var) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "instance?", "instance?", 1075939923, null), new cljs.core.Symbol(null, "Var", "Var", -1833791616, null), new cljs.core.Symbol(null, "v", "v", 1661996586, null))))].join(""));
  }
  var temp__4124__auto__ = (new cljs.core.Keyword(null, "test", "test", 577538877)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, v));
  if (cljs.core.truth_(temp__4124__auto__)) {
    var t = temp__4124__auto__;
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [function(t, temp__4124__auto__) {
      return function() {
        cljs.test.update_current_env_BANG_.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "testing-vars", "testing-vars", -2114769150)], null), cljs.core.conj, v);
        cljs.test.update_current_env_BANG_.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "report-counters", "report-counters", -1702609242), new cljs.core.Keyword(null, "test", "test", 577538877)], null), cljs.core.inc);
        cljs.test.do_report.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "begin-test-var", "begin-test-var", -908571100), new cljs.core.Keyword(null, "var", "var", -769682797), v], null));
        try {
          return t.call(null);
        } catch (e11933) {
          var e = e11933;
          return cljs.test.do_report.call(null, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "error", "error", -978969032), new cljs.core.Keyword(null, "message", "message", -406056002), "Uncaught exception, not in assertion.", new cljs.core.Keyword(null, "expected", "expected", 1583670997), null, new cljs.core.Keyword(null, "actual", "actual", 107306363), e], null));
        }
      };
    }(t, temp__4124__auto__), function(t, temp__4124__auto__) {
      return function() {
        cljs.test.do_report.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "end-test-var", "end-test-var", 984198545), new cljs.core.Keyword(null, "var", "var", -769682797), v], null));
        return cljs.test.update_current_env_BANG_.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "testing-vars", "testing-vars", -2114769150)], null), cljs.core.rest);
      };
    }(t, temp__4124__auto__)], null);
  } else {
    return null;
  }
};
cljs.test.test_var = function cljs$test$test_var(v) {
  return cljs.test.run_block.call(null, cljs.test.test_var_block.call(null, v));
};
cljs.test.default_fixture = function cljs$test$default_fixture(f) {
  return f.call(null);
};
cljs.test.compose_fixtures = function cljs$test$compose_fixtures(f1, f2) {
  return function(g) {
    return f1.call(null, function() {
      return f2.call(null, g);
    });
  };
};
cljs.test.join_fixtures = function cljs$test$join_fixtures(fixtures) {
  return cljs.core.reduce.call(null, cljs.test.compose_fixtures, cljs.test.default_fixture, fixtures);
};
cljs.test.wrap_map_fixtures = function cljs$test$wrap_map_fixtures(map_fixtures, block) {
  return cljs.core.concat.call(null, cljs.core.keep.call(null, new cljs.core.Keyword(null, "before", "before", -1633692388), map_fixtures), block, cljs.core.reverse.call(null, cljs.core.keep.call(null, new cljs.core.Keyword(null, "after", "after", 594996914), map_fixtures)));
};
cljs.test.execution_strategy = function cljs$test$execution_strategy(once, each) {
  var fixtures_type = function cljs$test$execution_strategy_$_fixtures_type(coll) {
    if (cljs.core.empty_QMARK_.call(null, coll)) {
      return new cljs.core.Keyword(null, "none", "none", 1333468478);
    } else {
      if (cljs.core.every_QMARK_.call(null, cljs.core.map_QMARK_, coll)) {
        return new cljs.core.Keyword(null, "map", "map", 1371690461);
      } else {
        if (cljs.core.every_QMARK_.call(null, cljs.core.fn_QMARK_, coll)) {
          return new cljs.core.Keyword(null, "fn", "fn", -1175266204);
        } else {
          return null;
        }
      }
    }
  };
  var fixtures_types = function cljs$test$execution_strategy_$_fixtures_types() {
    return cljs.core.distinct.call(null, cljs.core.remove.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "none", "none", 1333468478), null], null), null), cljs.core.map.call(null, fixtures_type, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [once, each], null))));
  };
  var vec__11935 = fixtures_types.call(null);
  var type = cljs.core.nth.call(null, vec__11935, 0, null);
  var types = vec__11935;
  if (cljs.core.not_any_QMARK_.call(null, cljs.core.nil_QMARK_, types)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("Fixtures may not be of mixed types"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "not-any?", "not-any?", -2114707554, null), new cljs.core.Symbol(null, "nil?", "nil?", 1612038930, null), new cljs.core.Symbol(null, "types", "types", -2064405130, null))))].join(""));
  }
  if (2 > cljs.core.count.call(null, types)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("fixtures specified in :once and :each must be of the same type"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "\x3e", "\x3e", 1085014381, null), 2, cljs.core.list(new cljs.core.Symbol(null, "count", "count", -514511684, null), new cljs.core.Symbol(null, "types", "types", -2064405130, null)))))].join(""));
  }
  return(new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "map", "map", 1371690461), new cljs.core.Keyword(null, "async", "async", 1050769601), new cljs.core.Keyword(null, "fn", "fn", -1175266204), new cljs.core.Keyword(null, "sync", "sync", -624148946)], null)).call(null, type, new cljs.core.Keyword(null, "sync", "sync", -624148946));
};
cljs.test.test_vars_block = function cljs$test$test_vars_block(vars) {
  return cljs.core.map.call(null, function(p__11943) {
    var vec__11944 = p__11943;
    var ns = cljs.core.nth.call(null, vec__11944, 0, null);
    var vars__$1 = cljs.core.nth.call(null, vec__11944, 1, null);
    return function(vec__11944, ns, vars__$1) {
      return function() {
        return cljs.test.block.call(null, function() {
          var env = cljs.test.get_current_env.call(null);
          var once_fixtures = cljs.core.get_in.call(null, env, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "once-fixtures", "once-fixtures", 1253947167), ns], null));
          var each_fixtures = cljs.core.get_in.call(null, env, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "each-fixtures", "each-fixtures", 802243977), ns], null));
          var G__11945 = cljs.test.execution_strategy.call(null, once_fixtures, each_fixtures) instanceof cljs.core.Keyword ? cljs.test.execution_strategy.call(null, once_fixtures, each_fixtures).fqn : null;
          switch(G__11945) {
            case "sync":
              var each_fixture_fn = cljs.test.join_fixtures.call(null, each_fixtures);
              return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [function(each_fixture_fn, G__11945, env, once_fixtures, each_fixtures, vec__11944, ns, vars__$1) {
                return function() {
                  return cljs.test.join_fixtures.call(null, once_fixtures).call(null, function(each_fixture_fn, G__11945, env, once_fixtures, each_fixtures, vec__11944, ns, vars__$1) {
                    return function() {
                      var seq__11946 = cljs.core.seq.call(null, vars__$1);
                      var chunk__11947 = null;
                      var count__11948 = 0;
                      var i__11949 = 0;
                      while (true) {
                        if (i__11949 < count__11948) {
                          var v = cljs.core._nth.call(null, chunk__11947, i__11949);
                          if (cljs.core.truth_((new cljs.core.Keyword(null, "test", "test", 577538877)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, v)))) {
                            each_fixture_fn.call(null, function(seq__11946, chunk__11947, count__11948, i__11949, v, each_fixture_fn, G__11945, env, once_fixtures, each_fixtures, vec__11944, ns, vars__$1) {
                              return function() {
                                return cljs.test.test_var.call(null, v);
                              };
                            }(seq__11946, chunk__11947, count__11948, i__11949, v, each_fixture_fn, G__11945, env, once_fixtures, each_fixtures, vec__11944, ns, vars__$1));
                          } else {
                          }
                          var G__11951 = seq__11946;
                          var G__11952 = chunk__11947;
                          var G__11953 = count__11948;
                          var G__11954 = i__11949 + 1;
                          seq__11946 = G__11951;
                          chunk__11947 = G__11952;
                          count__11948 = G__11953;
                          i__11949 = G__11954;
                          continue;
                        } else {
                          var temp__4126__auto__ = cljs.core.seq.call(null, seq__11946);
                          if (temp__4126__auto__) {
                            var seq__11946__$1 = temp__4126__auto__;
                            if (cljs.core.chunked_seq_QMARK_.call(null, seq__11946__$1)) {
                              var c__5120__auto__ = cljs.core.chunk_first.call(null, seq__11946__$1);
                              var G__11955 = cljs.core.chunk_rest.call(null, seq__11946__$1);
                              var G__11956 = c__5120__auto__;
                              var G__11957 = cljs.core.count.call(null, c__5120__auto__);
                              var G__11958 = 0;
                              seq__11946 = G__11955;
                              chunk__11947 = G__11956;
                              count__11948 = G__11957;
                              i__11949 = G__11958;
                              continue;
                            } else {
                              var v = cljs.core.first.call(null, seq__11946__$1);
                              if (cljs.core.truth_((new cljs.core.Keyword(null, "test", "test", 577538877)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, v)))) {
                                each_fixture_fn.call(null, function(seq__11946, chunk__11947, count__11948, i__11949, v, seq__11946__$1, temp__4126__auto__, each_fixture_fn, G__11945, env, once_fixtures, each_fixtures, vec__11944, ns, vars__$1) {
                                  return function() {
                                    return cljs.test.test_var.call(null, v);
                                  };
                                }(seq__11946, chunk__11947, count__11948, i__11949, v, seq__11946__$1, temp__4126__auto__, each_fixture_fn, G__11945, env, once_fixtures, each_fixtures, vec__11944, ns, vars__$1));
                              } else {
                              }
                              var G__11959 = cljs.core.next.call(null, seq__11946__$1);
                              var G__11960 = null;
                              var G__11961 = 0;
                              var G__11962 = 0;
                              seq__11946 = G__11959;
                              chunk__11947 = G__11960;
                              count__11948 = G__11961;
                              i__11949 = G__11962;
                              continue;
                            }
                          } else {
                            return null;
                          }
                        }
                        break;
                      }
                    };
                  }(each_fixture_fn, G__11945, env, once_fixtures, each_fixtures, vec__11944, ns, vars__$1));
                };
              }(each_fixture_fn, G__11945, env, once_fixtures, each_fixtures, vec__11944, ns, vars__$1)], null);
              break;
            case "async":
              return cljs.test.wrap_map_fixtures.call(null, once_fixtures, cljs.core.mapcat.call(null, cljs.core.comp.call(null, cljs.core.partial.call(null, cljs.test.wrap_map_fixtures, each_fixtures), cljs.test.test_var_block), cljs.core.filter.call(null, cljs.core.comp.call(null, new cljs.core.Keyword(null, "test", "test", 577538877), cljs.core.meta), vars__$1)));
              break;
            default:
              throw new Error([cljs.core.str("No matching clause: "), cljs.core.str(cljs.test.execution_strategy.call(null, once_fixtures, each_fixtures))].join(""));;
          }
        }());
      };
    }(vec__11944, ns, vars__$1);
  }, cljs.core.group_by.call(null, cljs.core.comp.call(null, new cljs.core.Keyword(null, "ns", "ns", 441598760), cljs.core.meta), vars));
};
cljs.test.test_vars = function cljs$test$test_vars(vars) {
  return cljs.test.run_block.call(null, cljs.test.test_vars_block.call(null, vars));
};
cljs.test.successful_QMARK_ = function cljs$test$successful_QMARK_(summary) {
  return(new cljs.core.Keyword(null, "fail", "fail", 1706214930)).cljs$core$IFn$_invoke$arity$2(summary, 0) === 0 && (new cljs.core.Keyword(null, "error", "error", -978969032)).cljs$core$IFn$_invoke$arity$2(summary, 0) === 0;
};
goog.provide("mind.subs");
goog.require("cljs.core");
goog.require("re_frame.core");
re_frame.core.register_sub.call(null, new cljs.core.Keyword(null, "name", "name", 1843675177), function(db) {
  return reagent.ratom.make_reaction.call(null, function() {
    return(new cljs.core.Keyword(null, "name", "name", 1843675177)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, db));
  });
});
re_frame.core.register_sub.call(null, new cljs.core.Keyword(null, "active-panel", "active-panel", -1802545994), function(db, _) {
  return reagent.ratom.make_reaction.call(null, function() {
    return(new cljs.core.Keyword(null, "active-panel", "active-panel", -1802545994)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, db));
  });
});
mind.subs.my_get = function mind$subs$my_get(m, k) {
  return cljs.core.get.call(null, m, k);
};
mind.subs.foo = function mind$subs$foo(x) {
  return x;
};
var m_10224 = new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "foo", "foo", 1268894036), 1], null);
var v_10225 = mind.subs.my_get.call(null, m_10224, new cljs.core.Keyword(null, "foo", "foo", 1268894036));
cljs.core.println.call(null, mind.subs.foo.call(null, v_10225));
mind.subs.bar = function mind$subs$bar(x) {
  return x;
};
cljs.core.println.call(null, mind.subs.bar.call(null, cljs.core.PersistentArrayMap.EMPTY));
goog.provide("garden.types");
goog.require("cljs.core");
garden.types.CSSUnit = function(unit, magnitude, __meta, __extmap, __hash) {
  this.unit = unit;
  this.magnitude = magnitude;
  this.__meta = __meta;
  this.__extmap = __extmap;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 2229667594;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
garden.types.CSSUnit.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this__4930__auto__, k__4931__auto__) {
  var self__ = this;
  var this__4930__auto____$1 = this;
  return cljs.core._lookup.call(null, this__4930__auto____$1, k__4931__auto__, null);
};
garden.types.CSSUnit.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this__4932__auto__, k15562, else__4933__auto__) {
  var self__ = this;
  var this__4932__auto____$1 = this;
  var G__15564 = k15562 instanceof cljs.core.Keyword ? k15562.fqn : null;
  switch(G__15564) {
    case "magnitude":
      return self__.magnitude;
      break;
    case "unit":
      return self__.unit;
      break;
    default:
      return cljs.core.get.call(null, self__.__extmap, k15562, else__4933__auto__);
  }
};
garden.types.CSSUnit.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this__4944__auto__, writer__4945__auto__, opts__4946__auto__) {
  var self__ = this;
  var this__4944__auto____$1 = this;
  var pr_pair__4947__auto__ = function(this__4944__auto____$1) {
    return function(keyval__4948__auto__) {
      return cljs.core.pr_sequential_writer.call(null, writer__4945__auto__, cljs.core.pr_writer, "", " ", "", opts__4946__auto__, keyval__4948__auto__);
    };
  }(this__4944__auto____$1);
  return cljs.core.pr_sequential_writer.call(null, writer__4945__auto__, pr_pair__4947__auto__, "#garden.types.CSSUnit{", ", ", "}", opts__4946__auto__, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "unit", "unit", 375175175), self__.unit], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
  [new cljs.core.Keyword(null, "magnitude", "magnitude", 1924274222), self__.magnitude], null)], null), self__.__extmap));
};
garden.types.CSSUnit.prototype.cljs$core$IMeta$_meta$arity$1 = function(this__4928__auto__) {
  var self__ = this;
  var this__4928__auto____$1 = this;
  return self__.__meta;
};
garden.types.CSSUnit.prototype.cljs$core$ICloneable$_clone$arity$1 = function(this__4924__auto__) {
  var self__ = this;
  var this__4924__auto____$1 = this;
  return new garden.types.CSSUnit(self__.unit, self__.magnitude, self__.__meta, self__.__extmap, self__.__hash);
};
garden.types.CSSUnit.prototype.cljs$core$ICounted$_count$arity$1 = function(this__4934__auto__) {
  var self__ = this;
  var this__4934__auto____$1 = this;
  return 2 + cljs.core.count.call(null, self__.__extmap);
};
garden.types.CSSUnit.prototype.cljs$core$IHash$_hash$arity$1 = function(this__4925__auto__) {
  var self__ = this;
  var this__4925__auto____$1 = this;
  var h__4751__auto__ = self__.__hash;
  if (!(h__4751__auto__ == null)) {
    return h__4751__auto__;
  } else {
    var h__4751__auto____$1 = cljs.core.hash_imap.call(null, this__4925__auto____$1);
    self__.__hash = h__4751__auto____$1;
    return h__4751__auto____$1;
  }
};
garden.types.CSSUnit.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this__4926__auto__, other__4927__auto__) {
  var self__ = this;
  var this__4926__auto____$1 = this;
  if (cljs.core.truth_(function() {
    var and__4323__auto__ = other__4927__auto__;
    if (cljs.core.truth_(and__4323__auto__)) {
      var and__4323__auto____$1 = this__4926__auto____$1.constructor === other__4927__auto__.constructor;
      if (and__4323__auto____$1) {
        return cljs.core.equiv_map.call(null, this__4926__auto____$1, other__4927__auto__);
      } else {
        return and__4323__auto____$1;
      }
    } else {
      return and__4323__auto__;
    }
  }())) {
    return true;
  } else {
    return false;
  }
};
garden.types.CSSUnit.prototype.cljs$core$IMap$_dissoc$arity$2 = function(this__4939__auto__, k__4940__auto__) {
  var self__ = this;
  var this__4939__auto____$1 = this;
  if (cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "unit", "unit", 375175175), null, new cljs.core.Keyword(null, "magnitude", "magnitude", 1924274222), null], null), null), k__4940__auto__)) {
    return cljs.core.dissoc.call(null, cljs.core.with_meta.call(null, cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, this__4939__auto____$1), self__.__meta), k__4940__auto__);
  } else {
    return new garden.types.CSSUnit(self__.unit, self__.magnitude, self__.__meta, cljs.core.not_empty.call(null, cljs.core.dissoc.call(null, self__.__extmap, k__4940__auto__)), null);
  }
};
garden.types.CSSUnit.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(this__4937__auto__, k__4938__auto__, G__15561) {
  var self__ = this;
  var this__4937__auto____$1 = this;
  var pred__15565 = cljs.core.keyword_identical_QMARK_;
  var expr__15566 = k__4938__auto__;
  if (cljs.core.truth_(pred__15565.call(null, new cljs.core.Keyword(null, "unit", "unit", 375175175), expr__15566))) {
    return new garden.types.CSSUnit(G__15561, self__.magnitude, self__.__meta, self__.__extmap, null);
  } else {
    if (cljs.core.truth_(pred__15565.call(null, new cljs.core.Keyword(null, "magnitude", "magnitude", 1924274222), expr__15566))) {
      return new garden.types.CSSUnit(self__.unit, G__15561, self__.__meta, self__.__extmap, null);
    } else {
      return new garden.types.CSSUnit(self__.unit, self__.magnitude, self__.__meta, cljs.core.assoc.call(null, self__.__extmap, k__4938__auto__, G__15561), null);
    }
  }
};
garden.types.CSSUnit.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this__4942__auto__) {
  var self__ = this;
  var this__4942__auto____$1 = this;
  return cljs.core.seq.call(null, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "unit", "unit", 375175175), self__.unit], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "magnitude", "magnitude", 1924274222), self__.magnitude], null)], null), self__.__extmap));
};
garden.types.CSSUnit.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this__4929__auto__, G__15561) {
  var self__ = this;
  var this__4929__auto____$1 = this;
  return new garden.types.CSSUnit(self__.unit, self__.magnitude, G__15561, self__.__extmap, self__.__hash);
};
garden.types.CSSUnit.prototype.cljs$core$ICollection$_conj$arity$2 = function(this__4935__auto__, entry__4936__auto__) {
  var self__ = this;
  var this__4935__auto____$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry__4936__auto__)) {
    return cljs.core._assoc.call(null, this__4935__auto____$1, cljs.core._nth.call(null, entry__4936__auto__, 0), cljs.core._nth.call(null, entry__4936__auto__, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, this__4935__auto____$1, entry__4936__auto__);
  }
};
garden.types.CSSUnit.cljs$lang$type = true;
garden.types.CSSUnit.cljs$lang$ctorPrSeq = function(this__4964__auto__) {
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, "garden.types/CSSUnit");
};
garden.types.CSSUnit.cljs$lang$ctorPrWriter = function(this__4964__auto__, writer__4965__auto__) {
  return cljs.core._write.call(null, writer__4965__auto__, "garden.types/CSSUnit");
};
garden.types.__GT_CSSUnit = function garden$types$__GT_CSSUnit(unit, magnitude) {
  return new garden.types.CSSUnit(unit, magnitude, null, null, null);
};
garden.types.map__GT_CSSUnit = function garden$types$map__GT_CSSUnit(G__15563) {
  return new garden.types.CSSUnit((new cljs.core.Keyword(null, "unit", "unit", 375175175)).cljs$core$IFn$_invoke$arity$1(G__15563), (new cljs.core.Keyword(null, "magnitude", "magnitude", 1924274222)).cljs$core$IFn$_invoke$arity$1(G__15563), null, cljs.core.dissoc.call(null, G__15563, new cljs.core.Keyword(null, "unit", "unit", 375175175), new cljs.core.Keyword(null, "magnitude", "magnitude", 1924274222)), null);
};
garden.types.CSSFunction = function(function$, args, __meta, __extmap, __hash) {
  this.function$ = function$;
  this.args = args;
  this.__meta = __meta;
  this.__extmap = __extmap;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 2229667594;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
garden.types.CSSFunction.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this__4930__auto__, k__4931__auto__) {
  var self__ = this;
  var this__4930__auto____$1 = this;
  return cljs.core._lookup.call(null, this__4930__auto____$1, k__4931__auto__, null);
};
garden.types.CSSFunction.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this__4932__auto__, k15570, else__4933__auto__) {
  var self__ = this;
  var this__4932__auto____$1 = this;
  var G__15572 = k15570 instanceof cljs.core.Keyword ? k15570.fqn : null;
  switch(G__15572) {
    case "args":
      return self__.args;
      break;
    case "function":
      return self__.function$;
      break;
    default:
      return cljs.core.get.call(null, self__.__extmap, k15570, else__4933__auto__);
  }
};
garden.types.CSSFunction.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this__4944__auto__, writer__4945__auto__, opts__4946__auto__) {
  var self__ = this;
  var this__4944__auto____$1 = this;
  var pr_pair__4947__auto__ = function(this__4944__auto____$1) {
    return function(keyval__4948__auto__) {
      return cljs.core.pr_sequential_writer.call(null, writer__4945__auto__, cljs.core.pr_writer, "", " ", "", opts__4946__auto__, keyval__4948__auto__);
    };
  }(this__4944__auto____$1);
  return cljs.core.pr_sequential_writer.call(null, writer__4945__auto__, pr_pair__4947__auto__, "#garden.types.CSSFunction{", ", ", "}", opts__4946__auto__, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "function", "function", -2127255473), self__.function$], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
  [new cljs.core.Keyword(null, "args", "args", 1315556576), self__.args], null)], null), self__.__extmap));
};
garden.types.CSSFunction.prototype.cljs$core$IMeta$_meta$arity$1 = function(this__4928__auto__) {
  var self__ = this;
  var this__4928__auto____$1 = this;
  return self__.__meta;
};
garden.types.CSSFunction.prototype.cljs$core$ICloneable$_clone$arity$1 = function(this__4924__auto__) {
  var self__ = this;
  var this__4924__auto____$1 = this;
  return new garden.types.CSSFunction(self__.function$, self__.args, self__.__meta, self__.__extmap, self__.__hash);
};
garden.types.CSSFunction.prototype.cljs$core$ICounted$_count$arity$1 = function(this__4934__auto__) {
  var self__ = this;
  var this__4934__auto____$1 = this;
  return 2 + cljs.core.count.call(null, self__.__extmap);
};
garden.types.CSSFunction.prototype.cljs$core$IHash$_hash$arity$1 = function(this__4925__auto__) {
  var self__ = this;
  var this__4925__auto____$1 = this;
  var h__4751__auto__ = self__.__hash;
  if (!(h__4751__auto__ == null)) {
    return h__4751__auto__;
  } else {
    var h__4751__auto____$1 = cljs.core.hash_imap.call(null, this__4925__auto____$1);
    self__.__hash = h__4751__auto____$1;
    return h__4751__auto____$1;
  }
};
garden.types.CSSFunction.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this__4926__auto__, other__4927__auto__) {
  var self__ = this;
  var this__4926__auto____$1 = this;
  if (cljs.core.truth_(function() {
    var and__4323__auto__ = other__4927__auto__;
    if (cljs.core.truth_(and__4323__auto__)) {
      var and__4323__auto____$1 = this__4926__auto____$1.constructor === other__4927__auto__.constructor;
      if (and__4323__auto____$1) {
        return cljs.core.equiv_map.call(null, this__4926__auto____$1, other__4927__auto__);
      } else {
        return and__4323__auto____$1;
      }
    } else {
      return and__4323__auto__;
    }
  }())) {
    return true;
  } else {
    return false;
  }
};
garden.types.CSSFunction.prototype.cljs$core$IMap$_dissoc$arity$2 = function(this__4939__auto__, k__4940__auto__) {
  var self__ = this;
  var this__4939__auto____$1 = this;
  if (cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "args", "args", 1315556576), null, new cljs.core.Keyword(null, "function", "function", -2127255473), null], null), null), k__4940__auto__)) {
    return cljs.core.dissoc.call(null, cljs.core.with_meta.call(null, cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, this__4939__auto____$1), self__.__meta), k__4940__auto__);
  } else {
    return new garden.types.CSSFunction(self__.function$, self__.args, self__.__meta, cljs.core.not_empty.call(null, cljs.core.dissoc.call(null, self__.__extmap, k__4940__auto__)), null);
  }
};
garden.types.CSSFunction.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(this__4937__auto__, k__4938__auto__, G__15569) {
  var self__ = this;
  var this__4937__auto____$1 = this;
  var pred__15573 = cljs.core.keyword_identical_QMARK_;
  var expr__15574 = k__4938__auto__;
  if (cljs.core.truth_(pred__15573.call(null, new cljs.core.Keyword(null, "function", "function", -2127255473), expr__15574))) {
    return new garden.types.CSSFunction(G__15569, self__.args, self__.__meta, self__.__extmap, null);
  } else {
    if (cljs.core.truth_(pred__15573.call(null, new cljs.core.Keyword(null, "args", "args", 1315556576), expr__15574))) {
      return new garden.types.CSSFunction(self__.function$, G__15569, self__.__meta, self__.__extmap, null);
    } else {
      return new garden.types.CSSFunction(self__.function$, self__.args, self__.__meta, cljs.core.assoc.call(null, self__.__extmap, k__4938__auto__, G__15569), null);
    }
  }
};
garden.types.CSSFunction.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this__4942__auto__) {
  var self__ = this;
  var this__4942__auto____$1 = this;
  return cljs.core.seq.call(null, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "function", "function", -2127255473), self__.function$], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "args", "args", 1315556576), self__.args], null)], null), self__.__extmap));
};
garden.types.CSSFunction.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this__4929__auto__, G__15569) {
  var self__ = this;
  var this__4929__auto____$1 = this;
  return new garden.types.CSSFunction(self__.function$, self__.args, G__15569, self__.__extmap, self__.__hash);
};
garden.types.CSSFunction.prototype.cljs$core$ICollection$_conj$arity$2 = function(this__4935__auto__, entry__4936__auto__) {
  var self__ = this;
  var this__4935__auto____$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry__4936__auto__)) {
    return cljs.core._assoc.call(null, this__4935__auto____$1, cljs.core._nth.call(null, entry__4936__auto__, 0), cljs.core._nth.call(null, entry__4936__auto__, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, this__4935__auto____$1, entry__4936__auto__);
  }
};
garden.types.CSSFunction.cljs$lang$type = true;
garden.types.CSSFunction.cljs$lang$ctorPrSeq = function(this__4964__auto__) {
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, "garden.types/CSSFunction");
};
garden.types.CSSFunction.cljs$lang$ctorPrWriter = function(this__4964__auto__, writer__4965__auto__) {
  return cljs.core._write.call(null, writer__4965__auto__, "garden.types/CSSFunction");
};
garden.types.__GT_CSSFunction = function garden$types$__GT_CSSFunction(function$, args) {
  return new garden.types.CSSFunction(function$, args, null, null, null);
};
garden.types.map__GT_CSSFunction = function garden$types$map__GT_CSSFunction(G__15571) {
  return new garden.types.CSSFunction((new cljs.core.Keyword(null, "function", "function", -2127255473)).cljs$core$IFn$_invoke$arity$1(G__15571), (new cljs.core.Keyword(null, "args", "args", 1315556576)).cljs$core$IFn$_invoke$arity$1(G__15571), null, cljs.core.dissoc.call(null, G__15571, new cljs.core.Keyword(null, "function", "function", -2127255473), new cljs.core.Keyword(null, "args", "args", 1315556576)), null);
};
garden.types.CSSAtRule = function(identifier, value, __meta, __extmap, __hash) {
  this.identifier = identifier;
  this.value = value;
  this.__meta = __meta;
  this.__extmap = __extmap;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 2229667594;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
garden.types.CSSAtRule.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this__4930__auto__, k__4931__auto__) {
  var self__ = this;
  var this__4930__auto____$1 = this;
  return cljs.core._lookup.call(null, this__4930__auto____$1, k__4931__auto__, null);
};
garden.types.CSSAtRule.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this__4932__auto__, k15578, else__4933__auto__) {
  var self__ = this;
  var this__4932__auto____$1 = this;
  var G__15580 = k15578 instanceof cljs.core.Keyword ? k15578.fqn : null;
  switch(G__15580) {
    case "value":
      return self__.value;
      break;
    case "identifier":
      return self__.identifier;
      break;
    default:
      return cljs.core.get.call(null, self__.__extmap, k15578, else__4933__auto__);
  }
};
garden.types.CSSAtRule.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this__4944__auto__, writer__4945__auto__, opts__4946__auto__) {
  var self__ = this;
  var this__4944__auto____$1 = this;
  var pr_pair__4947__auto__ = function(this__4944__auto____$1) {
    return function(keyval__4948__auto__) {
      return cljs.core.pr_sequential_writer.call(null, writer__4945__auto__, cljs.core.pr_writer, "", " ", "", opts__4946__auto__, keyval__4948__auto__);
    };
  }(this__4944__auto____$1);
  return cljs.core.pr_sequential_writer.call(null, writer__4945__auto__, pr_pair__4947__auto__, "#garden.types.CSSAtRule{", ", ", "}", opts__4946__auto__, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "identifier", "identifier", -805503498), self__.identifier], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
  [new cljs.core.Keyword(null, "value", "value", 305978217), self__.value], null)], null), self__.__extmap));
};
garden.types.CSSAtRule.prototype.cljs$core$IMeta$_meta$arity$1 = function(this__4928__auto__) {
  var self__ = this;
  var this__4928__auto____$1 = this;
  return self__.__meta;
};
garden.types.CSSAtRule.prototype.cljs$core$ICloneable$_clone$arity$1 = function(this__4924__auto__) {
  var self__ = this;
  var this__4924__auto____$1 = this;
  return new garden.types.CSSAtRule(self__.identifier, self__.value, self__.__meta, self__.__extmap, self__.__hash);
};
garden.types.CSSAtRule.prototype.cljs$core$ICounted$_count$arity$1 = function(this__4934__auto__) {
  var self__ = this;
  var this__4934__auto____$1 = this;
  return 2 + cljs.core.count.call(null, self__.__extmap);
};
garden.types.CSSAtRule.prototype.cljs$core$IHash$_hash$arity$1 = function(this__4925__auto__) {
  var self__ = this;
  var this__4925__auto____$1 = this;
  var h__4751__auto__ = self__.__hash;
  if (!(h__4751__auto__ == null)) {
    return h__4751__auto__;
  } else {
    var h__4751__auto____$1 = cljs.core.hash_imap.call(null, this__4925__auto____$1);
    self__.__hash = h__4751__auto____$1;
    return h__4751__auto____$1;
  }
};
garden.types.CSSAtRule.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this__4926__auto__, other__4927__auto__) {
  var self__ = this;
  var this__4926__auto____$1 = this;
  if (cljs.core.truth_(function() {
    var and__4323__auto__ = other__4927__auto__;
    if (cljs.core.truth_(and__4323__auto__)) {
      var and__4323__auto____$1 = this__4926__auto____$1.constructor === other__4927__auto__.constructor;
      if (and__4323__auto____$1) {
        return cljs.core.equiv_map.call(null, this__4926__auto____$1, other__4927__auto__);
      } else {
        return and__4323__auto____$1;
      }
    } else {
      return and__4323__auto__;
    }
  }())) {
    return true;
  } else {
    return false;
  }
};
garden.types.CSSAtRule.prototype.cljs$core$IMap$_dissoc$arity$2 = function(this__4939__auto__, k__4940__auto__) {
  var self__ = this;
  var this__4939__auto____$1 = this;
  if (cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "value", "value", 305978217), null, new cljs.core.Keyword(null, "identifier", "identifier", -805503498), null], null), null), k__4940__auto__)) {
    return cljs.core.dissoc.call(null, cljs.core.with_meta.call(null, cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, this__4939__auto____$1), self__.__meta), k__4940__auto__);
  } else {
    return new garden.types.CSSAtRule(self__.identifier, self__.value, self__.__meta, cljs.core.not_empty.call(null, cljs.core.dissoc.call(null, self__.__extmap, k__4940__auto__)), null);
  }
};
garden.types.CSSAtRule.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(this__4937__auto__, k__4938__auto__, G__15577) {
  var self__ = this;
  var this__4937__auto____$1 = this;
  var pred__15581 = cljs.core.keyword_identical_QMARK_;
  var expr__15582 = k__4938__auto__;
  if (cljs.core.truth_(pred__15581.call(null, new cljs.core.Keyword(null, "identifier", "identifier", -805503498), expr__15582))) {
    return new garden.types.CSSAtRule(G__15577, self__.value, self__.__meta, self__.__extmap, null);
  } else {
    if (cljs.core.truth_(pred__15581.call(null, new cljs.core.Keyword(null, "value", "value", 305978217), expr__15582))) {
      return new garden.types.CSSAtRule(self__.identifier, G__15577, self__.__meta, self__.__extmap, null);
    } else {
      return new garden.types.CSSAtRule(self__.identifier, self__.value, self__.__meta, cljs.core.assoc.call(null, self__.__extmap, k__4938__auto__, G__15577), null);
    }
  }
};
garden.types.CSSAtRule.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this__4942__auto__) {
  var self__ = this;
  var this__4942__auto____$1 = this;
  return cljs.core.seq.call(null, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "identifier", "identifier", -805503498), self__.identifier], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "value", "value", 305978217), self__.value], null)], null), self__.__extmap));
};
garden.types.CSSAtRule.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this__4929__auto__, G__15577) {
  var self__ = this;
  var this__4929__auto____$1 = this;
  return new garden.types.CSSAtRule(self__.identifier, self__.value, G__15577, self__.__extmap, self__.__hash);
};
garden.types.CSSAtRule.prototype.cljs$core$ICollection$_conj$arity$2 = function(this__4935__auto__, entry__4936__auto__) {
  var self__ = this;
  var this__4935__auto____$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry__4936__auto__)) {
    return cljs.core._assoc.call(null, this__4935__auto____$1, cljs.core._nth.call(null, entry__4936__auto__, 0), cljs.core._nth.call(null, entry__4936__auto__, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, this__4935__auto____$1, entry__4936__auto__);
  }
};
garden.types.CSSAtRule.cljs$lang$type = true;
garden.types.CSSAtRule.cljs$lang$ctorPrSeq = function(this__4964__auto__) {
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, "garden.types/CSSAtRule");
};
garden.types.CSSAtRule.cljs$lang$ctorPrWriter = function(this__4964__auto__, writer__4965__auto__) {
  return cljs.core._write.call(null, writer__4965__auto__, "garden.types/CSSAtRule");
};
garden.types.__GT_CSSAtRule = function garden$types$__GT_CSSAtRule(identifier, value) {
  return new garden.types.CSSAtRule(identifier, value, null, null, null);
};
garden.types.map__GT_CSSAtRule = function garden$types$map__GT_CSSAtRule(G__15579) {
  return new garden.types.CSSAtRule((new cljs.core.Keyword(null, "identifier", "identifier", -805503498)).cljs$core$IFn$_invoke$arity$1(G__15579), (new cljs.core.Keyword(null, "value", "value", 305978217)).cljs$core$IFn$_invoke$arity$1(G__15579), null, cljs.core.dissoc.call(null, G__15579, new cljs.core.Keyword(null, "identifier", "identifier", -805503498), new cljs.core.Keyword(null, "value", "value", 305978217)), null);
};
goog.provide("goog.string.format");
goog.require("goog.string");
goog.string.format = function(formatString, var_args) {
  var args = Array.prototype.slice.call(arguments);
  var template = args.shift();
  if (typeof template == "undefined") {
    throw Error("[goog.string.format] Template required");
  }
  var formatRe = /%([0\-\ \+]*)(\d+)?(\.(\d+))?([%sfdiu])/g;
  function replacerDemuxer(match, flags, width, dotp, precision, type, offset, wholeString) {
    if (type == "%") {
      return "%";
    }
    var value = args.shift();
    if (typeof value == "undefined") {
      throw Error("[goog.string.format] Not enough arguments");
    }
    arguments[0] = value;
    return goog.string.format.demuxes_[type].apply(null, arguments);
  }
  return template.replace(formatRe, replacerDemuxer);
};
goog.string.format.demuxes_ = {};
goog.string.format.demuxes_["s"] = function(value, flags, width, dotp, precision, type, offset, wholeString) {
  var replacement = value;
  if (isNaN(width) || width == "" || replacement.length >= width) {
    return replacement;
  }
  if (flags.indexOf("-", 0) > -1) {
    replacement = replacement + goog.string.repeat(" ", width - replacement.length);
  } else {
    replacement = goog.string.repeat(" ", width - replacement.length) + replacement;
  }
  return replacement;
};
goog.string.format.demuxes_["f"] = function(value, flags, width, dotp, precision, type, offset, wholeString) {
  var replacement = value.toString();
  if (!(isNaN(precision) || precision == "")) {
    replacement = value.toFixed(precision);
  }
  var sign;
  if (value < 0) {
    sign = "-";
  } else {
    if (flags.indexOf("+") >= 0) {
      sign = "+";
    } else {
      if (flags.indexOf(" ") >= 0) {
        sign = " ";
      } else {
        sign = "";
      }
    }
  }
  if (value >= 0) {
    replacement = sign + replacement;
  }
  if (isNaN(width) || replacement.length >= width) {
    return replacement;
  }
  replacement = isNaN(precision) ? Math.abs(value).toString() : Math.abs(value).toFixed(precision);
  var padCount = width - replacement.length - sign.length;
  if (flags.indexOf("-", 0) >= 0) {
    replacement = sign + replacement + goog.string.repeat(" ", padCount);
  } else {
    var paddingChar = flags.indexOf("0", 0) >= 0 ? "0" : " ";
    replacement = sign + goog.string.repeat(paddingChar, padCount) + replacement;
  }
  return replacement;
};
goog.string.format.demuxes_["d"] = function(value, flags, width, dotp, precision, type, offset, wholeString) {
  return goog.string.format.demuxes_["f"](parseInt(value, 10), flags, width, dotp, 0, type, offset, wholeString);
};
goog.string.format.demuxes_["i"] = goog.string.format.demuxes_["d"];
goog.string.format.demuxes_["u"] = goog.string.format.demuxes_["d"];
goog.provide("garden.util");
goog.require("cljs.core");
goog.require("goog.string.format");
goog.require("goog.string");
goog.require("garden.types");
goog.require("clojure.string");
garden.util.format = function garden$util$format() {
  var argseq__5375__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return garden.util.format.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5375__auto__);
};
garden.util.format.cljs$core$IFn$_invoke$arity$variadic = function(fmt, args) {
  return cljs.core.apply.call(null, goog.string.format, fmt, args);
};
garden.util.format.cljs$lang$maxFixedArity = 1;
garden.util.format.cljs$lang$applyTo = function(seq15527) {
  var G__15528 = cljs.core.first.call(null, seq15527);
  var seq15527__$1 = cljs.core.next.call(null, seq15527);
  return garden.util.format.cljs$core$IFn$_invoke$arity$variadic(G__15528, seq15527__$1);
};
garden.util.ToString = function() {
  var obj15530 = {};
  return obj15530;
}();
garden.util.to_str = function garden$util$to_str(this$) {
  if (function() {
    var and__4323__auto__ = this$;
    if (and__4323__auto__) {
      return this$.garden$util$ToString$to_str$arity$1;
    } else {
      return and__4323__auto__;
    }
  }()) {
    return this$.garden$util$ToString$to_str$arity$1(this$);
  } else {
    var x__4971__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4335__auto__ = garden.util.to_str[goog.typeOf(x__4971__auto__)];
      if (or__4335__auto__) {
        return or__4335__auto__;
      } else {
        var or__4335__auto____$1 = garden.util.to_str["_"];
        if (or__4335__auto____$1) {
          return or__4335__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ToString.to-str", this$);
        }
      }
    }().call(null, this$);
  }
};
garden.util.ToString["null"] = true;
garden.util.to_str["null"] = function(this$) {
  return "";
};
garden.util.ToString["_"] = true;
garden.util.to_str["_"] = function(this$) {
  return[cljs.core.str(this$)].join("");
};
cljs.core.Keyword.prototype.garden$util$ToString$ = true;
cljs.core.Keyword.prototype.garden$util$ToString$to_str$arity$1 = function(this$) {
  var this$__$1 = this;
  return cljs.core.name.call(null, this$__$1);
};
garden.util.as_str = function garden$util$as_str() {
  var argseq__5375__auto__ = 0 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 0), 0) : null;
  return garden.util.as_str.cljs$core$IFn$_invoke$arity$variadic(argseq__5375__auto__);
};
garden.util.as_str.cljs$core$IFn$_invoke$arity$variadic = function(args) {
  return cljs.core.apply.call(null, cljs.core.str, cljs.core.map.call(null, garden.util.to_str, args));
};
garden.util.as_str.cljs$lang$maxFixedArity = 0;
garden.util.as_str.cljs$lang$applyTo = function(seq15531) {
  return garden.util.as_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq.call(null, seq15531));
};
garden.util.string__GT_int = function garden$util$string__GT_int() {
  var argseq__5375__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return garden.util.string__GT_int.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5375__auto__);
};
garden.util.string__GT_int.cljs$core$IFn$_invoke$arity$variadic = function(s, p__15534) {
  var vec__15535 = p__15534;
  var radix = cljs.core.nth.call(null, vec__15535, 0, null);
  var radix__$1 = function() {
    var or__4335__auto__ = radix;
    if (cljs.core.truth_(or__4335__auto__)) {
      return or__4335__auto__;
    } else {
      return 10;
    }
  }();
  return parseInt(s, radix__$1);
};
garden.util.string__GT_int.cljs$lang$maxFixedArity = 1;
garden.util.string__GT_int.cljs$lang$applyTo = function(seq15532) {
  var G__15533 = cljs.core.first.call(null, seq15532);
  var seq15532__$1 = cljs.core.next.call(null, seq15532);
  return garden.util.string__GT_int.cljs$core$IFn$_invoke$arity$variadic(G__15533, seq15532__$1);
};
garden.util.int__GT_string = function garden$util$int__GT_string() {
  var argseq__5375__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return garden.util.int__GT_string.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5375__auto__);
};
garden.util.int__GT_string.cljs$core$IFn$_invoke$arity$variadic = function(i, p__15538) {
  var vec__15539 = p__15538;
  var radix = cljs.core.nth.call(null, vec__15539, 0, null);
  var radix__$1 = function() {
    var or__4335__auto__ = radix;
    if (cljs.core.truth_(or__4335__auto__)) {
      return or__4335__auto__;
    } else {
      return 10;
    }
  }();
  return i.toString(radix__$1);
};
garden.util.int__GT_string.cljs$lang$maxFixedArity = 1;
garden.util.int__GT_string.cljs$lang$applyTo = function(seq15536) {
  var G__15537 = cljs.core.first.call(null, seq15536);
  var seq15536__$1 = cljs.core.next.call(null, seq15536);
  return garden.util.int__GT_string.cljs$core$IFn$_invoke$arity$variadic(G__15537, seq15536__$1);
};
garden.util.space_join = function garden$util$space_join(xs) {
  return clojure.string.join.call(null, " ", cljs.core.map.call(null, garden.util.to_str, xs));
};
garden.util.comma_join = function garden$util$comma_join(xs) {
  var ys = function() {
    var iter__5089__auto__ = function garden$util$comma_join_$_iter__15544(s__15545) {
      return new cljs.core.LazySeq(null, function() {
        var s__15545__$1 = s__15545;
        while (true) {
          var temp__4126__auto__ = cljs.core.seq.call(null, s__15545__$1);
          if (temp__4126__auto__) {
            var s__15545__$2 = temp__4126__auto__;
            if (cljs.core.chunked_seq_QMARK_.call(null, s__15545__$2)) {
              var c__5087__auto__ = cljs.core.chunk_first.call(null, s__15545__$2);
              var size__5088__auto__ = cljs.core.count.call(null, c__5087__auto__);
              var b__15547 = cljs.core.chunk_buffer.call(null, size__5088__auto__);
              if (function() {
                var i__15546 = 0;
                while (true) {
                  if (i__15546 < size__5088__auto__) {
                    var x = cljs.core._nth.call(null, c__5087__auto__, i__15546);
                    cljs.core.chunk_append.call(null, b__15547, cljs.core.sequential_QMARK_.call(null, x) ? garden.util.space_join.call(null, x) : garden.util.to_str.call(null, x));
                    var G__15548 = i__15546 + 1;
                    i__15546 = G__15548;
                    continue;
                  } else {
                    return true;
                  }
                  break;
                }
              }()) {
                return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__15547), garden$util$comma_join_$_iter__15544.call(null, cljs.core.chunk_rest.call(null, s__15545__$2)));
              } else {
                return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__15547), null);
              }
            } else {
              var x = cljs.core.first.call(null, s__15545__$2);
              return cljs.core.cons.call(null, cljs.core.sequential_QMARK_.call(null, x) ? garden.util.space_join.call(null, x) : garden.util.to_str.call(null, x), garden$util$comma_join_$_iter__15544.call(null, cljs.core.rest.call(null, s__15545__$2)));
            }
          } else {
            return null;
          }
          break;
        }
      }, null, null);
    };
    return iter__5089__auto__.call(null, xs);
  }();
  return clojure.string.join.call(null, ", ", ys);
};
garden.util.wrap_quotes = function garden$util$wrap_quotes(s) {
  return[cljs.core.str('"'), cljs.core.str(s), cljs.core.str('"')].join("");
};
garden.util.record_QMARK_ = function garden$util$record_QMARK_(x) {
  var G__15550 = x;
  if (G__15550) {
    var bit__5009__auto__ = G__15550.cljs$lang$protocol_mask$partition0$ & 67108864;
    if (bit__5009__auto__ || G__15550.cljs$core$IRecord$) {
      return true;
    } else {
      if (!G__15550.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IRecord, G__15550);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IRecord, G__15550);
  }
};
garden.util.hash_map_QMARK_ = function garden$util$hash_map_QMARK_(x) {
  return cljs.core.map_QMARK_.call(null, x) && cljs.core.not.call(null, garden.util.record_QMARK_.call(null, x));
};
garden.util.rule_QMARK_ = cljs.core.vector_QMARK_;
garden.util.declaration_QMARK_ = garden.util.hash_map_QMARK_;
garden.util.at_rule_QMARK_ = function garden$util$at_rule_QMARK_(x) {
  return x instanceof garden.types.CSSAtRule;
};
garden.util.at_media_QMARK_ = function garden$util$at_media_QMARK_(x) {
  var and__4323__auto__ = garden.util.at_rule_QMARK_.call(null, x);
  if (cljs.core.truth_(and__4323__auto__)) {
    return cljs.core._EQ_.call(null, (new cljs.core.Keyword(null, "identifier", "identifier", -805503498)).cljs$core$IFn$_invoke$arity$1(x), new cljs.core.Keyword(null, "media", "media", -1066138403));
  } else {
    return and__4323__auto__;
  }
};
garden.util.at_keyframes_QMARK_ = function garden$util$at_keyframes_QMARK_(x) {
  var and__4323__auto__ = garden.util.at_rule_QMARK_.call(null, x);
  if (cljs.core.truth_(and__4323__auto__)) {
    return cljs.core._EQ_.call(null, (new cljs.core.Keyword(null, "identifier", "identifier", -805503498)).cljs$core$IFn$_invoke$arity$1(x), new cljs.core.Keyword(null, "keyframes", "keyframes", -1437976012));
  } else {
    return and__4323__auto__;
  }
};
garden.util.at_import_QMARK_ = function garden$util$at_import_QMARK_(x) {
  var and__4323__auto__ = garden.util.at_rule_QMARK_.call(null, x);
  if (cljs.core.truth_(and__4323__auto__)) {
    return cljs.core._EQ_.call(null, (new cljs.core.Keyword(null, "identifier", "identifier", -805503498)).cljs$core$IFn$_invoke$arity$1(x), new cljs.core.Keyword(null, "import", "import", -1399500709));
  } else {
    return and__4323__auto__;
  }
};
garden.util.prefix = function garden$util$prefix(p, s) {
  var p__$1 = garden.util.to_str.call(null, p);
  if (cljs.core._EQ_.call(null, "-", cljs.core.last.call(null, p__$1))) {
    return[cljs.core.str(p__$1), cljs.core.str(s)].join("");
  } else {
    return[cljs.core.str(p__$1), cljs.core.str("-"), cljs.core.str(s)].join("");
  }
};
garden.util.vendor_prefix = function garden$util$vendor_prefix(p, s) {
  var p__$1 = garden.util.to_str.call(null, p);
  if (cljs.core._EQ_.call(null, "-", cljs.core.first.call(null, p__$1))) {
    return garden.util.prefix.call(null, p__$1, s);
  } else {
    return garden.util.prefix.call(null, [cljs.core.str("-"), cljs.core.str(p__$1)].join(""), s);
  }
};
garden.util.natural_QMARK_ = function garden$util$natural_QMARK_(n) {
  return cljs.core.integer_QMARK_.call(null, n) && n > 0;
};
garden.util.between_QMARK_ = function garden$util$between_QMARK_(n, a, b) {
  var bottom = function() {
    var x__4654__auto__ = a;
    var y__4655__auto__ = b;
    return x__4654__auto__ < y__4655__auto__ ? x__4654__auto__ : y__4655__auto__;
  }();
  var top = function() {
    var x__4647__auto__ = a;
    var y__4648__auto__ = b;
    return x__4647__auto__ > y__4648__auto__ ? x__4647__auto__ : y__4648__auto__;
  }();
  return n >= bottom && n <= top;
};
garden.util.clip = function garden$util$clip(a, b, n) {
  var vec__15552 = a <= b ? new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [a, b], null) : new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [b, a], null);
  var a__$1 = cljs.core.nth.call(null, vec__15552, 0, null);
  var b__$1 = cljs.core.nth.call(null, vec__15552, 1, null);
  var x__4647__auto__ = a__$1;
  var y__4648__auto__ = function() {
    var x__4654__auto__ = b__$1;
    var y__4655__auto__ = n;
    return x__4654__auto__ < y__4655__auto__ ? x__4654__auto__ : y__4655__auto__;
  }();
  return x__4647__auto__ > y__4648__auto__ ? x__4647__auto__ : y__4648__auto__;
};
garden.util.average = function garden$util$average() {
  var argseq__5375__auto__ = 2 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0) : null;
  return garden.util.average.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5375__auto__);
};
garden.util.average.cljs$core$IFn$_invoke$arity$variadic = function(n, m, more) {
  return cljs.core.apply.call(null, cljs.core._PLUS_, n, m, more) / (2 + cljs.core.count.call(null, more));
};
garden.util.average.cljs$lang$maxFixedArity = 2;
garden.util.average.cljs$lang$applyTo = function(seq15553) {
  var G__15554 = cljs.core.first.call(null, seq15553);
  var seq15553__$1 = cljs.core.next.call(null, seq15553);
  var G__15555 = cljs.core.first.call(null, seq15553__$1);
  var seq15553__$2 = cljs.core.next.call(null, seq15553__$1);
  return garden.util.average.cljs$core$IFn$_invoke$arity$variadic(G__15554, G__15555, seq15553__$2);
};
garden.util.cartesian_product = function garden$util$cartesian_product() {
  var argseq__5375__auto__ = 0 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 0), 0) : null;
  return garden.util.cartesian_product.cljs$core$IFn$_invoke$arity$variadic(argseq__5375__auto__);
};
garden.util.cartesian_product.cljs$core$IFn$_invoke$arity$variadic = function(seqs) {
  var v_original_seqs = cljs.core.vec.call(null, seqs);
  var step = function(v_original_seqs) {
    return function garden$util$step(v_seqs) {
      var increment = function(v_original_seqs) {
        return function(v_seqs__$1) {
          var i = cljs.core.count.call(null, v_seqs__$1) - 1;
          var v_seqs__$2 = v_seqs__$1;
          while (true) {
            if (cljs.core._EQ_.call(null, i, -1)) {
              return null;
            } else {
              var temp__4124__auto__ = cljs.core.next.call(null, v_seqs__$2.call(null, i));
              if (temp__4124__auto__) {
                var rst = temp__4124__auto__;
                return cljs.core.assoc.call(null, v_seqs__$2, i, rst);
              } else {
                var G__15557 = i - 1;
                var G__15558 = cljs.core.assoc.call(null, v_seqs__$2, i, v_original_seqs.call(null, i));
                i = G__15557;
                v_seqs__$2 = G__15558;
                continue;
              }
            }
            break;
          }
        };
      }(v_original_seqs);
      if (cljs.core.truth_(v_seqs)) {
        return cljs.core.cons.call(null, cljs.core.map.call(null, cljs.core.first, v_seqs), new cljs.core.LazySeq(null, function(increment, v_original_seqs) {
          return function() {
            return garden$util$step.call(null, increment.call(null, v_seqs));
          };
        }(increment, v_original_seqs), null, null));
      } else {
        return null;
      }
    };
  }(v_original_seqs);
  if (cljs.core.every_QMARK_.call(null, cljs.core.seq, seqs)) {
    return new cljs.core.LazySeq(null, function(v_original_seqs, step) {
      return function() {
        return step.call(null, v_original_seqs);
      };
    }(v_original_seqs, step), null, null);
  } else {
    return null;
  }
};
garden.util.cartesian_product.cljs$lang$maxFixedArity = 0;
garden.util.cartesian_product.cljs$lang$applyTo = function(seq15556) {
  return garden.util.cartesian_product.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq.call(null, seq15556));
};
goog.provide("cljs.reader");
goog.require("cljs.core");
goog.require("goog.string.StringBuffer");
goog.require("goog.string");
cljs.reader.PushbackReader = function() {
  var obj15647 = {};
  return obj15647;
}();
cljs.reader.read_char = function cljs$reader$read_char(reader) {
  if (function() {
    var and__4323__auto__ = reader;
    if (and__4323__auto__) {
      return reader.cljs$reader$PushbackReader$read_char$arity$1;
    } else {
      return and__4323__auto__;
    }
  }()) {
    return reader.cljs$reader$PushbackReader$read_char$arity$1(reader);
  } else {
    var x__4971__auto__ = reader == null ? null : reader;
    return function() {
      var or__4335__auto__ = cljs.reader.read_char[goog.typeOf(x__4971__auto__)];
      if (or__4335__auto__) {
        return or__4335__auto__;
      } else {
        var or__4335__auto____$1 = cljs.reader.read_char["_"];
        if (or__4335__auto____$1) {
          return or__4335__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "PushbackReader.read-char", reader);
        }
      }
    }().call(null, reader);
  }
};
cljs.reader.unread = function cljs$reader$unread(reader, ch) {
  if (function() {
    var and__4323__auto__ = reader;
    if (and__4323__auto__) {
      return reader.cljs$reader$PushbackReader$unread$arity$2;
    } else {
      return and__4323__auto__;
    }
  }()) {
    return reader.cljs$reader$PushbackReader$unread$arity$2(reader, ch);
  } else {
    var x__4971__auto__ = reader == null ? null : reader;
    return function() {
      var or__4335__auto__ = cljs.reader.unread[goog.typeOf(x__4971__auto__)];
      if (or__4335__auto__) {
        return or__4335__auto__;
      } else {
        var or__4335__auto____$1 = cljs.reader.unread["_"];
        if (or__4335__auto____$1) {
          return or__4335__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "PushbackReader.unread", reader);
        }
      }
    }().call(null, reader, ch);
  }
};
cljs.reader.StringPushbackReader = function(s, buffer, idx) {
  this.s = s;
  this.buffer = buffer;
  this.idx = idx;
};
cljs.reader.StringPushbackReader.prototype.cljs$reader$PushbackReader$ = true;
cljs.reader.StringPushbackReader.prototype.cljs$reader$PushbackReader$read_char$arity$1 = function(reader) {
  var self__ = this;
  var reader__$1 = this;
  if (self__.buffer.length === 0) {
    self__.idx = self__.idx + 1;
    return self__.s[self__.idx];
  } else {
    return self__.buffer.pop();
  }
};
cljs.reader.StringPushbackReader.prototype.cljs$reader$PushbackReader$unread$arity$2 = function(reader, ch) {
  var self__ = this;
  var reader__$1 = this;
  return self__.buffer.push(ch);
};
cljs.reader.StringPushbackReader.cljs$lang$type = true;
cljs.reader.StringPushbackReader.cljs$lang$ctorStr = "cljs.reader/StringPushbackReader";
cljs.reader.StringPushbackReader.cljs$lang$ctorPrWriter = function(this__4914__auto__, writer__4915__auto__, opt__4916__auto__) {
  return cljs.core._write.call(null, writer__4915__auto__, "cljs.reader/StringPushbackReader");
};
cljs.reader.__GT_StringPushbackReader = function cljs$reader$__GT_StringPushbackReader(s, buffer, idx) {
  return new cljs.reader.StringPushbackReader(s, buffer, idx);
};
cljs.reader.push_back_reader = function cljs$reader$push_back_reader(s) {
  return new cljs.reader.StringPushbackReader(s, [], -1);
};
cljs.reader.whitespace_QMARK_ = function cljs$reader$whitespace_QMARK_(ch) {
  var or__4335__auto__ = goog.string.isBreakingWhitespace(ch);
  if (cljs.core.truth_(or__4335__auto__)) {
    return or__4335__auto__;
  } else {
    return "," === ch;
  }
};
cljs.reader.numeric_QMARK_ = function cljs$reader$numeric_QMARK_(ch) {
  return goog.string.isNumeric(ch);
};
cljs.reader.comment_prefix_QMARK_ = function cljs$reader$comment_prefix_QMARK_(ch) {
  return ";" === ch;
};
cljs.reader.number_literal_QMARK_ = function cljs$reader$number_literal_QMARK_(reader, initch) {
  return cljs.reader.numeric_QMARK_.call(null, initch) || ("+" === initch || "-" === initch) && cljs.reader.numeric_QMARK_.call(null, function() {
    var next_ch = cljs.reader.read_char.call(null, reader);
    cljs.reader.unread.call(null, reader, next_ch);
    return next_ch;
  }());
};
cljs.reader.reader_error = function cljs$reader$reader_error() {
  var argseq__5375__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return cljs.reader.reader_error.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5375__auto__);
};
cljs.reader.reader_error.cljs$core$IFn$_invoke$arity$variadic = function(rdr, msg) {
  throw new Error(cljs.core.apply.call(null, cljs.core.str, msg));
};
cljs.reader.reader_error.cljs$lang$maxFixedArity = 1;
cljs.reader.reader_error.cljs$lang$applyTo = function(seq15648) {
  var G__15649 = cljs.core.first.call(null, seq15648);
  var seq15648__$1 = cljs.core.next.call(null, seq15648);
  return cljs.reader.reader_error.cljs$core$IFn$_invoke$arity$variadic(G__15649, seq15648__$1);
};
cljs.reader.macro_terminating_QMARK_ = function cljs$reader$macro_terminating_QMARK_(ch) {
  var and__4323__auto__ = !(ch === "#");
  if (and__4323__auto__) {
    var and__4323__auto____$1 = !(ch === "'");
    if (and__4323__auto____$1) {
      var and__4323__auto____$2 = !(ch === ":");
      if (and__4323__auto____$2) {
        return cljs.reader.macros.call(null, ch);
      } else {
        return and__4323__auto____$2;
      }
    } else {
      return and__4323__auto____$1;
    }
  } else {
    return and__4323__auto__;
  }
};
cljs.reader.read_token = function cljs$reader$read_token(rdr, initch) {
  var sb = new goog.string.StringBuffer(initch);
  var ch = cljs.reader.read_char.call(null, rdr);
  while (true) {
    if (ch == null || cljs.reader.whitespace_QMARK_.call(null, ch) || cljs.reader.macro_terminating_QMARK_.call(null, ch)) {
      cljs.reader.unread.call(null, rdr, ch);
      return sb.toString();
    } else {
      var G__15650 = function() {
        sb.append(ch);
        return sb;
      }();
      var G__15651 = cljs.reader.read_char.call(null, rdr);
      sb = G__15650;
      ch = G__15651;
      continue;
    }
    break;
  }
};
cljs.reader.skip_line = function cljs$reader$skip_line(reader, _) {
  while (true) {
    var ch = cljs.reader.read_char.call(null, reader);
    if (ch === "\n" || ch === "\r" || ch == null) {
      return reader;
    } else {
      continue;
    }
    break;
  }
};
cljs.reader.int_pattern = cljs.core.re_pattern.call(null, "^([-+]?)(?:(0)|([1-9][0-9]*)|0[xX]([0-9A-Fa-f]+)|0([0-7]+)|([1-9][0-9]?)[rR]([0-9A-Za-z]+))(N)?$");
cljs.reader.ratio_pattern = cljs.core.re_pattern.call(null, "^([-+]?[0-9]+)/([0-9]+)$");
cljs.reader.float_pattern = cljs.core.re_pattern.call(null, "^([-+]?[0-9]+(\\.[0-9]*)?([eE][-+]?[0-9]+)?)(M)?$");
cljs.reader.symbol_pattern = cljs.core.re_pattern.call(null, "^[:]?([^0-9/].*/)?([^0-9/][^/]*)$");
cljs.reader.re_matches_STAR_ = function cljs$reader$re_matches_STAR_(re, s) {
  var matches = re.exec(s);
  if (!(matches == null) && matches[0] === s) {
    if (matches.length === 1) {
      return matches[0];
    } else {
      return matches;
    }
  } else {
    return null;
  }
};
cljs.reader.match_int = function cljs$reader$match_int(s) {
  var groups = cljs.reader.re_matches_STAR_.call(null, cljs.reader.int_pattern, s);
  var ie8_fix = groups[2];
  var zero = cljs.core._EQ_.call(null, ie8_fix, "") ? null : ie8_fix;
  if (!(zero == null)) {
    return 0;
  } else {
    var a = cljs.core.truth_(groups[3]) ? [groups[3], 10] : cljs.core.truth_(groups[4]) ? [groups[4], 16] : cljs.core.truth_(groups[5]) ? [groups[5], 8] : cljs.core.truth_(groups[6]) ? [groups[7], parseInt(groups[6], 10)] : [null, null];
    var n = a[0];
    var radix = a[1];
    if (n == null) {
      return null;
    } else {
      var parsed = parseInt(n, radix);
      if ("-" === groups[1]) {
        return-parsed;
      } else {
        return parsed;
      }
    }
  }
};
cljs.reader.match_ratio = function cljs$reader$match_ratio(s) {
  var groups = cljs.reader.re_matches_STAR_.call(null, cljs.reader.ratio_pattern, s);
  var numinator = groups[1];
  var denominator = groups[2];
  return parseInt(numinator, 10) / parseInt(denominator, 10);
};
cljs.reader.match_float = function cljs$reader$match_float(s) {
  return parseFloat(s);
};
cljs.reader.match_number = function cljs$reader$match_number(s) {
  if (cljs.core.truth_(cljs.reader.re_matches_STAR_.call(null, cljs.reader.int_pattern, s))) {
    return cljs.reader.match_int.call(null, s);
  } else {
    if (cljs.core.truth_(cljs.reader.re_matches_STAR_.call(null, cljs.reader.ratio_pattern, s))) {
      return cljs.reader.match_ratio.call(null, s);
    } else {
      if (cljs.core.truth_(cljs.reader.re_matches_STAR_.call(null, cljs.reader.float_pattern, s))) {
        return cljs.reader.match_float.call(null, s);
      } else {
        return null;
      }
    }
  }
};
cljs.reader.escape_char_map = function cljs$reader$escape_char_map(c) {
  if (c === "t") {
    return "\t";
  } else {
    if (c === "r") {
      return "\r";
    } else {
      if (c === "n") {
        return "\n";
      } else {
        if (c === "\\") {
          return "\\";
        } else {
          if (c === '"') {
            return'"';
          } else {
            if (c === "b") {
              return "\b";
            } else {
              if (c === "f") {
                return "\f";
              } else {
                return null;
              }
            }
          }
        }
      }
    }
  }
};
cljs.reader.read_2_chars = function cljs$reader$read_2_chars(reader) {
  return(new goog.string.StringBuffer(cljs.reader.read_char.call(null, reader), cljs.reader.read_char.call(null, reader))).toString();
};
cljs.reader.read_4_chars = function cljs$reader$read_4_chars(reader) {
  return(new goog.string.StringBuffer(cljs.reader.read_char.call(null, reader), cljs.reader.read_char.call(null, reader), cljs.reader.read_char.call(null, reader), cljs.reader.read_char.call(null, reader))).toString();
};
cljs.reader.unicode_2_pattern = cljs.core.re_pattern.call(null, "^[0-9A-Fa-f]{2}$");
cljs.reader.unicode_4_pattern = cljs.core.re_pattern.call(null, "^[0-9A-Fa-f]{4}$");
cljs.reader.validate_unicode_escape = function cljs$reader$validate_unicode_escape(unicode_pattern, reader, escape_char, unicode_str) {
  if (cljs.core.truth_(cljs.core.re_matches.call(null, unicode_pattern, unicode_str))) {
    return unicode_str;
  } else {
    return cljs.reader.reader_error.call(null, reader, "Unexpected unicode escape \\", escape_char, unicode_str);
  }
};
cljs.reader.make_unicode_char = function cljs$reader$make_unicode_char(code_str) {
  var code = parseInt(code_str, 16);
  return String.fromCharCode(code);
};
cljs.reader.escape_char = function cljs$reader$escape_char(buffer, reader) {
  var ch = cljs.reader.read_char.call(null, reader);
  var mapresult = cljs.reader.escape_char_map.call(null, ch);
  if (cljs.core.truth_(mapresult)) {
    return mapresult;
  } else {
    if (ch === "x") {
      return cljs.reader.make_unicode_char.call(null, cljs.reader.validate_unicode_escape.call(null, cljs.reader.unicode_2_pattern, reader, ch, cljs.reader.read_2_chars.call(null, reader)));
    } else {
      if (ch === "u") {
        return cljs.reader.make_unicode_char.call(null, cljs.reader.validate_unicode_escape.call(null, cljs.reader.unicode_4_pattern, reader, ch, cljs.reader.read_4_chars.call(null, reader)));
      } else {
        if (cljs.reader.numeric_QMARK_.call(null, ch)) {
          return String.fromCharCode(ch);
        } else {
          return cljs.reader.reader_error.call(null, reader, "Unexpected unicode escape \\", ch);
        }
      }
    }
  }
};
cljs.reader.read_past = function cljs$reader$read_past(pred, rdr) {
  var ch = cljs.reader.read_char.call(null, rdr);
  while (true) {
    if (cljs.core.truth_(pred.call(null, ch))) {
      var G__15652 = cljs.reader.read_char.call(null, rdr);
      ch = G__15652;
      continue;
    } else {
      return ch;
    }
    break;
  }
};
cljs.reader.read_delimited_list = function cljs$reader$read_delimited_list(delim, rdr, recursive_QMARK_) {
  var a = cljs.core.transient$.call(null, cljs.core.PersistentVector.EMPTY);
  while (true) {
    var ch = cljs.reader.read_past.call(null, cljs.reader.whitespace_QMARK_, rdr);
    if (cljs.core.truth_(ch)) {
    } else {
      cljs.reader.reader_error.call(null, rdr, "EOF while reading");
    }
    if (delim === ch) {
      return cljs.core.persistent_BANG_.call(null, a);
    } else {
      var temp__4124__auto__ = cljs.reader.macros.call(null, ch);
      if (cljs.core.truth_(temp__4124__auto__)) {
        var macrofn = temp__4124__auto__;
        var mret = macrofn.call(null, rdr, ch);
        var G__15653 = mret === rdr ? a : cljs.core.conj_BANG_.call(null, a, mret);
        a = G__15653;
        continue;
      } else {
        cljs.reader.unread.call(null, rdr, ch);
        var o = cljs.reader.read.call(null, rdr, true, null, recursive_QMARK_);
        var G__15654 = o === rdr ? a : cljs.core.conj_BANG_.call(null, a, o);
        a = G__15654;
        continue;
      }
    }
    break;
  }
};
cljs.reader.not_implemented = function cljs$reader$not_implemented(rdr, ch) {
  return cljs.reader.reader_error.call(null, rdr, "Reader for ", ch, " not implemented yet");
};
cljs.reader.read_dispatch = function cljs$reader$read_dispatch(rdr, _) {
  var ch = cljs.reader.read_char.call(null, rdr);
  var dm = cljs.reader.dispatch_macros.call(null, ch);
  if (cljs.core.truth_(dm)) {
    return dm.call(null, rdr, _);
  } else {
    var temp__4124__auto__ = cljs.reader.maybe_read_tagged_type.call(null, rdr, ch);
    if (cljs.core.truth_(temp__4124__auto__)) {
      var obj = temp__4124__auto__;
      return obj;
    } else {
      return cljs.reader.reader_error.call(null, rdr, "No dispatch macro for ", ch);
    }
  }
};
cljs.reader.read_unmatched_delimiter = function cljs$reader$read_unmatched_delimiter(rdr, ch) {
  return cljs.reader.reader_error.call(null, rdr, "Unmatched delimiter ", ch);
};
cljs.reader.read_list = function cljs$reader$read_list(rdr, _) {
  return cljs.core.apply.call(null, cljs.core.list, cljs.reader.read_delimited_list.call(null, ")", rdr, true));
};
cljs.reader.read_comment = cljs.reader.skip_line;
cljs.reader.read_vector = function cljs$reader$read_vector(rdr, _) {
  return cljs.reader.read_delimited_list.call(null, "]", rdr, true);
};
cljs.reader.read_map = function cljs$reader$read_map(rdr, _) {
  var l = cljs.reader.read_delimited_list.call(null, "}", rdr, true);
  if (cljs.core.odd_QMARK_.call(null, cljs.core.count.call(null, l))) {
    cljs.reader.reader_error.call(null, rdr, "Map literal must contain an even number of forms");
  } else {
  }
  return cljs.core.apply.call(null, cljs.core.hash_map, l);
};
cljs.reader.read_number = function cljs$reader$read_number(reader, initch) {
  var buffer = new goog.string.StringBuffer(initch);
  var ch = cljs.reader.read_char.call(null, reader);
  while (true) {
    if (cljs.core.truth_(function() {
      var or__4335__auto__ = ch == null;
      if (or__4335__auto__) {
        return or__4335__auto__;
      } else {
        var or__4335__auto____$1 = cljs.reader.whitespace_QMARK_.call(null, ch);
        if (or__4335__auto____$1) {
          return or__4335__auto____$1;
        } else {
          return cljs.reader.macros.call(null, ch);
        }
      }
    }())) {
      cljs.reader.unread.call(null, reader, ch);
      var s = buffer.toString();
      var or__4335__auto__ = cljs.reader.match_number.call(null, s);
      if (cljs.core.truth_(or__4335__auto__)) {
        return or__4335__auto__;
      } else {
        return cljs.reader.reader_error.call(null, reader, "Invalid number format [", s, "]");
      }
    } else {
      var G__15655 = function() {
        buffer.append(ch);
        return buffer;
      }();
      var G__15656 = cljs.reader.read_char.call(null, reader);
      buffer = G__15655;
      ch = G__15656;
      continue;
    }
    break;
  }
};
cljs.reader.read_string_STAR_ = function cljs$reader$read_string_STAR_(reader, _) {
  var buffer = new goog.string.StringBuffer;
  var ch = cljs.reader.read_char.call(null, reader);
  while (true) {
    if (ch == null) {
      return cljs.reader.reader_error.call(null, reader, "EOF while reading");
    } else {
      if ("\\" === ch) {
        var G__15657 = function() {
          buffer.append(cljs.reader.escape_char.call(null, buffer, reader));
          return buffer;
        }();
        var G__15658 = cljs.reader.read_char.call(null, reader);
        buffer = G__15657;
        ch = G__15658;
        continue;
      } else {
        if ('"' === ch) {
          return buffer.toString();
        } else {
          var G__15659 = function() {
            buffer.append(ch);
            return buffer;
          }();
          var G__15660 = cljs.reader.read_char.call(null, reader);
          buffer = G__15659;
          ch = G__15660;
          continue;
        }
      }
    }
    break;
  }
};
cljs.reader.read_raw_string_STAR_ = function cljs$reader$read_raw_string_STAR_(reader, _) {
  var buffer = new goog.string.StringBuffer;
  var ch = cljs.reader.read_char.call(null, reader);
  while (true) {
    if (ch == null) {
      return cljs.reader.reader_error.call(null, reader, "EOF while reading");
    } else {
      if ("\\" === ch) {
        buffer.append(ch);
        var nch = cljs.reader.read_char.call(null, reader);
        if (nch == null) {
          return cljs.reader.reader_error.call(null, reader, "EOF while reading");
        } else {
          var G__15665 = function() {
            var G__15663 = buffer;
            G__15663.append(nch);
            return G__15663;
          }();
          var G__15666 = cljs.reader.read_char.call(null, reader);
          buffer = G__15665;
          ch = G__15666;
          continue;
        }
      } else {
        if ('"' === ch) {
          return buffer.toString();
        } else {
          var G__15667 = function() {
            var G__15664 = buffer;
            G__15664.append(ch);
            return G__15664;
          }();
          var G__15668 = cljs.reader.read_char.call(null, reader);
          buffer = G__15667;
          ch = G__15668;
          continue;
        }
      }
    }
    break;
  }
};
cljs.reader.special_symbols = function cljs$reader$special_symbols(t, not_found) {
  if (t === "nil") {
    return null;
  } else {
    if (t === "true") {
      return true;
    } else {
      if (t === "false") {
        return false;
      } else {
        if (t === "/") {
          return new cljs.core.Symbol(null, "/", "/", -1371932971, null);
        } else {
          return not_found;
        }
      }
    }
  }
};
cljs.reader.read_symbol = function cljs$reader$read_symbol(reader, initch) {
  var token = cljs.reader.read_token.call(null, reader, initch);
  if (cljs.core.truth_(function() {
    var and__4323__auto__ = goog.string.contains(token, "/");
    if (cljs.core.truth_(and__4323__auto__)) {
      return!(token.length === 1);
    } else {
      return and__4323__auto__;
    }
  }())) {
    return cljs.core.symbol.call(null, cljs.core.subs.call(null, token, 0, token.indexOf("/")), cljs.core.subs.call(null, token, token.indexOf("/") + 1, token.length));
  } else {
    return cljs.reader.special_symbols.call(null, token, cljs.core.symbol.call(null, token));
  }
};
cljs.reader.read_keyword = function cljs$reader$read_keyword(reader, initch) {
  var token = cljs.reader.read_token.call(null, reader, cljs.reader.read_char.call(null, reader));
  var a = cljs.reader.re_matches_STAR_.call(null, cljs.reader.symbol_pattern, token);
  var token__$1 = a[0];
  var ns = a[1];
  var name = a[2];
  if (!(void 0 === ns) && ns.substring(ns.length - 2, ns.length) === ":/" || name[name.length - 1] === ":" || !(token__$1.indexOf("::", 1) === -1)) {
    return cljs.reader.reader_error.call(null, reader, "Invalid token: ", token__$1);
  } else {
    if (!(ns == null) && ns.length > 0) {
      return cljs.core.keyword.call(null, ns.substring(0, ns.indexOf("/")), name);
    } else {
      return cljs.core.keyword.call(null, token__$1);
    }
  }
};
cljs.reader.desugar_meta = function cljs$reader$desugar_meta(f) {
  if (f instanceof cljs.core.Symbol) {
    return new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), f], null);
  } else {
    if (typeof f === "string") {
      return new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), f], null);
    } else {
      if (f instanceof cljs.core.Keyword) {
        return new cljs.core.PersistentArrayMap.fromArray([f, true], true, false);
      } else {
        return f;
      }
    }
  }
};
cljs.reader.wrapping_reader = function cljs$reader$wrapping_reader(sym) {
  return function(rdr, _) {
    return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.reader.read.call(null, rdr, true, null, true)), sym);
  };
};
cljs.reader.throwing_reader = function cljs$reader$throwing_reader(msg) {
  return function(rdr, _) {
    return cljs.reader.reader_error.call(null, rdr, msg);
  };
};
cljs.reader.read_meta = function cljs$reader$read_meta(rdr, _) {
  var m = cljs.reader.desugar_meta.call(null, cljs.reader.read.call(null, rdr, true, null, true));
  if (cljs.core.map_QMARK_.call(null, m)) {
  } else {
    cljs.reader.reader_error.call(null, rdr, "Metadata must be Symbol,Keyword,String or Map");
  }
  var o = cljs.reader.read.call(null, rdr, true, null, true);
  if (function() {
    var G__15670 = o;
    if (G__15670) {
      var bit__5009__auto__ = G__15670.cljs$lang$protocol_mask$partition0$ & 262144;
      if (bit__5009__auto__ || G__15670.cljs$core$IWithMeta$) {
        return true;
      } else {
        if (!G__15670.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IWithMeta, G__15670);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IWithMeta, G__15670);
    }
  }()) {
    return cljs.core.with_meta.call(null, o, cljs.core.merge.call(null, cljs.core.meta.call(null, o), m));
  } else {
    return cljs.reader.reader_error.call(null, rdr, "Metadata can only be applied to IWithMetas");
  }
};
cljs.reader.read_set = function cljs$reader$read_set(rdr, _) {
  return cljs.core.set.call(null, cljs.reader.read_delimited_list.call(null, "}", rdr, true));
};
cljs.reader.read_regex = function cljs$reader$read_regex(rdr, ch) {
  return cljs.core.re_pattern.call(null, cljs.reader.read_raw_string_STAR_.call(null, rdr, ch));
};
cljs.reader.read_discard = function cljs$reader$read_discard(rdr, _) {
  cljs.reader.read.call(null, rdr, true, null, true);
  return rdr;
};
cljs.reader.macros = function cljs$reader$macros(c) {
  if (c === '"') {
    return cljs.reader.read_string_STAR_;
  } else {
    if (c === ":") {
      return cljs.reader.read_keyword;
    } else {
      if (c === ";") {
        return cljs.reader.read_comment;
      } else {
        if (c === "'") {
          return cljs.reader.wrapping_reader.call(null, new cljs.core.Symbol(null, "quote", "quote", 1377916282, null));
        } else {
          if (c === "@") {
            return cljs.reader.wrapping_reader.call(null, new cljs.core.Symbol(null, "deref", "deref", 1494944732, null));
          } else {
            if (c === "^") {
              return cljs.reader.read_meta;
            } else {
              if (c === "`") {
                return cljs.reader.not_implemented;
              } else {
                if (c === "~") {
                  return cljs.reader.not_implemented;
                } else {
                  if (c === "(") {
                    return cljs.reader.read_list;
                  } else {
                    if (c === ")") {
                      return cljs.reader.read_unmatched_delimiter;
                    } else {
                      if (c === "[") {
                        return cljs.reader.read_vector;
                      } else {
                        if (c === "]") {
                          return cljs.reader.read_unmatched_delimiter;
                        } else {
                          if (c === "{") {
                            return cljs.reader.read_map;
                          } else {
                            if (c === "}") {
                              return cljs.reader.read_unmatched_delimiter;
                            } else {
                              if (c === "\\") {
                                return cljs.reader.read_char;
                              } else {
                                if (c === "#") {
                                  return cljs.reader.read_dispatch;
                                } else {
                                  return null;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};
cljs.reader.dispatch_macros = function cljs$reader$dispatch_macros(s) {
  if (s === "{") {
    return cljs.reader.read_set;
  } else {
    if (s === "\x3c") {
      return cljs.reader.throwing_reader.call(null, "Unreadable form");
    } else {
      if (s === '"') {
        return cljs.reader.read_regex;
      } else {
        if (s === "!") {
          return cljs.reader.read_comment;
        } else {
          if (s === "_") {
            return cljs.reader.read_discard;
          } else {
            return null;
          }
        }
      }
    }
  }
};
cljs.reader.read = function cljs$reader$read(reader, eof_is_error, sentinel, is_recursive) {
  while (true) {
    var ch = cljs.reader.read_char.call(null, reader);
    if (ch == null) {
      if (cljs.core.truth_(eof_is_error)) {
        return cljs.reader.reader_error.call(null, reader, "EOF while reading");
      } else {
        return sentinel;
      }
    } else {
      if (cljs.reader.whitespace_QMARK_.call(null, ch)) {
        var G__15671 = reader;
        var G__15672 = eof_is_error;
        var G__15673 = sentinel;
        var G__15674 = is_recursive;
        reader = G__15671;
        eof_is_error = G__15672;
        sentinel = G__15673;
        is_recursive = G__15674;
        continue;
      } else {
        if (cljs.reader.comment_prefix_QMARK_.call(null, ch)) {
          var G__15675 = cljs.reader.read_comment.call(null, reader, ch);
          var G__15676 = eof_is_error;
          var G__15677 = sentinel;
          var G__15678 = is_recursive;
          reader = G__15675;
          eof_is_error = G__15676;
          sentinel = G__15677;
          is_recursive = G__15678;
          continue;
        } else {
          var f = cljs.reader.macros.call(null, ch);
          var res = cljs.core.truth_(f) ? f.call(null, reader, ch) : cljs.reader.number_literal_QMARK_.call(null, reader, ch) ? cljs.reader.read_number.call(null, reader, ch) : cljs.reader.read_symbol.call(null, reader, ch);
          if (res === reader) {
            var G__15679 = reader;
            var G__15680 = eof_is_error;
            var G__15681 = sentinel;
            var G__15682 = is_recursive;
            reader = G__15679;
            eof_is_error = G__15680;
            sentinel = G__15681;
            is_recursive = G__15682;
            continue;
          } else {
            return res;
          }
        }
      }
    }
    break;
  }
};
cljs.reader.read_string = function cljs$reader$read_string(s) {
  var r = cljs.reader.push_back_reader.call(null, s);
  return cljs.reader.read.call(null, r, false, null, false);
};
cljs.reader.zero_fill_right_and_truncate = function cljs$reader$zero_fill_right_and_truncate(s, width) {
  if (cljs.core._EQ_.call(null, width, cljs.core.count.call(null, s))) {
    return s;
  } else {
    if (width < cljs.core.count.call(null, s)) {
      return cljs.core.subs.call(null, s, 0, width);
    } else {
      var b = new goog.string.StringBuffer(s);
      while (true) {
        if (b.getLength() < width) {
          var G__15683 = b.append("0");
          b = G__15683;
          continue;
        } else {
          return b.toString();
        }
        break;
      }
    }
  }
};
cljs.reader.divisible_QMARK_ = function cljs$reader$divisible_QMARK_(num, div) {
  return cljs.core.mod.call(null, num, div) === 0;
};
cljs.reader.indivisible_QMARK_ = function cljs$reader$indivisible_QMARK_(num, div) {
  return cljs.core.not.call(null, cljs.reader.divisible_QMARK_.call(null, num, div));
};
cljs.reader.leap_year_QMARK_ = function cljs$reader$leap_year_QMARK_(year) {
  var and__4323__auto__ = cljs.reader.divisible_QMARK_.call(null, year, 4);
  if (cljs.core.truth_(and__4323__auto__)) {
    var or__4335__auto__ = cljs.reader.indivisible_QMARK_.call(null, year, 100);
    if (cljs.core.truth_(or__4335__auto__)) {
      return or__4335__auto__;
    } else {
      return cljs.reader.divisible_QMARK_.call(null, year, 400);
    }
  } else {
    return and__4323__auto__;
  }
};
cljs.reader.days_in_month = function() {
  var dim_norm = new cljs.core.PersistentVector(null, 13, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31], null);
  var dim_leap = new cljs.core.PersistentVector(null, 13, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31], null);
  return function(dim_norm, dim_leap) {
    return function(month, leap_year_QMARK_) {
      return cljs.core.get.call(null, cljs.core.truth_(leap_year_QMARK_) ? dim_leap : dim_norm, month);
    };
  }(dim_norm, dim_leap);
}();
cljs.reader.timestamp_regex = /(\d\d\d\d)(?:-(\d\d)(?:-(\d\d)(?:[T](\d\d)(?::(\d\d)(?::(\d\d)(?:[.](\d+))?)?)?)?)?)?(?:[Z]|([-+])(\d\d):(\d\d))?/;
cljs.reader.parse_int = function cljs$reader$parse_int(s) {
  var n = parseInt(s, 10);
  if (cljs.core.not.call(null, isNaN(n))) {
    return n;
  } else {
    return null;
  }
};
cljs.reader.check = function cljs$reader$check(low, n, high, msg) {
  if (low <= n && n <= high) {
  } else {
    cljs.reader.reader_error.call(null, null, [cljs.core.str(msg), cljs.core.str(" Failed:  "), cljs.core.str(low), cljs.core.str("\x3c\x3d"), cljs.core.str(n), cljs.core.str("\x3c\x3d"), cljs.core.str(high)].join(""));
  }
  return n;
};
cljs.reader.parse_and_validate_timestamp = function cljs$reader$parse_and_validate_timestamp(s) {
  var vec__15685 = cljs.core.re_matches.call(null, cljs.reader.timestamp_regex, s);
  var _ = cljs.core.nth.call(null, vec__15685, 0, null);
  var years = cljs.core.nth.call(null, vec__15685, 1, null);
  var months = cljs.core.nth.call(null, vec__15685, 2, null);
  var days = cljs.core.nth.call(null, vec__15685, 3, null);
  var hours = cljs.core.nth.call(null, vec__15685, 4, null);
  var minutes = cljs.core.nth.call(null, vec__15685, 5, null);
  var seconds = cljs.core.nth.call(null, vec__15685, 6, null);
  var fraction = cljs.core.nth.call(null, vec__15685, 7, null);
  var offset_sign = cljs.core.nth.call(null, vec__15685, 8, null);
  var offset_hours = cljs.core.nth.call(null, vec__15685, 9, null);
  var offset_minutes = cljs.core.nth.call(null, vec__15685, 10, null);
  var v = vec__15685;
  if (cljs.core.not.call(null, v)) {
    return cljs.reader.reader_error.call(null, null, [cljs.core.str("Unrecognized date/time syntax: "), cljs.core.str(s)].join(""));
  } else {
    var years__$1 = cljs.reader.parse_int.call(null, years);
    var months__$1 = function() {
      var or__4335__auto__ = cljs.reader.parse_int.call(null, months);
      if (cljs.core.truth_(or__4335__auto__)) {
        return or__4335__auto__;
      } else {
        return 1;
      }
    }();
    var days__$1 = function() {
      var or__4335__auto__ = cljs.reader.parse_int.call(null, days);
      if (cljs.core.truth_(or__4335__auto__)) {
        return or__4335__auto__;
      } else {
        return 1;
      }
    }();
    var hours__$1 = function() {
      var or__4335__auto__ = cljs.reader.parse_int.call(null, hours);
      if (cljs.core.truth_(or__4335__auto__)) {
        return or__4335__auto__;
      } else {
        return 0;
      }
    }();
    var minutes__$1 = function() {
      var or__4335__auto__ = cljs.reader.parse_int.call(null, minutes);
      if (cljs.core.truth_(or__4335__auto__)) {
        return or__4335__auto__;
      } else {
        return 0;
      }
    }();
    var seconds__$1 = function() {
      var or__4335__auto__ = cljs.reader.parse_int.call(null, seconds);
      if (cljs.core.truth_(or__4335__auto__)) {
        return or__4335__auto__;
      } else {
        return 0;
      }
    }();
    var fraction__$1 = function() {
      var or__4335__auto__ = cljs.reader.parse_int.call(null, cljs.reader.zero_fill_right_and_truncate.call(null, fraction, 3));
      if (cljs.core.truth_(or__4335__auto__)) {
        return or__4335__auto__;
      } else {
        return 0;
      }
    }();
    var offset_sign__$1 = cljs.core._EQ_.call(null, offset_sign, "-") ? -1 : 1;
    var offset_hours__$1 = function() {
      var or__4335__auto__ = cljs.reader.parse_int.call(null, offset_hours);
      if (cljs.core.truth_(or__4335__auto__)) {
        return or__4335__auto__;
      } else {
        return 0;
      }
    }();
    var offset_minutes__$1 = function() {
      var or__4335__auto__ = cljs.reader.parse_int.call(null, offset_minutes);
      if (cljs.core.truth_(or__4335__auto__)) {
        return or__4335__auto__;
      } else {
        return 0;
      }
    }();
    var offset = offset_sign__$1 * (offset_hours__$1 * 60 + offset_minutes__$1);
    return new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [years__$1, cljs.reader.check.call(null, 1, months__$1, 12, "timestamp month field must be in range 1..12"), cljs.reader.check.call(null, 1, days__$1, cljs.reader.days_in_month.call(null, months__$1, cljs.reader.leap_year_QMARK_.call(null, years__$1)), "timestamp day field must be in range 1..last day in month"), cljs.reader.check.call(null, 0, hours__$1, 23, "timestamp hour field must be in range 0..23"), 
    cljs.reader.check.call(null, 0, minutes__$1, 59, "timestamp minute field must be in range 0..59"), cljs.reader.check.call(null, 0, seconds__$1, cljs.core._EQ_.call(null, minutes__$1, 59) ? 60 : 59, "timestamp second field must be in range 0..60"), cljs.reader.check.call(null, 0, fraction__$1, 999, "timestamp millisecond field must be in range 0..999"), offset], null);
  }
};
cljs.reader.parse_timestamp = function cljs$reader$parse_timestamp(ts) {
  var temp__4124__auto__ = cljs.reader.parse_and_validate_timestamp.call(null, ts);
  if (cljs.core.truth_(temp__4124__auto__)) {
    var vec__15687 = temp__4124__auto__;
    var years = cljs.core.nth.call(null, vec__15687, 0, null);
    var months = cljs.core.nth.call(null, vec__15687, 1, null);
    var days = cljs.core.nth.call(null, vec__15687, 2, null);
    var hours = cljs.core.nth.call(null, vec__15687, 3, null);
    var minutes = cljs.core.nth.call(null, vec__15687, 4, null);
    var seconds = cljs.core.nth.call(null, vec__15687, 5, null);
    var ms = cljs.core.nth.call(null, vec__15687, 6, null);
    var offset = cljs.core.nth.call(null, vec__15687, 7, null);
    return new Date(Date.UTC(years, months - 1, days, hours, minutes, seconds, ms) - offset * 60 * 1E3);
  } else {
    return cljs.reader.reader_error.call(null, null, [cljs.core.str("Unrecognized date/time syntax: "), cljs.core.str(ts)].join(""));
  }
};
cljs.reader.read_date = function cljs$reader$read_date(s) {
  if (typeof s === "string") {
    return cljs.reader.parse_timestamp.call(null, s);
  } else {
    return cljs.reader.reader_error.call(null, null, "Instance literal expects a string for its timestamp.");
  }
};
cljs.reader.read_queue = function cljs$reader$read_queue(elems) {
  if (cljs.core.vector_QMARK_.call(null, elems)) {
    return cljs.core.into.call(null, cljs.core.PersistentQueue.EMPTY, elems);
  } else {
    return cljs.reader.reader_error.call(null, null, "Queue literal expects a vector for its elements.");
  }
};
cljs.reader.read_js = function cljs$reader$read_js(form) {
  if (cljs.core.vector_QMARK_.call(null, form)) {
    var arr = [];
    var seq__15700_15712 = cljs.core.seq.call(null, form);
    var chunk__15701_15713 = null;
    var count__15702_15714 = 0;
    var i__15703_15715 = 0;
    while (true) {
      if (i__15703_15715 < count__15702_15714) {
        var x_15716 = cljs.core._nth.call(null, chunk__15701_15713, i__15703_15715);
        arr.push(x_15716);
        var G__15717 = seq__15700_15712;
        var G__15718 = chunk__15701_15713;
        var G__15719 = count__15702_15714;
        var G__15720 = i__15703_15715 + 1;
        seq__15700_15712 = G__15717;
        chunk__15701_15713 = G__15718;
        count__15702_15714 = G__15719;
        i__15703_15715 = G__15720;
        continue;
      } else {
        var temp__4126__auto___15721 = cljs.core.seq.call(null, seq__15700_15712);
        if (temp__4126__auto___15721) {
          var seq__15700_15722__$1 = temp__4126__auto___15721;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__15700_15722__$1)) {
            var c__5120__auto___15723 = cljs.core.chunk_first.call(null, seq__15700_15722__$1);
            var G__15724 = cljs.core.chunk_rest.call(null, seq__15700_15722__$1);
            var G__15725 = c__5120__auto___15723;
            var G__15726 = cljs.core.count.call(null, c__5120__auto___15723);
            var G__15727 = 0;
            seq__15700_15712 = G__15724;
            chunk__15701_15713 = G__15725;
            count__15702_15714 = G__15726;
            i__15703_15715 = G__15727;
            continue;
          } else {
            var x_15728 = cljs.core.first.call(null, seq__15700_15722__$1);
            arr.push(x_15728);
            var G__15729 = cljs.core.next.call(null, seq__15700_15722__$1);
            var G__15730 = null;
            var G__15731 = 0;
            var G__15732 = 0;
            seq__15700_15712 = G__15729;
            chunk__15701_15713 = G__15730;
            count__15702_15714 = G__15731;
            i__15703_15715 = G__15732;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return arr;
  } else {
    if (cljs.core.map_QMARK_.call(null, form)) {
      var obj = function() {
        var obj15705 = {};
        return obj15705;
      }();
      var seq__15706_15733 = cljs.core.seq.call(null, form);
      var chunk__15707_15734 = null;
      var count__15708_15735 = 0;
      var i__15709_15736 = 0;
      while (true) {
        if (i__15709_15736 < count__15708_15735) {
          var vec__15710_15737 = cljs.core._nth.call(null, chunk__15707_15734, i__15709_15736);
          var k_15738 = cljs.core.nth.call(null, vec__15710_15737, 0, null);
          var v_15739 = cljs.core.nth.call(null, vec__15710_15737, 1, null);
          obj[cljs.core.name.call(null, k_15738)] = v_15739;
          var G__15740 = seq__15706_15733;
          var G__15741 = chunk__15707_15734;
          var G__15742 = count__15708_15735;
          var G__15743 = i__15709_15736 + 1;
          seq__15706_15733 = G__15740;
          chunk__15707_15734 = G__15741;
          count__15708_15735 = G__15742;
          i__15709_15736 = G__15743;
          continue;
        } else {
          var temp__4126__auto___15744 = cljs.core.seq.call(null, seq__15706_15733);
          if (temp__4126__auto___15744) {
            var seq__15706_15745__$1 = temp__4126__auto___15744;
            if (cljs.core.chunked_seq_QMARK_.call(null, seq__15706_15745__$1)) {
              var c__5120__auto___15746 = cljs.core.chunk_first.call(null, seq__15706_15745__$1);
              var G__15747 = cljs.core.chunk_rest.call(null, seq__15706_15745__$1);
              var G__15748 = c__5120__auto___15746;
              var G__15749 = cljs.core.count.call(null, c__5120__auto___15746);
              var G__15750 = 0;
              seq__15706_15733 = G__15747;
              chunk__15707_15734 = G__15748;
              count__15708_15735 = G__15749;
              i__15709_15736 = G__15750;
              continue;
            } else {
              var vec__15711_15751 = cljs.core.first.call(null, seq__15706_15745__$1);
              var k_15752 = cljs.core.nth.call(null, vec__15711_15751, 0, null);
              var v_15753 = cljs.core.nth.call(null, vec__15711_15751, 1, null);
              obj[cljs.core.name.call(null, k_15752)] = v_15753;
              var G__15754 = cljs.core.next.call(null, seq__15706_15745__$1);
              var G__15755 = null;
              var G__15756 = 0;
              var G__15757 = 0;
              seq__15706_15733 = G__15754;
              chunk__15707_15734 = G__15755;
              count__15708_15735 = G__15756;
              i__15709_15736 = G__15757;
              continue;
            }
          } else {
          }
        }
        break;
      }
      return obj;
    } else {
      return cljs.reader.reader_error.call(null, null, [cljs.core.str("JS literal expects a vector or map containing "), cljs.core.str("only string or unqualified keyword keys")].join(""));
    }
  }
};
cljs.reader.read_uuid = function cljs$reader$read_uuid(uuid) {
  if (typeof uuid === "string") {
    return new cljs.core.UUID(uuid);
  } else {
    return cljs.reader.reader_error.call(null, null, "UUID literal expects a string as its representation.");
  }
};
cljs.reader._STAR_tag_table_STAR_ = cljs.core.atom.call(null, new cljs.core.PersistentArrayMap(null, 4, ["inst", cljs.reader.read_date, "uuid", cljs.reader.read_uuid, "queue", cljs.reader.read_queue, "js", cljs.reader.read_js], null));
cljs.reader._STAR_default_data_reader_fn_STAR_ = cljs.core.atom.call(null, null);
cljs.reader.maybe_read_tagged_type = function cljs$reader$maybe_read_tagged_type(rdr, initch) {
  var tag = cljs.reader.read_symbol.call(null, rdr, initch);
  var pfn = cljs.core.get.call(null, cljs.core.deref.call(null, cljs.reader._STAR_tag_table_STAR_), [cljs.core.str(tag)].join(""));
  var dfn = cljs.core.deref.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_);
  if (cljs.core.truth_(pfn)) {
    return pfn.call(null, cljs.reader.read.call(null, rdr, true, null, false));
  } else {
    if (cljs.core.truth_(dfn)) {
      return dfn.call(null, tag, cljs.reader.read.call(null, rdr, true, null, false));
    } else {
      return cljs.reader.reader_error.call(null, rdr, "Could not find tag parser for ", [cljs.core.str(tag)].join(""), " in ", cljs.core.pr_str.call(null, cljs.core.keys.call(null, cljs.core.deref.call(null, cljs.reader._STAR_tag_table_STAR_))));
    }
  }
};
cljs.reader.register_tag_parser_BANG_ = function cljs$reader$register_tag_parser_BANG_(tag, f) {
  var tag__$1 = [cljs.core.str(tag)].join("");
  var old_parser = cljs.core.get.call(null, cljs.core.deref.call(null, cljs.reader._STAR_tag_table_STAR_), tag__$1);
  cljs.core.swap_BANG_.call(null, cljs.reader._STAR_tag_table_STAR_, cljs.core.assoc, tag__$1, f);
  return old_parser;
};
cljs.reader.deregister_tag_parser_BANG_ = function cljs$reader$deregister_tag_parser_BANG_(tag) {
  var tag__$1 = [cljs.core.str(tag)].join("");
  var old_parser = cljs.core.get.call(null, cljs.core.deref.call(null, cljs.reader._STAR_tag_table_STAR_), tag__$1);
  cljs.core.swap_BANG_.call(null, cljs.reader._STAR_tag_table_STAR_, cljs.core.dissoc, tag__$1);
  return old_parser;
};
cljs.reader.register_default_tag_parser_BANG_ = function cljs$reader$register_default_tag_parser_BANG_(f) {
  var old_parser = cljs.core.deref.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_);
  cljs.core.swap_BANG_.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_, function(old_parser) {
    return function(_) {
      return f;
    };
  }(old_parser));
  return old_parser;
};
cljs.reader.deregister_default_tag_parser_BANG_ = function cljs$reader$deregister_default_tag_parser_BANG_() {
  var old_parser = cljs.core.deref.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_);
  cljs.core.swap_BANG_.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_, function(old_parser) {
    return function(_) {
      return null;
    };
  }(old_parser));
  return old_parser;
};
goog.provide("garden.units");
goog.require("cljs.core");
goog.require("garden.util");
goog.require("cljs.reader");
goog.require("garden.types");
garden.units.length_units = cljs.core.PersistentHashSet.fromArray([new cljs.core.Keyword(null, "mm", "mm", -1652850560), new cljs.core.Keyword(null, "pt", "pt", 556460867), new cljs.core.Keyword(null, "px", "px", 281329899), new cljs.core.Keyword(null, "pc", "pc", 512913453), cljs.core.keyword.call(null, "%"), new cljs.core.Keyword(null, "cm", "cm", 540591536), new cljs.core.Keyword(null, "in", "in", -1531184865)], true);
garden.units.angular_units = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "deg", "deg", -681556081), null, new cljs.core.Keyword(null, "turn", "turn", 75759344), null, new cljs.core.Keyword(null, "rad", "rad", -833983012), null, new cljs.core.Keyword(null, "grad", "grad", 1125187229), null], null), null);
garden.units.time_units = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "s", "s", 1705939918), null, new cljs.core.Keyword(null, "ms", "ms", -1152709733), null], null), null);
garden.units.frequency_units = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "kHz", "kHz", 240398466), null, new cljs.core.Keyword(null, "Hz", "Hz", -1958732916), null], null), null);
garden.units.resolution_units = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "dppx", "dppx", 1920508843), null, new cljs.core.Keyword(null, "dpcm", "dpcm", -1187601236), null, new cljs.core.Keyword(null, "dpi", "dpi", -986162832), null], null), null);
garden.units.unit_QMARK_ = function garden$units$unit_QMARK_(x) {
  return x instanceof garden.types.CSSUnit;
};
garden.units.length_QMARK_ = function garden$units$length_QMARK_(x) {
  var and__4323__auto__ = garden.units.unit_QMARK_.call(null, x);
  if (cljs.core.truth_(and__4323__auto__)) {
    return cljs.core.contains_QMARK_.call(null, garden.units.length_units, (new cljs.core.Keyword(null, "unit", "unit", 375175175)).cljs$core$IFn$_invoke$arity$1(x));
  } else {
    return and__4323__auto__;
  }
};
garden.units.angle_QMARK_ = function garden$units$angle_QMARK_(x) {
  var and__4323__auto__ = garden.units.unit_QMARK_.call(null, x);
  if (cljs.core.truth_(and__4323__auto__)) {
    return cljs.core.contains_QMARK_.call(null, garden.units.angular_units, (new cljs.core.Keyword(null, "unit", "unit", 375175175)).cljs$core$IFn$_invoke$arity$1(x));
  } else {
    return and__4323__auto__;
  }
};
garden.units.time_QMARK_ = function garden$units$time_QMARK_(x) {
  var and__4323__auto__ = garden.units.unit_QMARK_.call(null, x);
  if (cljs.core.truth_(and__4323__auto__)) {
    return cljs.core.contains_QMARK_.call(null, garden.units.time_units, (new cljs.core.Keyword(null, "unit", "unit", 375175175)).cljs$core$IFn$_invoke$arity$1(x));
  } else {
    return and__4323__auto__;
  }
};
garden.units.frequency_QMARK_ = function garden$units$frequency_QMARK_(x) {
  var and__4323__auto__ = garden.units.unit_QMARK_.call(null, x);
  if (cljs.core.truth_(and__4323__auto__)) {
    return cljs.core.contains_QMARK_.call(null, garden.units.frequency_units, (new cljs.core.Keyword(null, "unit", "unit", 375175175)).cljs$core$IFn$_invoke$arity$1(x));
  } else {
    return and__4323__auto__;
  }
};
garden.units.resolution_QMARK_ = function garden$units$resolution_QMARK_(x) {
  var and__4323__auto__ = garden.units.unit_QMARK_.call(null, x);
  if (cljs.core.truth_(and__4323__auto__)) {
    return cljs.core.contains_QMARK_.call(null, garden.units.resolution_units, (new cljs.core.Keyword(null, "unit", "unit", 375175175)).cljs$core$IFn$_invoke$arity$1(x));
  } else {
    return and__4323__auto__;
  }
};
garden.units.conversions = cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null, "mm", "mm", -1652850560), new cljs.core.Keyword(null, "kHz", "kHz", 240398466), new cljs.core.Keyword(null, "pt", "pt", 556460867), new cljs.core.Keyword(null, "px", "px", 281329899), new cljs.core.Keyword(null, "rem", "rem", -976484757), new cljs.core.Keyword(null, "em", "em", 707813035), new cljs.core.Keyword(null, "Hz", "Hz", -1958732916), new cljs.core.Keyword(null, "pc", "pc", 512913453), cljs.core.keyword.call(null, 
"%"), new cljs.core.Keyword(null, "s", "s", 1705939918), new cljs.core.Keyword(null, "deg", "deg", -681556081), new cljs.core.Keyword(null, "cm", "cm", 540591536), new cljs.core.Keyword(null, "turn", "turn", 75759344), new cljs.core.Keyword(null, "ms", "ms", -1152709733), new cljs.core.Keyword(null, "rad", "rad", -833983012), new cljs.core.Keyword(null, "grad", "grad", 1125187229), new cljs.core.Keyword(null, "in", "in", -1531184865)], [new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, 
"mm", "mm", -1652850560), 1, new cljs.core.Keyword(null, "pt", "pt", 556460867), 2.83464567, new cljs.core.Keyword(null, "px", "px", 281329899), 3.7795275591], null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "kHz", "kHz", 240398466), 1], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "pt", "pt", 556460867), 1, new cljs.core.Keyword(null, "px", "px", 281329899), 1.3333333333], null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, 
"px", "px", 281329899), 1], null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "rem", "rem", -976484757), 1], null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "em", "em", 707813035), 1], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "Hz", "Hz", -1958732916), 1, new cljs.core.Keyword(null, "kHz", "kHz", 240398466), .001], null), new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "pc", "pc", 
512913453), 1, new cljs.core.Keyword(null, "mm", "mm", -1652850560), 4.23333333, new cljs.core.Keyword(null, "pt", "pt", 556460867), 12, new cljs.core.Keyword(null, "px", "px", 281329899), 16], null), new cljs.core.PersistentArrayMap.fromArray([cljs.core.keyword.call(null, "%"), 1], true, false), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "s", "s", 1705939918), 1, new cljs.core.Keyword(null, "ms", "ms", -1152709733), 1E3], null), new cljs.core.PersistentArrayMap(null, 
4, [new cljs.core.Keyword(null, "deg", "deg", -681556081), 1, new cljs.core.Keyword(null, "grad", "grad", 1125187229), 1.111111111, new cljs.core.Keyword(null, "rad", "rad", -833983012), .0174532925, new cljs.core.Keyword(null, "turn", "turn", 75759344), .002777778], null), new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "cm", "cm", 540591536), 1, new cljs.core.Keyword(null, "pc", "pc", 512913453), 2.36220473, new cljs.core.Keyword(null, "mm", "mm", -1652850560), 10, new cljs.core.Keyword(null, 
"pt", "pt", 556460867), 28.3464567, new cljs.core.Keyword(null, "px", "px", 281329899), 37.795275591], null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "turn", "turn", 75759344), 1], null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "ms", "ms", -1152709733), 1], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "rad", "rad", -833983012), 1, new cljs.core.Keyword(null, "turn", "turn", 75759344), .159154943], null), 
new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "grad", "grad", 1125187229), 1, new cljs.core.Keyword(null, "rad", "rad", -833983012), 63.661977237, new cljs.core.Keyword(null, "turn", "turn", 75759344), .0025], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "in", "in", -1531184865), 1, new cljs.core.Keyword(null, "cm", "cm", 540591536), 2.54, new cljs.core.Keyword(null, "pc", "pc", 512913453), 6, new cljs.core.Keyword(null, "mm", "mm", -1652850560), 
25.4, new cljs.core.Keyword(null, "pt", "pt", 556460867), 72, new cljs.core.Keyword(null, "px", "px", 281329899), 96], null)]);
garden.units.convertable_QMARK_ = function garden$units$convertable_QMARK_(unit) {
  return cljs.core.contains_QMARK_.call(null, garden.units.conversions, unit);
};
garden.units.convert = function garden$units$convert(p__15587, right) {
  var map__15589 = p__15587;
  var map__15589__$1 = cljs.core.seq_QMARK_.call(null, map__15589) ? cljs.core.apply.call(null, cljs.core.hash_map, map__15589) : map__15589;
  var m = cljs.core.get.call(null, map__15589__$1, new cljs.core.Keyword(null, "magnitude", "magnitude", 1924274222));
  var left = cljs.core.get.call(null, map__15589__$1, new cljs.core.Keyword(null, "unit", "unit", 375175175));
  if (cljs.core.every_QMARK_.call(null, garden.units.convertable_QMARK_, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [left, right], null))) {
    var v1 = cljs.core.get_in.call(null, garden.units.conversions, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [left, right], null));
    var v2 = cljs.core.get_in.call(null, garden.units.conversions, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [right, left], null));
    if (cljs.core.truth_(v1)) {
      return new garden.types.CSSUnit(right, v1 * m, null, null, null);
    } else {
      if (cljs.core.truth_(v2)) {
        return new garden.types.CSSUnit(right, m / v2, null, null, null);
      } else {
        throw cljs.core.ex_info.call(null, garden.util.format.call(null, "Can't convert %s to %s", cljs.core.name.call(null, left), cljs.core.name.call(null, right)), cljs.core.PersistentArrayMap.EMPTY);
      }
    }
  } else {
    var x = cljs.core.first.call(null, cljs.core.drop_while.call(null, garden.units.convertable_QMARK_, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [left, right], null)));
    throw cljs.core.ex_info.call(null, [cljs.core.str("Inconvertible unit "), cljs.core.str(cljs.core.name.call(null, x))].join(""), cljs.core.PersistentArrayMap.EMPTY);
  }
};
garden.units.unit_re = /([+-]?\d+(?:\.?\d+)?)(p[xtc]|in|[cm]m|%|r?em|ex|ch|v(?:[wh]|m(?:in|ax))|deg|g?rad|turn|m?s|k?Hz|dp(?:i|cm|px))/;
garden.units.read_unit = function garden$units$read_unit(s) {
  var temp__4126__auto__ = cljs.core.re_matches.call(null, garden.units.unit_re, s);
  if (cljs.core.truth_(temp__4126__auto__)) {
    var vec__15591 = temp__4126__auto__;
    var _ = cljs.core.nth.call(null, vec__15591, 0, null);
    var magnitude = cljs.core.nth.call(null, vec__15591, 1, null);
    var unit = cljs.core.nth.call(null, vec__15591, 2, null);
    var unit__$1 = cljs.core.keyword.call(null, unit);
    var magnitude__$1 = cljs.core.truth_(magnitude) ? cljs.reader.read_string.call(null, magnitude) : 0;
    return new garden.types.CSSUnit(unit__$1, magnitude__$1, null, null, null);
  } else {
    return null;
  }
};
garden.units.make_unit_predicate = function garden$units$make_unit_predicate(unit) {
  return function(x) {
    var and__4323__auto__ = garden.units.unit_QMARK_.call(null, x);
    if (cljs.core.truth_(and__4323__auto__)) {
      return cljs.core._EQ_.call(null, (new cljs.core.Keyword(null, "unit", "unit", 375175175)).cljs$core$IFn$_invoke$arity$1(x), unit);
    } else {
      return and__4323__auto__;
    }
  };
};
garden.units.make_unit_fn = function garden$units$make_unit_fn(unit) {
  return function(x) {
    if (typeof x === "number") {
      return new garden.types.CSSUnit(unit, x, null, null, null);
    } else {
      if (cljs.core.truth_(garden.units.unit_QMARK_.call(null, x))) {
        var or__4335__auto__ = function() {
          var and__4323__auto__ = cljs.core._EQ_.call(null, unit.call(null, x), unit);
          if (and__4323__auto__) {
            return x;
          } else {
            return and__4323__auto__;
          }
        }();
        if (cljs.core.truth_(or__4335__auto__)) {
          return or__4335__auto__;
        } else {
          return garden.units.convert.call(null, x, unit);
        }
      } else {
        throw cljs.core.ex_info.call(null, garden.util.format.call(null, "Don't know how to convert type %s to %s", cljs.core.type.call(null, x).getName(), cljs.core.name.call(null, unit)), cljs.core.PersistentArrayMap.EMPTY);
      }
    }
  };
};
garden.units.make_unit_adder = function garden$units$make_unit_adder(unit) {
  var u = garden.units.make_unit_fn.call(null, unit);
  return function(u) {
    return function() {
      var garden$units$make_unit_adder_$_u_PLUS_ = null;
      var garden$units$make_unit_adder_$_u_PLUS___0 = function() {
        return u.call(null, 0);
      };
      var garden$units$make_unit_adder_$_u_PLUS___1 = function(x) {
        return u.call(null, x);
      };
      var garden$units$make_unit_adder_$_u_PLUS___2 = function(x, y) {
        var map__15598 = u.call(null, x);
        var map__15598__$1 = cljs.core.seq_QMARK_.call(null, map__15598) ? cljs.core.apply.call(null, cljs.core.hash_map, map__15598) : map__15598;
        var m1 = cljs.core.get.call(null, map__15598__$1, new cljs.core.Keyword(null, "magnitude", "magnitude", 1924274222));
        var map__15599 = u.call(null, y);
        var map__15599__$1 = cljs.core.seq_QMARK_.call(null, map__15599) ? cljs.core.apply.call(null, cljs.core.hash_map, map__15599) : map__15599;
        var m2 = cljs.core.get.call(null, map__15599__$1, new cljs.core.Keyword(null, "magnitude", "magnitude", 1924274222));
        return u.call(null, m1 + m2);
      };
      var garden$units$make_unit_adder_$_u_PLUS___3 = function() {
        var G__15600__delegate = function(x, y, more) {
          return cljs.core.reduce.call(null, garden$units$make_unit_adder_$_u_PLUS_, garden$units$make_unit_adder_$_u_PLUS_.call(null, x, y), more);
        };
        var G__15600 = function(x, y, var_args) {
          var more = null;
          if (arguments.length > 2) {
            var G__15601__i = 0, G__15601__a = new Array(arguments.length - 2);
            while (G__15601__i < G__15601__a.length) {
              G__15601__a[G__15601__i] = arguments[G__15601__i + 2];
              ++G__15601__i;
            }
            more = new cljs.core.IndexedSeq(G__15601__a, 0);
          }
          return G__15600__delegate.call(this, x, y, more);
        };
        G__15600.cljs$lang$maxFixedArity = 2;
        G__15600.cljs$lang$applyTo = function(arglist__15602) {
          var x = cljs.core.first(arglist__15602);
          arglist__15602 = cljs.core.next(arglist__15602);
          var y = cljs.core.first(arglist__15602);
          var more = cljs.core.rest(arglist__15602);
          return G__15600__delegate(x, y, more);
        };
        G__15600.cljs$core$IFn$_invoke$arity$variadic = G__15600__delegate;
        return G__15600;
      }();
      garden$units$make_unit_adder_$_u_PLUS_ = function(x, y, var_args) {
        var more = var_args;
        switch(arguments.length) {
          case 0:
            return garden$units$make_unit_adder_$_u_PLUS___0.call(this);
          case 1:
            return garden$units$make_unit_adder_$_u_PLUS___1.call(this, x);
          case 2:
            return garden$units$make_unit_adder_$_u_PLUS___2.call(this, x, y);
          default:
            var G__15603 = null;
            if (arguments.length > 2) {
              var G__15604__i = 0, G__15604__a = new Array(arguments.length - 2);
              while (G__15604__i < G__15604__a.length) {
                G__15604__a[G__15604__i] = arguments[G__15604__i + 2];
                ++G__15604__i;
              }
              G__15603 = new cljs.core.IndexedSeq(G__15604__a, 0);
            }
            return garden$units$make_unit_adder_$_u_PLUS___3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__15603);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      garden$units$make_unit_adder_$_u_PLUS_.cljs$lang$maxFixedArity = 2;
      garden$units$make_unit_adder_$_u_PLUS_.cljs$lang$applyTo = garden$units$make_unit_adder_$_u_PLUS___3.cljs$lang$applyTo;
      garden$units$make_unit_adder_$_u_PLUS_.cljs$core$IFn$_invoke$arity$0 = garden$units$make_unit_adder_$_u_PLUS___0;
      garden$units$make_unit_adder_$_u_PLUS_.cljs$core$IFn$_invoke$arity$1 = garden$units$make_unit_adder_$_u_PLUS___1;
      garden$units$make_unit_adder_$_u_PLUS_.cljs$core$IFn$_invoke$arity$2 = garden$units$make_unit_adder_$_u_PLUS___2;
      garden$units$make_unit_adder_$_u_PLUS_.cljs$core$IFn$_invoke$arity$variadic = garden$units$make_unit_adder_$_u_PLUS___3.cljs$core$IFn$_invoke$arity$variadic;
      return garden$units$make_unit_adder_$_u_PLUS_;
    }();
  }(u);
};
garden.units.make_unit_subtractor = function garden$units$make_unit_subtractor(unit) {
  var u = garden.units.make_unit_fn.call(null, unit);
  return function(u) {
    return function() {
      var garden$units$make_unit_subtractor_$_u_ = null;
      var garden$units$make_unit_subtractor_$_u___1 = function(x) {
        return u.call(null, -x);
      };
      var garden$units$make_unit_subtractor_$_u___2 = function(x, y) {
        var map__15611 = u.call(null, x);
        var map__15611__$1 = cljs.core.seq_QMARK_.call(null, map__15611) ? cljs.core.apply.call(null, cljs.core.hash_map, map__15611) : map__15611;
        var m1 = cljs.core.get.call(null, map__15611__$1, new cljs.core.Keyword(null, "magnitude", "magnitude", 1924274222));
        var map__15612 = u.call(null, y);
        var map__15612__$1 = cljs.core.seq_QMARK_.call(null, map__15612) ? cljs.core.apply.call(null, cljs.core.hash_map, map__15612) : map__15612;
        var m2 = cljs.core.get.call(null, map__15612__$1, new cljs.core.Keyword(null, "magnitude", "magnitude", 1924274222));
        return u.call(null, m1 - m2);
      };
      var garden$units$make_unit_subtractor_$_u___3 = function() {
        var G__15613__delegate = function(x, y, more) {
          return cljs.core.reduce.call(null, garden$units$make_unit_subtractor_$_u_, garden$units$make_unit_subtractor_$_u_.call(null, x, y), more);
        };
        var G__15613 = function(x, y, var_args) {
          var more = null;
          if (arguments.length > 2) {
            var G__15614__i = 0, G__15614__a = new Array(arguments.length - 2);
            while (G__15614__i < G__15614__a.length) {
              G__15614__a[G__15614__i] = arguments[G__15614__i + 2];
              ++G__15614__i;
            }
            more = new cljs.core.IndexedSeq(G__15614__a, 0);
          }
          return G__15613__delegate.call(this, x, y, more);
        };
        G__15613.cljs$lang$maxFixedArity = 2;
        G__15613.cljs$lang$applyTo = function(arglist__15615) {
          var x = cljs.core.first(arglist__15615);
          arglist__15615 = cljs.core.next(arglist__15615);
          var y = cljs.core.first(arglist__15615);
          var more = cljs.core.rest(arglist__15615);
          return G__15613__delegate(x, y, more);
        };
        G__15613.cljs$core$IFn$_invoke$arity$variadic = G__15613__delegate;
        return G__15613;
      }();
      garden$units$make_unit_subtractor_$_u_ = function(x, y, var_args) {
        var more = var_args;
        switch(arguments.length) {
          case 1:
            return garden$units$make_unit_subtractor_$_u___1.call(this, x);
          case 2:
            return garden$units$make_unit_subtractor_$_u___2.call(this, x, y);
          default:
            var G__15616 = null;
            if (arguments.length > 2) {
              var G__15617__i = 0, G__15617__a = new Array(arguments.length - 2);
              while (G__15617__i < G__15617__a.length) {
                G__15617__a[G__15617__i] = arguments[G__15617__i + 2];
                ++G__15617__i;
              }
              G__15616 = new cljs.core.IndexedSeq(G__15617__a, 0);
            }
            return garden$units$make_unit_subtractor_$_u___3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__15616);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      garden$units$make_unit_subtractor_$_u_.cljs$lang$maxFixedArity = 2;
      garden$units$make_unit_subtractor_$_u_.cljs$lang$applyTo = garden$units$make_unit_subtractor_$_u___3.cljs$lang$applyTo;
      garden$units$make_unit_subtractor_$_u_.cljs$core$IFn$_invoke$arity$1 = garden$units$make_unit_subtractor_$_u___1;
      garden$units$make_unit_subtractor_$_u_.cljs$core$IFn$_invoke$arity$2 = garden$units$make_unit_subtractor_$_u___2;
      garden$units$make_unit_subtractor_$_u_.cljs$core$IFn$_invoke$arity$variadic = garden$units$make_unit_subtractor_$_u___3.cljs$core$IFn$_invoke$arity$variadic;
      return garden$units$make_unit_subtractor_$_u_;
    }();
  }(u);
};
garden.units.make_unit_multiplier = function garden$units$make_unit_multiplier(unit) {
  var u = garden.units.make_unit_fn.call(null, unit);
  return function(u) {
    return function() {
      var garden$units$make_unit_multiplier_$_u_STAR_ = null;
      var garden$units$make_unit_multiplier_$_u_STAR___0 = function() {
        return u.call(null, 1);
      };
      var garden$units$make_unit_multiplier_$_u_STAR___1 = function(x) {
        return u.call(null, x);
      };
      var garden$units$make_unit_multiplier_$_u_STAR___2 = function(x, y) {
        var map__15624 = u.call(null, x);
        var map__15624__$1 = cljs.core.seq_QMARK_.call(null, map__15624) ? cljs.core.apply.call(null, cljs.core.hash_map, map__15624) : map__15624;
        var m1 = cljs.core.get.call(null, map__15624__$1, new cljs.core.Keyword(null, "magnitude", "magnitude", 1924274222));
        var map__15625 = u.call(null, y);
        var map__15625__$1 = cljs.core.seq_QMARK_.call(null, map__15625) ? cljs.core.apply.call(null, cljs.core.hash_map, map__15625) : map__15625;
        var m2 = cljs.core.get.call(null, map__15625__$1, new cljs.core.Keyword(null, "magnitude", "magnitude", 1924274222));
        return u.call(null, m1 * m2);
      };
      var garden$units$make_unit_multiplier_$_u_STAR___3 = function() {
        var G__15626__delegate = function(x, y, more) {
          return cljs.core.reduce.call(null, garden$units$make_unit_multiplier_$_u_STAR_, garden$units$make_unit_multiplier_$_u_STAR_.call(null, x, y), more);
        };
        var G__15626 = function(x, y, var_args) {
          var more = null;
          if (arguments.length > 2) {
            var G__15627__i = 0, G__15627__a = new Array(arguments.length - 2);
            while (G__15627__i < G__15627__a.length) {
              G__15627__a[G__15627__i] = arguments[G__15627__i + 2];
              ++G__15627__i;
            }
            more = new cljs.core.IndexedSeq(G__15627__a, 0);
          }
          return G__15626__delegate.call(this, x, y, more);
        };
        G__15626.cljs$lang$maxFixedArity = 2;
        G__15626.cljs$lang$applyTo = function(arglist__15628) {
          var x = cljs.core.first(arglist__15628);
          arglist__15628 = cljs.core.next(arglist__15628);
          var y = cljs.core.first(arglist__15628);
          var more = cljs.core.rest(arglist__15628);
          return G__15626__delegate(x, y, more);
        };
        G__15626.cljs$core$IFn$_invoke$arity$variadic = G__15626__delegate;
        return G__15626;
      }();
      garden$units$make_unit_multiplier_$_u_STAR_ = function(x, y, var_args) {
        var more = var_args;
        switch(arguments.length) {
          case 0:
            return garden$units$make_unit_multiplier_$_u_STAR___0.call(this);
          case 1:
            return garden$units$make_unit_multiplier_$_u_STAR___1.call(this, x);
          case 2:
            return garden$units$make_unit_multiplier_$_u_STAR___2.call(this, x, y);
          default:
            var G__15629 = null;
            if (arguments.length > 2) {
              var G__15630__i = 0, G__15630__a = new Array(arguments.length - 2);
              while (G__15630__i < G__15630__a.length) {
                G__15630__a[G__15630__i] = arguments[G__15630__i + 2];
                ++G__15630__i;
              }
              G__15629 = new cljs.core.IndexedSeq(G__15630__a, 0);
            }
            return garden$units$make_unit_multiplier_$_u_STAR___3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__15629);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      garden$units$make_unit_multiplier_$_u_STAR_.cljs$lang$maxFixedArity = 2;
      garden$units$make_unit_multiplier_$_u_STAR_.cljs$lang$applyTo = garden$units$make_unit_multiplier_$_u_STAR___3.cljs$lang$applyTo;
      garden$units$make_unit_multiplier_$_u_STAR_.cljs$core$IFn$_invoke$arity$0 = garden$units$make_unit_multiplier_$_u_STAR___0;
      garden$units$make_unit_multiplier_$_u_STAR_.cljs$core$IFn$_invoke$arity$1 = garden$units$make_unit_multiplier_$_u_STAR___1;
      garden$units$make_unit_multiplier_$_u_STAR_.cljs$core$IFn$_invoke$arity$2 = garden$units$make_unit_multiplier_$_u_STAR___2;
      garden$units$make_unit_multiplier_$_u_STAR_.cljs$core$IFn$_invoke$arity$variadic = garden$units$make_unit_multiplier_$_u_STAR___3.cljs$core$IFn$_invoke$arity$variadic;
      return garden$units$make_unit_multiplier_$_u_STAR_;
    }();
  }(u);
};
garden.units.make_unit_divider = function garden$units$make_unit_divider(unit) {
  var u = garden.units.make_unit_fn.call(null, unit);
  return function(u) {
    return function() {
      var garden$units$make_unit_divider_$_ud = null;
      var garden$units$make_unit_divider_$_ud__1 = function(x) {
        return u.call(null, 1 / x);
      };
      var garden$units$make_unit_divider_$_ud__2 = function(x, y) {
        var map__15637 = u.call(null, x);
        var map__15637__$1 = cljs.core.seq_QMARK_.call(null, map__15637) ? cljs.core.apply.call(null, cljs.core.hash_map, map__15637) : map__15637;
        var m1 = cljs.core.get.call(null, map__15637__$1, new cljs.core.Keyword(null, "magnitude", "magnitude", 1924274222));
        var map__15638 = u.call(null, y);
        var map__15638__$1 = cljs.core.seq_QMARK_.call(null, map__15638) ? cljs.core.apply.call(null, cljs.core.hash_map, map__15638) : map__15638;
        var m2 = cljs.core.get.call(null, map__15638__$1, new cljs.core.Keyword(null, "magnitude", "magnitude", 1924274222));
        return u.call(null, m1 / m2);
      };
      var garden$units$make_unit_divider_$_ud__3 = function() {
        var G__15639__delegate = function(x, y, more) {
          return cljs.core.reduce.call(null, garden$units$make_unit_divider_$_ud, garden$units$make_unit_divider_$_ud.call(null, x, y), more);
        };
        var G__15639 = function(x, y, var_args) {
          var more = null;
          if (arguments.length > 2) {
            var G__15640__i = 0, G__15640__a = new Array(arguments.length - 2);
            while (G__15640__i < G__15640__a.length) {
              G__15640__a[G__15640__i] = arguments[G__15640__i + 2];
              ++G__15640__i;
            }
            more = new cljs.core.IndexedSeq(G__15640__a, 0);
          }
          return G__15639__delegate.call(this, x, y, more);
        };
        G__15639.cljs$lang$maxFixedArity = 2;
        G__15639.cljs$lang$applyTo = function(arglist__15641) {
          var x = cljs.core.first(arglist__15641);
          arglist__15641 = cljs.core.next(arglist__15641);
          var y = cljs.core.first(arglist__15641);
          var more = cljs.core.rest(arglist__15641);
          return G__15639__delegate(x, y, more);
        };
        G__15639.cljs$core$IFn$_invoke$arity$variadic = G__15639__delegate;
        return G__15639;
      }();
      garden$units$make_unit_divider_$_ud = function(x, y, var_args) {
        var more = var_args;
        switch(arguments.length) {
          case 1:
            return garden$units$make_unit_divider_$_ud__1.call(this, x);
          case 2:
            return garden$units$make_unit_divider_$_ud__2.call(this, x, y);
          default:
            var G__15642 = null;
            if (arguments.length > 2) {
              var G__15643__i = 0, G__15643__a = new Array(arguments.length - 2);
              while (G__15643__i < G__15643__a.length) {
                G__15643__a[G__15643__i] = arguments[G__15643__i + 2];
                ++G__15643__i;
              }
              G__15642 = new cljs.core.IndexedSeq(G__15643__a, 0);
            }
            return garden$units$make_unit_divider_$_ud__3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__15642);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      garden$units$make_unit_divider_$_ud.cljs$lang$maxFixedArity = 2;
      garden$units$make_unit_divider_$_ud.cljs$lang$applyTo = garden$units$make_unit_divider_$_ud__3.cljs$lang$applyTo;
      garden$units$make_unit_divider_$_ud.cljs$core$IFn$_invoke$arity$1 = garden$units$make_unit_divider_$_ud__1;
      garden$units$make_unit_divider_$_ud.cljs$core$IFn$_invoke$arity$2 = garden$units$make_unit_divider_$_ud__2;
      garden$units$make_unit_divider_$_ud.cljs$core$IFn$_invoke$arity$variadic = garden$units$make_unit_divider_$_ud__3.cljs$core$IFn$_invoke$arity$variadic;
      return garden$units$make_unit_divider_$_ud;
    }();
  }(u);
};
garden.units.cm = garden.units.make_unit_fn.call(null, new cljs.core.Keyword(null, "cm", "cm", 540591536));
garden.units.cm_QMARK_ = garden.units.make_unit_predicate.call(null, new cljs.core.Keyword(null, "cm", "cm", 540591536));
garden.units.cm_PLUS_ = garden.units.make_unit_adder.call(null, new cljs.core.Keyword(null, "cm", "cm", 540591536));
garden.units.cm_ = garden.units.make_unit_subtractor.call(null, new cljs.core.Keyword(null, "cm", "cm", 540591536));
garden.units.cm_STAR_ = garden.units.make_unit_multiplier.call(null, new cljs.core.Keyword(null, "cm", "cm", 540591536));
garden.units.cm_div = garden.units.make_unit_divider.call(null, new cljs.core.Keyword(null, "cm", "cm", 540591536));
garden.units.mm = garden.units.make_unit_fn.call(null, new cljs.core.Keyword(null, "mm", "mm", -1652850560));
garden.units.mm_QMARK_ = garden.units.make_unit_predicate.call(null, new cljs.core.Keyword(null, "mm", "mm", -1652850560));
garden.units.mm_PLUS_ = garden.units.make_unit_adder.call(null, new cljs.core.Keyword(null, "mm", "mm", -1652850560));
garden.units.mm_ = garden.units.make_unit_subtractor.call(null, new cljs.core.Keyword(null, "mm", "mm", -1652850560));
garden.units.mm_STAR_ = garden.units.make_unit_multiplier.call(null, new cljs.core.Keyword(null, "mm", "mm", -1652850560));
garden.units.mm_div = garden.units.make_unit_divider.call(null, new cljs.core.Keyword(null, "mm", "mm", -1652850560));
garden.units.in$ = garden.units.make_unit_fn.call(null, new cljs.core.Keyword(null, "in", "in", -1531184865));
garden.units.in_QMARK_ = garden.units.make_unit_predicate.call(null, new cljs.core.Keyword(null, "in", "in", -1531184865));
garden.units.in_PLUS_ = garden.units.make_unit_adder.call(null, new cljs.core.Keyword(null, "in", "in", -1531184865));
garden.units.in_ = garden.units.make_unit_subtractor.call(null, new cljs.core.Keyword(null, "in", "in", -1531184865));
garden.units.in_STAR_ = garden.units.make_unit_multiplier.call(null, new cljs.core.Keyword(null, "in", "in", -1531184865));
garden.units.in_div = garden.units.make_unit_divider.call(null, new cljs.core.Keyword(null, "in", "in", -1531184865));
garden.units.px = garden.units.make_unit_fn.call(null, new cljs.core.Keyword(null, "px", "px", 281329899));
garden.units.px_QMARK_ = garden.units.make_unit_predicate.call(null, new cljs.core.Keyword(null, "px", "px", 281329899));
garden.units.px_PLUS_ = garden.units.make_unit_adder.call(null, new cljs.core.Keyword(null, "px", "px", 281329899));
garden.units.px_ = garden.units.make_unit_subtractor.call(null, new cljs.core.Keyword(null, "px", "px", 281329899));
garden.units.px_STAR_ = garden.units.make_unit_multiplier.call(null, new cljs.core.Keyword(null, "px", "px", 281329899));
garden.units.px_div = garden.units.make_unit_divider.call(null, new cljs.core.Keyword(null, "px", "px", 281329899));
garden.units.pt = garden.units.make_unit_fn.call(null, new cljs.core.Keyword(null, "pt", "pt", 556460867));
garden.units.pt_QMARK_ = garden.units.make_unit_predicate.call(null, new cljs.core.Keyword(null, "pt", "pt", 556460867));
garden.units.pt_PLUS_ = garden.units.make_unit_adder.call(null, new cljs.core.Keyword(null, "pt", "pt", 556460867));
garden.units.pt_ = garden.units.make_unit_subtractor.call(null, new cljs.core.Keyword(null, "pt", "pt", 556460867));
garden.units.pt_STAR_ = garden.units.make_unit_multiplier.call(null, new cljs.core.Keyword(null, "pt", "pt", 556460867));
garden.units.pt_div = garden.units.make_unit_divider.call(null, new cljs.core.Keyword(null, "pt", "pt", 556460867));
garden.units.pc = garden.units.make_unit_fn.call(null, new cljs.core.Keyword(null, "pc", "pc", 512913453));
garden.units.pc_QMARK_ = garden.units.make_unit_predicate.call(null, new cljs.core.Keyword(null, "pc", "pc", 512913453));
garden.units.pc_PLUS_ = garden.units.make_unit_adder.call(null, new cljs.core.Keyword(null, "pc", "pc", 512913453));
garden.units.pc_ = garden.units.make_unit_subtractor.call(null, new cljs.core.Keyword(null, "pc", "pc", 512913453));
garden.units.pc_STAR_ = garden.units.make_unit_multiplier.call(null, new cljs.core.Keyword(null, "pc", "pc", 512913453));
garden.units.pc_div = garden.units.make_unit_divider.call(null, new cljs.core.Keyword(null, "pc", "pc", 512913453));
garden.units.percent = garden.units.make_unit_fn.call(null, new cljs.core.Keyword(null, "%", "%", 1704198600));
garden.units.percent_QMARK_ = garden.units.make_unit_predicate.call(null, new cljs.core.Keyword(null, "%", "%", 1704198600));
garden.units.percent_PLUS_ = garden.units.make_unit_adder.call(null, new cljs.core.Keyword(null, "%", "%", 1704198600));
garden.units.percent_ = garden.units.make_unit_subtractor.call(null, new cljs.core.Keyword(null, "%", "%", 1704198600));
garden.units.percent_STAR_ = garden.units.make_unit_multiplier.call(null, new cljs.core.Keyword(null, "%", "%", 1704198600));
garden.units.percent_div = garden.units.make_unit_divider.call(null, new cljs.core.Keyword(null, "%", "%", 1704198600));
garden.units.em = garden.units.make_unit_fn.call(null, new cljs.core.Keyword(null, "em", "em", 707813035));
garden.units.em_QMARK_ = garden.units.make_unit_predicate.call(null, new cljs.core.Keyword(null, "em", "em", 707813035));
garden.units.em_PLUS_ = garden.units.make_unit_adder.call(null, new cljs.core.Keyword(null, "em", "em", 707813035));
garden.units.em_ = garden.units.make_unit_subtractor.call(null, new cljs.core.Keyword(null, "em", "em", 707813035));
garden.units.em_STAR_ = garden.units.make_unit_multiplier.call(null, new cljs.core.Keyword(null, "em", "em", 707813035));
garden.units.em_div = garden.units.make_unit_divider.call(null, new cljs.core.Keyword(null, "em", "em", 707813035));
garden.units.ex = garden.units.make_unit_fn.call(null, new cljs.core.Keyword(null, "ex", "ex", -1413771341));
garden.units.ex_QMARK_ = garden.units.make_unit_predicate.call(null, new cljs.core.Keyword(null, "ex", "ex", -1413771341));
garden.units.ex_PLUS_ = garden.units.make_unit_adder.call(null, new cljs.core.Keyword(null, "ex", "ex", -1413771341));
garden.units.ex_ = garden.units.make_unit_subtractor.call(null, new cljs.core.Keyword(null, "ex", "ex", -1413771341));
garden.units.ex_STAR_ = garden.units.make_unit_multiplier.call(null, new cljs.core.Keyword(null, "ex", "ex", -1413771341));
garden.units.ex_div = garden.units.make_unit_divider.call(null, new cljs.core.Keyword(null, "ex", "ex", -1413771341));
garden.units.ch = garden.units.make_unit_fn.call(null, new cljs.core.Keyword(null, "ch", "ch", -554717905));
garden.units.ch_QMARK_ = garden.units.make_unit_predicate.call(null, new cljs.core.Keyword(null, "ch", "ch", -554717905));
garden.units.ch_PLUS_ = garden.units.make_unit_adder.call(null, new cljs.core.Keyword(null, "ch", "ch", -554717905));
garden.units.ch_ = garden.units.make_unit_subtractor.call(null, new cljs.core.Keyword(null, "ch", "ch", -554717905));
garden.units.ch_STAR_ = garden.units.make_unit_multiplier.call(null, new cljs.core.Keyword(null, "ch", "ch", -554717905));
garden.units.ch_div = garden.units.make_unit_divider.call(null, new cljs.core.Keyword(null, "ch", "ch", -554717905));
garden.units.rem = garden.units.make_unit_fn.call(null, new cljs.core.Keyword(null, "rem", "rem", -976484757));
garden.units.rem_QMARK_ = garden.units.make_unit_predicate.call(null, new cljs.core.Keyword(null, "rem", "rem", -976484757));
garden.units.rem_PLUS_ = garden.units.make_unit_adder.call(null, new cljs.core.Keyword(null, "rem", "rem", -976484757));
garden.units.rem_ = garden.units.make_unit_subtractor.call(null, new cljs.core.Keyword(null, "rem", "rem", -976484757));
garden.units.rem_STAR_ = garden.units.make_unit_multiplier.call(null, new cljs.core.Keyword(null, "rem", "rem", -976484757));
garden.units.rem_div = garden.units.make_unit_divider.call(null, new cljs.core.Keyword(null, "rem", "rem", -976484757));
garden.units.vw = garden.units.make_unit_fn.call(null, new cljs.core.Keyword(null, "vw", "vw", 1941049135));
garden.units.vw_QMARK_ = garden.units.make_unit_predicate.call(null, new cljs.core.Keyword(null, "vw", "vw", 1941049135));
garden.units.vw_PLUS_ = garden.units.make_unit_adder.call(null, new cljs.core.Keyword(null, "vw", "vw", 1941049135));
garden.units.vw_ = garden.units.make_unit_subtractor.call(null, new cljs.core.Keyword(null, "vw", "vw", 1941049135));
garden.units.vw_STAR_ = garden.units.make_unit_multiplier.call(null, new cljs.core.Keyword(null, "vw", "vw", 1941049135));
garden.units.vw_div = garden.units.make_unit_divider.call(null, new cljs.core.Keyword(null, "vw", "vw", 1941049135));
garden.units.vh = garden.units.make_unit_fn.call(null, new cljs.core.Keyword(null, "vh", "vh", 79552846));
garden.units.vh_QMARK_ = garden.units.make_unit_predicate.call(null, new cljs.core.Keyword(null, "vh", "vh", 79552846));
garden.units.vh_PLUS_ = garden.units.make_unit_adder.call(null, new cljs.core.Keyword(null, "vh", "vh", 79552846));
garden.units.vh_ = garden.units.make_unit_subtractor.call(null, new cljs.core.Keyword(null, "vh", "vh", 79552846));
garden.units.vh_STAR_ = garden.units.make_unit_multiplier.call(null, new cljs.core.Keyword(null, "vh", "vh", 79552846));
garden.units.vh_div = garden.units.make_unit_divider.call(null, new cljs.core.Keyword(null, "vh", "vh", 79552846));
garden.units.vmin = garden.units.make_unit_fn.call(null, new cljs.core.Keyword(null, "vmin", "vmin", 446546816));
garden.units.vmin_QMARK_ = garden.units.make_unit_predicate.call(null, new cljs.core.Keyword(null, "vmin", "vmin", 446546816));
garden.units.vmin_PLUS_ = garden.units.make_unit_adder.call(null, new cljs.core.Keyword(null, "vmin", "vmin", 446546816));
garden.units.vmin_ = garden.units.make_unit_subtractor.call(null, new cljs.core.Keyword(null, "vmin", "vmin", 446546816));
garden.units.vmin_STAR_ = garden.units.make_unit_multiplier.call(null, new cljs.core.Keyword(null, "vmin", "vmin", 446546816));
garden.units.vmin_div = garden.units.make_unit_divider.call(null, new cljs.core.Keyword(null, "vmin", "vmin", 446546816));
garden.units.vmax = garden.units.make_unit_fn.call(null, new cljs.core.Keyword(null, "vmax", "vmax", -1435213544));
garden.units.vmax_QMARK_ = garden.units.make_unit_predicate.call(null, new cljs.core.Keyword(null, "vmax", "vmax", -1435213544));
garden.units.vmax_PLUS_ = garden.units.make_unit_adder.call(null, new cljs.core.Keyword(null, "vmax", "vmax", -1435213544));
garden.units.vmax_ = garden.units.make_unit_subtractor.call(null, new cljs.core.Keyword(null, "vmax", "vmax", -1435213544));
garden.units.vmax_STAR_ = garden.units.make_unit_multiplier.call(null, new cljs.core.Keyword(null, "vmax", "vmax", -1435213544));
garden.units.vmax_div = garden.units.make_unit_divider.call(null, new cljs.core.Keyword(null, "vmax", "vmax", -1435213544));
garden.units.deg = garden.units.make_unit_fn.call(null, new cljs.core.Keyword(null, "deg", "deg", -681556081));
garden.units.deg_QMARK_ = garden.units.make_unit_predicate.call(null, new cljs.core.Keyword(null, "deg", "deg", -681556081));
garden.units.deg_PLUS_ = garden.units.make_unit_adder.call(null, new cljs.core.Keyword(null, "deg", "deg", -681556081));
garden.units.deg_ = garden.units.make_unit_subtractor.call(null, new cljs.core.Keyword(null, "deg", "deg", -681556081));
garden.units.deg_STAR_ = garden.units.make_unit_multiplier.call(null, new cljs.core.Keyword(null, "deg", "deg", -681556081));
garden.units.deg_div = garden.units.make_unit_divider.call(null, new cljs.core.Keyword(null, "deg", "deg", -681556081));
garden.units.grad = garden.units.make_unit_fn.call(null, new cljs.core.Keyword(null, "grad", "grad", 1125187229));
garden.units.grad_QMARK_ = garden.units.make_unit_predicate.call(null, new cljs.core.Keyword(null, "grad", "grad", 1125187229));
garden.units.grad_PLUS_ = garden.units.make_unit_adder.call(null, new cljs.core.Keyword(null, "grad", "grad", 1125187229));
garden.units.grad_ = garden.units.make_unit_subtractor.call(null, new cljs.core.Keyword(null, "grad", "grad", 1125187229));
garden.units.grad_STAR_ = garden.units.make_unit_multiplier.call(null, new cljs.core.Keyword(null, "grad", "grad", 1125187229));
garden.units.grad_div = garden.units.make_unit_divider.call(null, new cljs.core.Keyword(null, "grad", "grad", 1125187229));
garden.units.rad = garden.units.make_unit_fn.call(null, new cljs.core.Keyword(null, "rad", "rad", -833983012));
garden.units.rad_QMARK_ = garden.units.make_unit_predicate.call(null, new cljs.core.Keyword(null, "rad", "rad", -833983012));
garden.units.rad_PLUS_ = garden.units.make_unit_adder.call(null, new cljs.core.Keyword(null, "rad", "rad", -833983012));
garden.units.rad_ = garden.units.make_unit_subtractor.call(null, new cljs.core.Keyword(null, "rad", "rad", -833983012));
garden.units.rad_STAR_ = garden.units.make_unit_multiplier.call(null, new cljs.core.Keyword(null, "rad", "rad", -833983012));
garden.units.rad_div = garden.units.make_unit_divider.call(null, new cljs.core.Keyword(null, "rad", "rad", -833983012));
garden.units.turn = garden.units.make_unit_fn.call(null, new cljs.core.Keyword(null, "turn", "turn", 75759344));
garden.units.turn_QMARK_ = garden.units.make_unit_predicate.call(null, new cljs.core.Keyword(null, "turn", "turn", 75759344));
garden.units.turn_PLUS_ = garden.units.make_unit_adder.call(null, new cljs.core.Keyword(null, "turn", "turn", 75759344));
garden.units.turn_ = garden.units.make_unit_subtractor.call(null, new cljs.core.Keyword(null, "turn", "turn", 75759344));
garden.units.turn_STAR_ = garden.units.make_unit_multiplier.call(null, new cljs.core.Keyword(null, "turn", "turn", 75759344));
garden.units.turn_div = garden.units.make_unit_divider.call(null, new cljs.core.Keyword(null, "turn", "turn", 75759344));
garden.units.s = garden.units.make_unit_fn.call(null, new cljs.core.Keyword(null, "s", "s", 1705939918));
garden.units.s_QMARK_ = garden.units.make_unit_predicate.call(null, new cljs.core.Keyword(null, "s", "s", 1705939918));
garden.units.s_PLUS_ = garden.units.make_unit_adder.call(null, new cljs.core.Keyword(null, "s", "s", 1705939918));
garden.units.s_ = garden.units.make_unit_subtractor.call(null, new cljs.core.Keyword(null, "s", "s", 1705939918));
garden.units.s_STAR_ = garden.units.make_unit_multiplier.call(null, new cljs.core.Keyword(null, "s", "s", 1705939918));
garden.units.s_div = garden.units.make_unit_divider.call(null, new cljs.core.Keyword(null, "s", "s", 1705939918));
garden.units.ms = garden.units.make_unit_fn.call(null, new cljs.core.Keyword(null, "ms", "ms", -1152709733));
garden.units.ms_QMARK_ = garden.units.make_unit_predicate.call(null, new cljs.core.Keyword(null, "ms", "ms", -1152709733));
garden.units.ms_PLUS_ = garden.units.make_unit_adder.call(null, new cljs.core.Keyword(null, "ms", "ms", -1152709733));
garden.units.ms_ = garden.units.make_unit_subtractor.call(null, new cljs.core.Keyword(null, "ms", "ms", -1152709733));
garden.units.ms_STAR_ = garden.units.make_unit_multiplier.call(null, new cljs.core.Keyword(null, "ms", "ms", -1152709733));
garden.units.ms_div = garden.units.make_unit_divider.call(null, new cljs.core.Keyword(null, "ms", "ms", -1152709733));
garden.units.Hz = garden.units.make_unit_fn.call(null, new cljs.core.Keyword(null, "Hz", "Hz", -1958732916));
garden.units.Hz_QMARK_ = garden.units.make_unit_predicate.call(null, new cljs.core.Keyword(null, "Hz", "Hz", -1958732916));
garden.units.Hz_PLUS_ = garden.units.make_unit_adder.call(null, new cljs.core.Keyword(null, "Hz", "Hz", -1958732916));
garden.units.Hz_ = garden.units.make_unit_subtractor.call(null, new cljs.core.Keyword(null, "Hz", "Hz", -1958732916));
garden.units.Hz_STAR_ = garden.units.make_unit_multiplier.call(null, new cljs.core.Keyword(null, "Hz", "Hz", -1958732916));
garden.units.Hz_div = garden.units.make_unit_divider.call(null, new cljs.core.Keyword(null, "Hz", "Hz", -1958732916));
garden.units.kHz = garden.units.make_unit_fn.call(null, new cljs.core.Keyword(null, "kHz", "kHz", 240398466));
garden.units.kHz_QMARK_ = garden.units.make_unit_predicate.call(null, new cljs.core.Keyword(null, "kHz", "kHz", 240398466));
garden.units.kHz_PLUS_ = garden.units.make_unit_adder.call(null, new cljs.core.Keyword(null, "kHz", "kHz", 240398466));
garden.units.kHz_ = garden.units.make_unit_subtractor.call(null, new cljs.core.Keyword(null, "kHz", "kHz", 240398466));
garden.units.kHz_STAR_ = garden.units.make_unit_multiplier.call(null, new cljs.core.Keyword(null, "kHz", "kHz", 240398466));
garden.units.kHz_div = garden.units.make_unit_divider.call(null, new cljs.core.Keyword(null, "kHz", "kHz", 240398466));
garden.units.dpi = garden.units.make_unit_fn.call(null, new cljs.core.Keyword(null, "dpi", "dpi", -986162832));
garden.units.dpi_QMARK_ = garden.units.make_unit_predicate.call(null, new cljs.core.Keyword(null, "dpi", "dpi", -986162832));
garden.units.dpi_PLUS_ = garden.units.make_unit_adder.call(null, new cljs.core.Keyword(null, "dpi", "dpi", -986162832));
garden.units.dpi_ = garden.units.make_unit_subtractor.call(null, new cljs.core.Keyword(null, "dpi", "dpi", -986162832));
garden.units.dpi_STAR_ = garden.units.make_unit_multiplier.call(null, new cljs.core.Keyword(null, "dpi", "dpi", -986162832));
garden.units.dpi_div = garden.units.make_unit_divider.call(null, new cljs.core.Keyword(null, "dpi", "dpi", -986162832));
garden.units.dpcm = garden.units.make_unit_fn.call(null, new cljs.core.Keyword(null, "dpcm", "dpcm", -1187601236));
garden.units.dpcm_QMARK_ = garden.units.make_unit_predicate.call(null, new cljs.core.Keyword(null, "dpcm", "dpcm", -1187601236));
garden.units.dpcm_PLUS_ = garden.units.make_unit_adder.call(null, new cljs.core.Keyword(null, "dpcm", "dpcm", -1187601236));
garden.units.dpcm_ = garden.units.make_unit_subtractor.call(null, new cljs.core.Keyword(null, "dpcm", "dpcm", -1187601236));
garden.units.dpcm_STAR_ = garden.units.make_unit_multiplier.call(null, new cljs.core.Keyword(null, "dpcm", "dpcm", -1187601236));
garden.units.dpcm_div = garden.units.make_unit_divider.call(null, new cljs.core.Keyword(null, "dpcm", "dpcm", -1187601236));
garden.units.dppx = garden.units.make_unit_fn.call(null, new cljs.core.Keyword(null, "dppx", "dppx", 1920508843));
garden.units.dppx_QMARK_ = garden.units.make_unit_predicate.call(null, new cljs.core.Keyword(null, "dppx", "dppx", 1920508843));
garden.units.dppx_PLUS_ = garden.units.make_unit_adder.call(null, new cljs.core.Keyword(null, "dppx", "dppx", 1920508843));
garden.units.dppx_ = garden.units.make_unit_subtractor.call(null, new cljs.core.Keyword(null, "dppx", "dppx", 1920508843));
garden.units.dppx_STAR_ = garden.units.make_unit_multiplier.call(null, new cljs.core.Keyword(null, "dppx", "dppx", 1920508843));
garden.units.dppx_div = garden.units.make_unit_divider.call(null, new cljs.core.Keyword(null, "dppx", "dppx", 1920508843));
goog.provide("garden.selectors");
goog.require("cljs.core");
goog.require("clojure.string");
garden.selectors.ICSSSelector = function() {
  var obj15467 = {};
  return obj15467;
}();
garden.selectors.css_selector = function garden$selectors$css_selector(this$) {
  if (function() {
    var and__4323__auto__ = this$;
    if (and__4323__auto__) {
      return this$.garden$selectors$ICSSSelector$css_selector$arity$1;
    } else {
      return and__4323__auto__;
    }
  }()) {
    return this$.garden$selectors$ICSSSelector$css_selector$arity$1(this$);
  } else {
    var x__4971__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4335__auto__ = garden.selectors.css_selector[goog.typeOf(x__4971__auto__)];
      if (or__4335__auto__) {
        return or__4335__auto__;
      } else {
        var or__4335__auto____$1 = garden.selectors.css_selector["_"];
        if (or__4335__auto____$1) {
          return or__4335__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ICSSSelector.css-selector", this$);
        }
      }
    }().call(null, this$);
  }
};
garden.selectors.selector_QMARK_ = function garden$selectors$selector_QMARK_(x) {
  var G__15469 = x;
  if (G__15469) {
    var bit__5009__auto__ = null;
    if (cljs.core.truth_(function() {
      var or__4335__auto__ = bit__5009__auto__;
      if (cljs.core.truth_(or__4335__auto__)) {
        return or__4335__auto__;
      } else {
        return G__15469.garden$selectors$ICSSSelector$;
      }
    }())) {
      return true;
    } else {
      if (!G__15469.cljs$lang$protocol_mask$partition$) {
        return cljs.core.native_satisfies_QMARK_.call(null, garden.selectors.ICSSSelector, G__15469);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, garden.selectors.ICSSSelector, G__15469);
  }
};
cljs.core.Symbol.prototype.garden$selectors$ICSSSelector$ = true;
cljs.core.Symbol.prototype.garden$selectors$ICSSSelector$css_selector$arity$1 = function(this$) {
  var this$__$1 = this;
  return cljs.core.name.call(null, this$__$1);
};
cljs.core.Keyword.prototype.garden$selectors$ICSSSelector$ = true;
cljs.core.Keyword.prototype.garden$selectors$ICSSSelector$css_selector$arity$1 = function(this$) {
  var this$__$1 = this;
  return cljs.core.name.call(null, this$__$1);
};
garden.selectors.ICSSSelector["string"] = true;
garden.selectors.css_selector["string"] = function(this$) {
  return this$;
};
garden.selectors.CSSSelector = function(selector, __meta, __extmap, __hash) {
  this.selector = selector;
  this.__meta = __meta;
  this.__extmap = __extmap;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 2229667595;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
garden.selectors.CSSSelector.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this__4930__auto__, k__4931__auto__) {
  var self__ = this;
  var this__4930__auto____$1 = this;
  return cljs.core._lookup.call(null, this__4930__auto____$1, k__4931__auto__, null);
};
garden.selectors.CSSSelector.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this__4932__auto__, k15471, else__4933__auto__) {
  var self__ = this;
  var this__4932__auto____$1 = this;
  var G__15474 = k15471 instanceof cljs.core.Keyword ? k15471.fqn : null;
  switch(G__15474) {
    case "selector":
      return self__.selector;
      break;
    default:
      return cljs.core.get.call(null, self__.__extmap, k15471, else__4933__auto__);
  }
};
garden.selectors.CSSSelector.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this__4944__auto__, writer__4945__auto__, opts__4946__auto__) {
  var self__ = this;
  var this__4944__auto____$1 = this;
  var pr_pair__4947__auto__ = function(this__4944__auto____$1) {
    return function(keyval__4948__auto__) {
      return cljs.core.pr_sequential_writer.call(null, writer__4945__auto__, cljs.core.pr_writer, "", " ", "", opts__4946__auto__, keyval__4948__auto__);
    };
  }(this__4944__auto____$1);
  return cljs.core.pr_sequential_writer.call(null, writer__4945__auto__, pr_pair__4947__auto__, "#garden.selectors.CSSSelector{", ", ", "}", opts__4946__auto__, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "selector", "selector", 762528866), self__.selector], null)], null), self__.__extmap));
};
garden.selectors.CSSSelector.prototype.cljs$core$IMeta$_meta$arity$1 = function(this__4928__auto__) {
  var self__ = this;
  var this__4928__auto____$1 = this;
  return self__.__meta;
};
garden.selectors.CSSSelector.prototype.cljs$core$ICloneable$_clone$arity$1 = function(this__4924__auto__) {
  var self__ = this;
  var this__4924__auto____$1 = this;
  return new garden.selectors.CSSSelector(self__.selector, self__.__meta, self__.__extmap, self__.__hash);
};
garden.selectors.CSSSelector.prototype.cljs$core$ICounted$_count$arity$1 = function(this__4934__auto__) {
  var self__ = this;
  var this__4934__auto____$1 = this;
  return 1 + cljs.core.count.call(null, self__.__extmap);
};
garden.selectors.CSSSelector.prototype.cljs$core$IHash$_hash$arity$1 = function(this__4925__auto__) {
  var self__ = this;
  var this__4925__auto____$1 = this;
  var h__4751__auto__ = self__.__hash;
  if (!(h__4751__auto__ == null)) {
    return h__4751__auto__;
  } else {
    var h__4751__auto____$1 = cljs.core.hash_imap.call(null, this__4925__auto____$1);
    self__.__hash = h__4751__auto____$1;
    return h__4751__auto____$1;
  }
};
garden.selectors.CSSSelector.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this__4926__auto__, other__4927__auto__) {
  var self__ = this;
  var this__4926__auto____$1 = this;
  if (cljs.core.truth_(function() {
    var and__4323__auto__ = other__4927__auto__;
    if (cljs.core.truth_(and__4323__auto__)) {
      var and__4323__auto____$1 = this__4926__auto____$1.constructor === other__4927__auto__.constructor;
      if (and__4323__auto____$1) {
        return cljs.core.equiv_map.call(null, this__4926__auto____$1, other__4927__auto__);
      } else {
        return and__4323__auto____$1;
      }
    } else {
      return and__4323__auto__;
    }
  }())) {
    return true;
  } else {
    return false;
  }
};
garden.selectors.CSSSelector.prototype.garden$selectors$ICSSSelector$ = true;
garden.selectors.CSSSelector.prototype.garden$selectors$ICSSSelector$css_selector$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return garden.selectors.css_selector.call(null, (new cljs.core.Keyword(null, "selector", "selector", 762528866)).cljs$core$IFn$_invoke$arity$1(this$__$1));
};
garden.selectors.CSSSelector.prototype.cljs$core$IMap$_dissoc$arity$2 = function(this__4939__auto__, k__4940__auto__) {
  var self__ = this;
  var this__4939__auto____$1 = this;
  if (cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "selector", "selector", 762528866), null], null), null), k__4940__auto__)) {
    return cljs.core.dissoc.call(null, cljs.core.with_meta.call(null, cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, this__4939__auto____$1), self__.__meta), k__4940__auto__);
  } else {
    return new garden.selectors.CSSSelector(self__.selector, self__.__meta, cljs.core.not_empty.call(null, cljs.core.dissoc.call(null, self__.__extmap, k__4940__auto__)), null);
  }
};
garden.selectors.CSSSelector.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(this__4937__auto__, k__4938__auto__, G__15470) {
  var self__ = this;
  var this__4937__auto____$1 = this;
  var pred__15475 = cljs.core.keyword_identical_QMARK_;
  var expr__15476 = k__4938__auto__;
  if (cljs.core.truth_(pred__15475.call(null, new cljs.core.Keyword(null, "selector", "selector", 762528866), expr__15476))) {
    return new garden.selectors.CSSSelector(G__15470, self__.__meta, self__.__extmap, null);
  } else {
    return new garden.selectors.CSSSelector(self__.selector, self__.__meta, cljs.core.assoc.call(null, self__.__extmap, k__4938__auto__, G__15470), null);
  }
};
garden.selectors.CSSSelector.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this__4942__auto__) {
  var self__ = this;
  var this__4942__auto____$1 = this;
  return cljs.core.seq.call(null, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "selector", "selector", 762528866), self__.selector], null)], null), self__.__extmap));
};
garden.selectors.CSSSelector.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this__4929__auto__, G__15470) {
  var self__ = this;
  var this__4929__auto____$1 = this;
  return new garden.selectors.CSSSelector(self__.selector, G__15470, self__.__extmap, self__.__hash);
};
garden.selectors.CSSSelector.prototype.cljs$core$ICollection$_conj$arity$2 = function(this__4935__auto__, entry__4936__auto__) {
  var self__ = this;
  var this__4935__auto____$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry__4936__auto__)) {
    return cljs.core._assoc.call(null, this__4935__auto____$1, cljs.core._nth.call(null, entry__4936__auto__, 0), cljs.core._nth.call(null, entry__4936__auto__, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, this__4935__auto____$1, entry__4936__auto__);
  }
};
garden.selectors.CSSSelector.prototype.call = function() {
  var G__15479 = null;
  var G__15479__1 = function(self__) {
    var self__ = this;
    var self____$1 = this;
    var this$ = self____$1;
    return this$;
  };
  var G__15479__2 = function(self__, a) {
    var self__ = this;
    var self____$1 = this;
    var this$ = self____$1;
    return new garden.selectors.CSSSelector([cljs.core.str(this$.garden$selectors$ICSSSelector$css_selector$arity$1(null)), cljs.core.str(garden.selectors.css_selector.call(null, a))].join(""), null, null, null);
  };
  var G__15479__3 = function(self__, a, b) {
    var self__ = this;
    var self____$1 = this;
    var this$ = self____$1;
    return new garden.selectors.CSSSelector([cljs.core.str(this$.garden$selectors$ICSSSelector$css_selector$arity$1(null)), cljs.core.str(garden.selectors.css_selector.call(null, a)), cljs.core.str(garden.selectors.css_selector.call(null, b))].join(""), null, null, null);
  };
  var G__15479__4 = function(self__, a, b, c) {
    var self__ = this;
    var self____$1 = this;
    var this$ = self____$1;
    return new garden.selectors.CSSSelector([cljs.core.str(this$.garden$selectors$ICSSSelector$css_selector$arity$1(null)), cljs.core.str(garden.selectors.css_selector.call(null, a)), cljs.core.str(garden.selectors.css_selector.call(null, b)), cljs.core.str(garden.selectors.css_selector.call(null, c))].join(""), null, null, null);
  };
  var G__15479__5 = function(self__, a, b, c, d) {
    var self__ = this;
    var self____$1 = this;
    var this$ = self____$1;
    return new garden.selectors.CSSSelector([cljs.core.str(this$.garden$selectors$ICSSSelector$css_selector$arity$1(null)), cljs.core.str(garden.selectors.css_selector.call(null, a)), cljs.core.str(garden.selectors.css_selector.call(null, b)), cljs.core.str(garden.selectors.css_selector.call(null, c)), cljs.core.str(garden.selectors.css_selector.call(null, d))].join(""), null, null, null);
  };
  var G__15479__6 = function(self__, a, b, c, d, e) {
    var self__ = this;
    var self____$1 = this;
    var this$ = self____$1;
    return new garden.selectors.CSSSelector([cljs.core.str(this$.garden$selectors$ICSSSelector$css_selector$arity$1(null)), cljs.core.str(garden.selectors.css_selector.call(null, a)), cljs.core.str(garden.selectors.css_selector.call(null, b)), cljs.core.str(garden.selectors.css_selector.call(null, c)), cljs.core.str(garden.selectors.css_selector.call(null, d)), cljs.core.str(garden.selectors.css_selector.call(null, e))].join(""), null, null, null);
  };
  var G__15479__7 = function(self__, a, b, c, d, e, f) {
    var self__ = this;
    var self____$1 = this;
    var this$ = self____$1;
    return new garden.selectors.CSSSelector([cljs.core.str(this$.garden$selectors$ICSSSelector$css_selector$arity$1(null)), cljs.core.str(garden.selectors.css_selector.call(null, a)), cljs.core.str(garden.selectors.css_selector.call(null, b)), cljs.core.str(garden.selectors.css_selector.call(null, c)), cljs.core.str(garden.selectors.css_selector.call(null, d)), cljs.core.str(garden.selectors.css_selector.call(null, e)), cljs.core.str(garden.selectors.css_selector.call(null, f))].join(""), null, null, 
    null);
  };
  var G__15479__8 = function(self__, a, b, c, d, e, f, g) {
    var self__ = this;
    var self____$1 = this;
    var this$ = self____$1;
    return new garden.selectors.CSSSelector([cljs.core.str(this$.garden$selectors$ICSSSelector$css_selector$arity$1(null)), cljs.core.str(garden.selectors.css_selector.call(null, a)), cljs.core.str(garden.selectors.css_selector.call(null, b)), cljs.core.str(garden.selectors.css_selector.call(null, c)), cljs.core.str(garden.selectors.css_selector.call(null, d)), cljs.core.str(garden.selectors.css_selector.call(null, e)), cljs.core.str(garden.selectors.css_selector.call(null, f)), cljs.core.str(garden.selectors.css_selector.call(null, 
    g))].join(""), null, null, null);
  };
  var G__15479__9 = function(self__, a, b, c, d, e, f, g, h) {
    var self__ = this;
    var self____$1 = this;
    var this$ = self____$1;
    return new garden.selectors.CSSSelector([cljs.core.str(this$.garden$selectors$ICSSSelector$css_selector$arity$1(null)), cljs.core.str(garden.selectors.css_selector.call(null, a)), cljs.core.str(garden.selectors.css_selector.call(null, b)), cljs.core.str(garden.selectors.css_selector.call(null, c)), cljs.core.str(garden.selectors.css_selector.call(null, d)), cljs.core.str(garden.selectors.css_selector.call(null, e)), cljs.core.str(garden.selectors.css_selector.call(null, f)), cljs.core.str(garden.selectors.css_selector.call(null, 
    g)), cljs.core.str(garden.selectors.css_selector.call(null, h))].join(""), null, null, null);
  };
  var G__15479__10 = function(self__, a, b, c, d, e, f, g, h, i) {
    var self__ = this;
    var self____$1 = this;
    var this$ = self____$1;
    return new garden.selectors.CSSSelector([cljs.core.str(this$.garden$selectors$ICSSSelector$css_selector$arity$1(null)), cljs.core.str(garden.selectors.css_selector.call(null, a)), cljs.core.str(garden.selectors.css_selector.call(null, b)), cljs.core.str(garden.selectors.css_selector.call(null, c)), cljs.core.str(garden.selectors.css_selector.call(null, d)), cljs.core.str(garden.selectors.css_selector.call(null, e)), cljs.core.str(garden.selectors.css_selector.call(null, f)), cljs.core.str(garden.selectors.css_selector.call(null, 
    g)), cljs.core.str(garden.selectors.css_selector.call(null, h)), cljs.core.str(garden.selectors.css_selector.call(null, i))].join(""), null, null, null);
  };
  var G__15479__11 = function(self__, a, b, c, d, e, f, g, h, i, j) {
    var self__ = this;
    var self____$1 = this;
    var this$ = self____$1;
    return new garden.selectors.CSSSelector([cljs.core.str(this$.garden$selectors$ICSSSelector$css_selector$arity$1(null)), cljs.core.str(garden.selectors.css_selector.call(null, a)), cljs.core.str(garden.selectors.css_selector.call(null, b)), cljs.core.str(garden.selectors.css_selector.call(null, c)), cljs.core.str(garden.selectors.css_selector.call(null, d)), cljs.core.str(garden.selectors.css_selector.call(null, e)), cljs.core.str(garden.selectors.css_selector.call(null, f)), cljs.core.str(garden.selectors.css_selector.call(null, 
    g)), cljs.core.str(garden.selectors.css_selector.call(null, h)), cljs.core.str(garden.selectors.css_selector.call(null, i)), cljs.core.str(garden.selectors.css_selector.call(null, j))].join(""), null, null, null);
  };
  var G__15479__12 = function(self__, a, b, c, d, e, f, g, h, i, j, k) {
    var self__ = this;
    var self____$1 = this;
    var this$ = self____$1;
    return new garden.selectors.CSSSelector([cljs.core.str(this$.garden$selectors$ICSSSelector$css_selector$arity$1(null)), cljs.core.str(garden.selectors.css_selector.call(null, a)), cljs.core.str(garden.selectors.css_selector.call(null, b)), cljs.core.str(garden.selectors.css_selector.call(null, c)), cljs.core.str(garden.selectors.css_selector.call(null, d)), cljs.core.str(garden.selectors.css_selector.call(null, e)), cljs.core.str(garden.selectors.css_selector.call(null, f)), cljs.core.str(garden.selectors.css_selector.call(null, 
    g)), cljs.core.str(garden.selectors.css_selector.call(null, h)), cljs.core.str(garden.selectors.css_selector.call(null, i)), cljs.core.str(garden.selectors.css_selector.call(null, j)), cljs.core.str(garden.selectors.css_selector.call(null, k))].join(""), null, null, null);
  };
  var G__15479__13 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l) {
    var self__ = this;
    var self____$1 = this;
    var this$ = self____$1;
    return new garden.selectors.CSSSelector([cljs.core.str(this$.garden$selectors$ICSSSelector$css_selector$arity$1(null)), cljs.core.str(garden.selectors.css_selector.call(null, a)), cljs.core.str(garden.selectors.css_selector.call(null, b)), cljs.core.str(garden.selectors.css_selector.call(null, c)), cljs.core.str(garden.selectors.css_selector.call(null, d)), cljs.core.str(garden.selectors.css_selector.call(null, e)), cljs.core.str(garden.selectors.css_selector.call(null, f)), cljs.core.str(garden.selectors.css_selector.call(null, 
    g)), cljs.core.str(garden.selectors.css_selector.call(null, h)), cljs.core.str(garden.selectors.css_selector.call(null, i)), cljs.core.str(garden.selectors.css_selector.call(null, j)), cljs.core.str(garden.selectors.css_selector.call(null, k)), cljs.core.str(garden.selectors.css_selector.call(null, l))].join(""), null, null, null);
  };
  var G__15479__14 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m) {
    var self__ = this;
    var self____$1 = this;
    var this$ = self____$1;
    return new garden.selectors.CSSSelector([cljs.core.str(this$.garden$selectors$ICSSSelector$css_selector$arity$1(null)), cljs.core.str(garden.selectors.css_selector.call(null, a)), cljs.core.str(garden.selectors.css_selector.call(null, b)), cljs.core.str(garden.selectors.css_selector.call(null, c)), cljs.core.str(garden.selectors.css_selector.call(null, d)), cljs.core.str(garden.selectors.css_selector.call(null, e)), cljs.core.str(garden.selectors.css_selector.call(null, f)), cljs.core.str(garden.selectors.css_selector.call(null, 
    g)), cljs.core.str(garden.selectors.css_selector.call(null, h)), cljs.core.str(garden.selectors.css_selector.call(null, i)), cljs.core.str(garden.selectors.css_selector.call(null, j)), cljs.core.str(garden.selectors.css_selector.call(null, k)), cljs.core.str(garden.selectors.css_selector.call(null, l)), cljs.core.str(garden.selectors.css_selector.call(null, m))].join(""), null, null, null);
  };
  var G__15479__15 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
    var self__ = this;
    var self____$1 = this;
    var this$ = self____$1;
    return new garden.selectors.CSSSelector([cljs.core.str(this$.garden$selectors$ICSSSelector$css_selector$arity$1(null)), cljs.core.str(garden.selectors.css_selector.call(null, a)), cljs.core.str(garden.selectors.css_selector.call(null, b)), cljs.core.str(garden.selectors.css_selector.call(null, c)), cljs.core.str(garden.selectors.css_selector.call(null, d)), cljs.core.str(garden.selectors.css_selector.call(null, e)), cljs.core.str(garden.selectors.css_selector.call(null, f)), cljs.core.str(garden.selectors.css_selector.call(null, 
    g)), cljs.core.str(garden.selectors.css_selector.call(null, h)), cljs.core.str(garden.selectors.css_selector.call(null, i)), cljs.core.str(garden.selectors.css_selector.call(null, j)), cljs.core.str(garden.selectors.css_selector.call(null, k)), cljs.core.str(garden.selectors.css_selector.call(null, l)), cljs.core.str(garden.selectors.css_selector.call(null, m)), cljs.core.str(garden.selectors.css_selector.call(null, n))].join(""), null, null, null);
  };
  var G__15479__16 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
    var self__ = this;
    var self____$1 = this;
    var this$ = self____$1;
    return new garden.selectors.CSSSelector([cljs.core.str(this$.garden$selectors$ICSSSelector$css_selector$arity$1(null)), cljs.core.str(garden.selectors.css_selector.call(null, a)), cljs.core.str(garden.selectors.css_selector.call(null, b)), cljs.core.str(garden.selectors.css_selector.call(null, c)), cljs.core.str(garden.selectors.css_selector.call(null, d)), cljs.core.str(garden.selectors.css_selector.call(null, e)), cljs.core.str(garden.selectors.css_selector.call(null, f)), cljs.core.str(garden.selectors.css_selector.call(null, 
    g)), cljs.core.str(garden.selectors.css_selector.call(null, h)), cljs.core.str(garden.selectors.css_selector.call(null, i)), cljs.core.str(garden.selectors.css_selector.call(null, j)), cljs.core.str(garden.selectors.css_selector.call(null, k)), cljs.core.str(garden.selectors.css_selector.call(null, l)), cljs.core.str(garden.selectors.css_selector.call(null, m)), cljs.core.str(garden.selectors.css_selector.call(null, n)), cljs.core.str(garden.selectors.css_selector.call(null, o))].join(""), null, 
    null, null);
  };
  var G__15479__17 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
    var self__ = this;
    var self____$1 = this;
    var this$ = self____$1;
    return new garden.selectors.CSSSelector([cljs.core.str(this$.garden$selectors$ICSSSelector$css_selector$arity$1(null)), cljs.core.str(garden.selectors.css_selector.call(null, a)), cljs.core.str(garden.selectors.css_selector.call(null, b)), cljs.core.str(garden.selectors.css_selector.call(null, c)), cljs.core.str(garden.selectors.css_selector.call(null, d)), cljs.core.str(garden.selectors.css_selector.call(null, e)), cljs.core.str(garden.selectors.css_selector.call(null, f)), cljs.core.str(garden.selectors.css_selector.call(null, 
    g)), cljs.core.str(garden.selectors.css_selector.call(null, h)), cljs.core.str(garden.selectors.css_selector.call(null, i)), cljs.core.str(garden.selectors.css_selector.call(null, j)), cljs.core.str(garden.selectors.css_selector.call(null, k)), cljs.core.str(garden.selectors.css_selector.call(null, l)), cljs.core.str(garden.selectors.css_selector.call(null, m)), cljs.core.str(garden.selectors.css_selector.call(null, n)), cljs.core.str(garden.selectors.css_selector.call(null, o)), cljs.core.str(garden.selectors.css_selector.call(null, 
    p))].join(""), null, null, null);
  };
  var G__15479__18 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
    var self__ = this;
    var self____$1 = this;
    var this$ = self____$1;
    return new garden.selectors.CSSSelector([cljs.core.str(this$.garden$selectors$ICSSSelector$css_selector$arity$1(null)), cljs.core.str(garden.selectors.css_selector.call(null, a)), cljs.core.str(garden.selectors.css_selector.call(null, b)), cljs.core.str(garden.selectors.css_selector.call(null, c)), cljs.core.str(garden.selectors.css_selector.call(null, d)), cljs.core.str(garden.selectors.css_selector.call(null, e)), cljs.core.str(garden.selectors.css_selector.call(null, f)), cljs.core.str(garden.selectors.css_selector.call(null, 
    g)), cljs.core.str(garden.selectors.css_selector.call(null, h)), cljs.core.str(garden.selectors.css_selector.call(null, i)), cljs.core.str(garden.selectors.css_selector.call(null, j)), cljs.core.str(garden.selectors.css_selector.call(null, k)), cljs.core.str(garden.selectors.css_selector.call(null, l)), cljs.core.str(garden.selectors.css_selector.call(null, m)), cljs.core.str(garden.selectors.css_selector.call(null, n)), cljs.core.str(garden.selectors.css_selector.call(null, o)), cljs.core.str(garden.selectors.css_selector.call(null, 
    p)), cljs.core.str(garden.selectors.css_selector.call(null, q))].join(""), null, null, null);
  };
  var G__15479__19 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
    var self__ = this;
    var self____$1 = this;
    var this$ = self____$1;
    return new garden.selectors.CSSSelector([cljs.core.str(this$.garden$selectors$ICSSSelector$css_selector$arity$1(null)), cljs.core.str(garden.selectors.css_selector.call(null, a)), cljs.core.str(garden.selectors.css_selector.call(null, b)), cljs.core.str(garden.selectors.css_selector.call(null, c)), cljs.core.str(garden.selectors.css_selector.call(null, d)), cljs.core.str(garden.selectors.css_selector.call(null, e)), cljs.core.str(garden.selectors.css_selector.call(null, f)), cljs.core.str(garden.selectors.css_selector.call(null, 
    g)), cljs.core.str(garden.selectors.css_selector.call(null, h)), cljs.core.str(garden.selectors.css_selector.call(null, i)), cljs.core.str(garden.selectors.css_selector.call(null, j)), cljs.core.str(garden.selectors.css_selector.call(null, k)), cljs.core.str(garden.selectors.css_selector.call(null, l)), cljs.core.str(garden.selectors.css_selector.call(null, m)), cljs.core.str(garden.selectors.css_selector.call(null, n)), cljs.core.str(garden.selectors.css_selector.call(null, o)), cljs.core.str(garden.selectors.css_selector.call(null, 
    p)), cljs.core.str(garden.selectors.css_selector.call(null, q)), cljs.core.str(garden.selectors.css_selector.call(null, r))].join(""), null, null, null);
  };
  var G__15479__20 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
    var self__ = this;
    var self____$1 = this;
    var this$ = self____$1;
    return new garden.selectors.CSSSelector([cljs.core.str(this$.garden$selectors$ICSSSelector$css_selector$arity$1(null)), cljs.core.str(garden.selectors.css_selector.call(null, a)), cljs.core.str(garden.selectors.css_selector.call(null, b)), cljs.core.str(garden.selectors.css_selector.call(null, c)), cljs.core.str(garden.selectors.css_selector.call(null, d)), cljs.core.str(garden.selectors.css_selector.call(null, e)), cljs.core.str(garden.selectors.css_selector.call(null, f)), cljs.core.str(garden.selectors.css_selector.call(null, 
    g)), cljs.core.str(garden.selectors.css_selector.call(null, h)), cljs.core.str(garden.selectors.css_selector.call(null, i)), cljs.core.str(garden.selectors.css_selector.call(null, j)), cljs.core.str(garden.selectors.css_selector.call(null, k)), cljs.core.str(garden.selectors.css_selector.call(null, l)), cljs.core.str(garden.selectors.css_selector.call(null, m)), cljs.core.str(garden.selectors.css_selector.call(null, n)), cljs.core.str(garden.selectors.css_selector.call(null, o)), cljs.core.str(garden.selectors.css_selector.call(null, 
    p)), cljs.core.str(garden.selectors.css_selector.call(null, q)), cljs.core.str(garden.selectors.css_selector.call(null, r)), cljs.core.str(garden.selectors.css_selector.call(null, s))].join(""), null, null, null);
  };
  var G__15479__21 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
    var self__ = this;
    var self____$1 = this;
    var this$ = self____$1;
    return new garden.selectors.CSSSelector([cljs.core.str(this$.garden$selectors$ICSSSelector$css_selector$arity$1(null)), cljs.core.str(garden.selectors.css_selector.call(null, a)), cljs.core.str(garden.selectors.css_selector.call(null, b)), cljs.core.str(garden.selectors.css_selector.call(null, c)), cljs.core.str(garden.selectors.css_selector.call(null, d)), cljs.core.str(garden.selectors.css_selector.call(null, e)), cljs.core.str(garden.selectors.css_selector.call(null, f)), cljs.core.str(garden.selectors.css_selector.call(null, 
    g)), cljs.core.str(garden.selectors.css_selector.call(null, h)), cljs.core.str(garden.selectors.css_selector.call(null, i)), cljs.core.str(garden.selectors.css_selector.call(null, j)), cljs.core.str(garden.selectors.css_selector.call(null, k)), cljs.core.str(garden.selectors.css_selector.call(null, l)), cljs.core.str(garden.selectors.css_selector.call(null, m)), cljs.core.str(garden.selectors.css_selector.call(null, n)), cljs.core.str(garden.selectors.css_selector.call(null, o)), cljs.core.str(garden.selectors.css_selector.call(null, 
    p)), cljs.core.str(garden.selectors.css_selector.call(null, q)), cljs.core.str(garden.selectors.css_selector.call(null, r)), cljs.core.str(garden.selectors.css_selector.call(null, s)), cljs.core.str(garden.selectors.css_selector.call(null, t))].join(""), null, null, null);
  };
  G__15479 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
    switch(arguments.length) {
      case 1:
        return G__15479__1.call(this, self__);
      case 2:
        return G__15479__2.call(this, self__, a);
      case 3:
        return G__15479__3.call(this, self__, a, b);
      case 4:
        return G__15479__4.call(this, self__, a, b, c);
      case 5:
        return G__15479__5.call(this, self__, a, b, c, d);
      case 6:
        return G__15479__6.call(this, self__, a, b, c, d, e);
      case 7:
        return G__15479__7.call(this, self__, a, b, c, d, e, f);
      case 8:
        return G__15479__8.call(this, self__, a, b, c, d, e, f, g);
      case 9:
        return G__15479__9.call(this, self__, a, b, c, d, e, f, g, h);
      case 10:
        return G__15479__10.call(this, self__, a, b, c, d, e, f, g, h, i);
      case 11:
        return G__15479__11.call(this, self__, a, b, c, d, e, f, g, h, i, j);
      case 12:
        return G__15479__12.call(this, self__, a, b, c, d, e, f, g, h, i, j, k);
      case 13:
        return G__15479__13.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l);
      case 14:
        return G__15479__14.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m);
      case 15:
        return G__15479__15.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
      case 16:
        return G__15479__16.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
      case 17:
        return G__15479__17.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
      case 18:
        return G__15479__18.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
      case 19:
        return G__15479__19.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
      case 20:
        return G__15479__20.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
      case 21:
        return G__15479__21.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__15479.cljs$core$IFn$_invoke$arity$1 = G__15479__1;
  G__15479.cljs$core$IFn$_invoke$arity$2 = G__15479__2;
  G__15479.cljs$core$IFn$_invoke$arity$3 = G__15479__3;
  G__15479.cljs$core$IFn$_invoke$arity$4 = G__15479__4;
  G__15479.cljs$core$IFn$_invoke$arity$5 = G__15479__5;
  G__15479.cljs$core$IFn$_invoke$arity$6 = G__15479__6;
  G__15479.cljs$core$IFn$_invoke$arity$7 = G__15479__7;
  G__15479.cljs$core$IFn$_invoke$arity$8 = G__15479__8;
  G__15479.cljs$core$IFn$_invoke$arity$9 = G__15479__9;
  G__15479.cljs$core$IFn$_invoke$arity$10 = G__15479__10;
  G__15479.cljs$core$IFn$_invoke$arity$11 = G__15479__11;
  G__15479.cljs$core$IFn$_invoke$arity$12 = G__15479__12;
  G__15479.cljs$core$IFn$_invoke$arity$13 = G__15479__13;
  G__15479.cljs$core$IFn$_invoke$arity$14 = G__15479__14;
  G__15479.cljs$core$IFn$_invoke$arity$15 = G__15479__15;
  G__15479.cljs$core$IFn$_invoke$arity$16 = G__15479__16;
  G__15479.cljs$core$IFn$_invoke$arity$17 = G__15479__17;
  G__15479.cljs$core$IFn$_invoke$arity$18 = G__15479__18;
  G__15479.cljs$core$IFn$_invoke$arity$19 = G__15479__19;
  G__15479.cljs$core$IFn$_invoke$arity$20 = G__15479__20;
  G__15479.cljs$core$IFn$_invoke$arity$21 = G__15479__21;
  return G__15479;
}();
garden.selectors.CSSSelector.prototype.apply = function(self__, args15473) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args15473)));
};
garden.selectors.CSSSelector.prototype.cljs$core$IFn$_invoke$arity$0 = function() {
  var self__ = this;
  var this$ = this;
  return this$;
};
garden.selectors.CSSSelector.prototype.cljs$core$IFn$_invoke$arity$1 = function(a) {
  var self__ = this;
  var this$ = this;
  return new garden.selectors.CSSSelector([cljs.core.str(this$.garden$selectors$ICSSSelector$css_selector$arity$1(null)), cljs.core.str(garden.selectors.css_selector.call(null, a))].join(""), null, null, null);
};
garden.selectors.CSSSelector.prototype.cljs$core$IFn$_invoke$arity$2 = function(a, b) {
  var self__ = this;
  var this$ = this;
  return new garden.selectors.CSSSelector([cljs.core.str(this$.garden$selectors$ICSSSelector$css_selector$arity$1(null)), cljs.core.str(garden.selectors.css_selector.call(null, a)), cljs.core.str(garden.selectors.css_selector.call(null, b))].join(""), null, null, null);
};
garden.selectors.CSSSelector.prototype.cljs$core$IFn$_invoke$arity$3 = function(a, b, c) {
  var self__ = this;
  var this$ = this;
  return new garden.selectors.CSSSelector([cljs.core.str(this$.garden$selectors$ICSSSelector$css_selector$arity$1(null)), cljs.core.str(garden.selectors.css_selector.call(null, a)), cljs.core.str(garden.selectors.css_selector.call(null, b)), cljs.core.str(garden.selectors.css_selector.call(null, c))].join(""), null, null, null);
};
garden.selectors.CSSSelector.prototype.cljs$core$IFn$_invoke$arity$4 = function(a, b, c, d) {
  var self__ = this;
  var this$ = this;
  return new garden.selectors.CSSSelector([cljs.core.str(this$.garden$selectors$ICSSSelector$css_selector$arity$1(null)), cljs.core.str(garden.selectors.css_selector.call(null, a)), cljs.core.str(garden.selectors.css_selector.call(null, b)), cljs.core.str(garden.selectors.css_selector.call(null, c)), cljs.core.str(garden.selectors.css_selector.call(null, d))].join(""), null, null, null);
};
garden.selectors.CSSSelector.prototype.cljs$core$IFn$_invoke$arity$5 = function(a, b, c, d, e) {
  var self__ = this;
  var this$ = this;
  return new garden.selectors.CSSSelector([cljs.core.str(this$.garden$selectors$ICSSSelector$css_selector$arity$1(null)), cljs.core.str(garden.selectors.css_selector.call(null, a)), cljs.core.str(garden.selectors.css_selector.call(null, b)), cljs.core.str(garden.selectors.css_selector.call(null, c)), cljs.core.str(garden.selectors.css_selector.call(null, d)), cljs.core.str(garden.selectors.css_selector.call(null, e))].join(""), null, null, null);
};
garden.selectors.CSSSelector.prototype.cljs$core$IFn$_invoke$arity$6 = function(a, b, c, d, e, f) {
  var self__ = this;
  var this$ = this;
  return new garden.selectors.CSSSelector([cljs.core.str(this$.garden$selectors$ICSSSelector$css_selector$arity$1(null)), cljs.core.str(garden.selectors.css_selector.call(null, a)), cljs.core.str(garden.selectors.css_selector.call(null, b)), cljs.core.str(garden.selectors.css_selector.call(null, c)), cljs.core.str(garden.selectors.css_selector.call(null, d)), cljs.core.str(garden.selectors.css_selector.call(null, e)), cljs.core.str(garden.selectors.css_selector.call(null, f))].join(""), null, null, 
  null);
};
garden.selectors.CSSSelector.prototype.cljs$core$IFn$_invoke$arity$7 = function(a, b, c, d, e, f, g) {
  var self__ = this;
  var this$ = this;
  return new garden.selectors.CSSSelector([cljs.core.str(this$.garden$selectors$ICSSSelector$css_selector$arity$1(null)), cljs.core.str(garden.selectors.css_selector.call(null, a)), cljs.core.str(garden.selectors.css_selector.call(null, b)), cljs.core.str(garden.selectors.css_selector.call(null, c)), cljs.core.str(garden.selectors.css_selector.call(null, d)), cljs.core.str(garden.selectors.css_selector.call(null, e)), cljs.core.str(garden.selectors.css_selector.call(null, f)), cljs.core.str(garden.selectors.css_selector.call(null, 
  g))].join(""), null, null, null);
};
garden.selectors.CSSSelector.prototype.cljs$core$IFn$_invoke$arity$8 = function(a, b, c, d, e, f, g, h) {
  var self__ = this;
  var this$ = this;
  return new garden.selectors.CSSSelector([cljs.core.str(this$.garden$selectors$ICSSSelector$css_selector$arity$1(null)), cljs.core.str(garden.selectors.css_selector.call(null, a)), cljs.core.str(garden.selectors.css_selector.call(null, b)), cljs.core.str(garden.selectors.css_selector.call(null, c)), cljs.core.str(garden.selectors.css_selector.call(null, d)), cljs.core.str(garden.selectors.css_selector.call(null, e)), cljs.core.str(garden.selectors.css_selector.call(null, f)), cljs.core.str(garden.selectors.css_selector.call(null, 
  g)), cljs.core.str(garden.selectors.css_selector.call(null, h))].join(""), null, null, null);
};
garden.selectors.CSSSelector.prototype.cljs$core$IFn$_invoke$arity$9 = function(a, b, c, d, e, f, g, h, i) {
  var self__ = this;
  var this$ = this;
  return new garden.selectors.CSSSelector([cljs.core.str(this$.garden$selectors$ICSSSelector$css_selector$arity$1(null)), cljs.core.str(garden.selectors.css_selector.call(null, a)), cljs.core.str(garden.selectors.css_selector.call(null, b)), cljs.core.str(garden.selectors.css_selector.call(null, c)), cljs.core.str(garden.selectors.css_selector.call(null, d)), cljs.core.str(garden.selectors.css_selector.call(null, e)), cljs.core.str(garden.selectors.css_selector.call(null, f)), cljs.core.str(garden.selectors.css_selector.call(null, 
  g)), cljs.core.str(garden.selectors.css_selector.call(null, h)), cljs.core.str(garden.selectors.css_selector.call(null, i))].join(""), null, null, null);
};
garden.selectors.CSSSelector.prototype.cljs$core$IFn$_invoke$arity$10 = function(a, b, c, d, e, f, g, h, i, j) {
  var self__ = this;
  var this$ = this;
  return new garden.selectors.CSSSelector([cljs.core.str(this$.garden$selectors$ICSSSelector$css_selector$arity$1(null)), cljs.core.str(garden.selectors.css_selector.call(null, a)), cljs.core.str(garden.selectors.css_selector.call(null, b)), cljs.core.str(garden.selectors.css_selector.call(null, c)), cljs.core.str(garden.selectors.css_selector.call(null, d)), cljs.core.str(garden.selectors.css_selector.call(null, e)), cljs.core.str(garden.selectors.css_selector.call(null, f)), cljs.core.str(garden.selectors.css_selector.call(null, 
  g)), cljs.core.str(garden.selectors.css_selector.call(null, h)), cljs.core.str(garden.selectors.css_selector.call(null, i)), cljs.core.str(garden.selectors.css_selector.call(null, j))].join(""), null, null, null);
};
garden.selectors.CSSSelector.prototype.cljs$core$IFn$_invoke$arity$11 = function(a, b, c, d, e, f, g, h, i, j, k) {
  var self__ = this;
  var this$ = this;
  return new garden.selectors.CSSSelector([cljs.core.str(this$.garden$selectors$ICSSSelector$css_selector$arity$1(null)), cljs.core.str(garden.selectors.css_selector.call(null, a)), cljs.core.str(garden.selectors.css_selector.call(null, b)), cljs.core.str(garden.selectors.css_selector.call(null, c)), cljs.core.str(garden.selectors.css_selector.call(null, d)), cljs.core.str(garden.selectors.css_selector.call(null, e)), cljs.core.str(garden.selectors.css_selector.call(null, f)), cljs.core.str(garden.selectors.css_selector.call(null, 
  g)), cljs.core.str(garden.selectors.css_selector.call(null, h)), cljs.core.str(garden.selectors.css_selector.call(null, i)), cljs.core.str(garden.selectors.css_selector.call(null, j)), cljs.core.str(garden.selectors.css_selector.call(null, k))].join(""), null, null, null);
};
garden.selectors.CSSSelector.prototype.cljs$core$IFn$_invoke$arity$12 = function(a, b, c, d, e, f, g, h, i, j, k, l) {
  var self__ = this;
  var this$ = this;
  return new garden.selectors.CSSSelector([cljs.core.str(this$.garden$selectors$ICSSSelector$css_selector$arity$1(null)), cljs.core.str(garden.selectors.css_selector.call(null, a)), cljs.core.str(garden.selectors.css_selector.call(null, b)), cljs.core.str(garden.selectors.css_selector.call(null, c)), cljs.core.str(garden.selectors.css_selector.call(null, d)), cljs.core.str(garden.selectors.css_selector.call(null, e)), cljs.core.str(garden.selectors.css_selector.call(null, f)), cljs.core.str(garden.selectors.css_selector.call(null, 
  g)), cljs.core.str(garden.selectors.css_selector.call(null, h)), cljs.core.str(garden.selectors.css_selector.call(null, i)), cljs.core.str(garden.selectors.css_selector.call(null, j)), cljs.core.str(garden.selectors.css_selector.call(null, k)), cljs.core.str(garden.selectors.css_selector.call(null, l))].join(""), null, null, null);
};
garden.selectors.CSSSelector.prototype.cljs$core$IFn$_invoke$arity$13 = function(a, b, c, d, e, f, g, h, i, j, k, l, m) {
  var self__ = this;
  var this$ = this;
  return new garden.selectors.CSSSelector([cljs.core.str(this$.garden$selectors$ICSSSelector$css_selector$arity$1(null)), cljs.core.str(garden.selectors.css_selector.call(null, a)), cljs.core.str(garden.selectors.css_selector.call(null, b)), cljs.core.str(garden.selectors.css_selector.call(null, c)), cljs.core.str(garden.selectors.css_selector.call(null, d)), cljs.core.str(garden.selectors.css_selector.call(null, e)), cljs.core.str(garden.selectors.css_selector.call(null, f)), cljs.core.str(garden.selectors.css_selector.call(null, 
  g)), cljs.core.str(garden.selectors.css_selector.call(null, h)), cljs.core.str(garden.selectors.css_selector.call(null, i)), cljs.core.str(garden.selectors.css_selector.call(null, j)), cljs.core.str(garden.selectors.css_selector.call(null, k)), cljs.core.str(garden.selectors.css_selector.call(null, l)), cljs.core.str(garden.selectors.css_selector.call(null, m))].join(""), null, null, null);
};
garden.selectors.CSSSelector.prototype.cljs$core$IFn$_invoke$arity$14 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
  var self__ = this;
  var this$ = this;
  return new garden.selectors.CSSSelector([cljs.core.str(this$.garden$selectors$ICSSSelector$css_selector$arity$1(null)), cljs.core.str(garden.selectors.css_selector.call(null, a)), cljs.core.str(garden.selectors.css_selector.call(null, b)), cljs.core.str(garden.selectors.css_selector.call(null, c)), cljs.core.str(garden.selectors.css_selector.call(null, d)), cljs.core.str(garden.selectors.css_selector.call(null, e)), cljs.core.str(garden.selectors.css_selector.call(null, f)), cljs.core.str(garden.selectors.css_selector.call(null, 
  g)), cljs.core.str(garden.selectors.css_selector.call(null, h)), cljs.core.str(garden.selectors.css_selector.call(null, i)), cljs.core.str(garden.selectors.css_selector.call(null, j)), cljs.core.str(garden.selectors.css_selector.call(null, k)), cljs.core.str(garden.selectors.css_selector.call(null, l)), cljs.core.str(garden.selectors.css_selector.call(null, m)), cljs.core.str(garden.selectors.css_selector.call(null, n))].join(""), null, null, null);
};
garden.selectors.CSSSelector.prototype.cljs$core$IFn$_invoke$arity$15 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
  var self__ = this;
  var this$ = this;
  return new garden.selectors.CSSSelector([cljs.core.str(this$.garden$selectors$ICSSSelector$css_selector$arity$1(null)), cljs.core.str(garden.selectors.css_selector.call(null, a)), cljs.core.str(garden.selectors.css_selector.call(null, b)), cljs.core.str(garden.selectors.css_selector.call(null, c)), cljs.core.str(garden.selectors.css_selector.call(null, d)), cljs.core.str(garden.selectors.css_selector.call(null, e)), cljs.core.str(garden.selectors.css_selector.call(null, f)), cljs.core.str(garden.selectors.css_selector.call(null, 
  g)), cljs.core.str(garden.selectors.css_selector.call(null, h)), cljs.core.str(garden.selectors.css_selector.call(null, i)), cljs.core.str(garden.selectors.css_selector.call(null, j)), cljs.core.str(garden.selectors.css_selector.call(null, k)), cljs.core.str(garden.selectors.css_selector.call(null, l)), cljs.core.str(garden.selectors.css_selector.call(null, m)), cljs.core.str(garden.selectors.css_selector.call(null, n)), cljs.core.str(garden.selectors.css_selector.call(null, o))].join(""), null, 
  null, null);
};
garden.selectors.CSSSelector.prototype.cljs$core$IFn$_invoke$arity$16 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
  var self__ = this;
  var this$ = this;
  return new garden.selectors.CSSSelector([cljs.core.str(this$.garden$selectors$ICSSSelector$css_selector$arity$1(null)), cljs.core.str(garden.selectors.css_selector.call(null, a)), cljs.core.str(garden.selectors.css_selector.call(null, b)), cljs.core.str(garden.selectors.css_selector.call(null, c)), cljs.core.str(garden.selectors.css_selector.call(null, d)), cljs.core.str(garden.selectors.css_selector.call(null, e)), cljs.core.str(garden.selectors.css_selector.call(null, f)), cljs.core.str(garden.selectors.css_selector.call(null, 
  g)), cljs.core.str(garden.selectors.css_selector.call(null, h)), cljs.core.str(garden.selectors.css_selector.call(null, i)), cljs.core.str(garden.selectors.css_selector.call(null, j)), cljs.core.str(garden.selectors.css_selector.call(null, k)), cljs.core.str(garden.selectors.css_selector.call(null, l)), cljs.core.str(garden.selectors.css_selector.call(null, m)), cljs.core.str(garden.selectors.css_selector.call(null, n)), cljs.core.str(garden.selectors.css_selector.call(null, o)), cljs.core.str(garden.selectors.css_selector.call(null, 
  p))].join(""), null, null, null);
};
garden.selectors.CSSSelector.prototype.cljs$core$IFn$_invoke$arity$17 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
  var self__ = this;
  var this$ = this;
  return new garden.selectors.CSSSelector([cljs.core.str(this$.garden$selectors$ICSSSelector$css_selector$arity$1(null)), cljs.core.str(garden.selectors.css_selector.call(null, a)), cljs.core.str(garden.selectors.css_selector.call(null, b)), cljs.core.str(garden.selectors.css_selector.call(null, c)), cljs.core.str(garden.selectors.css_selector.call(null, d)), cljs.core.str(garden.selectors.css_selector.call(null, e)), cljs.core.str(garden.selectors.css_selector.call(null, f)), cljs.core.str(garden.selectors.css_selector.call(null, 
  g)), cljs.core.str(garden.selectors.css_selector.call(null, h)), cljs.core.str(garden.selectors.css_selector.call(null, i)), cljs.core.str(garden.selectors.css_selector.call(null, j)), cljs.core.str(garden.selectors.css_selector.call(null, k)), cljs.core.str(garden.selectors.css_selector.call(null, l)), cljs.core.str(garden.selectors.css_selector.call(null, m)), cljs.core.str(garden.selectors.css_selector.call(null, n)), cljs.core.str(garden.selectors.css_selector.call(null, o)), cljs.core.str(garden.selectors.css_selector.call(null, 
  p)), cljs.core.str(garden.selectors.css_selector.call(null, q))].join(""), null, null, null);
};
garden.selectors.CSSSelector.prototype.cljs$core$IFn$_invoke$arity$18 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
  var self__ = this;
  var this$ = this;
  return new garden.selectors.CSSSelector([cljs.core.str(this$.garden$selectors$ICSSSelector$css_selector$arity$1(null)), cljs.core.str(garden.selectors.css_selector.call(null, a)), cljs.core.str(garden.selectors.css_selector.call(null, b)), cljs.core.str(garden.selectors.css_selector.call(null, c)), cljs.core.str(garden.selectors.css_selector.call(null, d)), cljs.core.str(garden.selectors.css_selector.call(null, e)), cljs.core.str(garden.selectors.css_selector.call(null, f)), cljs.core.str(garden.selectors.css_selector.call(null, 
  g)), cljs.core.str(garden.selectors.css_selector.call(null, h)), cljs.core.str(garden.selectors.css_selector.call(null, i)), cljs.core.str(garden.selectors.css_selector.call(null, j)), cljs.core.str(garden.selectors.css_selector.call(null, k)), cljs.core.str(garden.selectors.css_selector.call(null, l)), cljs.core.str(garden.selectors.css_selector.call(null, m)), cljs.core.str(garden.selectors.css_selector.call(null, n)), cljs.core.str(garden.selectors.css_selector.call(null, o)), cljs.core.str(garden.selectors.css_selector.call(null, 
  p)), cljs.core.str(garden.selectors.css_selector.call(null, q)), cljs.core.str(garden.selectors.css_selector.call(null, r))].join(""), null, null, null);
};
garden.selectors.CSSSelector.prototype.cljs$core$IFn$_invoke$arity$19 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
  var self__ = this;
  var this$ = this;
  return new garden.selectors.CSSSelector([cljs.core.str(this$.garden$selectors$ICSSSelector$css_selector$arity$1(null)), cljs.core.str(garden.selectors.css_selector.call(null, a)), cljs.core.str(garden.selectors.css_selector.call(null, b)), cljs.core.str(garden.selectors.css_selector.call(null, c)), cljs.core.str(garden.selectors.css_selector.call(null, d)), cljs.core.str(garden.selectors.css_selector.call(null, e)), cljs.core.str(garden.selectors.css_selector.call(null, f)), cljs.core.str(garden.selectors.css_selector.call(null, 
  g)), cljs.core.str(garden.selectors.css_selector.call(null, h)), cljs.core.str(garden.selectors.css_selector.call(null, i)), cljs.core.str(garden.selectors.css_selector.call(null, j)), cljs.core.str(garden.selectors.css_selector.call(null, k)), cljs.core.str(garden.selectors.css_selector.call(null, l)), cljs.core.str(garden.selectors.css_selector.call(null, m)), cljs.core.str(garden.selectors.css_selector.call(null, n)), cljs.core.str(garden.selectors.css_selector.call(null, o)), cljs.core.str(garden.selectors.css_selector.call(null, 
  p)), cljs.core.str(garden.selectors.css_selector.call(null, q)), cljs.core.str(garden.selectors.css_selector.call(null, r)), cljs.core.str(garden.selectors.css_selector.call(null, s))].join(""), null, null, null);
};
garden.selectors.CSSSelector.prototype.cljs$core$IFn$_invoke$arity$20 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
  var self__ = this;
  var this$ = this;
  return new garden.selectors.CSSSelector([cljs.core.str(this$.garden$selectors$ICSSSelector$css_selector$arity$1(null)), cljs.core.str(garden.selectors.css_selector.call(null, a)), cljs.core.str(garden.selectors.css_selector.call(null, b)), cljs.core.str(garden.selectors.css_selector.call(null, c)), cljs.core.str(garden.selectors.css_selector.call(null, d)), cljs.core.str(garden.selectors.css_selector.call(null, e)), cljs.core.str(garden.selectors.css_selector.call(null, f)), cljs.core.str(garden.selectors.css_selector.call(null, 
  g)), cljs.core.str(garden.selectors.css_selector.call(null, h)), cljs.core.str(garden.selectors.css_selector.call(null, i)), cljs.core.str(garden.selectors.css_selector.call(null, j)), cljs.core.str(garden.selectors.css_selector.call(null, k)), cljs.core.str(garden.selectors.css_selector.call(null, l)), cljs.core.str(garden.selectors.css_selector.call(null, m)), cljs.core.str(garden.selectors.css_selector.call(null, n)), cljs.core.str(garden.selectors.css_selector.call(null, o)), cljs.core.str(garden.selectors.css_selector.call(null, 
  p)), cljs.core.str(garden.selectors.css_selector.call(null, q)), cljs.core.str(garden.selectors.css_selector.call(null, r)), cljs.core.str(garden.selectors.css_selector.call(null, s)), cljs.core.str(garden.selectors.css_selector.call(null, t))].join(""), null, null, null);
};
garden.selectors.CSSSelector.cljs$lang$type = true;
garden.selectors.CSSSelector.cljs$lang$ctorPrSeq = function(this__4964__auto__) {
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, "garden.selectors/CSSSelector");
};
garden.selectors.CSSSelector.cljs$lang$ctorPrWriter = function(this__4964__auto__, writer__4965__auto__) {
  return cljs.core._write.call(null, writer__4965__auto__, "garden.selectors/CSSSelector");
};
garden.selectors.__GT_CSSSelector = function garden$selectors$__GT_CSSSelector(selector) {
  return new garden.selectors.CSSSelector(selector, null, null, null);
};
garden.selectors.map__GT_CSSSelector = function garden$selectors$map__GT_CSSSelector(G__15472) {
  return new garden.selectors.CSSSelector((new cljs.core.Keyword(null, "selector", "selector", 762528866)).cljs$core$IFn$_invoke$arity$1(G__15472), null, cljs.core.dissoc.call(null, G__15472, new cljs.core.Keyword(null, "selector", "selector", 762528866)), null);
};
garden.selectors.selector = function garden$selectors$selector(x) {
  return new garden.selectors.CSSSelector(x, null, null, null);
};
garden.selectors.html_tags = cljs.core.PersistentVector.fromArray([new cljs.core.Symbol(null, "a", "a", -482876059, null), new cljs.core.Symbol(null, "abbr", "abbr", -565843885, null), new cljs.core.Symbol(null, "address", "address", -2094936343, null), new cljs.core.Symbol(null, "area", "area", 2112538783, null), new cljs.core.Symbol(null, "article", "article", 1618846482, null), new cljs.core.Symbol(null, "aside", "aside", -1240038232, null), new cljs.core.Symbol(null, "audio", "audio", -835308448, 
null), new cljs.core.Symbol(null, "b", "b", -1172211299, null), new cljs.core.Symbol(null, "base", "base", 1825810849, null), new cljs.core.Symbol(null, "bdi", "bdi", 317505641, null), new cljs.core.Symbol(null, "bdo", "bdo", -490616675, null), new cljs.core.Symbol(null, "blockquote", "blockquote", 2012795717, null), new cljs.core.Symbol(null, "body", "body", -408674142, null), new cljs.core.Symbol(null, "br", "br", -1720330977, null), new cljs.core.Symbol(null, "button", "button", -1197855826, null), 
new cljs.core.Symbol(null, "canvas", "canvas", -158285962, null), new cljs.core.Symbol(null, "caption", "caption", 785147625, null), new cljs.core.Symbol(null, "cite", "cite", -744995773, null), new cljs.core.Symbol(null, "code", "code", -1068142627, null), new cljs.core.Symbol(null, "col", "col", -318831557, null), new cljs.core.Symbol(null, "colgroup", "colgroup", -2003317124, null), new cljs.core.Symbol(null, "command", "command", 745990803, null), new cljs.core.Symbol(null, "datalist", "datalist", 
405488053, null), new cljs.core.Symbol(null, "dd", "dd", 300093898, null), new cljs.core.Symbol(null, "del", "del", -2079460185, null), new cljs.core.Symbol(null, "details", "details", -697640358, null), new cljs.core.Symbol(null, "dfn", "dfn", 1882439694, null), new cljs.core.Symbol(null, "div", "div", -1597244137, null), new cljs.core.Symbol(null, "dl", "dl", -499620186, null), new cljs.core.Symbol(null, "dt", "dt", 1272086768, null), new cljs.core.Symbol(null, "em", "em", -1946622734, null), new cljs.core.Symbol(null, 
"embed", "embed", 285618178, null), new cljs.core.Symbol(null, "fieldset", "fieldset", -309239289, null), new cljs.core.Symbol(null, "figcaption", "figcaption", -149590520, null), new cljs.core.Symbol(null, "figure", "figure", 1079137448, null), new cljs.core.Symbol(null, "footer", "footer", -1047990379, null), new cljs.core.Symbol(null, "form", "form", 16469056, null), new cljs.core.Symbol(null, "h1", "h1", -256355935, null), new cljs.core.Symbol(null, "h2", "h2", 1267868799, null), new cljs.core.Symbol(null, 
"h3", "h3", -586824606, null), new cljs.core.Symbol(null, "h4", "h4", -649572776, null), new cljs.core.Symbol(null, "h5", "h5", -188625098, null), new cljs.core.Symbol(null, "h6", "h6", -2097141989, null), new cljs.core.Symbol(null, "head", "head", 869147608, null), new cljs.core.Symbol(null, "header", "header", 1759972661, null), new cljs.core.Symbol(null, "hgroup", "hgroup", -1525585280, null), new cljs.core.Symbol(null, "hr", "hr", -1276695702, null), new cljs.core.Symbol(null, "html", "html", 
641734630, null), new cljs.core.Symbol(null, "i", "i", 253690212, null), new cljs.core.Symbol(null, "iframe", "iframe", -1770013743, null), new cljs.core.Symbol(null, "img", "img", -1211748411, null), new cljs.core.Symbol(null, "input", "input", -2097503808, null), new cljs.core.Symbol(null, "ins", "ins", 618547957, null), new cljs.core.Symbol(null, "kbd", "kbd", 1956688402, null), new cljs.core.Symbol(null, "keygen", "keygen", 1068838274, null), new cljs.core.Symbol(null, "label", "label", -936024965, 
null), new cljs.core.Symbol(null, "legend", "legend", 613339282, null), new cljs.core.Symbol(null, "li", "li", -1930876848, null), new cljs.core.Symbol(null, "link", "link", -128631941, null), new cljs.core.Symbol(null, "map", "map", -1282745308, null), new cljs.core.Symbol(null, "mark", "mark", 1266715182, null), new cljs.core.Symbol(null, "math", "math", -386381276, null), new cljs.core.Symbol(null, "menu", "menu", 1992786725, null), new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), 
new cljs.core.Symbol(null, "meter", "meter", 1452889916, null), new cljs.core.Symbol(null, "nav", "nav", -1934895292, null), new cljs.core.Symbol(null, "noscript", "noscript", 935754238, null), new cljs.core.Symbol(null, "object", "object", -1179821820, null), new cljs.core.Symbol(null, "ol", "ol", -1721911718, null), new cljs.core.Symbol(null, "optgroup", "optgroup", -916153551, null), new cljs.core.Symbol(null, "option", "option", 1705663799, null), new cljs.core.Symbol(null, "output", "output", 
534662484, null), new cljs.core.Symbol(null, "p", "p", 1791580836, null), new cljs.core.Symbol(null, "param", "param", -640803946, null), new cljs.core.Symbol(null, "pre", "pre", -535978900, null), new cljs.core.Symbol(null, "progress", "progress", 1884855074, null), new cljs.core.Symbol(null, "q", "q", -1965434072, null), new cljs.core.Symbol(null, "rp", "rp", -647737686, null), new cljs.core.Symbol(null, "rt", "rt", -2030955077, null), new cljs.core.Symbol(null, "ruby", "ruby", -653698108, null), 
new cljs.core.Symbol(null, "s", "s", -948495851, null), new cljs.core.Symbol(null, "samp", "samp", -1148294633, null), new cljs.core.Symbol(null, "script", "script", 336087726, null), new cljs.core.Symbol(null, "section", "section", 1340390001, null), new cljs.core.Symbol(null, "select", "select", -1506602266, null), new cljs.core.Symbol(null, "small", "small", -520957065, null), new cljs.core.Symbol(null, "source", "source", 1206599988, null), new cljs.core.Symbol(null, "span", "span", -1259562778, 
null), new cljs.core.Symbol(null, "strong", "strong", 1910060527, null), new cljs.core.Symbol(null, "style", "style", 1143888791, null), new cljs.core.Symbol(null, "sub", "sub", -453228498, null), new cljs.core.Symbol(null, "summary", "summary", 2021379479, null), new cljs.core.Symbol(null, "sup", "sup", -398960819, null), new cljs.core.Symbol(null, "svg", "svg", -1797646627, null), new cljs.core.Symbol(null, "table", "table", 1075588491, null), new cljs.core.Symbol(null, "tbody", "tbody", 1559853227, 
null), new cljs.core.Symbol(null, "td", "td", -1174502416, null), new cljs.core.Symbol(null, "textarea", "textarea", 990155703, null), new cljs.core.Symbol(null, "tfoot", "tfoot", 938931637, null), new cljs.core.Symbol(null, "th", "th", 1094922961, null), new cljs.core.Symbol(null, "thead", "thead", 1348656231, null), new cljs.core.Symbol(null, "time", "time", -1268547887, null), new cljs.core.Symbol(null, "title", "title", -2017930186, null), new cljs.core.Symbol(null, "tr", "tr", 215756881, null), 
new cljs.core.Symbol(null, "track", "track", 1836319014, null), new cljs.core.Symbol(null, "u", "u", 483896742, null), new cljs.core.Symbol(null, "ul", "ul", 291010124, null), new cljs.core.Symbol(null, "var", "var", 870848730, null), new cljs.core.Symbol(null, "video", "video", 1797419657, null), new cljs.core.Symbol(null, "wbr", "wbr", 1869193327, null)], true);
garden.selectors.a = garden.selectors.selector.call(null, "a");
garden.selectors.abbr = garden.selectors.selector.call(null, "abbr");
garden.selectors.address = garden.selectors.selector.call(null, "address");
garden.selectors.area = garden.selectors.selector.call(null, "area");
garden.selectors.article = garden.selectors.selector.call(null, "article");
garden.selectors.aside = garden.selectors.selector.call(null, "aside");
garden.selectors.audio = garden.selectors.selector.call(null, "audio");
garden.selectors.b = garden.selectors.selector.call(null, "b");
garden.selectors.base = garden.selectors.selector.call(null, "base");
garden.selectors.bdi = garden.selectors.selector.call(null, "bdi");
garden.selectors.bdo = garden.selectors.selector.call(null, "bdo");
garden.selectors.blockquote = garden.selectors.selector.call(null, "blockquote");
garden.selectors.body = garden.selectors.selector.call(null, "body");
garden.selectors.br = garden.selectors.selector.call(null, "br");
garden.selectors.button = garden.selectors.selector.call(null, "button");
garden.selectors.canvas = garden.selectors.selector.call(null, "canvas");
garden.selectors.caption = garden.selectors.selector.call(null, "caption");
garden.selectors.cite = garden.selectors.selector.call(null, "cite");
garden.selectors.code = garden.selectors.selector.call(null, "code");
garden.selectors.col = garden.selectors.selector.call(null, "col");
garden.selectors.colgroup = garden.selectors.selector.call(null, "colgroup");
garden.selectors.command = garden.selectors.selector.call(null, "command");
garden.selectors.datalist = garden.selectors.selector.call(null, "datalist");
garden.selectors.dd = garden.selectors.selector.call(null, "dd");
garden.selectors.del = garden.selectors.selector.call(null, "del");
garden.selectors.details = garden.selectors.selector.call(null, "details");
garden.selectors.dfn = garden.selectors.selector.call(null, "dfn");
garden.selectors.div = garden.selectors.selector.call(null, "div");
garden.selectors.dl = garden.selectors.selector.call(null, "dl");
garden.selectors.dt = garden.selectors.selector.call(null, "dt");
garden.selectors.em = garden.selectors.selector.call(null, "em");
garden.selectors.embed = garden.selectors.selector.call(null, "embed");
garden.selectors.fieldset = garden.selectors.selector.call(null, "fieldset");
garden.selectors.figcaption = garden.selectors.selector.call(null, "figcaption");
garden.selectors.figure = garden.selectors.selector.call(null, "figure");
garden.selectors.footer = garden.selectors.selector.call(null, "footer");
garden.selectors.form = garden.selectors.selector.call(null, "form");
garden.selectors.h1 = garden.selectors.selector.call(null, "h1");
garden.selectors.h2 = garden.selectors.selector.call(null, "h2");
garden.selectors.h3 = garden.selectors.selector.call(null, "h3");
garden.selectors.h4 = garden.selectors.selector.call(null, "h4");
garden.selectors.h5 = garden.selectors.selector.call(null, "h5");
garden.selectors.h6 = garden.selectors.selector.call(null, "h6");
garden.selectors.head = garden.selectors.selector.call(null, "head");
garden.selectors.header = garden.selectors.selector.call(null, "header");
garden.selectors.hgroup = garden.selectors.selector.call(null, "hgroup");
garden.selectors.hr = garden.selectors.selector.call(null, "hr");
garden.selectors.html = garden.selectors.selector.call(null, "html");
garden.selectors.i = garden.selectors.selector.call(null, "i");
garden.selectors.iframe = garden.selectors.selector.call(null, "iframe");
garden.selectors.img = garden.selectors.selector.call(null, "img");
garden.selectors.input = garden.selectors.selector.call(null, "input");
garden.selectors.ins = garden.selectors.selector.call(null, "ins");
garden.selectors.kbd = garden.selectors.selector.call(null, "kbd");
garden.selectors.keygen = garden.selectors.selector.call(null, "keygen");
garden.selectors.label = garden.selectors.selector.call(null, "label");
garden.selectors.legend = garden.selectors.selector.call(null, "legend");
garden.selectors.li = garden.selectors.selector.call(null, "li");
garden.selectors.link = garden.selectors.selector.call(null, "link");
garden.selectors.map = garden.selectors.selector.call(null, "map");
garden.selectors.mark = garden.selectors.selector.call(null, "mark");
garden.selectors.math = garden.selectors.selector.call(null, "math");
garden.selectors.menu = garden.selectors.selector.call(null, "menu");
garden.selectors.meta = garden.selectors.selector.call(null, "meta");
garden.selectors.meter = garden.selectors.selector.call(null, "meter");
garden.selectors.nav = garden.selectors.selector.call(null, "nav");
garden.selectors.noscript = garden.selectors.selector.call(null, "noscript");
garden.selectors.object = garden.selectors.selector.call(null, "object");
garden.selectors.ol = garden.selectors.selector.call(null, "ol");
garden.selectors.optgroup = garden.selectors.selector.call(null, "optgroup");
garden.selectors.option = garden.selectors.selector.call(null, "option");
garden.selectors.output = garden.selectors.selector.call(null, "output");
garden.selectors.p = garden.selectors.selector.call(null, "p");
garden.selectors.param = garden.selectors.selector.call(null, "param");
garden.selectors.pre = garden.selectors.selector.call(null, "pre");
garden.selectors.progress = garden.selectors.selector.call(null, "progress");
garden.selectors.q = garden.selectors.selector.call(null, "q");
garden.selectors.rp = garden.selectors.selector.call(null, "rp");
garden.selectors.rt = garden.selectors.selector.call(null, "rt");
garden.selectors.ruby = garden.selectors.selector.call(null, "ruby");
garden.selectors.s = garden.selectors.selector.call(null, "s");
garden.selectors.samp = garden.selectors.selector.call(null, "samp");
garden.selectors.script = garden.selectors.selector.call(null, "script");
garden.selectors.section = garden.selectors.selector.call(null, "section");
garden.selectors.select = garden.selectors.selector.call(null, "select");
garden.selectors.small = garden.selectors.selector.call(null, "small");
garden.selectors.source = garden.selectors.selector.call(null, "source");
garden.selectors.span = garden.selectors.selector.call(null, "span");
garden.selectors.strong = garden.selectors.selector.call(null, "strong");
garden.selectors.style = garden.selectors.selector.call(null, "style");
garden.selectors.sub = garden.selectors.selector.call(null, "sub");
garden.selectors.summary = garden.selectors.selector.call(null, "summary");
garden.selectors.sup = garden.selectors.selector.call(null, "sup");
garden.selectors.svg = garden.selectors.selector.call(null, "svg");
garden.selectors.table = garden.selectors.selector.call(null, "table");
garden.selectors.tbody = garden.selectors.selector.call(null, "tbody");
garden.selectors.td = garden.selectors.selector.call(null, "td");
garden.selectors.textarea = garden.selectors.selector.call(null, "textarea");
garden.selectors.tfoot = garden.selectors.selector.call(null, "tfoot");
garden.selectors.th = garden.selectors.selector.call(null, "th");
garden.selectors.thead = garden.selectors.selector.call(null, "thead");
garden.selectors.time = garden.selectors.selector.call(null, "time");
garden.selectors.title = garden.selectors.selector.call(null, "title");
garden.selectors.tr = garden.selectors.selector.call(null, "tr");
garden.selectors.track = garden.selectors.selector.call(null, "track");
garden.selectors.u = garden.selectors.selector.call(null, "u");
garden.selectors.ul = garden.selectors.selector.call(null, "ul");
garden.selectors.var$ = garden.selectors.selector.call(null, "var");
garden.selectors.video = garden.selectors.selector.call(null, "video");
garden.selectors.wbr = garden.selectors.selector.call(null, "wbr");
garden.selectors.pseudo_classes = cljs.core.PersistentVector.fromArray([new cljs.core.Symbol(null, "active", "active", -758473701, null), new cljs.core.Symbol(null, "checked", "checked", 1589575708, null), new cljs.core.Symbol(null, "default", "default", -347290801, null), new cljs.core.Symbol(null, "disabled", "disabled", 110747309, null), new cljs.core.Symbol(null, "empty", "empty", -1886564811, null), new cljs.core.Symbol(null, "enabled", "enabled", -1458526013, null), new cljs.core.Symbol(null, 
"first", "first", 996428481, null), new cljs.core.Symbol(null, "first-child", "first-child", -540335927, null), new cljs.core.Symbol(null, "first-of-type", "first-of-type", 900311874, null), new cljs.core.Symbol(null, "fullscreen", "fullscreen", 1636160473, null), new cljs.core.Symbol(null, "focus", "focus", 1875209438, null), new cljs.core.Symbol(null, "hover", "hover", 1299389816, null), new cljs.core.Symbol(null, "indeterminate", "indeterminate", 1127490551, null), new cljs.core.Symbol(null, "in-range", 
"in-range", -1297863944, null), new cljs.core.Symbol(null, "invalid", "invalid", 2053401043, null), new cljs.core.Symbol(null, "last-child", "last-child", -1323765444, null), new cljs.core.Symbol(null, "last-of-type", "last-of-type", 986453331, null), new cljs.core.Symbol(null, "left", "left", 1241415590, null), new cljs.core.Symbol(null, "link", "link", -128631941, null), new cljs.core.Symbol(null, "only-child", "only-child", 220029032, null), new cljs.core.Symbol(null, "only-of-type", "only-of-type", 
-1960460626, null), new cljs.core.Symbol(null, "optional", "optional", -600484260, null), new cljs.core.Symbol(null, "out-of-range", "out-of-range", -1962117180, null), new cljs.core.Symbol(null, "read-only", "read-only", 1448824641, null), new cljs.core.Symbol(null, "read-write", "read-write", 1818554410, null), new cljs.core.Symbol(null, "required", "required", -846788763, null), new cljs.core.Symbol(null, "right", "right", 1187949694, null), new cljs.core.Symbol(null, "root", "root", 1191874074, 
null), new cljs.core.Symbol(null, "scope", "scope", 1201173109, null), new cljs.core.Symbol(null, "target", "target", 1893533248, null), new cljs.core.Symbol(null, "valid", "valid", 1796145767, null), new cljs.core.Symbol(null, "visited", "visited", 29677652, null)], true);
garden.selectors.active = garden.selectors.selector.call(null, ":active");
garden.selectors.checked = garden.selectors.selector.call(null, ":checked");
garden.selectors.default$ = garden.selectors.selector.call(null, ":default");
garden.selectors.disabled = garden.selectors.selector.call(null, ":disabled");
garden.selectors.empty = garden.selectors.selector.call(null, ":empty");
garden.selectors.enabled = garden.selectors.selector.call(null, ":enabled");
garden.selectors.first = garden.selectors.selector.call(null, ":first");
garden.selectors.first_child = garden.selectors.selector.call(null, ":first-child");
garden.selectors.first_of_type = garden.selectors.selector.call(null, ":first-of-type");
garden.selectors.fullscreen = garden.selectors.selector.call(null, ":fullscreen");
garden.selectors.focus = garden.selectors.selector.call(null, ":focus");
garden.selectors.hover = garden.selectors.selector.call(null, ":hover");
garden.selectors.indeterminate = garden.selectors.selector.call(null, ":indeterminate");
garden.selectors.in_range = garden.selectors.selector.call(null, ":in-range");
garden.selectors.invalid = garden.selectors.selector.call(null, ":invalid");
garden.selectors.last_child = garden.selectors.selector.call(null, ":last-child");
garden.selectors.last_of_type = garden.selectors.selector.call(null, ":last-of-type");
garden.selectors.left = garden.selectors.selector.call(null, ":left");
garden.selectors.link = garden.selectors.selector.call(null, ":link");
garden.selectors.only_child = garden.selectors.selector.call(null, ":only-child");
garden.selectors.only_of_type = garden.selectors.selector.call(null, ":only-of-type");
garden.selectors.optional = garden.selectors.selector.call(null, ":optional");
garden.selectors.out_of_range = garden.selectors.selector.call(null, ":out-of-range");
garden.selectors.read_only = garden.selectors.selector.call(null, ":read-only");
garden.selectors.read_write = garden.selectors.selector.call(null, ":read-write");
garden.selectors.required = garden.selectors.selector.call(null, ":required");
garden.selectors.right = garden.selectors.selector.call(null, ":right");
garden.selectors.root = garden.selectors.selector.call(null, ":root");
garden.selectors.scope = garden.selectors.selector.call(null, ":scope");
garden.selectors.target = garden.selectors.selector.call(null, ":target");
garden.selectors.valid = garden.selectors.selector.call(null, ":valid");
garden.selectors.visited = garden.selectors.selector.call(null, ":visited");
garden.selectors.lang = function() {
  var garden$selectors$lang__delegate = function(args__10807__auto__) {
    var v__10808__auto__ = cljs.core.apply.call(null, function(language) {
      return cljs.core.name.call(null, language);
    }, args__10807__auto__);
    var v__10808__auto____$1 = cljs.core.truth_(garden.selectors.selector_QMARK_.call(null, v__10808__auto__)) ? garden.selectors.css_selector.call(null, v__10808__auto__) : v__10808__auto__;
    return garden.selectors.selector.call(null, [cljs.core.str(":"), cljs.core.str("lang"), cljs.core.str("("), cljs.core.str(v__10808__auto____$1), cljs.core.str(")")].join(""));
  };
  var garden$selectors$lang = function(var_args) {
    var args__10807__auto__ = null;
    if (arguments.length > 0) {
      var G__15480__i = 0, G__15480__a = new Array(arguments.length - 0);
      while (G__15480__i < G__15480__a.length) {
        G__15480__a[G__15480__i] = arguments[G__15480__i + 0];
        ++G__15480__i;
      }
      args__10807__auto__ = new cljs.core.IndexedSeq(G__15480__a, 0);
    }
    return garden$selectors$lang__delegate.call(this, args__10807__auto__);
  };
  garden$selectors$lang.cljs$lang$maxFixedArity = 0;
  garden$selectors$lang.cljs$lang$applyTo = function(arglist__15481) {
    var args__10807__auto__ = cljs.core.seq(arglist__15481);
    return garden$selectors$lang__delegate(args__10807__auto__);
  };
  garden$selectors$lang.cljs$core$IFn$_invoke$arity$variadic = garden$selectors$lang__delegate;
  return garden$selectors$lang;
}();
garden.selectors.not = function() {
  var garden$selectors$not__delegate = function(args__10807__auto__) {
    var v__10808__auto__ = cljs.core.apply.call(null, function(selector) {
      return garden.selectors.css_selector.call(null, selector);
    }, args__10807__auto__);
    var v__10808__auto____$1 = cljs.core.truth_(garden.selectors.selector_QMARK_.call(null, v__10808__auto__)) ? garden.selectors.css_selector.call(null, v__10808__auto__) : v__10808__auto__;
    return garden.selectors.selector.call(null, [cljs.core.str(":"), cljs.core.str("not"), cljs.core.str("("), cljs.core.str(v__10808__auto____$1), cljs.core.str(")")].join(""));
  };
  var garden$selectors$not = function(var_args) {
    var args__10807__auto__ = null;
    if (arguments.length > 0) {
      var G__15482__i = 0, G__15482__a = new Array(arguments.length - 0);
      while (G__15482__i < G__15482__a.length) {
        G__15482__a[G__15482__i] = arguments[G__15482__i + 0];
        ++G__15482__i;
      }
      args__10807__auto__ = new cljs.core.IndexedSeq(G__15482__a, 0);
    }
    return garden$selectors$not__delegate.call(this, args__10807__auto__);
  };
  garden$selectors$not.cljs$lang$maxFixedArity = 0;
  garden$selectors$not.cljs$lang$applyTo = function(arglist__15483) {
    var args__10807__auto__ = cljs.core.seq(arglist__15483);
    return garden$selectors$not__delegate(args__10807__auto__);
  };
  garden$selectors$not.cljs$core$IFn$_invoke$arity$variadic = garden$selectors$not__delegate;
  return garden$selectors$not;
}();
garden.selectors.nth_child_re = new RegExp("\\s*(?:[-+]?\\d+n\\s*(?:[-+]\\s*\\d+)?|[-+]?\\d+|odd|even)\\s*", "i");
garden.selectors.nth_x = function garden$selectors$nth_x(x) {
  if (typeof x === "string" || x instanceof cljs.core.Keyword || x instanceof cljs.core.Symbol) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("Agument must be a string, keyword, or symbol"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "or", "or", 1876275696, null), cljs.core.list(new cljs.core.Symbol(null, "string?", "string?", -1129175764, null), new cljs.core.Symbol(null, "x", "x", -555367584, null)), cljs.core.list(new cljs.core.Symbol(null, "keyword?", "keyword?", 1917797069, null), new cljs.core.Symbol(null, 
    "x", "x", -555367584, null)), cljs.core.list(new cljs.core.Symbol(null, "symbol?", "symbol?", 1820680511, null), new cljs.core.Symbol(null, "x", "x", -555367584, null)))))].join(""));
  }
  var s = cljs.core.name.call(null, x);
  var temp__4124__auto__ = cljs.core.re_matches.call(null, garden.selectors.nth_child_re, s);
  if (cljs.core.truth_(temp__4124__auto__)) {
    var m = temp__4124__auto__;
    return m;
  } else {
    throw new Error([cljs.core.str("Invalid value "), cljs.core.str(cljs.core.pr_str.call(null, s))].join(""));
  }
};
garden.selectors.nth_child = function() {
  var garden$selectors$nth_child__delegate = function(args__10807__auto__) {
    var v__10808__auto__ = cljs.core.apply.call(null, function(x) {
      if (typeof x === "number") {
        return garden.selectors.nth_x.call(null, [cljs.core.str(x), cljs.core.str("n")].join(""));
      } else {
        return garden.selectors.nth_x.call(null, x);
      }
    }, args__10807__auto__);
    var v__10808__auto____$1 = cljs.core.truth_(garden.selectors.selector_QMARK_.call(null, v__10808__auto__)) ? garden.selectors.css_selector.call(null, v__10808__auto__) : v__10808__auto__;
    return garden.selectors.selector.call(null, [cljs.core.str(":"), cljs.core.str("nth-child"), cljs.core.str("("), cljs.core.str(v__10808__auto____$1), cljs.core.str(")")].join(""));
  };
  var garden$selectors$nth_child = function(var_args) {
    var args__10807__auto__ = null;
    if (arguments.length > 0) {
      var G__15484__i = 0, G__15484__a = new Array(arguments.length - 0);
      while (G__15484__i < G__15484__a.length) {
        G__15484__a[G__15484__i] = arguments[G__15484__i + 0];
        ++G__15484__i;
      }
      args__10807__auto__ = new cljs.core.IndexedSeq(G__15484__a, 0);
    }
    return garden$selectors$nth_child__delegate.call(this, args__10807__auto__);
  };
  garden$selectors$nth_child.cljs$lang$maxFixedArity = 0;
  garden$selectors$nth_child.cljs$lang$applyTo = function(arglist__15485) {
    var args__10807__auto__ = cljs.core.seq(arglist__15485);
    return garden$selectors$nth_child__delegate(args__10807__auto__);
  };
  garden$selectors$nth_child.cljs$core$IFn$_invoke$arity$variadic = garden$selectors$nth_child__delegate;
  return garden$selectors$nth_child;
}();
garden.selectors.nth_last_child = function() {
  var garden$selectors$nth_last_child__delegate = function(args__10807__auto__) {
    var v__10808__auto__ = cljs.core.apply.call(null, function(x) {
      return garden.selectors.nth_x.call(null, x);
    }, args__10807__auto__);
    var v__10808__auto____$1 = cljs.core.truth_(garden.selectors.selector_QMARK_.call(null, v__10808__auto__)) ? garden.selectors.css_selector.call(null, v__10808__auto__) : v__10808__auto__;
    return garden.selectors.selector.call(null, [cljs.core.str(":"), cljs.core.str("nth-last-child"), cljs.core.str("("), cljs.core.str(v__10808__auto____$1), cljs.core.str(")")].join(""));
  };
  var garden$selectors$nth_last_child = function(var_args) {
    var args__10807__auto__ = null;
    if (arguments.length > 0) {
      var G__15486__i = 0, G__15486__a = new Array(arguments.length - 0);
      while (G__15486__i < G__15486__a.length) {
        G__15486__a[G__15486__i] = arguments[G__15486__i + 0];
        ++G__15486__i;
      }
      args__10807__auto__ = new cljs.core.IndexedSeq(G__15486__a, 0);
    }
    return garden$selectors$nth_last_child__delegate.call(this, args__10807__auto__);
  };
  garden$selectors$nth_last_child.cljs$lang$maxFixedArity = 0;
  garden$selectors$nth_last_child.cljs$lang$applyTo = function(arglist__15487) {
    var args__10807__auto__ = cljs.core.seq(arglist__15487);
    return garden$selectors$nth_last_child__delegate(args__10807__auto__);
  };
  garden$selectors$nth_last_child.cljs$core$IFn$_invoke$arity$variadic = garden$selectors$nth_last_child__delegate;
  return garden$selectors$nth_last_child;
}();
garden.selectors.nth_of_type = function() {
  var garden$selectors$nth_of_type__delegate = function(args__10807__auto__) {
    var v__10808__auto__ = cljs.core.apply.call(null, function(x) {
      return garden.selectors.nth_x.call(null, x);
    }, args__10807__auto__);
    var v__10808__auto____$1 = cljs.core.truth_(garden.selectors.selector_QMARK_.call(null, v__10808__auto__)) ? garden.selectors.css_selector.call(null, v__10808__auto__) : v__10808__auto__;
    return garden.selectors.selector.call(null, [cljs.core.str(":"), cljs.core.str("nth-of-type"), cljs.core.str("("), cljs.core.str(v__10808__auto____$1), cljs.core.str(")")].join(""));
  };
  var garden$selectors$nth_of_type = function(var_args) {
    var args__10807__auto__ = null;
    if (arguments.length > 0) {
      var G__15488__i = 0, G__15488__a = new Array(arguments.length - 0);
      while (G__15488__i < G__15488__a.length) {
        G__15488__a[G__15488__i] = arguments[G__15488__i + 0];
        ++G__15488__i;
      }
      args__10807__auto__ = new cljs.core.IndexedSeq(G__15488__a, 0);
    }
    return garden$selectors$nth_of_type__delegate.call(this, args__10807__auto__);
  };
  garden$selectors$nth_of_type.cljs$lang$maxFixedArity = 0;
  garden$selectors$nth_of_type.cljs$lang$applyTo = function(arglist__15489) {
    var args__10807__auto__ = cljs.core.seq(arglist__15489);
    return garden$selectors$nth_of_type__delegate(args__10807__auto__);
  };
  garden$selectors$nth_of_type.cljs$core$IFn$_invoke$arity$variadic = garden$selectors$nth_of_type__delegate;
  return garden$selectors$nth_of_type;
}();
garden.selectors.nth_last_of_type = function() {
  var garden$selectors$nth_last_of_type__delegate = function(args__10807__auto__) {
    var v__10808__auto__ = cljs.core.apply.call(null, function(x) {
      return garden.selectors.nth_x.call(null, x);
    }, args__10807__auto__);
    var v__10808__auto____$1 = cljs.core.truth_(garden.selectors.selector_QMARK_.call(null, v__10808__auto__)) ? garden.selectors.css_selector.call(null, v__10808__auto__) : v__10808__auto__;
    return garden.selectors.selector.call(null, [cljs.core.str(":"), cljs.core.str("nth-last-of-type"), cljs.core.str("("), cljs.core.str(v__10808__auto____$1), cljs.core.str(")")].join(""));
  };
  var garden$selectors$nth_last_of_type = function(var_args) {
    var args__10807__auto__ = null;
    if (arguments.length > 0) {
      var G__15490__i = 0, G__15490__a = new Array(arguments.length - 0);
      while (G__15490__i < G__15490__a.length) {
        G__15490__a[G__15490__i] = arguments[G__15490__i + 0];
        ++G__15490__i;
      }
      args__10807__auto__ = new cljs.core.IndexedSeq(G__15490__a, 0);
    }
    return garden$selectors$nth_last_of_type__delegate.call(this, args__10807__auto__);
  };
  garden$selectors$nth_last_of_type.cljs$lang$maxFixedArity = 0;
  garden$selectors$nth_last_of_type.cljs$lang$applyTo = function(arglist__15491) {
    var args__10807__auto__ = cljs.core.seq(arglist__15491);
    return garden$selectors$nth_last_of_type__delegate(args__10807__auto__);
  };
  garden$selectors$nth_last_of_type.cljs$core$IFn$_invoke$arity$variadic = garden$selectors$nth_last_of_type__delegate;
  return garden$selectors$nth_last_of_type;
}();
garden.selectors.after = garden.selectors.selector.call(null, "::after");
garden.selectors.before = garden.selectors.selector.call(null, "::before");
garden.selectors.first_letter = garden.selectors.selector.call(null, "::first-letter");
garden.selectors.first_line = garden.selectors.selector.call(null, "::first-line");
garden.selectors.attr = function garden$selectors$attr() {
  var G__15493 = arguments.length;
  switch(G__15493) {
    case 1:
      return garden.selectors.attr.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 3:
      return garden.selectors.attr.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
garden.selectors.attr.cljs$core$IFn$_invoke$arity$1 = function(attr_name) {
  return garden.selectors.selector.call(null, [cljs.core.str("["), cljs.core.str(cljs.core.name.call(null, attr_name)), cljs.core.str("]")].join(""));
};
garden.selectors.attr.cljs$core$IFn$_invoke$arity$3 = function(attr_name, op, attr_value) {
  var v = cljs.core.name.call(null, attr_value);
  var v__$1 = cljs.core.truth_(cljs.core.re_matches.call(null, /\"(\\|[^\"])*\"|'(\\|[^\'])*'/, v)) ? v : cljs.core.pr_str.call(null, v);
  return garden.selectors.selector.call(null, [cljs.core.str("["), cljs.core.str(cljs.core.name.call(null, attr_name)), cljs.core.str(cljs.core.name.call(null, op)), cljs.core.str(v__$1), cljs.core.str("]")].join(""));
};
garden.selectors.attr.cljs$lang$maxFixedArity = 3;
garden.selectors.attr_EQ_ = function garden$selectors$attr_EQ_(attr_name, attr_value) {
  return garden.selectors.attr.call(null, attr_name, "\x3d", attr_value);
};
garden.selectors.attr_contains = function garden$selectors$attr_contains(attr_name, attr_value) {
  return garden.selectors.attr.call(null, attr_name, "~\x3d", attr_value);
};
garden.selectors.attr_starts_with = function garden$selectors$attr_starts_with(attr_name, attr_value) {
  return garden.selectors.attr.call(null, attr_name, "^\x3d", attr_value);
};
garden.selectors.attr_starts_with_STAR_ = function garden$selectors$attr_starts_with_STAR_(attr_name, attr_value) {
  return garden.selectors.attr.call(null, attr_name, "|\x3d", attr_value);
};
garden.selectors.attr_ends_with = function garden$selectors$attr_ends_with(attr_name, attr_value) {
  return garden.selectors.attr.call(null, attr_name, "$\x3d", attr_value);
};
garden.selectors.attr_matches = function garden$selectors$attr_matches(attr_name, attr_value) {
  return garden.selectors.attr.call(null, attr_name, "*\x3d", attr_value);
};
garden.selectors.descendant = function garden$selectors$descendant() {
  var G__15499 = arguments.length;
  switch(G__15499) {
    case 2:
      return garden.selectors.descendant.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5386__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return garden.selectors.descendant.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5386__auto__);
  }
};
garden.selectors.descendant.cljs$core$IFn$_invoke$arity$2 = function(a, b) {
  return garden.selectors.selector.call(null, [cljs.core.str(garden.selectors.css_selector.call(null, a)), cljs.core.str(" "), cljs.core.str(garden.selectors.css_selector.call(null, b))].join(""));
};
garden.selectors.descendant.cljs$core$IFn$_invoke$arity$variadic = function(a, b, more) {
  return garden.selectors.selector.call(null, clojure.string.join.call(null, " ", cljs.core.map.call(null, garden.selectors.css_selector, cljs.core.cons.call(null, garden.selectors.descendant.call(null, a, b), more))));
};
garden.selectors.descendant.cljs$lang$applyTo = function(seq15495) {
  var G__15496 = cljs.core.first.call(null, seq15495);
  var seq15495__$1 = cljs.core.next.call(null, seq15495);
  var G__15497 = cljs.core.first.call(null, seq15495__$1);
  var seq15495__$2 = cljs.core.next.call(null, seq15495__$1);
  return garden.selectors.descendant.cljs$core$IFn$_invoke$arity$variadic(G__15496, G__15497, seq15495__$2);
};
garden.selectors.descendant.cljs$lang$maxFixedArity = 2;
garden.selectors._PLUS_ = function garden$selectors$_PLUS_(a, b) {
  return garden.selectors.selector.call(null, [cljs.core.str(garden.selectors.css_selector.call(null, a)), cljs.core.str(" + "), cljs.core.str(garden.selectors.css_selector.call(null, b))].join(""));
};
garden.selectors._ = function garden$selectors$_(a, b) {
  return garden.selectors.selector.call(null, [cljs.core.str(garden.selectors.css_selector.call(null, a)), cljs.core.str(" ~ "), cljs.core.str(garden.selectors.css_selector.call(null, b))].join(""));
};
garden.selectors._GT_ = function garden$selectors$_GT_() {
  var G__15505 = arguments.length;
  switch(G__15505) {
    case 1:
      return garden.selectors._GT_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return garden.selectors._GT_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5386__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return garden.selectors._GT_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5386__auto__);
  }
};
garden.selectors._GT_.cljs$core$IFn$_invoke$arity$1 = function(a) {
  return garden.selectors.selector.call(null, a);
};
garden.selectors._GT_.cljs$core$IFn$_invoke$arity$2 = function(a, b) {
  return garden.selectors.selector.call(null, [cljs.core.str(garden.selectors.css_selector.call(null, a)), cljs.core.str(" \x3e "), cljs.core.str(garden.selectors.css_selector.call(null, b))].join(""));
};
garden.selectors._GT_.cljs$core$IFn$_invoke$arity$variadic = function(a, b, more) {
  return garden.selectors.selector.call(null, clojure.string.join.call(null, " \x3e ", cljs.core.map.call(null, garden.selectors.css_selector, cljs.core.cons.call(null, garden.selectors._GT_.call(null, a, b), more))));
};
garden.selectors._GT_.cljs$lang$applyTo = function(seq15501) {
  var G__15502 = cljs.core.first.call(null, seq15501);
  var seq15501__$1 = cljs.core.next.call(null, seq15501);
  var G__15503 = cljs.core.first.call(null, seq15501__$1);
  var seq15501__$2 = cljs.core.next.call(null, seq15501__$1);
  return garden.selectors._GT_.cljs$core$IFn$_invoke$arity$variadic(G__15502, G__15503, seq15501__$2);
};
garden.selectors._GT_.cljs$lang$maxFixedArity = 2;
garden.selectors._AMPERSAND_ = garden.selectors.selector.call(null, "\x26");
garden.selectors.lex_specificity = function garden$selectors$lex_specificity(s) {
  var id_selector_re = /^\#[a-zA-Z][\w-]*/;
  var class_selector_re = /^\.[a-zA-Z][\w-]*/;
  var attribute_selector_re = /^\[[^\]]*\]/;
  var type_selector_re = /^[a-zA-Z][\w-]/;
  var pseudo_class_re = /^:[a-zA-Z][\w-]*(?:\([^\)]+\))?/;
  var pseudo_element_re = /^::[a-zA-Z][\w-]*/;
  return cljs.core.some.call(null, function(id_selector_re, class_selector_re, attribute_selector_re, type_selector_re, pseudo_class_re, pseudo_element_re) {
    return function(p__15509) {
      var vec__15510 = p__15509;
      var re = cljs.core.nth.call(null, vec__15510, 0, null);
      var k = cljs.core.nth.call(null, vec__15510, 1, null);
      var temp__4124__auto__ = cljs.core.re_find.call(null, re, s);
      if (cljs.core.truth_(temp__4124__auto__)) {
        var m = temp__4124__auto__;
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [m, k], null);
      } else {
        return null;
      }
    };
  }(id_selector_re, class_selector_re, attribute_selector_re, type_selector_re, pseudo_class_re, pseudo_element_re), new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [id_selector_re, new cljs.core.Keyword(null, "a", "a", -2123407586)], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [class_selector_re, new cljs.core.Keyword(null, "b", "b", 1482224470)], 
  null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [attribute_selector_re, new cljs.core.Keyword(null, "b", "b", 1482224470)], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [pseudo_class_re, new cljs.core.Keyword(null, "b", "b", 1482224470)], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [type_selector_re, new cljs.core.Keyword(null, "c", "c", -1763192079)], null), new cljs.core.PersistentVector(null, 
  2, 5, cljs.core.PersistentVector.EMPTY_NODE, [pseudo_element_re, new cljs.core.Keyword(null, "c", "c", -1763192079)], null)], null));
};
garden.selectors.specificity_STAR_ = function garden$selectors$specificity_STAR_(selector) {
  var s = garden.selectors.css_selector.call(null, selector);
  var score = new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "a", "a", -2123407586), 0, new cljs.core.Keyword(null, "b", "b", 1482224470), 0, new cljs.core.Keyword(null, "c", "c", -1763192079), 0], null);
  var s__$1 = s;
  var score__$1 = score;
  while (true) {
    if (cljs.core.empty_QMARK_.call(null, s__$1)) {
      return score__$1;
    } else {
      var temp__4124__auto__ = garden.selectors.lex_specificity.call(null, s__$1);
      if (cljs.core.truth_(temp__4124__auto__)) {
        var vec__15513 = temp__4124__auto__;
        var m = cljs.core.nth.call(null, vec__15513, 0, null);
        var k = cljs.core.nth.call(null, vec__15513, 1, null);
        var temp__4124__auto____$1 = cljs.core.re_find.call(null, /^:not\(([^\)]*)\)/, m);
        if (cljs.core.truth_(temp__4124__auto____$1)) {
          var vec__15514 = temp__4124__auto____$1;
          var _ = cljs.core.nth.call(null, vec__15514, 0, null);
          var inner = cljs.core.nth.call(null, vec__15514, 1, null);
          var G__15515 = cljs.core.subs.call(null, s__$1, cljs.core.count.call(null, m));
          var G__15516 = cljs.core.merge_with.call(null, cljs.core._PLUS_, score__$1, garden$selectors$specificity_STAR_.call(null, inner));
          s__$1 = G__15515;
          score__$1 = G__15516;
          continue;
        } else {
          var G__15517 = cljs.core.subs.call(null, s__$1, cljs.core.count.call(null, m));
          var G__15518 = cljs.core.update_in.call(null, score__$1, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [k], null), cljs.core.inc);
          s__$1 = G__15517;
          score__$1 = G__15518;
          continue;
        }
      } else {
        var G__15519 = cljs.core.subs.call(null, s__$1, 1);
        var G__15520 = score__$1;
        s__$1 = G__15519;
        score__$1 = G__15520;
        continue;
      }
    }
    break;
  }
};
garden.selectors.specificity = function garden$selectors$specificity(selector) {
  if (function() {
    var G__15523 = selector;
    if (G__15523) {
      var bit__5009__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__4335__auto__ = bit__5009__auto__;
        if (cljs.core.truth_(or__4335__auto__)) {
          return or__4335__auto__;
        } else {
          return G__15523.garden$selectors$ICSSSelector$;
        }
      }())) {
        return true;
      } else {
        if (!G__15523.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, garden.selectors.ICSSSelector, G__15523);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, garden.selectors.ICSSSelector, G__15523);
    }
  }()) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "satisfies?", "satisfies?", -433227199, null), new cljs.core.Symbol(null, "ICSSSelector", "ICSSSelector", 922306162, null), new cljs.core.Symbol(null, "selector", "selector", -1891906903, null))))].join(""));
  }
  var map__15524 = garden.selectors.specificity_STAR_.call(null, selector);
  var map__15524__$1 = cljs.core.seq_QMARK_.call(null, map__15524) ? cljs.core.apply.call(null, cljs.core.hash_map, map__15524) : map__15524;
  var c = cljs.core.get.call(null, map__15524__$1, new cljs.core.Keyword(null, "c", "c", -1763192079));
  var b = cljs.core.get.call(null, map__15524__$1, new cljs.core.Keyword(null, "b", "b", 1482224470));
  var a = cljs.core.get.call(null, map__15524__$1, new cljs.core.Keyword(null, "a", "a", -2123407586));
  var sv = clojure.string.replace.call(null, [cljs.core.str(a), cljs.core.str(b), cljs.core.str(c)].join(""), /^0*/, "");
  if (cljs.core.empty_QMARK_.call(null, sv)) {
    return 0;
  } else {
    return parseInt(sv);
  }
};
goog.provide("garden.color");
goog.require("cljs.core");
goog.require("garden.util");
goog.require("clojure.string");
garden.color.CSSColor = function(red, green, blue, hue, saturation, lightness, alpha, __meta, __extmap, __hash) {
  this.red = red;
  this.green = green;
  this.blue = blue;
  this.hue = hue;
  this.saturation = saturation;
  this.lightness = lightness;
  this.alpha = alpha;
  this.__meta = __meta;
  this.__extmap = __extmap;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 2229667595;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
garden.color.CSSColor.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this__4930__auto__, k__4931__auto__) {
  var self__ = this;
  var this__4930__auto____$1 = this;
  return cljs.core._lookup.call(null, this__4930__auto____$1, k__4931__auto__, null);
};
garden.color.CSSColor.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this__4932__auto__, k15376, else__4933__auto__) {
  var self__ = this;
  var this__4932__auto____$1 = this;
  var G__15379 = k15376 instanceof cljs.core.Keyword ? k15376.fqn : null;
  switch(G__15379) {
    case "alpha":
      return self__.alpha;
      break;
    case "lightness":
      return self__.lightness;
      break;
    case "saturation":
      return self__.saturation;
      break;
    case "hue":
      return self__.hue;
      break;
    case "blue":
      return self__.blue;
      break;
    case "green":
      return self__.green;
      break;
    case "red":
      return self__.red;
      break;
    default:
      return cljs.core.get.call(null, self__.__extmap, k15376, else__4933__auto__);
  }
};
garden.color.CSSColor.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this__4944__auto__, writer__4945__auto__, opts__4946__auto__) {
  var self__ = this;
  var this__4944__auto____$1 = this;
  var pr_pair__4947__auto__ = function(this__4944__auto____$1) {
    return function(keyval__4948__auto__) {
      return cljs.core.pr_sequential_writer.call(null, writer__4945__auto__, cljs.core.pr_writer, "", " ", "", opts__4946__auto__, keyval__4948__auto__);
    };
  }(this__4944__auto____$1);
  return cljs.core.pr_sequential_writer.call(null, writer__4945__auto__, pr_pair__4947__auto__, "#garden.color.CSSColor{", ", ", "}", opts__4946__auto__, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "red", "red", -969428204), self__.red], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
  [new cljs.core.Keyword(null, "green", "green", -945526839), self__.green], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "blue", "blue", -622100620), self__.blue], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "hue", "hue", -508078848), self__.hue], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, 
  "saturation", "saturation", -14247929), self__.saturation], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "lightness", "lightness", -2040901930), self__.lightness], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "alpha", "alpha", -1574982441), self__.alpha], null)], null), self__.__extmap));
};
garden.color.CSSColor.prototype.cljs$core$IMeta$_meta$arity$1 = function(this__4928__auto__) {
  var self__ = this;
  var this__4928__auto____$1 = this;
  return self__.__meta;
};
garden.color.CSSColor.prototype.cljs$core$ICloneable$_clone$arity$1 = function(this__4924__auto__) {
  var self__ = this;
  var this__4924__auto____$1 = this;
  return new garden.color.CSSColor(self__.red, self__.green, self__.blue, self__.hue, self__.saturation, self__.lightness, self__.alpha, self__.__meta, self__.__extmap, self__.__hash);
};
garden.color.CSSColor.prototype.cljs$core$ICounted$_count$arity$1 = function(this__4934__auto__) {
  var self__ = this;
  var this__4934__auto____$1 = this;
  return 7 + cljs.core.count.call(null, self__.__extmap);
};
garden.color.CSSColor.prototype.cljs$core$IHash$_hash$arity$1 = function(this__4925__auto__) {
  var self__ = this;
  var this__4925__auto____$1 = this;
  var h__4751__auto__ = self__.__hash;
  if (!(h__4751__auto__ == null)) {
    return h__4751__auto__;
  } else {
    var h__4751__auto____$1 = cljs.core.hash_imap.call(null, this__4925__auto____$1);
    self__.__hash = h__4751__auto____$1;
    return h__4751__auto____$1;
  }
};
garden.color.CSSColor.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this__4926__auto__, other__4927__auto__) {
  var self__ = this;
  var this__4926__auto____$1 = this;
  if (cljs.core.truth_(function() {
    var and__4323__auto__ = other__4927__auto__;
    if (cljs.core.truth_(and__4323__auto__)) {
      var and__4323__auto____$1 = this__4926__auto____$1.constructor === other__4927__auto__.constructor;
      if (and__4323__auto____$1) {
        return cljs.core.equiv_map.call(null, this__4926__auto____$1, other__4927__auto__);
      } else {
        return and__4323__auto____$1;
      }
    } else {
      return and__4323__auto__;
    }
  }())) {
    return true;
  } else {
    return false;
  }
};
garden.color.CSSColor.prototype.cljs$core$IMap$_dissoc$arity$2 = function(this__4939__auto__, k__4940__auto__) {
  var self__ = this;
  var this__4939__auto____$1 = this;
  if (cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 7, [new cljs.core.Keyword(null, "hue", "hue", -508078848), null, new cljs.core.Keyword(null, "saturation", "saturation", -14247929), null, new cljs.core.Keyword(null, "green", "green", -945526839), null, new cljs.core.Keyword(null, "red", "red", -969428204), null, new cljs.core.Keyword(null, "blue", "blue", -622100620), null, new cljs.core.Keyword(null, "lightness", "lightness", 
  -2040901930), null, new cljs.core.Keyword(null, "alpha", "alpha", -1574982441), null], null), null), k__4940__auto__)) {
    return cljs.core.dissoc.call(null, cljs.core.with_meta.call(null, cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, this__4939__auto____$1), self__.__meta), k__4940__auto__);
  } else {
    return new garden.color.CSSColor(self__.red, self__.green, self__.blue, self__.hue, self__.saturation, self__.lightness, self__.alpha, self__.__meta, cljs.core.not_empty.call(null, cljs.core.dissoc.call(null, self__.__extmap, k__4940__auto__)), null);
  }
};
garden.color.CSSColor.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(this__4937__auto__, k__4938__auto__, G__15375) {
  var self__ = this;
  var this__4937__auto____$1 = this;
  var pred__15380 = cljs.core.keyword_identical_QMARK_;
  var expr__15381 = k__4938__auto__;
  if (cljs.core.truth_(pred__15380.call(null, new cljs.core.Keyword(null, "red", "red", -969428204), expr__15381))) {
    return new garden.color.CSSColor(G__15375, self__.green, self__.blue, self__.hue, self__.saturation, self__.lightness, self__.alpha, self__.__meta, self__.__extmap, null);
  } else {
    if (cljs.core.truth_(pred__15380.call(null, new cljs.core.Keyword(null, "green", "green", -945526839), expr__15381))) {
      return new garden.color.CSSColor(self__.red, G__15375, self__.blue, self__.hue, self__.saturation, self__.lightness, self__.alpha, self__.__meta, self__.__extmap, null);
    } else {
      if (cljs.core.truth_(pred__15380.call(null, new cljs.core.Keyword(null, "blue", "blue", -622100620), expr__15381))) {
        return new garden.color.CSSColor(self__.red, self__.green, G__15375, self__.hue, self__.saturation, self__.lightness, self__.alpha, self__.__meta, self__.__extmap, null);
      } else {
        if (cljs.core.truth_(pred__15380.call(null, new cljs.core.Keyword(null, "hue", "hue", -508078848), expr__15381))) {
          return new garden.color.CSSColor(self__.red, self__.green, self__.blue, G__15375, self__.saturation, self__.lightness, self__.alpha, self__.__meta, self__.__extmap, null);
        } else {
          if (cljs.core.truth_(pred__15380.call(null, new cljs.core.Keyword(null, "saturation", "saturation", -14247929), expr__15381))) {
            return new garden.color.CSSColor(self__.red, self__.green, self__.blue, self__.hue, G__15375, self__.lightness, self__.alpha, self__.__meta, self__.__extmap, null);
          } else {
            if (cljs.core.truth_(pred__15380.call(null, new cljs.core.Keyword(null, "lightness", "lightness", -2040901930), expr__15381))) {
              return new garden.color.CSSColor(self__.red, self__.green, self__.blue, self__.hue, self__.saturation, G__15375, self__.alpha, self__.__meta, self__.__extmap, null);
            } else {
              if (cljs.core.truth_(pred__15380.call(null, new cljs.core.Keyword(null, "alpha", "alpha", -1574982441), expr__15381))) {
                return new garden.color.CSSColor(self__.red, self__.green, self__.blue, self__.hue, self__.saturation, self__.lightness, G__15375, self__.__meta, self__.__extmap, null);
              } else {
                return new garden.color.CSSColor(self__.red, self__.green, self__.blue, self__.hue, self__.saturation, self__.lightness, self__.alpha, self__.__meta, cljs.core.assoc.call(null, self__.__extmap, k__4938__auto__, G__15375), null);
              }
            }
          }
        }
      }
    }
  }
};
garden.color.CSSColor.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this__4942__auto__) {
  var self__ = this;
  var this__4942__auto____$1 = this;
  return cljs.core.seq.call(null, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "red", "red", -969428204), self__.red], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "green", "green", -945526839), self__.green], null), new cljs.core.PersistentVector(null, 
  2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "blue", "blue", -622100620), self__.blue], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "hue", "hue", -508078848), self__.hue], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "saturation", "saturation", -14247929), self__.saturation], null), new cljs.core.PersistentVector(null, 2, 
  5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "lightness", "lightness", -2040901930), self__.lightness], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "alpha", "alpha", -1574982441), self__.alpha], null)], null), self__.__extmap));
};
garden.color.CSSColor.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this__4929__auto__, G__15375) {
  var self__ = this;
  var this__4929__auto____$1 = this;
  return new garden.color.CSSColor(self__.red, self__.green, self__.blue, self__.hue, self__.saturation, self__.lightness, self__.alpha, G__15375, self__.__extmap, self__.__hash);
};
garden.color.CSSColor.prototype.cljs$core$ICollection$_conj$arity$2 = function(this__4935__auto__, entry__4936__auto__) {
  var self__ = this;
  var this__4935__auto____$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry__4936__auto__)) {
    return cljs.core._assoc.call(null, this__4935__auto____$1, cljs.core._nth.call(null, entry__4936__auto__, 0), cljs.core._nth.call(null, entry__4936__auto__, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, this__4935__auto____$1, entry__4936__auto__);
  }
};
garden.color.CSSColor.prototype.call = function() {
  var G__15384 = null;
  var G__15384__1 = function(self__) {
    var self__ = this;
    var self____$1 = this;
    var this$ = self____$1;
    return this$;
  };
  var G__15384__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var this$ = self____$1;
    return cljs.core.get.call(null, this$, k);
  };
  var G__15384__3 = function(self__, k, missing) {
    var self__ = this;
    var self____$1 = this;
    var this$ = self____$1;
    return cljs.core.get.call(null, this$, k, missing);
  };
  G__15384 = function(self__, k, missing) {
    switch(arguments.length) {
      case 1:
        return G__15384__1.call(this, self__);
      case 2:
        return G__15384__2.call(this, self__, k);
      case 3:
        return G__15384__3.call(this, self__, k, missing);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__15384.cljs$core$IFn$_invoke$arity$1 = G__15384__1;
  G__15384.cljs$core$IFn$_invoke$arity$2 = G__15384__2;
  G__15384.cljs$core$IFn$_invoke$arity$3 = G__15384__3;
  return G__15384;
}();
garden.color.CSSColor.prototype.apply = function(self__, args15378) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args15378)));
};
garden.color.CSSColor.prototype.cljs$core$IFn$_invoke$arity$0 = function() {
  var self__ = this;
  var this$ = this;
  return this$;
};
garden.color.CSSColor.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var this$ = this;
  return cljs.core.get.call(null, this$, k);
};
garden.color.CSSColor.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, missing) {
  var self__ = this;
  var this$ = this;
  return cljs.core.get.call(null, this$, k, missing);
};
garden.color.CSSColor.cljs$lang$type = true;
garden.color.CSSColor.cljs$lang$ctorPrSeq = function(this__4964__auto__) {
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, "garden.color/CSSColor");
};
garden.color.CSSColor.cljs$lang$ctorPrWriter = function(this__4964__auto__, writer__4965__auto__) {
  return cljs.core._write.call(null, writer__4965__auto__, "garden.color/CSSColor");
};
garden.color.__GT_CSSColor = function garden$color$__GT_CSSColor(red, green, blue, hue, saturation, lightness, alpha) {
  return new garden.color.CSSColor(red, green, blue, hue, saturation, lightness, alpha, null, null, null);
};
garden.color.map__GT_CSSColor = function garden$color$map__GT_CSSColor(G__15377) {
  return new garden.color.CSSColor((new cljs.core.Keyword(null, "red", "red", -969428204)).cljs$core$IFn$_invoke$arity$1(G__15377), (new cljs.core.Keyword(null, "green", "green", -945526839)).cljs$core$IFn$_invoke$arity$1(G__15377), (new cljs.core.Keyword(null, "blue", "blue", -622100620)).cljs$core$IFn$_invoke$arity$1(G__15377), (new cljs.core.Keyword(null, "hue", "hue", -508078848)).cljs$core$IFn$_invoke$arity$1(G__15377), (new cljs.core.Keyword(null, "saturation", "saturation", -14247929)).cljs$core$IFn$_invoke$arity$1(G__15377), 
  (new cljs.core.Keyword(null, "lightness", "lightness", -2040901930)).cljs$core$IFn$_invoke$arity$1(G__15377), (new cljs.core.Keyword(null, "alpha", "alpha", -1574982441)).cljs$core$IFn$_invoke$arity$1(G__15377), null, cljs.core.dissoc.call(null, G__15377, new cljs.core.Keyword(null, "red", "red", -969428204), new cljs.core.Keyword(null, "green", "green", -945526839), new cljs.core.Keyword(null, "blue", "blue", -622100620), new cljs.core.Keyword(null, "hue", "hue", -508078848), new cljs.core.Keyword(null, 
  "saturation", "saturation", -14247929), new cljs.core.Keyword(null, "lightness", "lightness", -2040901930), new cljs.core.Keyword(null, "alpha", "alpha", -1574982441)), null);
};
garden.color.as_color = garden.color.map__GT_CSSColor;
garden.color.rgb = function garden$color$rgb() {
  var G__15387 = arguments.length;
  switch(G__15387) {
    case 1:
      return garden.color.rgb.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 3:
      return garden.color.rgb.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
garden.color.rgb.cljs$core$IFn$_invoke$arity$1 = function(p__15388) {
  var vec__15389 = p__15388;
  var r = cljs.core.nth.call(null, vec__15389, 0, null);
  var g = cljs.core.nth.call(null, vec__15389, 1, null);
  var b = cljs.core.nth.call(null, vec__15389, 2, null);
  var vs = vec__15389;
  if (cljs.core.every_QMARK_.call(null, function(vec__15389, r, g, b, vs) {
    return function(p1__15385_SHARP_) {
      return garden.util.between_QMARK_.call(null, p1__15385_SHARP_, 0, 255);
    };
  }(vec__15389, r, g, b, vs), vs)) {
    return garden.color.as_color.call(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "red", "red", -969428204), r, new cljs.core.Keyword(null, "green", "green", -945526839), g, new cljs.core.Keyword(null, "blue", "blue", -622100620), b], null));
  } else {
    throw cljs.core.ex_info.call(null, "RGB values must be between 0 and 255", cljs.core.PersistentArrayMap.EMPTY);
  }
};
garden.color.rgb.cljs$core$IFn$_invoke$arity$3 = function(r, g, b) {
  return garden.color.rgb.call(null, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [r, g, b], null));
};
garden.color.rgb.cljs$lang$maxFixedArity = 3;
garden.color.rgba = function garden$color$rgba() {
  var G__15392 = arguments.length;
  switch(G__15392) {
    case 1:
      return garden.color.rgba.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 4:
      return garden.color.rgba.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
garden.color.rgba.cljs$core$IFn$_invoke$arity$1 = function(p__15393) {
  var vec__15394 = p__15393;
  var r = cljs.core.nth.call(null, vec__15394, 0, null);
  var g = cljs.core.nth.call(null, vec__15394, 1, null);
  var b = cljs.core.nth.call(null, vec__15394, 2, null);
  var a = cljs.core.nth.call(null, vec__15394, 3, null);
  if (cljs.core.truth_(garden.util.between_QMARK_.call(null, a, 0, 1))) {
    return garden.color.as_color.call(null, cljs.core.assoc.call(null, garden.color.rgb.call(null, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [r, g, b], null)), new cljs.core.Keyword(null, "alpha", "alpha", -1574982441), a));
  } else {
    throw cljs.core.ex_info.call(null, "Alpha value must be between 0 and 1", cljs.core.PersistentArrayMap.EMPTY);
  }
};
garden.color.rgba.cljs$core$IFn$_invoke$arity$4 = function(r, g, b, a) {
  return garden.color.rgba.call(null, new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [r, g, b, a], null));
};
garden.color.rgba.cljs$lang$maxFixedArity = 4;
garden.color.hsl = function garden$color$hsl() {
  var G__15398 = arguments.length;
  switch(G__15398) {
    case 1:
      return garden.color.hsl.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 3:
      return garden.color.hsl.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
garden.color.hsl.cljs$core$IFn$_invoke$arity$1 = function(p__15399) {
  var vec__15400 = p__15399;
  var h = cljs.core.nth.call(null, vec__15400, 0, null);
  var s = cljs.core.nth.call(null, vec__15400, 1, null);
  var l = cljs.core.nth.call(null, vec__15400, 2, null);
  var vec__15401 = cljs.core.map.call(null, function(vec__15400, h, s, l) {
    return function(p1__15396_SHARP_) {
      return cljs.core.get.call(null, p1__15396_SHARP_, new cljs.core.Keyword(null, "magnitude", "magnitude", 1924274222), p1__15396_SHARP_);
    };
  }(vec__15400, h, s, l), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [h, s, l], null));
  var h__$1 = cljs.core.nth.call(null, vec__15401, 0, null);
  var s__$1 = cljs.core.nth.call(null, vec__15401, 1, null);
  var l__$1 = cljs.core.nth.call(null, vec__15401, 2, null);
  if (cljs.core.truth_(function() {
    var and__4323__auto__ = garden.util.between_QMARK_.call(null, s__$1, 0, 100);
    if (cljs.core.truth_(and__4323__auto__)) {
      return garden.util.between_QMARK_.call(null, l__$1, 0, 100);
    } else {
      return and__4323__auto__;
    }
  }())) {
    return garden.color.as_color.call(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "hue", "hue", -508078848), cljs.core.mod.call(null, h__$1, 360), new cljs.core.Keyword(null, "saturation", "saturation", -14247929), s__$1, new cljs.core.Keyword(null, "lightness", "lightness", -2040901930), l__$1], null));
  } else {
    throw cljs.core.ex_info.call(null, "Saturation and lightness must be between 0(%) and 100(%)", cljs.core.PersistentArrayMap.EMPTY);
  }
};
garden.color.hsl.cljs$core$IFn$_invoke$arity$3 = function(h, s, l) {
  return garden.color.hsl.call(null, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [h, s, l], null));
};
garden.color.hsl.cljs$lang$maxFixedArity = 3;
garden.color.hsla = function garden$color$hsla() {
  var G__15404 = arguments.length;
  switch(G__15404) {
    case 1:
      return garden.color.hsla.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 4:
      return garden.color.hsla.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
garden.color.hsla.cljs$core$IFn$_invoke$arity$1 = function(p__15405) {
  var vec__15406 = p__15405;
  var h = cljs.core.nth.call(null, vec__15406, 0, null);
  var s = cljs.core.nth.call(null, vec__15406, 1, null);
  var l = cljs.core.nth.call(null, vec__15406, 2, null);
  var a = cljs.core.nth.call(null, vec__15406, 3, null);
  if (cljs.core.truth_(garden.util.between_QMARK_.call(null, a, 0, 1))) {
    return garden.color.as_color.call(null, cljs.core.assoc.call(null, garden.color.hsl.call(null, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [h, s, l], null)), new cljs.core.Keyword(null, "alpha", "alpha", -1574982441), a));
  } else {
    throw cljs.core.ex_info.call(null, "Alpha value must be between 0 and 1", cljs.core.PersistentArrayMap.EMPTY);
  }
};
garden.color.hsla.cljs$core$IFn$_invoke$arity$4 = function(h, s, l, a) {
  return garden.color.hsla.call(null, new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [h, s, l, a], null));
};
garden.color.hsla.cljs$lang$maxFixedArity = 4;
garden.color.rgb_QMARK_ = function garden$color$rgb_QMARK_(color) {
  return cljs.core.map_QMARK_.call(null, color) && cljs.core.every_QMARK_.call(null, color, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "green", "green", -945526839), null, new cljs.core.Keyword(null, "red", "red", -969428204), null, new cljs.core.Keyword(null, "blue", "blue", -622100620), null], null), null));
};
garden.color.hsl_QMARK_ = function garden$color$hsl_QMARK_(color) {
  return cljs.core.map_QMARK_.call(null, color) && cljs.core.every_QMARK_.call(null, color, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "hue", "hue", -508078848), null, new cljs.core.Keyword(null, "saturation", "saturation", -14247929), null, new cljs.core.Keyword(null, "lightness", "lightness", -2040901930), null], null), null));
};
garden.color.color_QMARK_ = function garden$color$color_QMARK_(x) {
  var or__4335__auto__ = garden.color.rgb_QMARK_.call(null, x);
  if (cljs.core.truth_(or__4335__auto__)) {
    return or__4335__auto__;
  } else {
    return garden.color.hsl_QMARK_.call(null, x);
  }
};
garden.color.hex_re = /#?([\da-fA-F]{6}|[\da-fA-F]{3})/;
garden.color.hex_QMARK_ = function garden$color$hex_QMARK_(x) {
  return cljs.core.boolean$.call(null, function() {
    var and__4323__auto__ = typeof x === "string";
    if (and__4323__auto__) {
      return cljs.core.re_matches.call(null, garden.color.hex_re, x);
    } else {
      return and__4323__auto__;
    }
  }());
};
garden.color.hex__GT_rgb = function garden$color$hex__GT_rgb(s) {
  var temp__4126__auto__ = cljs.core.re_matches.call(null, garden.color.hex_re, s);
  if (cljs.core.truth_(temp__4126__auto__)) {
    var vec__15411 = temp__4126__auto__;
    var _ = cljs.core.nth.call(null, vec__15411, 0, null);
    var hex = cljs.core.nth.call(null, vec__15411, 1, null);
    var hex__$1 = cljs.core._EQ_.call(null, 3, cljs.core.count.call(null, hex)) ? cljs.core.apply.call(null, cljs.core.str, cljs.core.mapcat.call(null, function(vec__15411, _, hex, temp__4126__auto__) {
      return function(p1__15408_SHARP_) {
        return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, p1__15408_SHARP_), p1__15408_SHARP_);
      };
    }(vec__15411, _, hex, temp__4126__auto__), hex)) : hex;
    return garden.color.rgb.call(null, cljs.core.map.call(null, function(hex__$1, vec__15411, _, hex, temp__4126__auto__) {
      return function(p1__15409_SHARP_) {
        return garden.util.string__GT_int.call(null, p1__15409_SHARP_, 16);
      };
    }(hex__$1, vec__15411, _, hex, temp__4126__auto__), cljs.core.re_seq.call(null, /[\da-fA-F]{2}/, hex__$1)));
  } else {
    return null;
  }
};
garden.color.rgb__GT_hex = function garden$color$rgb__GT_hex(p__15412) {
  var map__15414 = p__15412;
  var map__15414__$1 = cljs.core.seq_QMARK_.call(null, map__15414) ? cljs.core.apply.call(null, cljs.core.hash_map, map__15414) : map__15414;
  var r = cljs.core.get.call(null, map__15414__$1, new cljs.core.Keyword(null, "red", "red", -969428204));
  var g = cljs.core.get.call(null, map__15414__$1, new cljs.core.Keyword(null, "green", "green", -945526839));
  var b = cljs.core.get.call(null, map__15414__$1, new cljs.core.Keyword(null, "blue", "blue", -622100620));
  var hex_part = function(map__15414, map__15414__$1, r, g, b) {
    return function garden$color$rgb__GT_hex_$_hex_part(v) {
      return clojure.string.replace.call(null, garden.util.format.call(null, "%2s", garden.util.int__GT_string.call(null, v, 16)), " ", "0");
    };
  }(map__15414, map__15414__$1, r, g, b);
  return cljs.core.apply.call(null, cljs.core.str, "#", cljs.core.map.call(null, hex_part, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [r, g, b], null)));
};
garden.color.rgb__GT_hsl = function garden$color$rgb__GT_hsl(p__15416) {
  var map__15422 = p__15416;
  var map__15422__$1 = cljs.core.seq_QMARK_.call(null, map__15422) ? cljs.core.apply.call(null, cljs.core.hash_map, map__15422) : map__15422;
  var color = map__15422__$1;
  var blue = cljs.core.get.call(null, map__15422__$1, new cljs.core.Keyword(null, "blue", "blue", -622100620));
  var green = cljs.core.get.call(null, map__15422__$1, new cljs.core.Keyword(null, "green", "green", -945526839));
  var red = cljs.core.get.call(null, map__15422__$1, new cljs.core.Keyword(null, "red", "red", -969428204));
  if (cljs.core.truth_(garden.color.hsl_QMARK_.call(null, color))) {
    return color;
  } else {
    var vec__15423 = cljs.core.map.call(null, function(map__15422, map__15422__$1, color, blue, green, red) {
      return function(p1__15415_SHARP_) {
        return p1__15415_SHARP_ / 255;
      };
    }(map__15422, map__15422__$1, color, blue, green, red), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [red, green, blue], null));
    var r = cljs.core.nth.call(null, vec__15423, 0, null);
    var g = cljs.core.nth.call(null, vec__15423, 1, null);
    var b = cljs.core.nth.call(null, vec__15423, 2, null);
    var mx = function() {
      var x__4647__auto__ = function() {
        var x__4647__auto__ = r;
        var y__4648__auto__ = g;
        return x__4647__auto__ > y__4648__auto__ ? x__4647__auto__ : y__4648__auto__;
      }();
      var y__4648__auto__ = b;
      return x__4647__auto__ > y__4648__auto__ ? x__4647__auto__ : y__4648__auto__;
    }();
    var mn = function() {
      var x__4654__auto__ = function() {
        var x__4654__auto__ = r;
        var y__4655__auto__ = g;
        return x__4654__auto__ < y__4655__auto__ ? x__4654__auto__ : y__4655__auto__;
      }();
      var y__4655__auto__ = b;
      return x__4654__auto__ < y__4655__auto__ ? x__4654__auto__ : y__4655__auto__;
    }();
    var d = mx - mn;
    var h = function() {
      var pred__15424 = cljs.core._EQ_;
      var expr__15425 = mx;
      if (cljs.core.truth_(pred__15424.call(null, mn, expr__15425))) {
        return 0;
      } else {
        if (cljs.core.truth_(pred__15424.call(null, r, expr__15425))) {
          return 60 * ((g - b) / d);
        } else {
          if (cljs.core.truth_(pred__15424.call(null, g, expr__15425))) {
            return 60 * ((b - r) / d) + 120;
          } else {
            if (cljs.core.truth_(pred__15424.call(null, b, expr__15425))) {
              return 60 * ((r - g) / d) + 240;
            } else {
              throw new Error([cljs.core.str("No matching clause: "), cljs.core.str(expr__15425)].join(""));
            }
          }
        }
      }
    }();
    var l = (mx + mn) / 2;
    var s = cljs.core._EQ_.call(null, mx, mn) ? 0 : l < .5 ? d / (2 * l) : d / (2 - 2 * l);
    return garden.color.hsl.call(null, cljs.core.mod.call(null, h, 360), 100 * s, 100 * l);
  }
};
garden.color.hsl__GT_rgb = function garden$color$hsl__GT_rgb(p__15428) {
  var map__15431 = p__15428;
  var map__15431__$1 = cljs.core.seq_QMARK_.call(null, map__15431) ? cljs.core.apply.call(null, cljs.core.hash_map, map__15431) : map__15431;
  var color = map__15431__$1;
  var lightness = cljs.core.get.call(null, map__15431__$1, new cljs.core.Keyword(null, "lightness", "lightness", -2040901930));
  var saturation = cljs.core.get.call(null, map__15431__$1, new cljs.core.Keyword(null, "saturation", "saturation", -14247929));
  var hue = cljs.core.get.call(null, map__15431__$1, new cljs.core.Keyword(null, "hue", "hue", -508078848));
  if (cljs.core.truth_(garden.color.rgb_QMARK_.call(null, color))) {
    return color;
  } else {
    var h = hue / 360;
    var s = saturation / 100;
    var l = lightness / 100;
    var m2 = l <= .5 ? l * (s + 1) : l + s - l * s;
    var m1 = 2 * l - m2;
    var vec__15432 = cljs.core.map.call(null, function(h, s, l, m2, m1, map__15431, map__15431__$1, color, lightness, saturation, hue) {
      return function(p1__15427_SHARP_) {
        return Math.round.call(null, p1__15427_SHARP_ * 255);
      };
    }(h, s, l, m2, m1, map__15431, map__15431__$1, color, lightness, saturation, hue), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [garden.color.hue__GT_rgb.call(null, m1, m2, h + 1 / 3), garden.color.hue__GT_rgb.call(null, m1, m2, h), garden.color.hue__GT_rgb.call(null, m1, m2, h - 1 / 3)], null));
    var r = cljs.core.nth.call(null, vec__15432, 0, null);
    var g = cljs.core.nth.call(null, vec__15432, 1, null);
    var b = cljs.core.nth.call(null, vec__15432, 2, null);
    return garden.color.rgb.call(null, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [r, g, b], null));
  }
};
garden.color.hue__GT_rgb = function garden$color$hue__GT_rgb(m1, m2, h) {
  var h__$1 = h < 0 ? h + 1 : h > 1 ? h - 1 : h;
  if (6 * h__$1 < 1) {
    return m1 + (m2 - m1) * h__$1 * 6;
  } else {
    if (2 * h__$1 < 1) {
      return m2;
    } else {
      if (3 * h__$1 < 2) {
        return m1 + (m2 - m1) * (2 / 3 - h__$1) * 6;
      } else {
        return m1;
      }
    }
  }
};
garden.color.hsl__GT_hex = function garden$color$hsl__GT_hex(color) {
  return garden.color.rgb__GT_hex.call(null, garden.color.hsl__GT_rgb.call(null, color));
};
garden.color.hex__GT_hsl = function garden$color$hex__GT_hsl(color) {
  return garden.color.rgb__GT_hsl.call(null, garden.color.hex__GT_rgb.call(null, color));
};
garden.color.percent_clip = cljs.core.partial.call(null, garden.util.clip, 0, 100);
garden.color.rgb_clip = cljs.core.partial.call(null, garden.util.clip, 0, 255);
garden.color.as_hex = function garden$color$as_hex(x) {
  if (cljs.core.truth_(garden.color.hex_QMARK_.call(null, x))) {
    return x;
  } else {
    if (cljs.core.truth_(garden.color.rgb_QMARK_.call(null, x))) {
      return garden.color.rgb__GT_hex.call(null, x);
    } else {
      if (cljs.core.truth_(garden.color.hsl_QMARK_.call(null, x))) {
        return garden.color.hsl__GT_hex.call(null, x);
      } else {
        throw cljs.core.ex_info.call(null, [cljs.core.str("Can't convert "), cljs.core.str(x), cljs.core.str(" to a color.")].join(""), cljs.core.PersistentArrayMap.EMPTY);
      }
    }
  }
};
garden.color.as_rgb = function garden$color$as_rgb(x) {
  if (cljs.core.truth_(garden.color.rgb_QMARK_.call(null, x))) {
    return x;
  } else {
    if (cljs.core.truth_(garden.color.hsl_QMARK_.call(null, x))) {
      return garden.color.hsl__GT_rgb.call(null, x);
    } else {
      if (cljs.core.truth_(garden.color.hex_QMARK_.call(null, x))) {
        return garden.color.hex__GT_rgb.call(null, x);
      } else {
        if (typeof x === "number") {
          return garden.color.rgb.call(null, cljs.core.map.call(null, garden.color.rgb_clip, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [x, x, x], null)));
        } else {
          throw cljs.core.ex_info.call(null, [cljs.core.str("Can't convert "), cljs.core.str(x), cljs.core.str(" to a color.")].join(""), cljs.core.PersistentArrayMap.EMPTY);
        }
      }
    }
  }
};
garden.color.as_hsl = function garden$color$as_hsl(x) {
  if (cljs.core.truth_(garden.color.hsl_QMARK_.call(null, x))) {
    return x;
  } else {
    if (cljs.core.truth_(garden.color.rgb_QMARK_.call(null, x))) {
      return garden.color.rgb__GT_hsl.call(null, x);
    } else {
      if (cljs.core.truth_(garden.color.hex_QMARK_.call(null, x))) {
        return garden.color.hex__GT_hsl.call(null, x);
      } else {
        if (typeof x === "number") {
          return garden.color.hsl.call(null, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [x, garden.color.percent_clip.call(null, x), garden.color.percent_clip.call(null, x)], null));
        } else {
          throw cljs.core.ex_info.call(null, [cljs.core.str("Can't convert "), cljs.core.str(x), cljs.core.str(" to a color.")].join(""), cljs.core.PersistentArrayMap.EMPTY);
        }
      }
    }
  }
};
garden.color.restrict_rgb = function garden$color$restrict_rgb(m) {
  return cljs.core.select_keys.call(null, m, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "red", "red", -969428204), new cljs.core.Keyword(null, "green", "green", -945526839), new cljs.core.Keyword(null, "blue", "blue", -622100620)], null));
};
garden.color.make_color_operation = function garden$color$make_color_operation(op) {
  return function() {
    var garden$color$make_color_operation_$_color_op = null;
    var garden$color$make_color_operation_$_color_op__1 = function(a) {
      return a;
    };
    var garden$color$make_color_operation_$_color_op__2 = function(a, b) {
      var o = cljs.core.comp.call(null, garden.color.rgb_clip, op);
      var a__$1 = garden.color.restrict_rgb.call(null, garden.color.as_rgb.call(null, a));
      var b__$1 = garden.color.restrict_rgb.call(null, garden.color.as_rgb.call(null, b));
      return garden.color.as_color.call(null, cljs.core.merge_with.call(null, o, a__$1, b__$1));
    };
    var garden$color$make_color_operation_$_color_op__3 = function() {
      var G__15433__delegate = function(a, b, more) {
        return cljs.core.reduce.call(null, garden$color$make_color_operation_$_color_op, garden$color$make_color_operation_$_color_op.call(null, a, b), more);
      };
      var G__15433 = function(a, b, var_args) {
        var more = null;
        if (arguments.length > 2) {
          var G__15434__i = 0, G__15434__a = new Array(arguments.length - 2);
          while (G__15434__i < G__15434__a.length) {
            G__15434__a[G__15434__i] = arguments[G__15434__i + 2];
            ++G__15434__i;
          }
          more = new cljs.core.IndexedSeq(G__15434__a, 0);
        }
        return G__15433__delegate.call(this, a, b, more);
      };
      G__15433.cljs$lang$maxFixedArity = 2;
      G__15433.cljs$lang$applyTo = function(arglist__15435) {
        var a = cljs.core.first(arglist__15435);
        arglist__15435 = cljs.core.next(arglist__15435);
        var b = cljs.core.first(arglist__15435);
        var more = cljs.core.rest(arglist__15435);
        return G__15433__delegate(a, b, more);
      };
      G__15433.cljs$core$IFn$_invoke$arity$variadic = G__15433__delegate;
      return G__15433;
    }();
    garden$color$make_color_operation_$_color_op = function(a, b, var_args) {
      var more = var_args;
      switch(arguments.length) {
        case 1:
          return garden$color$make_color_operation_$_color_op__1.call(this, a);
        case 2:
          return garden$color$make_color_operation_$_color_op__2.call(this, a, b);
        default:
          var G__15436 = null;
          if (arguments.length > 2) {
            var G__15437__i = 0, G__15437__a = new Array(arguments.length - 2);
            while (G__15437__i < G__15437__a.length) {
              G__15437__a[G__15437__i] = arguments[G__15437__i + 2];
              ++G__15437__i;
            }
            G__15436 = new cljs.core.IndexedSeq(G__15437__a, 0);
          }
          return garden$color$make_color_operation_$_color_op__3.cljs$core$IFn$_invoke$arity$variadic(a, b, G__15436);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    garden$color$make_color_operation_$_color_op.cljs$lang$maxFixedArity = 2;
    garden$color$make_color_operation_$_color_op.cljs$lang$applyTo = garden$color$make_color_operation_$_color_op__3.cljs$lang$applyTo;
    garden$color$make_color_operation_$_color_op.cljs$core$IFn$_invoke$arity$1 = garden$color$make_color_operation_$_color_op__1;
    garden$color$make_color_operation_$_color_op.cljs$core$IFn$_invoke$arity$2 = garden$color$make_color_operation_$_color_op__2;
    garden$color$make_color_operation_$_color_op.cljs$core$IFn$_invoke$arity$variadic = garden$color$make_color_operation_$_color_op__3.cljs$core$IFn$_invoke$arity$variadic;
    return garden$color$make_color_operation_$_color_op;
  }();
};
garden.color.color_PLUS_ = garden.color.make_color_operation.call(null, cljs.core._PLUS_);
garden.color.color_ = garden.color.make_color_operation.call(null, cljs.core._);
garden.color.color_STAR_ = garden.color.make_color_operation.call(null, cljs.core._STAR_);
garden.color.color_div = garden.color.make_color_operation.call(null, cljs.core._SLASH_);
garden.color.update_color = function garden$color$update_color(color, field, f, v) {
  var v__$1 = function() {
    var or__4335__auto__ = (new cljs.core.Keyword(null, "magnitude", "magnitude", 1924274222)).cljs$core$IFn$_invoke$arity$1(v);
    if (cljs.core.truth_(or__4335__auto__)) {
      return or__4335__auto__;
    } else {
      return v;
    }
  }();
  return cljs.core.update_in.call(null, garden.color.as_hsl.call(null, color), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [field], null), f, v__$1);
};
garden.color.rotate_hue = function garden$color$rotate_hue(color, amount) {
  return garden.color.update_color.call(null, color, new cljs.core.Keyword(null, "hue", "hue", -508078848), cljs.core.comp.call(null, function(p1__15438_SHARP_) {
    return cljs.core.mod.call(null, p1__15438_SHARP_, 360);
  }, cljs.core._PLUS_), amount);
};
garden.color.saturate = function garden$color$saturate(color, amount) {
  return garden.color.update_color.call(null, color, new cljs.core.Keyword(null, "saturation", "saturation", -14247929), cljs.core.comp.call(null, garden.color.percent_clip, cljs.core._PLUS_), amount);
};
garden.color.desaturate = function garden$color$desaturate(color, amount) {
  return garden.color.update_color.call(null, color, new cljs.core.Keyword(null, "saturation", "saturation", -14247929), cljs.core.comp.call(null, garden.color.percent_clip, cljs.core._), amount);
};
garden.color.lighten = function garden$color$lighten(color, amount) {
  return garden.color.update_color.call(null, color, new cljs.core.Keyword(null, "lightness", "lightness", -2040901930), cljs.core.comp.call(null, garden.color.percent_clip, cljs.core._PLUS_), amount);
};
garden.color.darken = function garden$color$darken(color, amount) {
  return garden.color.update_color.call(null, color, new cljs.core.Keyword(null, "lightness", "lightness", -2040901930), cljs.core.comp.call(null, garden.color.percent_clip, cljs.core._), amount);
};
garden.color.invert = function garden$color$invert(color) {
  return garden.color.as_color.call(null, cljs.core.merge_with.call(null, cljs.core._, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "red", "red", -969428204), 255, new cljs.core.Keyword(null, "green", "green", -945526839), 255, new cljs.core.Keyword(null, "blue", "blue", -622100620), 255], null), garden.color.as_rgb.call(null, color)));
};
garden.color.mix = function garden$color$mix() {
  var G__15443 = arguments.length;
  switch(G__15443) {
    case 2:
      return garden.color.mix.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5386__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return garden.color.mix.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5386__auto__);
  }
};
garden.color.mix.cljs$core$IFn$_invoke$arity$2 = function(color_1, color_2) {
  var c1 = garden.color.restrict_rgb.call(null, garden.color.as_rgb.call(null, color_1));
  var c2 = garden.color.restrict_rgb.call(null, garden.color.as_rgb.call(null, color_2));
  return garden.color.as_color.call(null, cljs.core.merge_with.call(null, garden.util.average, c1, c2));
};
garden.color.mix.cljs$core$IFn$_invoke$arity$variadic = function(color_1, color_2, more) {
  return cljs.core.reduce.call(null, garden.color.mix, garden.color.mix.call(null, color_1, color_2), more);
};
garden.color.mix.cljs$lang$applyTo = function(seq15439) {
  var G__15440 = cljs.core.first.call(null, seq15439);
  var seq15439__$1 = cljs.core.next.call(null, seq15439);
  var G__15441 = cljs.core.first.call(null, seq15439__$1);
  var seq15439__$2 = cljs.core.next.call(null, seq15439__$1);
  return garden.color.mix.cljs$core$IFn$_invoke$arity$variadic(G__15440, G__15441, seq15439__$2);
};
garden.color.mix.cljs$lang$maxFixedArity = 2;
garden.color.complement = function garden$color$complement(color) {
  return garden.color.rotate_hue.call(null, color, 180);
};
garden.color.hue_rotations = function garden$color$hue_rotations() {
  var argseq__5375__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return garden.color.hue_rotations.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5375__auto__);
};
garden.color.hue_rotations.cljs$core$IFn$_invoke$arity$variadic = function(color, amounts) {
  return cljs.core.map.call(null, cljs.core.partial.call(null, garden.color.rotate_hue, color), amounts);
};
garden.color.hue_rotations.cljs$lang$maxFixedArity = 1;
garden.color.hue_rotations.cljs$lang$applyTo = function(seq15445) {
  var G__15446 = cljs.core.first.call(null, seq15445);
  var seq15445__$1 = cljs.core.next.call(null, seq15445);
  return garden.color.hue_rotations.cljs$core$IFn$_invoke$arity$variadic(G__15446, seq15445__$1);
};
garden.color.analogous = function garden$color$analogous() {
  var G__15448 = arguments.length;
  switch(G__15448) {
    case 1:
      return garden.color.analogous.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return garden.color.analogous.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
garden.color.analogous.cljs$core$IFn$_invoke$arity$1 = function(color) {
  return garden.color.analogous.call(null, color, true);
};
garden.color.analogous.cljs$core$IFn$_invoke$arity$2 = function(color, clockwise_QMARK_) {
  var sign = cljs.core.truth_(clockwise_QMARK_) ? cljs.core._PLUS_ : cljs.core._;
  return garden.color.hue_rotations.call(null, color, 0, sign.call(null, 30), sign.call(null, 60));
};
garden.color.analogous.cljs$lang$maxFixedArity = 2;
garden.color.triad = function garden$color$triad(color) {
  return garden.color.hue_rotations.call(null, color, 0, 120, 240);
};
garden.color.split_complement = function garden$color$split_complement() {
  var G__15451 = arguments.length;
  switch(G__15451) {
    case 1:
      return garden.color.split_complement.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return garden.color.split_complement.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
garden.color.split_complement.cljs$core$IFn$_invoke$arity$1 = function(color) {
  return garden.color.split_complement.call(null, color, 130);
};
garden.color.split_complement.cljs$core$IFn$_invoke$arity$2 = function(color, distance_from_complement) {
  var d = garden.util.clip.call(null, 1, 179, distance_from_complement);
  return garden.color.hue_rotations.call(null, color, 0, d, -d);
};
garden.color.split_complement.cljs$lang$maxFixedArity = 2;
garden.color.tetrad = function garden$color$tetrad() {
  var G__15454 = arguments.length;
  switch(G__15454) {
    case 1:
      return garden.color.tetrad.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return garden.color.tetrad.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
garden.color.tetrad.cljs$core$IFn$_invoke$arity$1 = function(color) {
  return garden.color.tetrad.call(null, color, 90);
};
garden.color.tetrad.cljs$core$IFn$_invoke$arity$2 = function(color, angle) {
  var a = garden.util.clip.call(null, 1, 90, Math.abs.call(null, (new cljs.core.Keyword(null, "magnitude", "magnitude", 1924274222)).cljs$core$IFn$_invoke$arity$2(angle, angle)));
  var color_2 = garden.color.rotate_hue.call(null, color, a);
  return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [garden.color.rotate_hue.call(null, color, 0), garden.color.complement.call(null, color), color_2, garden.color.complement.call(null, color_2)], null);
};
garden.color.tetrad.cljs$lang$maxFixedArity = 2;
garden.color.shades = function garden$color$shades() {
  var G__15457 = arguments.length;
  switch(G__15457) {
    case 1:
      return garden.color.shades.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return garden.color.shades.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
garden.color.shades.cljs$core$IFn$_invoke$arity$1 = function(color) {
  return garden.color.shades.call(null, color, 10);
};
garden.color.shades.cljs$core$IFn$_invoke$arity$2 = function(color, step) {
  var c = garden.color.as_hsl.call(null, color);
  var iter__5089__auto__ = function(c) {
    return function garden$color$iter__15458(s__15459) {
      return new cljs.core.LazySeq(null, function(c) {
        return function() {
          var s__15459__$1 = s__15459;
          while (true) {
            var temp__4126__auto__ = cljs.core.seq.call(null, s__15459__$1);
            if (temp__4126__auto__) {
              var s__15459__$2 = temp__4126__auto__;
              if (cljs.core.chunked_seq_QMARK_.call(null, s__15459__$2)) {
                var c__5087__auto__ = cljs.core.chunk_first.call(null, s__15459__$2);
                var size__5088__auto__ = cljs.core.count.call(null, c__5087__auto__);
                var b__15461 = cljs.core.chunk_buffer.call(null, size__5088__auto__);
                if (function() {
                  var i__15460 = 0;
                  while (true) {
                    if (i__15460 < size__5088__auto__) {
                      var i = cljs.core._nth.call(null, c__5087__auto__, i__15460);
                      cljs.core.chunk_append.call(null, b__15461, cljs.core.assoc.call(null, c, new cljs.core.Keyword(null, "lightness", "lightness", -2040901930), i * step));
                      var G__15463 = i__15460 + 1;
                      i__15460 = G__15463;
                      continue;
                    } else {
                      return true;
                    }
                    break;
                  }
                }()) {
                  return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__15461), garden$color$iter__15458.call(null, cljs.core.chunk_rest.call(null, s__15459__$2)));
                } else {
                  return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__15461), null);
                }
              } else {
                var i = cljs.core.first.call(null, s__15459__$2);
                return cljs.core.cons.call(null, cljs.core.assoc.call(null, c, new cljs.core.Keyword(null, "lightness", "lightness", -2040901930), i * step), garden$color$iter__15458.call(null, cljs.core.rest.call(null, s__15459__$2)));
              }
            } else {
              return null;
            }
            break;
          }
        };
      }(c), null, null);
    };
  }(c);
  return iter__5089__auto__.call(null, cljs.core.range.call(null, 1, Math.floor.call(null, 100 / step)));
};
garden.color.shades.cljs$lang$maxFixedArity = 2;
garden.color.color_name__GT_hex = cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null, "aquamarine", "aquamarine", 263648544), new cljs.core.Keyword(null, "lime", "lime", -1796425088), new cljs.core.Keyword(null, "deepskyblue", "deepskyblue", -1691758944), new cljs.core.Keyword(null, "darksalmon", "darksalmon", -896495551), new cljs.core.Keyword(null, "antiquewhite", "antiquewhite", -1702201183), new cljs.core.Keyword(null, "mediumturquoise", "mediumturquoise", 2112212449), new cljs.core.Keyword(null, 
"slategrey", "slategrey", -1531406687), new cljs.core.Keyword(null, "slategray", "slategray", -178672671), new cljs.core.Keyword(null, "sienna", "sienna", -1559699358), new cljs.core.Keyword(null, "orange", "orange", 73816386), new cljs.core.Keyword(null, "navajowhite", "navajowhite", 1463125346), new cljs.core.Keyword(null, "lavenderblush", "lavenderblush", 667482818), new cljs.core.Keyword(null, "firebrick", "firebrick", -214380606), new cljs.core.Keyword(null, "orangered", "orangered", -1851964317), 
new cljs.core.Keyword(null, "palevioletred", "palevioletred", -1198100061), new cljs.core.Keyword(null, "lawngreen", "lawngreen", 672111043), new cljs.core.Keyword(null, "seashell", "seashell", 1208259012), new cljs.core.Keyword(null, "lightpink", "lightpink", 808485476), new cljs.core.Keyword(null, "darkolivegreen", "darkolivegreen", -2098617596), new cljs.core.Keyword(null, "aliceblue", "aliceblue", -1185534108), new cljs.core.Keyword(null, "gray", "gray", 1013268388), new cljs.core.Keyword(null, 
"lightsteelblue", "lightsteelblue", -209586236), new cljs.core.Keyword(null, "whitesmoke", "whitesmoke", 1847137252), new cljs.core.Keyword(null, "darkgoldenrod", "darkgoldenrod", -1115778811), new cljs.core.Keyword(null, "tan", "tan", 1273609893), new cljs.core.Keyword(null, "bisque", "bisque", -862836634), new cljs.core.Keyword(null, "white", "white", -483998618), new cljs.core.Keyword(null, "lightgreen", "lightgreen", -1542529498), new cljs.core.Keyword(null, "darkseagreen", "darkseagreen", 410063911), 
new cljs.core.Keyword(null, "crimson", "crimson", -1192060857), new cljs.core.Keyword(null, "darkslategray", "darkslategray", 348576839), new cljs.core.Keyword(null, "mistyrose", "mistyrose", -619815737), new cljs.core.Keyword(null, "chocolate", "chocolate", 772404615), new cljs.core.Keyword(null, "yellow", "yellow", -881035449), new cljs.core.Keyword(null, "cadetblue", "cadetblue", 1126335112), new cljs.core.Keyword(null, "navy", "navy", 1626342120), new cljs.core.Keyword(null, "ghostwhite", "ghostwhite", 
-1030428888), new cljs.core.Keyword(null, "dimgrey", "dimgrey", 265814984), new cljs.core.Keyword(null, "seagreen", "seagreen", 1345424905), new cljs.core.Keyword(null, "green", "green", -945526839), new cljs.core.Keyword(null, "mediumseagreen", "mediumseagreen", 2130779146), new cljs.core.Keyword(null, "indigo", "indigo", -280252374), new cljs.core.Keyword(null, "olivedrab", "olivedrab", 477000042), new cljs.core.Keyword(null, "cyan", "cyan", 1118839274), new cljs.core.Keyword(null, "peachpuff", 
"peachpuff", -1932127734), new cljs.core.Keyword(null, "limegreen", "limegreen", -121735638), new cljs.core.Keyword(null, "mediumslateblue", "mediumslateblue", -900241526), new cljs.core.Keyword(null, "violet", "violet", -1351470549), new cljs.core.Keyword(null, "sandybrown", "sandybrown", -417646484), new cljs.core.Keyword(null, "yellowgreen", "yellowgreen", 844595052), new cljs.core.Keyword(null, "mediumspringgreen", "mediumspringgreen", -257604339), new cljs.core.Keyword(null, "steelblue", "steelblue", 
1620562381), new cljs.core.Keyword(null, "rosybrown", "rosybrown", 1634897517), new cljs.core.Keyword(null, "cornflowerblue", "cornflowerblue", -1713148307), new cljs.core.Keyword(null, "ivory", "ivory", -1259182451), new cljs.core.Keyword(null, "lightgoldenrodyellow", "lightgoldenrodyellow", 1849392877), new cljs.core.Keyword(null, "salmon", "salmon", -1093653298), new cljs.core.Keyword(null, "darkcyan", "darkcyan", -1999655442), new cljs.core.Keyword(null, "peru", "peru", 1147074382), new cljs.core.Keyword(null, 
"cornsilk", "cornsilk", -1628976146), new cljs.core.Keyword(null, "lightslategray", "lightslategray", -1109503825), new cljs.core.Keyword(null, "blueviolet", "blueviolet", 887936463), new cljs.core.Keyword(null, "forestgreen", "forestgreen", 1609185807), new cljs.core.Keyword(null, "lightseagreen", "lightseagreen", -1503692817), new cljs.core.Keyword(null, "gold", "gold", -806826416), new cljs.core.Keyword(null, "gainsboro", "gainsboro", -218568880), new cljs.core.Keyword(null, "darkorchid", "darkorchid", 
-1255783536), new cljs.core.Keyword(null, "burlywood", "burlywood", 1747294160), new cljs.core.Keyword(null, "lightskyblue", "lightskyblue", 397352944), new cljs.core.Keyword(null, "chartreuse", "chartreuse", -1626529775), new cljs.core.Keyword(null, "snow", "snow", 1266930033), new cljs.core.Keyword(null, "moccasin", "moccasin", 885646097), new cljs.core.Keyword(null, "honeydew", "honeydew", 297211825), new cljs.core.Keyword(null, "aqua", "aqua", 745022417), new cljs.core.Keyword(null, "darkred", 
"darkred", 1564487633), new cljs.core.Keyword(null, "mediumorchid", "mediumorchid", 114416082), new cljs.core.Keyword(null, "lightsalmon", "lightsalmon", 278000114), new cljs.core.Keyword(null, "saddlebrown", "saddlebrown", -1556765006), new cljs.core.Keyword(null, "wheat", "wheat", 783520466), new cljs.core.Keyword(null, "springgreen", "springgreen", -1241565454), new cljs.core.Keyword(null, "lightslategrey", "lightslategrey", 1806136178), new cljs.core.Keyword(null, "darkblue", "darkblue", 511597490), 
new cljs.core.Keyword(null, "powderblue", "powderblue", 65928114), new cljs.core.Keyword(null, "turquoise", "turquoise", 876845491), new cljs.core.Keyword(null, "blanchedalmond", "blanchedalmond", -1397674477), new cljs.core.Keyword(null, "papayawhip", "papayawhip", -330388621), new cljs.core.Keyword(null, "slateblue", "slateblue", 79472627), new cljs.core.Keyword(null, "lightblue", "lightblue", -1333083084), new cljs.core.Keyword(null, "skyblue", "skyblue", -2076132812), new cljs.core.Keyword(null, 
"red", "red", -969428204), new cljs.core.Keyword(null, "lightyellow", "lightyellow", 1576303380), new cljs.core.Keyword(null, "blue", "blue", -622100620), new cljs.core.Keyword(null, "palegreen", "palegreen", 1360601109), new cljs.core.Keyword(null, "greenyellow", "greenyellow", 1380924629), new cljs.core.Keyword(null, "khaki", "khaki", -1417823979), new cljs.core.Keyword(null, "maroon", "maroon", -952210123), new cljs.core.Keyword(null, "darkgrey", "darkgrey", -860992715), new cljs.core.Keyword(null, 
"midnightblue", "midnightblue", 688164725), new cljs.core.Keyword(null, "floralwhite", "floralwhite", 1656937461), new cljs.core.Keyword(null, "deeppink", "deeppink", 1577828374), new cljs.core.Keyword(null, "paleturquoise", "paleturquoise", 1255621750), new cljs.core.Keyword(null, "darkkhaki", "darkkhaki", 1599585526), new cljs.core.Keyword(null, "azure", "azure", 1864287702), new cljs.core.Keyword(null, "indianred", "indianred", -1829312906), new cljs.core.Keyword(null, "darkviolet", "darkviolet", 
552615766), new cljs.core.Keyword(null, "mediumpurple", "mediumpurple", -1891751018), new cljs.core.Keyword(null, "fuchsia", "fuchsia", 990719926), new cljs.core.Keyword(null, "coral", "coral", 1082484055), new cljs.core.Keyword(null, "mediumvioletred", "mediumvioletred", -1767902505), new cljs.core.Keyword(null, "lemonchiffon", "lemonchiffon", 1115945815), new cljs.core.Keyword(null, "mediumblue", "mediumblue", -1579936616), new cljs.core.Keyword(null, "darkmagenta", "darkmagenta", -1534491240), 
new cljs.core.Keyword(null, "goldenrod", "goldenrod", 2000666104), new cljs.core.Keyword(null, "darkorange", "darkorange", 1453996632), new cljs.core.Keyword(null, "orchid", "orchid", -1953715528), new cljs.core.Keyword(null, "plum", "plum", 2022177528), new cljs.core.Keyword(null, "pink", "pink", 393815864), new cljs.core.Keyword(null, "teal", "teal", 1231496088), new cljs.core.Keyword(null, "magenta", "magenta", 1687937081), new cljs.core.Keyword(null, "lightgrey", "lightgrey", -729897351), new cljs.core.Keyword(null, 
"purple", "purple", -876021126), new cljs.core.Keyword(null, "dodgerblue", "dodgerblue", -1678389350), new cljs.core.Keyword(null, "darkturquoise", "darkturquoise", -80977765), new cljs.core.Keyword(null, "mintcream", "mintcream", 1437895067), new cljs.core.Keyword(null, "hotpink", "hotpink", 1103829723), new cljs.core.Keyword(null, "thistle", "thistle", 1477120028), new cljs.core.Keyword(null, "royalblue", "royalblue", 978912636), new cljs.core.Keyword(null, "darkgreen", "darkgreen", 2002841276), 
new cljs.core.Keyword(null, "darkslateblue", "darkslateblue", 807219996), new cljs.core.Keyword(null, "silver", "silver", 1044501468), new cljs.core.Keyword(null, "darkgray", "darkgray", -1229776547), new cljs.core.Keyword(null, "oldlace", "oldlace", -966038915), new cljs.core.Keyword(null, "mediumaquamarine", "mediumaquamarine", 1476241181), new cljs.core.Keyword(null, "brown", "brown", 1414854429), new cljs.core.Keyword(null, "lightgray", "lightgray", -845833379), new cljs.core.Keyword(null, "olive", 
"olive", -2080542466), new cljs.core.Keyword(null, "lightcoral", "lightcoral", -988903010), new cljs.core.Keyword(null, "tomato", "tomato", 1086708254), new cljs.core.Keyword(null, "lightcyan", "lightcyan", -481418530), new cljs.core.Keyword(null, "linen", "linen", -1305214018), new cljs.core.Keyword(null, "darkslategrey", "darkslategrey", -114797409), new cljs.core.Keyword(null, "lavender", "lavender", -1469567809), new cljs.core.Keyword(null, "dimgray", "dimgray", -412750241), new cljs.core.Keyword(null, 
"palegoldenrod", "palegoldenrod", -2067529985), new cljs.core.Keyword(null, "beige", "beige", 836725695), new cljs.core.Keyword(null, "black", "black", 1294279647)], ["#7fffd4", "#00ff00", "#00bfff", "#e9967a", "#faebd7", "#48d1cc", "#708090", "#708090", "#a0522d", "#ffa500", "#ffdead", "#fff0f5", "#b22222", "#ff4500", "#db7093", "#7cfc00", "#fff5ee", "#ffb6c1", "#556b2f", "#f0f8ff", "#808080", "#b0c4de", "#f5f5f5", "#b8860b", "#d2b48c", "#ffe4c4", "#ffffff", "#90ee90", "#8fbc8f", "#dc143c", "#2f4f4f", 
"#ffe4e1", "#d2691e", "#ffff00", "#5f9ea0", "#000080", "#f8f8ff", "#696969", "#2e8b57", "#008000", "#3cb371", "#4b0082", "#6b8e23", "#00ffff", "#ffdab9", "#32cd32", "#7b68ee", "#ee82ee", "#f4a460", "#9acd32", "#00fa9a", "#4682b4", "#bc8f8f", "#6495ed", "#fffff0", "#fafad2", "#fa8072", "#008b8b", "#cd853f", "#fff8dc", "#778899", "#8a2be2", "#228b22", "#20b2aa", "#ffd700", "#dcdcdc", "#9932cc", "#deb887", "#87cefa", "#7fff00", "#fffafa", "#ffe4b5", "#f0fff0", "#00ffff", "#8b0000", "#ba55d3", "#ffa07a", 
"#8b4513", "#f5deb3", "#00ff7f", "#778899", "#00008b", "#b0e0e6", "#40e0d0", "#ffebcd", "#ffefd5", "#6a5acd", "#add8e6", "#87ceeb", "#ff0000", "#ffffe0", "#0000ff", "#98fb98", "#adff2f", "#f0e68c", "#800000", "#a9a9a9", "#191970", "#fffaf0", "#ff1493", "#afeeee", "#bdb76b", "#f0ffff", "#cd5c5c", "#9400d3", "#9370db", "#ff00ff", "#ff7f50", "#c71585", "#fffacd", "#0000cd", "#8b008b", "#daa520", "#ff8c00", "#da70d6", "#dda0dd", "#ffc0cb", "#008080", "#ff00ff", "#d3d3d3", "#800080", "#1e90ff", "#00ced1", 
"#f5fffa", "#ff69b4", "#d8bfd8", "#4169e1", "#006400", "#483d8b", "#c0c0c0", "#a9a9a9", "#fdf5e6", "#66cdaa", "#a52a2a", "#d3d3d3", "#808000", "#f08080", "#ff6347", "#e0ffff", "#faf0e6", "#2f4f4f", "#e6e6fa", "#696969", "#eee8aa", "#f5f5dc", "#000000"]);
garden.color.ex_info_color_name = function garden$color$ex_info_color_name(n) {
  return cljs.core.ex_info.call(null, [cljs.core.str("Unknown color "), cljs.core.str(cljs.core.pr_str.call(null, n)), cljs.core.str(" see (:expected (ex-data e)) for a list of color names")].join(""), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "given", "given", 716253602), n, new cljs.core.Keyword(null, "expected", "expected", 1583670997), cljs.core.set.call(null, cljs.core.keys.call(null, garden.color.color_name__GT_hex))], null));
};
garden.color.color_name__GT_color = cljs.core.memoize.call(null, function(k) {
  return garden.color.color_name__GT_hex.call(null, k);
});
garden.color.from_name = function garden$color$from_name(n) {
  var temp__4124__auto__ = garden.color.color_name__GT_color.call(null, cljs.core.keyword.call(null, n));
  if (cljs.core.truth_(temp__4124__auto__)) {
    var h = temp__4124__auto__;
    return h;
  } else {
    throw garden.color.ex_info_color_name.call(null, n);
  }
};
goog.provide("garden.compression");
goog.require("cljs.core");
garden.compression.token_fn = function garden$compression$token_fn(p__15361) {
  var vec__15363 = p__15361;
  var tag = cljs.core.nth.call(null, vec__15363, 0, null);
  var re = cljs.core.nth.call(null, vec__15363, 1, null);
  return function(vec__15363, tag, re) {
    return function(s) {
      var temp__4126__auto__ = cljs.core.re_find.call(null, re, s);
      if (cljs.core.truth_(temp__4126__auto__)) {
        var chunk = temp__4126__auto__;
        return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), tag, new cljs.core.Keyword(null, "chunk", "chunk", -1191159620), chunk, new cljs.core.Keyword(null, "size", "size", 1098693007), cljs.core.count.call(null, chunk)], null);
      } else {
        return null;
      }
    };
  }(vec__15363, tag, re);
};
garden.compression.tokenizer = function garden$compression$tokenizer() {
  var argseq__5375__auto__ = 0 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 0), 0) : null;
  return garden.compression.tokenizer.cljs$core$IFn$_invoke$arity$variadic(argseq__5375__auto__);
};
garden.compression.tokenizer.cljs$core$IFn$_invoke$arity$variadic = function(tags_PLUS_regexes) {
  var fs = cljs.core.map.call(null, garden.compression.token_fn, tags_PLUS_regexes);
  return function(fs) {
    return function(s) {
      return cljs.core.some.call(null, function(fs) {
        return function(p1__15364_SHARP_) {
          return p1__15364_SHARP_.call(null, s);
        };
      }(fs), fs);
    };
  }(fs);
};
garden.compression.tokenizer.cljs$lang$maxFixedArity = 0;
garden.compression.tokenizer.cljs$lang$applyTo = function(seq15365) {
  return garden.compression.tokenizer.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq.call(null, seq15365));
};
garden.compression.stylesheet_tokenizer = garden.compression.tokenizer.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "string", "string", -1989541586), /^\"(?:\\.|[^\"])*\"/], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "r-brace", "r-brace", -1335738887), /^\s*\{\s*/], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
[new cljs.core.Keyword(null, "l-brace", "l-brace", 613286657), /^;?\s*}/], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "r-paren", "r-paren", -1688338021), /^\s*\(\s*/], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "l-paren", "l-paren", 2052672514), /^\s*\)/], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, 
"comma", "comma", 1699024745), /^,\s*/], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "colon", "colon", -965200945), /^:\s*/], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "semicolon", "semicolon", 797086549), /^;/], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "space+", "space+", 
378127624), /^ +/], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "white-space+", "white-space+", 1452157162), /^\s+/], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "any", "any", 1705907423), /^./], null));
garden.compression.compress_stylesheet = function garden$compression$compress_stylesheet(stylesheet) {
  var s1 = stylesheet;
  var s2 = "";
  while (true) {
    var temp__4124__auto__ = garden.compression.stylesheet_tokenizer.call(null, s1);
    if (cljs.core.truth_(temp__4124__auto__)) {
      var map__15368 = temp__4124__auto__;
      var map__15368__$1 = cljs.core.seq_QMARK_.call(null, map__15368) ? cljs.core.apply.call(null, cljs.core.hash_map, map__15368) : map__15368;
      var size = cljs.core.get.call(null, map__15368__$1, new cljs.core.Keyword(null, "size", "size", 1098693007));
      var chunk = cljs.core.get.call(null, map__15368__$1, new cljs.core.Keyword(null, "chunk", "chunk", -1191159620));
      var tag = cljs.core.get.call(null, map__15368__$1, new cljs.core.Keyword(null, "tag", "tag", -1290361223));
      var G__15370 = cljs.core.subs.call(null, s1, size);
      var G__15371 = [cljs.core.str(s2), cljs.core.str(function() {
        var G__15369 = tag instanceof cljs.core.Keyword ? tag.fqn : null;
        switch(G__15369) {
          case "l-brace":
            return "}";
            break;
          case "l-paren":
            return ")";
            break;
          case "space+":
            return " ";
            break;
          case "comma":
            return ",";
            break;
          case "white-space+":
            return "";
            break;
          case "string":
            return chunk;
            break;
          case "colon":
            return ":";
            break;
          case "semi-comma":
            return ";";
            break;
          case "r-brace":
            return "{";
            break;
          case "r-paren":
            return "(";
            break;
          default:
            return chunk;
        }
      }())].join("");
      s1 = G__15370;
      s2 = G__15371;
      continue;
    } else {
      return s2;
    }
    break;
  }
};
goog.provide("garden.compiler");
goog.require("cljs.core");
goog.require("garden.units");
goog.require("garden.types");
goog.require("garden.util");
goog.require("garden.color");
goog.require("garden.selectors");
goog.require("garden.compression");
goog.require("clojure.string");
garden.compiler._STAR_flags_STAR_ = new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "pretty-print?", "pretty-print?", 1932217158), true, new cljs.core.Keyword(null, "preamble", "preamble", 1641040241), cljs.core.PersistentVector.EMPTY, new cljs.core.Keyword(null, "output-to", "output-to", -965533968), null, new cljs.core.Keyword(null, "vendors", "vendors", -153040496), cljs.core.PersistentVector.EMPTY, new cljs.core.Keyword(null, "auto-prefix", "auto-prefix", 1484803466), cljs.core.PersistentHashSet.EMPTY, 
new cljs.core.Keyword(null, "media-expressions", "media-expressions", 1920421643), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "nesting-behavior", "nesting-behavior", -1555995755), new cljs.core.Keyword(null, "default", "default", -1987822328)], null)], null);
garden.compiler.media_expression_behavior = new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "merge", "merge", -1804319409), function(expr, context) {
  return cljs.core.merge.call(null, context, expr);
}, new cljs.core.Keyword(null, "default", "default", -1987822328), function(expr, _) {
  return expr;
}], null);
garden.compiler._STAR_selector_context_STAR_ = null;
garden.compiler._STAR_media_query_context_STAR_ = null;
garden.compiler.vendors = function garden$compiler$vendors() {
  return cljs.core.seq.call(null, (new cljs.core.Keyword(null, "vendors", "vendors", -153040496)).cljs$core$IFn$_invoke$arity$1(garden.compiler._STAR_flags_STAR_));
};
garden.compiler.auto_prefixed_properties = function garden$compiler$auto_prefixed_properties() {
  return cljs.core.set.call(null, cljs.core.map.call(null, cljs.core.name, (new cljs.core.Keyword(null, "auto-prefix", "auto-prefix", 1484803466)).cljs$core$IFn$_invoke$arity$1(garden.compiler._STAR_flags_STAR_)));
};
garden.compiler.auto_prefix_QMARK_ = function garden$compiler$auto_prefix_QMARK_(property) {
  return cljs.core.contains_QMARK_.call(null, garden.compiler.auto_prefixed_properties.call(null), property);
};
garden.compiler.top_level_expression_QMARK_ = function garden$compiler$top_level_expression_QMARK_(x) {
  var or__4335__auto__ = garden.util.rule_QMARK_.call(null, x);
  if (cljs.core.truth_(or__4335__auto__)) {
    return or__4335__auto__;
  } else {
    var or__4335__auto____$1 = garden.util.at_import_QMARK_.call(null, x);
    if (cljs.core.truth_(or__4335__auto____$1)) {
      return or__4335__auto____$1;
    } else {
      var or__4335__auto____$2 = garden.util.at_media_QMARK_.call(null, x);
      if (cljs.core.truth_(or__4335__auto____$2)) {
        return or__4335__auto____$2;
      } else {
        return garden.util.at_keyframes_QMARK_.call(null, x);
      }
    }
  }
};
garden.compiler.divide_vec = function garden$compiler$divide_vec(pred, coll) {
  return cljs.core.juxt.call(null, cljs.core.filter, cljs.core.remove).call(null, pred, coll);
};
garden.compiler.IExpandable = function() {
  var obj15263 = {};
  return obj15263;
}();
garden.compiler.expand = function garden$compiler$expand(this$) {
  if (function() {
    var and__4323__auto__ = this$;
    if (and__4323__auto__) {
      return this$.garden$compiler$IExpandable$expand$arity$1;
    } else {
      return and__4323__auto__;
    }
  }()) {
    return this$.garden$compiler$IExpandable$expand$arity$1(this$);
  } else {
    var x__4971__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4335__auto__ = garden.compiler.expand[goog.typeOf(x__4971__auto__)];
      if (or__4335__auto__) {
        return or__4335__auto__;
      } else {
        var or__4335__auto____$1 = garden.compiler.expand["_"];
        if (or__4335__auto____$1) {
          return or__4335__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IExpandable.expand", this$);
        }
      }
    }().call(null, this$);
  }
};
garden.compiler.expand_seqs = function garden$compiler$expand_seqs(coll) {
  return cljs.core.mapcat.call(null, function(x) {
    if (cljs.core.seq_QMARK_.call(null, x)) {
      return garden$compiler$expand_seqs.call(null, x);
    } else {
      return cljs.core._conj.call(null, cljs.core.List.EMPTY, x);
    }
  }, coll);
};
garden.compiler.expand_declaration_1 = function garden$compiler$expand_declaration_1(d) {
  var prefix = function(p1__15264_SHARP_, p2__15265_SHARP_) {
    return garden.util.as_str.call(null, p1__15264_SHARP_, "-", p2__15265_SHARP_);
  };
  return cljs.core.reduce.call(null, function(prefix) {
    return function(m, p__15270) {
      var vec__15271 = p__15270;
      var k = cljs.core.nth.call(null, vec__15271, 0, null);
      var v = cljs.core.nth.call(null, vec__15271, 1, null);
      if (cljs.core.truth_(garden.util.hash_map_QMARK_.call(null, v))) {
        return cljs.core.reduce.call(null, function(vec__15271, k, v, prefix) {
          return function(m1, p__15272) {
            var vec__15273 = p__15272;
            var k1 = cljs.core.nth.call(null, vec__15273, 0, null);
            var v1 = cljs.core.nth.call(null, vec__15273, 1, null);
            return cljs.core.assoc.call(null, m1, prefix.call(null, k, k1), v1);
          };
        }(vec__15271, k, v, prefix), m, garden$compiler$expand_declaration_1.call(null, v));
      } else {
        return cljs.core.assoc.call(null, m, garden.util.to_str.call(null, k), v);
      }
    };
  }(prefix), cljs.core.PersistentArrayMap.EMPTY, d);
};
garden.compiler.expand_declaration = function garden$compiler$expand_declaration(d) {
  if (cljs.core.seq.call(null, d)) {
    return cljs.core.with_meta.call(null, garden.compiler.expand_declaration_1.call(null, d), cljs.core.meta.call(null, d));
  } else {
    return null;
  }
};
garden.compiler.parent_selector_re = /^&(?:\S+)?$/;
garden.compiler.extract_reference = function garden$compiler$extract_reference(selector) {
  var temp__4126__auto__ = cljs.core.re_find.call(null, garden.compiler.parent_selector_re, garden.util.to_str.call(null, cljs.core.last.call(null, selector)));
  if (cljs.core.truth_(temp__4126__auto__)) {
    var reference = temp__4126__auto__;
    return cljs.core.apply.call(null, cljs.core.str, cljs.core.rest.call(null, reference));
  } else {
    return null;
  }
};
garden.compiler.expand_selector_reference = function garden$compiler$expand_selector_reference(selector) {
  var temp__4124__auto__ = garden.compiler.extract_reference.call(null, selector);
  if (cljs.core.truth_(temp__4124__auto__)) {
    var reference = temp__4124__auto__;
    var parent = cljs.core.butlast.call(null, selector);
    return cljs.core.concat.call(null, cljs.core.butlast.call(null, parent), cljs.core._conj.call(null, cljs.core.List.EMPTY, garden.util.as_str.call(null, cljs.core.last.call(null, parent), reference)));
  } else {
    return selector;
  }
};
garden.compiler.expand_selector = function garden$compiler$expand_selector(selector, parent) {
  var selector__$1 = cljs.core.map.call(null, garden.selectors.css_selector, selector);
  var selector__$2 = cljs.core.seq.call(null, parent) ? cljs.core.map.call(null, cljs.core.flatten, garden.util.cartesian_product.call(null, parent, selector__$1)) : cljs.core.map.call(null, cljs.core.list, selector__$1);
  return cljs.core.map.call(null, garden.compiler.expand_selector_reference, selector__$2);
};
garden.compiler.expand_rule = function garden$compiler$expand_rule(rule) {
  var vec__15277 = cljs.core.split_with.call(null, garden.selectors.selector_QMARK_, rule);
  var selector = cljs.core.nth.call(null, vec__15277, 0, null);
  var children = cljs.core.nth.call(null, vec__15277, 1, null);
  var selector__$1 = garden.compiler.expand_selector.call(null, selector, garden.compiler._STAR_selector_context_STAR_);
  var children__$1 = garden.compiler.expand.call(null, children);
  var vec__15278 = garden.compiler.divide_vec.call(null, garden.util.declaration_QMARK_, children__$1);
  var declarations = cljs.core.nth.call(null, vec__15278, 0, null);
  var xs = cljs.core.nth.call(null, vec__15278, 1, null);
  var ys = function() {
    var _STAR_selector_context_STAR_15279 = garden.compiler._STAR_selector_context_STAR_;
    garden.compiler._STAR_selector_context_STAR_ = cljs.core.seq.call(null, selector__$1) ? selector__$1 : garden.compiler._STAR_selector_context_STAR_;
    try {
      return cljs.core.doall.call(null, cljs.core.mapcat.call(null, garden.compiler.expand, xs));
    } finally {
      garden.compiler._STAR_selector_context_STAR_ = _STAR_selector_context_STAR_15279;
    }
  }();
  return cljs.core.conj.call(null, ys, cljs.core.conj.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [selector__$1], null), cljs.core.mapcat.call(null, garden.compiler.expand, declarations)));
};
if (typeof garden.compiler.expand_at_rule !== "undefined") {
} else {
  garden.compiler.expand_at_rule = function() {
    var method_table__5230__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var prefer_table__5231__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var method_cache__5232__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var cached_hierarchy__5233__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var hierarchy__5234__auto__ = cljs.core.get.call(null, cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "hierarchy", "hierarchy", -1053470341), cljs.core.get_global_hierarchy.call(null));
    return new cljs.core.MultiFn(cljs.core.symbol.call(null, "garden.compiler", "expand-at-rule"), new cljs.core.Keyword(null, "identifier", "identifier", -805503498), new cljs.core.Keyword(null, "default", "default", -1987822328), hierarchy__5234__auto__, method_table__5230__auto__, prefer_table__5231__auto__, method_cache__5232__auto__, cached_hierarchy__5233__auto__);
  }();
}
cljs.core._add_method.call(null, garden.compiler.expand_at_rule, new cljs.core.Keyword(null, "default", "default", -1987822328), function(at_rule) {
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, at_rule);
});
cljs.core._add_method.call(null, garden.compiler.expand_at_rule, new cljs.core.Keyword(null, "keyframes", "keyframes", -1437976012), function(p__15280) {
  var map__15281 = p__15280;
  var map__15281__$1 = cljs.core.seq_QMARK_.call(null, map__15281) ? cljs.core.apply.call(null, cljs.core.hash_map, map__15281) : map__15281;
  var value = cljs.core.get.call(null, map__15281__$1, new cljs.core.Keyword(null, "value", "value", 305978217));
  var map__15282 = value;
  var map__15282__$1 = cljs.core.seq_QMARK_.call(null, map__15282) ? cljs.core.apply.call(null, cljs.core.hash_map, map__15282) : map__15282;
  var frames = cljs.core.get.call(null, map__15282__$1, new cljs.core.Keyword(null, "frames", "frames", 1765687497));
  var identifier = cljs.core.get.call(null, map__15282__$1, new cljs.core.Keyword(null, "identifier", "identifier", -805503498));
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, new garden.types.CSSAtRule(new cljs.core.Keyword(null, "keyframes", "keyframes", -1437976012), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "identifier", "identifier", -805503498), garden.util.to_str.call(null, identifier), new cljs.core.Keyword(null, "frames", "frames", 1765687497), cljs.core.mapcat.call(null, garden.compiler.expand, frames)], null), null, null, null));
});
garden.compiler.expand_media_query_expression = function garden$compiler$expand_media_query_expression(expression) {
  var temp__4124__auto__ = garden.compiler.media_expression_behavior.call(null, cljs.core.get_in.call(null, garden.compiler._STAR_flags_STAR_, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "media-expressions", "media-expressions", 1920421643), new cljs.core.Keyword(null, "nesting-behavior", "nesting-behavior", -1555995755)], null)));
  if (cljs.core.truth_(temp__4124__auto__)) {
    var f = temp__4124__auto__;
    return f.call(null, expression, garden.compiler._STAR_media_query_context_STAR_);
  } else {
    return expression;
  }
};
cljs.core._add_method.call(null, garden.compiler.expand_at_rule, new cljs.core.Keyword(null, "media", "media", -1066138403), function(p__15283) {
  var map__15284 = p__15283;
  var map__15284__$1 = cljs.core.seq_QMARK_.call(null, map__15284) ? cljs.core.apply.call(null, cljs.core.hash_map, map__15284) : map__15284;
  var value = cljs.core.get.call(null, map__15284__$1, new cljs.core.Keyword(null, "value", "value", 305978217));
  var map__15285 = value;
  var map__15285__$1 = cljs.core.seq_QMARK_.call(null, map__15285) ? cljs.core.apply.call(null, cljs.core.hash_map, map__15285) : map__15285;
  var rules = cljs.core.get.call(null, map__15285__$1, new cljs.core.Keyword(null, "rules", "rules", 1198912366));
  var media_queries = cljs.core.get.call(null, map__15285__$1, new cljs.core.Keyword(null, "media-queries", "media-queries", -1563277678));
  var media_queries__$1 = garden.compiler.expand_media_query_expression.call(null, media_queries);
  var xs = function() {
    var _STAR_media_query_context_STAR_15287 = garden.compiler._STAR_media_query_context_STAR_;
    garden.compiler._STAR_media_query_context_STAR_ = media_queries__$1;
    try {
      return cljs.core.doall.call(null, cljs.core.mapcat.call(null, garden.compiler.expand, garden.compiler.expand.call(null, rules)));
    } finally {
      garden.compiler._STAR_media_query_context_STAR_ = _STAR_media_query_context_STAR_15287;
    }
  }();
  var vec__15286 = garden.compiler.divide_vec.call(null, garden.util.at_media_QMARK_, xs);
  var subqueries = cljs.core.nth.call(null, vec__15286, 0, null);
  var rules__$1 = cljs.core.nth.call(null, vec__15286, 1, null);
  return cljs.core.cons.call(null, new garden.types.CSSAtRule(new cljs.core.Keyword(null, "media", "media", -1066138403), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "media-queries", "media-queries", -1563277678), media_queries__$1, new cljs.core.Keyword(null, "rules", "rules", 1198912366), rules__$1], null), null, null, null), subqueries);
});
garden.compiler.expand_stylesheet = function garden$compiler$expand_stylesheet(xs) {
  return cljs.core.apply.call(null, cljs.core.concat, cljs.core.map.call(null, garden.compiler.expand, garden.compiler.expand.call(null, xs)));
};
garden.compiler.IExpandable["null"] = true;
garden.compiler.expand["null"] = function(this$) {
  return null;
};
cljs.core.IndexedSeq.prototype.garden$compiler$IExpandable$ = true;
cljs.core.IndexedSeq.prototype.garden$compiler$IExpandable$expand$arity$1 = function(this$) {
  var this$__$1 = this;
  return garden.compiler.expand_seqs.call(null, this$__$1);
};
cljs.core.LazySeq.prototype.garden$compiler$IExpandable$ = true;
cljs.core.LazySeq.prototype.garden$compiler$IExpandable$expand$arity$1 = function(this$) {
  var this$__$1 = this;
  return garden.compiler.expand_seqs.call(null, this$__$1);
};
cljs.core.NodeSeq.prototype.garden$compiler$IExpandable$ = true;
cljs.core.NodeSeq.prototype.garden$compiler$IExpandable$expand$arity$1 = function(this$) {
  var this$__$1 = this;
  return garden.compiler.expand_seqs.call(null, this$__$1);
};
cljs.core.BlackNode.prototype.garden$compiler$IExpandable$ = true;
cljs.core.BlackNode.prototype.garden$compiler$IExpandable$expand$arity$1 = function(this$) {
  var this$__$1 = this;
  return garden.compiler.expand_rule.call(null, this$__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.garden$compiler$IExpandable$ = true;
cljs.core.PersistentArrayMapSeq.prototype.garden$compiler$IExpandable$expand$arity$1 = function(this$) {
  var this$__$1 = this;
  return garden.compiler.expand_seqs.call(null, this$__$1);
};
cljs.core.ChunkedSeq.prototype.garden$compiler$IExpandable$ = true;
cljs.core.ChunkedSeq.prototype.garden$compiler$IExpandable$expand$arity$1 = function(this$) {
  var this$__$1 = this;
  return garden.compiler.expand_seqs.call(null, this$__$1);
};
cljs.core.Cons.prototype.garden$compiler$IExpandable$ = true;
cljs.core.Cons.prototype.garden$compiler$IExpandable$expand$arity$1 = function(this$) {
  var this$__$1 = this;
  return garden.compiler.expand_seqs.call(null, this$__$1);
};
cljs.core.RSeq.prototype.garden$compiler$IExpandable$ = true;
cljs.core.RSeq.prototype.garden$compiler$IExpandable$expand$arity$1 = function(this$) {
  var this$__$1 = this;
  return garden.compiler.expand_seqs.call(null, this$__$1);
};
garden.types.CSSFunction.prototype.garden$compiler$IExpandable$ = true;
garden.types.CSSFunction.prototype.garden$compiler$IExpandable$expand$arity$1 = function(this$) {
  var this$__$1 = this;
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, this$__$1);
};
cljs.core.PersistentHashMap.prototype.garden$compiler$IExpandable$ = true;
cljs.core.PersistentHashMap.prototype.garden$compiler$IExpandable$expand$arity$1 = function(this$) {
  var this$__$1 = this;
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, garden.compiler.expand_declaration.call(null, this$__$1));
};
cljs.core.ArrayNodeSeq.prototype.garden$compiler$IExpandable$ = true;
cljs.core.ArrayNodeSeq.prototype.garden$compiler$IExpandable$expand$arity$1 = function(this$) {
  var this$__$1 = this;
  return garden.compiler.expand_seqs.call(null, this$__$1);
};
cljs.core.Subvec.prototype.garden$compiler$IExpandable$ = true;
cljs.core.Subvec.prototype.garden$compiler$IExpandable$expand$arity$1 = function(this$) {
  var this$__$1 = this;
  return garden.compiler.expand_rule.call(null, this$__$1);
};
garden.compiler.IExpandable["_"] = true;
garden.compiler.expand["_"] = function(this$) {
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, this$);
};
cljs.core.PersistentTreeMap.prototype.garden$compiler$IExpandable$ = true;
cljs.core.PersistentTreeMap.prototype.garden$compiler$IExpandable$expand$arity$1 = function(this$) {
  var this$__$1 = this;
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, garden.compiler.expand_declaration.call(null, this$__$1));
};
cljs.core.ChunkedCons.prototype.garden$compiler$IExpandable$ = true;
cljs.core.ChunkedCons.prototype.garden$compiler$IExpandable$expand$arity$1 = function(this$) {
  var this$__$1 = this;
  return garden.compiler.expand_seqs.call(null, this$__$1);
};
garden.types.CSSAtRule.prototype.garden$compiler$IExpandable$ = true;
garden.types.CSSAtRule.prototype.garden$compiler$IExpandable$expand$arity$1 = function(this$) {
  var this$__$1 = this;
  return garden.compiler.expand_at_rule.call(null, this$__$1);
};
cljs.core.RedNode.prototype.garden$compiler$IExpandable$ = true;
cljs.core.RedNode.prototype.garden$compiler$IExpandable$expand$arity$1 = function(this$) {
  var this$__$1 = this;
  return garden.compiler.expand_rule.call(null, this$__$1);
};
cljs.core.PersistentVector.prototype.garden$compiler$IExpandable$ = true;
cljs.core.PersistentVector.prototype.garden$compiler$IExpandable$expand$arity$1 = function(this$) {
  var this$__$1 = this;
  return garden.compiler.expand_rule.call(null, this$__$1);
};
cljs.core.PersistentArrayMap.prototype.garden$compiler$IExpandable$ = true;
cljs.core.PersistentArrayMap.prototype.garden$compiler$IExpandable$expand$arity$1 = function(this$) {
  var this$__$1 = this;
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, garden.compiler.expand_declaration.call(null, this$__$1));
};
garden.color.CSSColor.prototype.garden$compiler$IExpandable$ = true;
garden.color.CSSColor.prototype.garden$compiler$IExpandable$expand$arity$1 = function(this$) {
  var this$__$1 = this;
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, this$__$1);
};
cljs.core.List.prototype.garden$compiler$IExpandable$ = true;
cljs.core.List.prototype.garden$compiler$IExpandable$expand$arity$1 = function(this$) {
  var this$__$1 = this;
  return garden.compiler.expand_seqs.call(null, this$__$1);
};
garden.compiler.CSSRenderer = function() {
  var obj15289 = {};
  return obj15289;
}();
garden.compiler.render_css = function garden$compiler$render_css(this$) {
  if (function() {
    var and__4323__auto__ = this$;
    if (and__4323__auto__) {
      return this$.garden$compiler$CSSRenderer$render_css$arity$1;
    } else {
      return and__4323__auto__;
    }
  }()) {
    return this$.garden$compiler$CSSRenderer$render_css$arity$1(this$);
  } else {
    var x__4971__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4335__auto__ = garden.compiler.render_css[goog.typeOf(x__4971__auto__)];
      if (or__4335__auto__) {
        return or__4335__auto__;
      } else {
        var or__4335__auto____$1 = garden.compiler.render_css["_"];
        if (or__4335__auto____$1) {
          return or__4335__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "CSSRenderer.render-css", this$);
        }
      }
    }().call(null, this$);
  }
};
garden.compiler.comma = ", ";
garden.compiler.colon = ": ";
garden.compiler.semicolon = ";";
garden.compiler.l_brace = " {\n";
garden.compiler.r_brace = "\n}";
garden.compiler.l_brace_1 = " {\n\n";
garden.compiler.r_brace_1 = "\n\n}";
garden.compiler.rule_sep = "\n\n";
garden.compiler.indent = "  ";
garden.compiler.space_separated_list = function garden$compiler$space_separated_list() {
  var G__15291 = arguments.length;
  switch(G__15291) {
    case 1:
      return garden.compiler.space_separated_list.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return garden.compiler.space_separated_list.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
garden.compiler.space_separated_list.cljs$core$IFn$_invoke$arity$1 = function(xs) {
  return garden.compiler.space_separated_list.call(null, garden.compiler.render_css, xs);
};
garden.compiler.space_separated_list.cljs$core$IFn$_invoke$arity$2 = function(f, xs) {
  return clojure.string.join.call(null, " ", cljs.core.map.call(null, f, xs));
};
garden.compiler.space_separated_list.cljs$lang$maxFixedArity = 2;
garden.compiler.comma_separated_list = function garden$compiler$comma_separated_list() {
  var G__15294 = arguments.length;
  switch(G__15294) {
    case 1:
      return garden.compiler.comma_separated_list.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return garden.compiler.comma_separated_list.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
garden.compiler.comma_separated_list.cljs$core$IFn$_invoke$arity$1 = function(xs) {
  return garden.compiler.comma_separated_list.call(null, garden.compiler.render_css, xs);
};
garden.compiler.comma_separated_list.cljs$core$IFn$_invoke$arity$2 = function(f, xs) {
  var ys = function() {
    var iter__5089__auto__ = function garden$compiler$iter__15295(s__15296) {
      return new cljs.core.LazySeq(null, function() {
        var s__15296__$1 = s__15296;
        while (true) {
          var temp__4126__auto__ = cljs.core.seq.call(null, s__15296__$1);
          if (temp__4126__auto__) {
            var s__15296__$2 = temp__4126__auto__;
            if (cljs.core.chunked_seq_QMARK_.call(null, s__15296__$2)) {
              var c__5087__auto__ = cljs.core.chunk_first.call(null, s__15296__$2);
              var size__5088__auto__ = cljs.core.count.call(null, c__5087__auto__);
              var b__15298 = cljs.core.chunk_buffer.call(null, size__5088__auto__);
              if (function() {
                var i__15297 = 0;
                while (true) {
                  if (i__15297 < size__5088__auto__) {
                    var x = cljs.core._nth.call(null, c__5087__auto__, i__15297);
                    cljs.core.chunk_append.call(null, b__15298, cljs.core.sequential_QMARK_.call(null, x) ? garden.compiler.space_separated_list.call(null, f, x) : f.call(null, x));
                    var G__15300 = i__15297 + 1;
                    i__15297 = G__15300;
                    continue;
                  } else {
                    return true;
                  }
                  break;
                }
              }()) {
                return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__15298), garden$compiler$iter__15295.call(null, cljs.core.chunk_rest.call(null, s__15296__$2)));
              } else {
                return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__15298), null);
              }
            } else {
              var x = cljs.core.first.call(null, s__15296__$2);
              return cljs.core.cons.call(null, cljs.core.sequential_QMARK_.call(null, x) ? garden.compiler.space_separated_list.call(null, f, x) : f.call(null, x), garden$compiler$iter__15295.call(null, cljs.core.rest.call(null, s__15296__$2)));
            }
          } else {
            return null;
          }
          break;
        }
      }, null, null);
    };
    return iter__5089__auto__.call(null, xs);
  }();
  return clojure.string.join.call(null, garden.compiler.comma, ys);
};
garden.compiler.comma_separated_list.cljs$lang$maxFixedArity = 2;
garden.compiler.rule_join = function garden$compiler$rule_join(xs) {
  return clojure.string.join.call(null, garden.compiler.rule_sep, xs);
};
garden.compiler.indent_loc_re = new RegExp("(?\x3d[ A-Za-z#.}-]+)^", "gm");
garden.compiler.indent_str = function garden$compiler$indent_str(s) {
  return s.replace(garden.compiler.indent_loc_re, garden.compiler.indent);
};
garden.compiler.render_value = function garden$compiler$render_value(x) {
  if (cljs.core.truth_(garden.util.at_keyframes_QMARK_.call(null, x))) {
    return garden.util.to_str.call(null, cljs.core.get_in.call(null, x, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "value", "value", 305978217), new cljs.core.Keyword(null, "identifier", "identifier", -805503498)], null)));
  } else {
    return garden.compiler.render_css.call(null, x);
  }
};
garden.compiler.render_property_and_value = function garden$compiler$render_property_and_value(p__15301) {
  var vec__15303 = p__15301;
  var prop = cljs.core.nth.call(null, vec__15303, 0, null);
  var val = cljs.core.nth.call(null, vec__15303, 1, null);
  if (cljs.core.set_QMARK_.call(null, val)) {
    return clojure.string.join.call(null, "\n", cljs.core.map.call(null, garden$compiler$render_property_and_value, cljs.core.partition.call(null, 2, cljs.core.interleave.call(null, cljs.core.repeat.call(null, prop), val))));
  } else {
    var val__$1 = cljs.core.sequential_QMARK_.call(null, val) ? garden.compiler.comma_separated_list.call(null, garden.compiler.render_value, val) : garden.compiler.render_value.call(null, val);
    return garden.util.as_str.call(null, prop, garden.compiler.colon, val__$1, garden.compiler.semicolon);
  }
};
garden.compiler.add_blocks = function garden$compiler$add_blocks(f, declaration) {
  return cljs.core.mapcat.call(null, function(p1__15304_SHARP_) {
    return cljs.core.cons.call(null, p1__15304_SHARP_, f.call(null, p1__15304_SHARP_));
  }, declaration);
};
garden.compiler.prefixed_blocks = function garden$compiler$prefixed_blocks(vendors, p__15305) {
  var vec__15311 = p__15305;
  var p = cljs.core.nth.call(null, vec__15311, 0, null);
  var v = cljs.core.nth.call(null, vec__15311, 1, null);
  var iter__5089__auto__ = function(vec__15311, p, v) {
    return function garden$compiler$prefixed_blocks_$_iter__15312(s__15313) {
      return new cljs.core.LazySeq(null, function(vec__15311, p, v) {
        return function() {
          var s__15313__$1 = s__15313;
          while (true) {
            var temp__4126__auto__ = cljs.core.seq.call(null, s__15313__$1);
            if (temp__4126__auto__) {
              var s__15313__$2 = temp__4126__auto__;
              if (cljs.core.chunked_seq_QMARK_.call(null, s__15313__$2)) {
                var c__5087__auto__ = cljs.core.chunk_first.call(null, s__15313__$2);
                var size__5088__auto__ = cljs.core.count.call(null, c__5087__auto__);
                var b__15315 = cljs.core.chunk_buffer.call(null, size__5088__auto__);
                if (function() {
                  var i__15314 = 0;
                  while (true) {
                    if (i__15314 < size__5088__auto__) {
                      var vendor = cljs.core._nth.call(null, c__5087__auto__, i__15314);
                      cljs.core.chunk_append.call(null, b__15315, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [garden.util.vendor_prefix.call(null, vendor, cljs.core.name.call(null, p)), v], null));
                      var G__15316 = i__15314 + 1;
                      i__15314 = G__15316;
                      continue;
                    } else {
                      return true;
                    }
                    break;
                  }
                }()) {
                  return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__15315), garden$compiler$prefixed_blocks_$_iter__15312.call(null, cljs.core.chunk_rest.call(null, s__15313__$2)));
                } else {
                  return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__15315), null);
                }
              } else {
                var vendor = cljs.core.first.call(null, s__15313__$2);
                return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [garden.util.vendor_prefix.call(null, vendor, cljs.core.name.call(null, p)), v], null), garden$compiler$prefixed_blocks_$_iter__15312.call(null, cljs.core.rest.call(null, s__15313__$2)));
              }
            } else {
              return null;
            }
            break;
          }
        };
      }(vec__15311, p, v), null, null);
    };
  }(vec__15311, p, v);
  return iter__5089__auto__.call(null, vendors);
};
garden.compiler.prefix_all_properties = function garden$compiler$prefix_all_properties(vendors, declaration) {
  return garden.compiler.add_blocks.call(null, cljs.core.partial.call(null, garden.compiler.prefixed_blocks, vendors), declaration);
};
garden.compiler.prefix_auto_properties = function garden$compiler$prefix_auto_properties(vendors, declaration) {
  return garden.compiler.add_blocks.call(null, function(block) {
    var vec__15318 = block;
    var p = cljs.core.nth.call(null, vec__15318, 0, null);
    var _ = cljs.core.nth.call(null, vec__15318, 1, null);
    if (cljs.core.truth_(garden.compiler.auto_prefix_QMARK_.call(null, cljs.core.name.call(null, p)))) {
      return garden.compiler.prefixed_blocks.call(null, vendors, block);
    } else {
      return null;
    }
  }, declaration);
};
garden.compiler.prefix_declaration = function garden$compiler$prefix_declaration(declaration) {
  var vendors = function() {
    var or__4335__auto__ = (new cljs.core.Keyword(null, "vendors", "vendors", -153040496)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, declaration));
    if (cljs.core.truth_(or__4335__auto__)) {
      return or__4335__auto__;
    } else {
      return garden.compiler.vendors.call(null);
    }
  }();
  var prefix_fn = cljs.core.truth_((new cljs.core.Keyword(null, "prefix", "prefix", -265908465)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, declaration))) ? garden.compiler.prefix_all_properties : garden.compiler.prefix_auto_properties;
  return prefix_fn.call(null, vendors, declaration);
};
garden.compiler.render_declaration = function garden$compiler$render_declaration(declaration) {
  return clojure.string.join.call(null, "\n", cljs.core.map.call(null, garden.compiler.render_property_and_value, garden.compiler.prefix_declaration.call(null, declaration)));
};
garden.compiler.render_selector = function garden$compiler$render_selector(selector) {
  return garden.compiler.comma_separated_list.call(null, selector);
};
garden.compiler.render_rule = function garden$compiler$render_rule(p__15319) {
  var vec__15321 = p__15319;
  var selector = cljs.core.nth.call(null, vec__15321, 0, null);
  var declarations = cljs.core.nth.call(null, vec__15321, 1, null);
  var rule = vec__15321;
  if (cljs.core.seq.call(null, rule) && cljs.core.every_QMARK_.call(null, cljs.core.seq, rule)) {
    return[cljs.core.str(garden.compiler.render_selector.call(null, selector)), cljs.core.str(garden.compiler.l_brace), cljs.core.str(garden.compiler.indent_str.call(null, clojure.string.join.call(null, "\n", cljs.core.map.call(null, garden.compiler.render_css, declarations)))), cljs.core.str(garden.compiler.r_brace)].join("");
  } else {
    return null;
  }
};
garden.compiler.render_media_expr_part = function garden$compiler$render_media_expr_part(p__15322) {
  var vec__15325 = p__15322;
  var k = cljs.core.nth.call(null, vec__15325, 0, null);
  var v = cljs.core.nth.call(null, vec__15325, 1, null);
  var vec__15326 = cljs.core.map.call(null, garden.compiler.render_value, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, v], null));
  var sk = cljs.core.nth.call(null, vec__15326, 0, null);
  var sv = cljs.core.nth.call(null, vec__15326, 1, null);
  if (v === true) {
    return sk;
  } else {
    if (v === false) {
      return[cljs.core.str("not "), cljs.core.str(sk)].join("");
    } else {
      if (cljs.core._EQ_.call(null, "only", sv)) {
        return[cljs.core.str("only "), cljs.core.str(sk)].join("");
      } else {
        if (cljs.core.truth_(function() {
          var and__4323__auto__ = v;
          if (cljs.core.truth_(and__4323__auto__)) {
            return cljs.core.seq.call(null, sv);
          } else {
            return and__4323__auto__;
          }
        }())) {
          return[cljs.core.str("("), cljs.core.str(sk), cljs.core.str(garden.compiler.colon), cljs.core.str(sv), cljs.core.str(")")].join("");
        } else {
          return[cljs.core.str("("), cljs.core.str(sk), cljs.core.str(")")].join("");
        }
      }
    }
  }
};
garden.compiler.render_media_expr = function garden$compiler$render_media_expr(expr) {
  if (cljs.core.sequential_QMARK_.call(null, expr)) {
    return garden.compiler.comma_separated_list.call(null, cljs.core.map.call(null, garden$compiler$render_media_expr, expr));
  } else {
    return clojure.string.join.call(null, " and ", cljs.core.map.call(null, garden.compiler.render_media_expr_part, expr));
  }
};
garden.compiler.render_unit = function garden$compiler$render_unit(css_unit) {
  var map__15328 = css_unit;
  var map__15328__$1 = cljs.core.seq_QMARK_.call(null, map__15328) ? cljs.core.apply.call(null, cljs.core.hash_map, map__15328) : map__15328;
  var unit = cljs.core.get.call(null, map__15328__$1, new cljs.core.Keyword(null, "unit", "unit", 375175175));
  var magnitude = cljs.core.get.call(null, map__15328__$1, new cljs.core.Keyword(null, "magnitude", "magnitude", 1924274222));
  var magnitude__$1 = magnitude;
  return[cljs.core.str(magnitude__$1), cljs.core.str(cljs.core.name.call(null, unit))].join("");
};
garden.compiler.render_function = function garden$compiler$render_function(css_function) {
  var map__15330 = css_function;
  var map__15330__$1 = cljs.core.seq_QMARK_.call(null, map__15330) ? cljs.core.apply.call(null, cljs.core.hash_map, map__15330) : map__15330;
  var args = cljs.core.get.call(null, map__15330__$1, new cljs.core.Keyword(null, "args", "args", 1315556576));
  var function$ = cljs.core.get.call(null, map__15330__$1, new cljs.core.Keyword(null, "function", "function", -2127255473));
  var args__$1 = cljs.core.sequential_QMARK_.call(null, args) ? garden.compiler.comma_separated_list.call(null, args) : garden.util.to_str.call(null, args);
  return garden.util.format.call(null, "%s(%s)", garden.util.to_str.call(null, function$), args__$1);
};
garden.compiler.render_color = function garden$compiler$render_color(c) {
  var temp__4124__auto__ = (new cljs.core.Keyword(null, "alpha", "alpha", -1574982441)).cljs$core$IFn$_invoke$arity$1(c);
  if (cljs.core.truth_(temp__4124__auto__)) {
    var a = temp__4124__auto__;
    var map__15333 = garden.color.as_hsl.call(null, c);
    var map__15333__$1 = cljs.core.seq_QMARK_.call(null, map__15333) ? cljs.core.apply.call(null, cljs.core.hash_map, map__15333) : map__15333;
    var lightness = cljs.core.get.call(null, map__15333__$1, new cljs.core.Keyword(null, "lightness", "lightness", -2040901930));
    var saturation = cljs.core.get.call(null, map__15333__$1, new cljs.core.Keyword(null, "saturation", "saturation", -14247929));
    var hue = cljs.core.get.call(null, map__15333__$1, new cljs.core.Keyword(null, "hue", "hue", -508078848));
    var vec__15334 = cljs.core.map.call(null, garden.units.percent, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [saturation, lightness], null));
    var s = cljs.core.nth.call(null, vec__15334, 0, null);
    var l = cljs.core.nth.call(null, vec__15334, 1, null);
    return garden.util.format.call(null, "hsla(%s)", garden.compiler.comma_separated_list.call(null, new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [hue, s, l, a], null)));
  } else {
    return garden.color.as_hex.call(null, c);
  }
};
if (typeof garden.compiler.render_at_rule !== "undefined") {
} else {
  garden.compiler.render_at_rule = function() {
    var method_table__5230__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var prefer_table__5231__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var method_cache__5232__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var cached_hierarchy__5233__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var hierarchy__5234__auto__ = cljs.core.get.call(null, cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "hierarchy", "hierarchy", -1053470341), cljs.core.get_global_hierarchy.call(null));
    return new cljs.core.MultiFn(cljs.core.symbol.call(null, "garden.compiler", "render-at-rule"), new cljs.core.Keyword(null, "identifier", "identifier", -805503498), new cljs.core.Keyword(null, "default", "default", -1987822328), hierarchy__5234__auto__, method_table__5230__auto__, prefer_table__5231__auto__, method_cache__5232__auto__, cached_hierarchy__5233__auto__);
  }();
}
cljs.core._add_method.call(null, garden.compiler.render_at_rule, new cljs.core.Keyword(null, "default", "default", -1987822328), function(_) {
  return null;
});
cljs.core._add_method.call(null, garden.compiler.render_at_rule, new cljs.core.Keyword(null, "import", "import", -1399500709), function(p__15335) {
  var map__15336 = p__15335;
  var map__15336__$1 = cljs.core.seq_QMARK_.call(null, map__15336) ? cljs.core.apply.call(null, cljs.core.hash_map, map__15336) : map__15336;
  var value = cljs.core.get.call(null, map__15336__$1, new cljs.core.Keyword(null, "value", "value", 305978217));
  var map__15337 = value;
  var map__15337__$1 = cljs.core.seq_QMARK_.call(null, map__15337) ? cljs.core.apply.call(null, cljs.core.hash_map, map__15337) : map__15337;
  var media_queries = cljs.core.get.call(null, map__15337__$1, new cljs.core.Keyword(null, "media-queries", "media-queries", -1563277678));
  var url = cljs.core.get.call(null, map__15337__$1, new cljs.core.Keyword(null, "url", "url", 276297046));
  var url__$1 = typeof url === "string" ? garden.util.wrap_quotes.call(null, url) : garden.compiler.render_css.call(null, url);
  var queries = cljs.core.truth_(media_queries) ? garden.compiler.render_media_expr.call(null, media_queries) : null;
  return[cljs.core.str("@import "), cljs.core.str(cljs.core.truth_(queries) ? [cljs.core.str(url__$1), cljs.core.str(" "), cljs.core.str(queries)].join("") : url__$1), cljs.core.str(garden.compiler.semicolon)].join("");
});
cljs.core._add_method.call(null, garden.compiler.render_at_rule, new cljs.core.Keyword(null, "keyframes", "keyframes", -1437976012), function(p__15339) {
  var map__15340 = p__15339;
  var map__15340__$1 = cljs.core.seq_QMARK_.call(null, map__15340) ? cljs.core.apply.call(null, cljs.core.hash_map, map__15340) : map__15340;
  var value = cljs.core.get.call(null, map__15340__$1, new cljs.core.Keyword(null, "value", "value", 305978217));
  var map__15341 = value;
  var map__15341__$1 = cljs.core.seq_QMARK_.call(null, map__15341) ? cljs.core.apply.call(null, cljs.core.hash_map, map__15341) : map__15341;
  var frames = cljs.core.get.call(null, map__15341__$1, new cljs.core.Keyword(null, "frames", "frames", 1765687497));
  var identifier = cljs.core.get.call(null, map__15341__$1, new cljs.core.Keyword(null, "identifier", "identifier", -805503498));
  if (cljs.core.seq.call(null, frames)) {
    var body = [cljs.core.str(garden.util.to_str.call(null, identifier)), cljs.core.str(garden.compiler.l_brace_1), cljs.core.str(garden.compiler.indent_str.call(null, garden.compiler.rule_join.call(null, cljs.core.map.call(null, garden.compiler.render_css, frames)))), cljs.core.str(garden.compiler.r_brace_1)].join("");
    var prefix = function(body, map__15341, map__15341__$1, frames, identifier, map__15340, map__15340__$1, value) {
      return function(vendor) {
        return[cljs.core.str("@"), cljs.core.str(garden.util.vendor_prefix.call(null, vendor, "keyframes "))].join("");
      };
    }(body, map__15341, map__15341__$1, frames, identifier, map__15340, map__15340__$1, value);
    return garden.compiler.rule_join.call(null, cljs.core.map.call(null, function(body, prefix, map__15341, map__15341__$1, frames, identifier, map__15340, map__15340__$1, value) {
      return function(p1__15338_SHARP_) {
        return[cljs.core.str(p1__15338_SHARP_), cljs.core.str(body)].join("");
      };
    }(body, prefix, map__15341, map__15341__$1, frames, identifier, map__15340, map__15340__$1, value), cljs.core.cons.call(null, "@keyframes ", cljs.core.map.call(null, prefix, garden.compiler.vendors.call(null)))));
  } else {
    return null;
  }
});
cljs.core._add_method.call(null, garden.compiler.render_at_rule, new cljs.core.Keyword(null, "media", "media", -1066138403), function(p__15342) {
  var map__15343 = p__15342;
  var map__15343__$1 = cljs.core.seq_QMARK_.call(null, map__15343) ? cljs.core.apply.call(null, cljs.core.hash_map, map__15343) : map__15343;
  var value = cljs.core.get.call(null, map__15343__$1, new cljs.core.Keyword(null, "value", "value", 305978217));
  var map__15344 = value;
  var map__15344__$1 = cljs.core.seq_QMARK_.call(null, map__15344) ? cljs.core.apply.call(null, cljs.core.hash_map, map__15344) : map__15344;
  var rules = cljs.core.get.call(null, map__15344__$1, new cljs.core.Keyword(null, "rules", "rules", 1198912366));
  var media_queries = cljs.core.get.call(null, map__15344__$1, new cljs.core.Keyword(null, "media-queries", "media-queries", -1563277678));
  if (cljs.core.seq.call(null, rules)) {
    return[cljs.core.str("@media "), cljs.core.str(garden.compiler.render_media_expr.call(null, media_queries)), cljs.core.str(garden.compiler.l_brace_1), cljs.core.str(garden.compiler.indent_str.call(null, garden.compiler.rule_join.call(null, cljs.core.map.call(null, garden.compiler.render_css, rules)))), cljs.core.str(garden.compiler.r_brace_1)].join("");
  } else {
    return null;
  }
});
garden.compiler.CSSRenderer["null"] = true;
garden.compiler.render_css["null"] = function(this$) {
  return "";
};
garden.color.CSSColor.prototype.garden$compiler$CSSRenderer$ = true;
garden.color.CSSColor.prototype.garden$compiler$CSSRenderer$render_css$arity$1 = function(this$) {
  var this$__$1 = this;
  return garden.compiler.render_color.call(null, this$__$1);
};
cljs.core.IndexedSeq.prototype.garden$compiler$CSSRenderer$ = true;
cljs.core.IndexedSeq.prototype.garden$compiler$CSSRenderer$render_css$arity$1 = function(this$) {
  var this$__$1 = this;
  return cljs.core.map.call(null, garden.compiler.render_css, this$__$1);
};
cljs.core.LazySeq.prototype.garden$compiler$CSSRenderer$ = true;
cljs.core.LazySeq.prototype.garden$compiler$CSSRenderer$render_css$arity$1 = function(this$) {
  var this$__$1 = this;
  return cljs.core.map.call(null, garden.compiler.render_css, this$__$1);
};
cljs.core.NodeSeq.prototype.garden$compiler$CSSRenderer$ = true;
cljs.core.NodeSeq.prototype.garden$compiler$CSSRenderer$render_css$arity$1 = function(this$) {
  var this$__$1 = this;
  return cljs.core.map.call(null, garden.compiler.render_css, this$__$1);
};
cljs.core.BlackNode.prototype.garden$compiler$CSSRenderer$ = true;
cljs.core.BlackNode.prototype.garden$compiler$CSSRenderer$render_css$arity$1 = function(this$) {
  var this$__$1 = this;
  return garden.compiler.render_rule.call(null, this$__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.garden$compiler$CSSRenderer$ = true;
cljs.core.PersistentArrayMapSeq.prototype.garden$compiler$CSSRenderer$render_css$arity$1 = function(this$) {
  var this$__$1 = this;
  return cljs.core.map.call(null, garden.compiler.render_css, this$__$1);
};
garden.types.CSSUnit.prototype.garden$compiler$CSSRenderer$ = true;
garden.types.CSSUnit.prototype.garden$compiler$CSSRenderer$render_css$arity$1 = function(this$) {
  var this$__$1 = this;
  return garden.compiler.render_unit.call(null, this$__$1);
};
cljs.core.ChunkedSeq.prototype.garden$compiler$CSSRenderer$ = true;
cljs.core.ChunkedSeq.prototype.garden$compiler$CSSRenderer$render_css$arity$1 = function(this$) {
  var this$__$1 = this;
  return cljs.core.map.call(null, garden.compiler.render_css, this$__$1);
};
cljs.core.Cons.prototype.garden$compiler$CSSRenderer$ = true;
cljs.core.Cons.prototype.garden$compiler$CSSRenderer$render_css$arity$1 = function(this$) {
  var this$__$1 = this;
  return cljs.core.map.call(null, garden.compiler.render_css, this$__$1);
};
cljs.core.RSeq.prototype.garden$compiler$CSSRenderer$ = true;
cljs.core.RSeq.prototype.garden$compiler$CSSRenderer$render_css$arity$1 = function(this$) {
  var this$__$1 = this;
  return cljs.core.map.call(null, garden.compiler.render_css, this$__$1);
};
garden.compiler.CSSRenderer["number"] = true;
garden.compiler.render_css["number"] = function(this$) {
  return[cljs.core.str(this$)].join("");
};
garden.types.CSSFunction.prototype.garden$compiler$CSSRenderer$ = true;
garden.types.CSSFunction.prototype.garden$compiler$CSSRenderer$render_css$arity$1 = function(this$) {
  var this$__$1 = this;
  return garden.compiler.render_function.call(null, this$__$1);
};
cljs.core.PersistentHashMap.prototype.garden$compiler$CSSRenderer$ = true;
cljs.core.PersistentHashMap.prototype.garden$compiler$CSSRenderer$render_css$arity$1 = function(this$) {
  var this$__$1 = this;
  return garden.compiler.render_declaration.call(null, this$__$1);
};
cljs.core.ArrayNodeSeq.prototype.garden$compiler$CSSRenderer$ = true;
cljs.core.ArrayNodeSeq.prototype.garden$compiler$CSSRenderer$render_css$arity$1 = function(this$) {
  var this$__$1 = this;
  return cljs.core.map.call(null, garden.compiler.render_css, this$__$1);
};
cljs.core.Subvec.prototype.garden$compiler$CSSRenderer$ = true;
cljs.core.Subvec.prototype.garden$compiler$CSSRenderer$render_css$arity$1 = function(this$) {
  var this$__$1 = this;
  return garden.compiler.render_rule.call(null, this$__$1);
};
garden.compiler.CSSRenderer["_"] = true;
garden.compiler.render_css["_"] = function(this$) {
  return[cljs.core.str(this$)].join("");
};
cljs.core.PersistentTreeMap.prototype.garden$compiler$CSSRenderer$ = true;
cljs.core.PersistentTreeMap.prototype.garden$compiler$CSSRenderer$render_css$arity$1 = function(this$) {
  var this$__$1 = this;
  return garden.compiler.render_declaration.call(null, this$__$1);
};
cljs.core.ChunkedCons.prototype.garden$compiler$CSSRenderer$ = true;
cljs.core.ChunkedCons.prototype.garden$compiler$CSSRenderer$render_css$arity$1 = function(this$) {
  var this$__$1 = this;
  return cljs.core.map.call(null, garden.compiler.render_css, this$__$1);
};
garden.types.CSSAtRule.prototype.garden$compiler$CSSRenderer$ = true;
garden.types.CSSAtRule.prototype.garden$compiler$CSSRenderer$render_css$arity$1 = function(this$) {
  var this$__$1 = this;
  return garden.compiler.render_at_rule.call(null, this$__$1);
};
cljs.core.RedNode.prototype.garden$compiler$CSSRenderer$ = true;
cljs.core.RedNode.prototype.garden$compiler$CSSRenderer$render_css$arity$1 = function(this$) {
  var this$__$1 = this;
  return garden.compiler.render_rule.call(null, this$__$1);
};
cljs.core.PersistentVector.prototype.garden$compiler$CSSRenderer$ = true;
cljs.core.PersistentVector.prototype.garden$compiler$CSSRenderer$render_css$arity$1 = function(this$) {
  var this$__$1 = this;
  return garden.compiler.render_rule.call(null, this$__$1);
};
cljs.core.Keyword.prototype.garden$compiler$CSSRenderer$ = true;
cljs.core.Keyword.prototype.garden$compiler$CSSRenderer$render_css$arity$1 = function(this$) {
  var this$__$1 = this;
  return cljs.core.name.call(null, this$__$1);
};
cljs.core.PersistentArrayMap.prototype.garden$compiler$CSSRenderer$ = true;
cljs.core.PersistentArrayMap.prototype.garden$compiler$CSSRenderer$render_css$arity$1 = function(this$) {
  var this$__$1 = this;
  return garden.compiler.render_declaration.call(null, this$__$1);
};
cljs.core.List.prototype.garden$compiler$CSSRenderer$ = true;
cljs.core.List.prototype.garden$compiler$CSSRenderer$render_css$arity$1 = function(this$) {
  var this$__$1 = this;
  return cljs.core.map.call(null, garden.compiler.render_css, this$__$1);
};
garden.compiler.compile_style = function garden$compiler$compile_style(ms) {
  return cljs.core.first.call(null, garden.compiler.render_css.call(null, garden.compiler.expand.call(null, cljs.core.reduce.call(null, cljs.core.merge, cljs.core.filter.call(null, garden.util.declaration_QMARK_, ms)))));
};
garden.compiler.do_compile = function garden$compiler$do_compile(flags, rules) {
  var _STAR_flags_STAR_15346 = garden.compiler._STAR_flags_STAR_;
  garden.compiler._STAR_flags_STAR_ = flags;
  try {
    return garden.compiler.rule_join.call(null, cljs.core.remove.call(null, cljs.core.nil_QMARK_, cljs.core.map.call(null, garden.compiler.render_css, cljs.core.filter.call(null, garden.compiler.top_level_expression_QMARK_, garden.compiler.expand_stylesheet.call(null, rules)))));
  } finally {
    garden.compiler._STAR_flags_STAR_ = _STAR_flags_STAR_15346;
  }
};
garden.compiler.do_preamble = function garden$compiler$do_preamble(p__15347, stylesheet) {
  var map__15349 = p__15347;
  var map__15349__$1 = cljs.core.seq_QMARK_.call(null, map__15349) ? cljs.core.apply.call(null, cljs.core.hash_map, map__15349) : map__15349;
  var preamble = cljs.core.get.call(null, map__15349__$1, new cljs.core.Keyword(null, "preamble", "preamble", 1641040241));
  return stylesheet;
};
garden.compiler.do_compression = function garden$compiler$do_compression(p__15350, stylesheet) {
  var map__15352 = p__15350;
  var map__15352__$1 = cljs.core.seq_QMARK_.call(null, map__15352) ? cljs.core.apply.call(null, cljs.core.hash_map, map__15352) : map__15352;
  var pretty_print = cljs.core.get.call(null, map__15352__$1, new cljs.core.Keyword(null, "pretty-print", "pretty-print", -1314067013));
  var pretty_print_QMARK_ = cljs.core.get.call(null, map__15352__$1, new cljs.core.Keyword(null, "pretty-print?", "pretty-print?", 1932217158));
  if (cljs.core.truth_(function() {
    var or__4335__auto__ = pretty_print_QMARK_;
    if (cljs.core.truth_(or__4335__auto__)) {
      return or__4335__auto__;
    } else {
      return pretty_print;
    }
  }())) {
    return stylesheet;
  } else {
    return garden.compression.compress_stylesheet.call(null, stylesheet);
  }
};
garden.compiler.do_output_to = function garden$compiler$do_output_to(p__15353, stylesheet) {
  var map__15355 = p__15353;
  var map__15355__$1 = cljs.core.seq_QMARK_.call(null, map__15355) ? cljs.core.apply.call(null, cljs.core.hash_map, map__15355) : map__15355;
  var output_to = cljs.core.get.call(null, map__15355__$1, new cljs.core.Keyword(null, "output-to", "output-to", -965533968));
  return stylesheet;
};
garden.compiler.compile_css = function garden$compiler$compile_css() {
  var argseq__5375__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return garden.compiler.compile_css.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5375__auto__);
};
garden.compiler.compile_css.cljs$core$IFn$_invoke$arity$variadic = function(flags, rules) {
  var vec__15358 = cljs.core.truth_(function() {
    var and__4323__auto__ = garden.util.hash_map_QMARK_.call(null, flags);
    if (cljs.core.truth_(and__4323__auto__)) {
      return cljs.core.some.call(null, cljs.core.set.call(null, cljs.core.keys.call(null, flags)), cljs.core.keys.call(null, garden.compiler._STAR_flags_STAR_));
    } else {
      return and__4323__auto__;
    }
  }()) ? new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.merge.call(null, garden.compiler._STAR_flags_STAR_, flags), rules], null) : new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [garden.compiler._STAR_flags_STAR_, cljs.core.cons.call(null, flags, rules)], null);
  var flags__$1 = cljs.core.nth.call(null, vec__15358, 0, null);
  var rules__$1 = cljs.core.nth.call(null, vec__15358, 1, null);
  return garden.compiler.do_output_to.call(null, flags__$1, garden.compiler.do_compression.call(null, flags__$1, garden.compiler.do_preamble.call(null, flags__$1, garden.compiler.do_compile.call(null, flags__$1, rules__$1))));
};
garden.compiler.compile_css.cljs$lang$maxFixedArity = 1;
garden.compiler.compile_css.cljs$lang$applyTo = function(seq15356) {
  var G__15357 = cljs.core.first.call(null, seq15356);
  var seq15356__$1 = cljs.core.next.call(null, seq15356);
  return garden.compiler.compile_css.cljs$core$IFn$_invoke$arity$variadic(G__15357, seq15356__$1);
};
goog.provide("garden.core");
goog.require("cljs.core");
goog.require("garden.compiler");
garden.core.css = function garden$core$css() {
  var argseq__5375__auto__ = 0 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 0), 0) : null;
  return garden.core.css.cljs$core$IFn$_invoke$arity$variadic(argseq__5375__auto__);
};
garden.core.css.cljs$core$IFn$_invoke$arity$variadic = function(rules) {
  return cljs.core.apply.call(null, garden.compiler.compile_css, rules);
};
garden.core.css.cljs$lang$maxFixedArity = 0;
garden.core.css.cljs$lang$applyTo = function(seq15258) {
  return garden.core.css.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq.call(null, seq15258));
};
garden.core.style = function garden$core$style() {
  var argseq__5375__auto__ = 0 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 0), 0) : null;
  return garden.core.style.cljs$core$IFn$_invoke$arity$variadic(argseq__5375__auto__);
};
garden.core.style.cljs$core$IFn$_invoke$arity$variadic = function(maps) {
  return garden.compiler.compile_style.call(null, maps);
};
garden.core.style.cljs$lang$maxFixedArity = 0;
garden.core.style.cljs$lang$applyTo = function(seq15259) {
  return garden.core.style.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq.call(null, seq15259));
};
goog.provide("mind.views");
goog.require("cljs.core");
goog.require("garden.core");
goog.require("reagent.core");
goog.require("re_frame.core");
cljs.core.enable_console_print_BANG_.call(null);
mind.views.home_panel = function mind$views$home_panel() {
  var name = re_frame.core.subscribe.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "name", "name", 1843675177)], null));
  return function(name) {
    return function() {
      return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div", "div", 1057191632), [cljs.core.str("Hello from "), cljs.core.str(cljs.core.deref.call(null, name)), cljs.core.str(". This is the Home Page.")].join(""), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div", "div", 1057191632), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, 
      [new cljs.core.Keyword(null, "a", "a", -2123407586), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "href", "href", -793805698), "#/about"], null), "go to About Page"], null)], null)], null);
    };
  }(name);
};
mind.views.about_panel = function mind$views$about_panel() {
  return function() {
    return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div", "div", 1057191632), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "style", "style", -496642736), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "color", "color", 1011675173), "red"], null)], null), "This is the About Page.", new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, 
    "div", "div", 1057191632), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "a", "a", -2123407586), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "href", "href", -793805698), "#/"], null), "go to Home Page"], null)], null)], null);
  };
};
mind.views.timer_component = function mind$views$timer_component() {
  var seconds_elapsed = reagent.core.atom.call(null, 0);
  return function(seconds_elapsed) {
    return function() {
      setTimeout(function(seconds_elapsed) {
        return function() {
          return cljs.core.swap_BANG_.call(null, seconds_elapsed, cljs.core.inc);
        };
      }(seconds_elapsed), 1E3);
      return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div", "div", 1057191632), "Seconds Elapsed: ", cljs.core.deref.call(null, seconds_elapsed)], null);
    };
  }(seconds_elapsed);
};
if (typeof mind.views.panels !== "undefined") {
} else {
  mind.views.panels = function() {
    var method_table__5230__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var prefer_table__5231__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var method_cache__5232__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var cached_hierarchy__5233__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var hierarchy__5234__auto__ = cljs.core.get.call(null, cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "hierarchy", "hierarchy", -1053470341), cljs.core.get_global_hierarchy.call(null));
    return new cljs.core.MultiFn(cljs.core.symbol.call(null, "mind.views", "panels"), cljs.core.identity, new cljs.core.Keyword(null, "default", "default", -1987822328), hierarchy__5234__auto__, method_table__5230__auto__, prefer_table__5231__auto__, method_cache__5232__auto__, cached_hierarchy__5233__auto__);
  }();
}
cljs.core._add_method.call(null, mind.views.panels, new cljs.core.Keyword(null, "home-panel", "home-panel", 1226198754), function() {
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [mind.views.home_panel], null);
});
cljs.core._add_method.call(null, mind.views.panels, new cljs.core.Keyword(null, "about-panel", "about-panel", 334628515), function() {
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [mind.views.about_panel], null);
});
cljs.core._add_method.call(null, mind.views.panels, new cljs.core.Keyword(null, "timer-panel", "timer-panel", -1352071629), function() {
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [mind.views.timer_component], null);
});
cljs.core._add_method.call(null, mind.views.panels, new cljs.core.Keyword(null, "default", "default", -1987822328), function() {
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div", "div", 1057191632)], null);
});
mind.views.main_panel = function mind$views$main_panel() {
  var active_panel = re_frame.core.subscribe.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "active-panel", "active-panel", -1802545994)], null));
  return function(active_panel) {
    return function() {
      return mind.views.panels.call(null, cljs.core.deref.call(null, active_panel));
    };
  }(active_panel);
};
mind.views.lister = function mind$views$lister(items) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "ul", "ul", -1349521403), function() {
    var iter__5089__auto__ = function mind$views$lister_$_iter__11640(s__11641) {
      return new cljs.core.LazySeq(null, function() {
        var s__11641__$1 = s__11641;
        while (true) {
          var temp__4126__auto__ = cljs.core.seq.call(null, s__11641__$1);
          if (temp__4126__auto__) {
            var s__11641__$2 = temp__4126__auto__;
            if (cljs.core.chunked_seq_QMARK_.call(null, s__11641__$2)) {
              var c__5087__auto__ = cljs.core.chunk_first.call(null, s__11641__$2);
              var size__5088__auto__ = cljs.core.count.call(null, c__5087__auto__);
              var b__11643 = cljs.core.chunk_buffer.call(null, size__5088__auto__);
              if (function() {
                var i__11642 = 0;
                while (true) {
                  if (i__11642 < size__5088__auto__) {
                    var item = cljs.core._nth.call(null, c__5087__auto__, i__11642);
                    cljs.core.chunk_append.call(null, b__11643, cljs.core.with_meta(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "li", "li", 723558921), "Item ", item], null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "key", "key", -1516042587), item], null)));
                    var G__11644 = i__11642 + 1;
                    i__11642 = G__11644;
                    continue;
                  } else {
                    return true;
                  }
                  break;
                }
              }()) {
                return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__11643), mind$views$lister_$_iter__11640.call(null, cljs.core.chunk_rest.call(null, s__11641__$2)));
              } else {
                return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__11643), null);
              }
            } else {
              var item = cljs.core.first.call(null, s__11641__$2);
              return cljs.core.cons.call(null, cljs.core.with_meta(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "li", "li", 723558921), "Item ", item], null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "key", "key", -1516042587), item], null)), mind$views$lister_$_iter__11640.call(null, cljs.core.rest.call(null, s__11641__$2)));
            }
          } else {
            return null;
          }
          break;
        }
      }, null, null);
    };
    return iter__5089__auto__.call(null, items);
  }()], null);
};
mind.views.lister_user = function mind$views$lister_user() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div", "div", 1057191632), "Here is a list:", new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [mind.views.lister, cljs.core.range.call(null, 3)], null)], null);
};
goog.provide("mind.db");
goog.require("cljs.core");
goog.require("reagent.core");
mind.db.default_db = new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "name", "name", 1843675177), "re-frame"], null);
goog.provide("mind.handlers");
goog.require("cljs.core");
goog.require("mind.db");
goog.require("re_frame.core");
re_frame.core.register_handler.call(null, new cljs.core.Keyword(null, "initialize-db", "initialize-db", 230998432), function(_, ___$1) {
  return mind.db.default_db;
});
re_frame.core.register_handler.call(null, new cljs.core.Keyword(null, "set-active-panel", "set-active-panel", -965871124), function(db, p__10356) {
  var vec__10357 = p__10356;
  var _ = cljs.core.nth.call(null, vec__10357, 0, null);
  var active_panel = cljs.core.nth.call(null, vec__10357, 1, null);
  return cljs.core.assoc.call(null, db, new cljs.core.Keyword(null, "active-panel", "active-panel", -1802545994), active_panel);
});
goog.provide("mind.core");
goog.require("cljs.core");
goog.require("reagent.core");
goog.require("mind.subs");
goog.require("mind.views");
goog.require("mind.routes");
goog.require("mind.handlers");
goog.require("re_frame.core");
mind.core.mount_root = function mind$core$mount_root() {
  return reagent.core.render.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [mind.views.main_panel], null), document.getElementById("app"));
};
mind.core.init = function mind$core$init() {
  mind.routes.app_routes.call(null);
  re_frame.core.dispatch_sync.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "initialize-db", "initialize-db", 230998432)], null));
  return mind.core.mount_root.call(null);
};
goog.exportSymbol("mind.core.init", mind.core.init);
goog.provide("mind.core_test");
goog.require("cljs.core");
goog.require("mind.core");
goog.require("cljs.test");
mind.core_test.fake_test = function mind$core_test$fake_test() {
  return cljs.test.test_var.call(null, mind$core_test$fake_test.cljs$lang$var);
};
mind.core_test.fake_test.cljs$lang$test = function() {
  cljs.test.update_current_env_BANG_.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "testing-contexts", "testing-contexts", -1485646523)], null), cljs.core.conj, "fake description");
  var ret__11750__auto__ = function() {
    try {
      var values__11692__auto__ = cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, 2), 1);
      var result__11693__auto__ = cljs.core.apply.call(null, cljs.core._EQ_, values__11692__auto__);
      if (cljs.core.truth_(result__11693__auto__)) {
        cljs.test.do_report.call(null, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "pass", "pass", 1574159993), new cljs.core.Keyword(null, "expected", "expected", 1583670997), cljs.core.list(new cljs.core.Symbol(null, "\x3d", "\x3d", -1501502141, null), 1, 2), new cljs.core.Keyword(null, "actual", "actual", 107306363), cljs.core.cons.call(null, cljs.core._EQ_, values__11692__auto__), new cljs.core.Keyword(null, "message", 
        "message", -406056002), null], null));
      } else {
        cljs.test.do_report.call(null, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "fail", "fail", 1706214930), new cljs.core.Keyword(null, "expected", "expected", 1583670997), cljs.core.list(new cljs.core.Symbol(null, "\x3d", "\x3d", -1501502141, null), 1, 2), new cljs.core.Keyword(null, "actual", "actual", 107306363), cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.cons.call(null, 
        new cljs.core.Symbol(null, "\x3d", "\x3d", -1501502141, null), values__11692__auto__)), new cljs.core.Symbol(null, "not", "not", 1044554643, null)), new cljs.core.Keyword(null, "message", "message", -406056002), null], null));
      }
      return result__11693__auto__;
    } catch (e11890) {
      var t__11730__auto__ = e11890;
      return cljs.test.do_report.call(null, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "error", "error", -978969032), new cljs.core.Keyword(null, "expected", "expected", 1583670997), cljs.core.list(new cljs.core.Symbol(null, "\x3d", "\x3d", -1501502141, null), 1, 2), new cljs.core.Keyword(null, "actual", "actual", 107306363), t__11730__auto__, new cljs.core.Keyword(null, "message", "message", -406056002), null], 
      null));
    }
  }();
  cljs.test.update_current_env_BANG_.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "testing-contexts", "testing-contexts", -1485646523)], null), cljs.core.rest);
  return ret__11750__auto__;
};
mind.core_test.fake_test.cljs$lang$var = new cljs.core.Var(function() {
  return mind.core_test.fake_test;
}, new cljs.core.Symbol("mind.core-test", "fake-test", "mind.core-test/fake-test", 2057489870, null), cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null, "ns", "ns", 441598760), new cljs.core.Keyword(null, "name", "name", 1843675177), new cljs.core.Keyword(null, "file", "file", -1269645878), new cljs.core.Keyword(null, "end-column", "end-column", 1425389514), new cljs.core.Keyword(null, "column", "column", 2078222095), new cljs.core.Keyword(null, "line", "line", 212345235), new cljs.core.Keyword(null, 
"end-line", "end-line", 1837326455), new cljs.core.Keyword(null, "arglists", "arglists", 1661989754), new cljs.core.Keyword(null, "doc", "doc", 1913296891), new cljs.core.Keyword(null, "test", "test", 577538877)], [new cljs.core.Symbol(null, "mind.core-test", "mind.core-test", 355756316, null), new cljs.core.Symbol(null, "fake-test", "fake-test", 2147428714, null), "/home/fricze/Work/mind/test/cljs/mind/core_test.cljs", 19, 10, 6, 6, cljs.core.List.EMPTY, null, cljs.core.truth_(mind.core_test.fake_test) ? 
mind.core_test.fake_test.cljs$lang$test : null]));
goog.provide("test_runner");
goog.require("cljs.core");
goog.require("mind.core_test");
goog.require("cljs.test");
cljs.core.enable_console_print_BANG_.call(null);
cljs.core._add_method.call(null, cljs.test.report, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("cljs.test", "default", "cljs.test/default", -1581405322), new cljs.core.Keyword(null, "summary", "summary", 380847952)], null), function(m) {
  cljs.core.println.call(null, "\nRan", (new cljs.core.Keyword(null, "test", "test", 577538877)).cljs$core$IFn$_invoke$arity$1(m), "tests containing", (new cljs.core.Keyword(null, "pass", "pass", 1574159993)).cljs$core$IFn$_invoke$arity$1(m) + (new cljs.core.Keyword(null, "fail", "fail", 1706214930)).cljs$core$IFn$_invoke$arity$1(m) + (new cljs.core.Keyword(null, "error", "error", -978969032)).cljs$core$IFn$_invoke$arity$1(m), "assertions.");
  cljs.core.println.call(null, (new cljs.core.Keyword(null, "fail", "fail", 1706214930)).cljs$core$IFn$_invoke$arity$1(m), "failures,", (new cljs.core.Keyword(null, "error", "error", -978969032)).cljs$core$IFn$_invoke$arity$1(m), "errors.");
  return window["test-failures"] = (new cljs.core.Keyword(null, "fail", "fail", 1706214930)).cljs$core$IFn$_invoke$arity$1(m) + (new cljs.core.Keyword(null, "error", "error", -978969032)).cljs$core$IFn$_invoke$arity$1(m);
});
test_runner.runner = function test_runner$runner() {
  return cljs.test.run_block.call(null, function() {
    var env11895 = cljs.test.empty_env.call(null, new cljs.core.Keyword("cljs.test", "default", "cljs.test/default", -1581405322));
    var summary11896 = cljs.core.volatile_BANG_.call(null, new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "summary", "summary", 380847952), new cljs.core.Keyword(null, "fail", "fail", 1706214930), 0, new cljs.core.Keyword(null, "error", "error", -978969032), 0, new cljs.core.Keyword(null, "pass", "pass", 1574159993), 0, new cljs.core.Keyword(null, "test", "test", 577538877), 0], null));
    return cljs.core.concat.call(null, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [function(env11895, summary11896) {
      return function() {
        cljs.test.set_env_BANG_.call(null, env11895);
        cljs.test.do_report.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "ns", "ns", 441598760), new cljs.core.Symbol(null, "mind.core-test", "mind.core-test", 355756316, null), new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "begin-test-ns", "begin-test-ns", -1701237033)], null));
        return cljs.test.block.call(null, function() {
          var env__11797__auto__ = cljs.test.get_current_env.call(null);
          return cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [function(env__11797__auto__, env11895, summary11896) {
            return function() {
              if (env__11797__auto__ == null) {
                cljs.test.set_env_BANG_.call(null, cljs.test.empty_env.call(null));
              } else {
              }
              return null;
            };
          }(env__11797__auto__, env11895, summary11896)], null), cljs.test.test_vars_block.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Var(function() {
            return mind.core_test.fake_test;
          }, new cljs.core.Symbol("mind.core-test", "fake-test", "mind.core-test/fake-test", 2057489870, null), cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null, "ns", "ns", 441598760), new cljs.core.Keyword(null, "name", "name", 1843675177), new cljs.core.Keyword(null, "file", "file", -1269645878), new cljs.core.Keyword(null, "end-column", "end-column", 1425389514), new cljs.core.Keyword(null, "column", "column", 2078222095), new cljs.core.Keyword(null, "line", "line", 212345235), 
          new cljs.core.Keyword(null, "end-line", "end-line", 1837326455), new cljs.core.Keyword(null, "arglists", "arglists", 1661989754), new cljs.core.Keyword(null, "doc", "doc", 1913296891), new cljs.core.Keyword(null, "test", "test", 577538877)], [new cljs.core.Symbol(null, "mind.core-test", "mind.core-test", 355756316, null), new cljs.core.Symbol(null, "fake-test", "fake-test", 2147428714, null), "/home/fricze/Work/mind/test/cljs/mind/core_test.cljs", 19, 10, 6, 6, cljs.core.List.EMPTY, null, 
          cljs.core.truth_(mind.core_test.fake_test) ? mind.core_test.fake_test.cljs$lang$test : null]))], null)), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [function(env__11797__auto__, env11895, summary11896) {
            return function() {
              if (env__11797__auto__ == null) {
                return cljs.test.clear_env_BANG_.call(null);
              } else {
                return null;
              }
            };
          }(env__11797__auto__, env11895, summary11896)], null));
        }());
      };
    }(env11895, summary11896), function(env11895, summary11896) {
      return function() {
        return cljs.test.do_report.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "ns", "ns", 441598760), new cljs.core.Symbol(null, "mind.core-test", "mind.core-test", 355756316, null), new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "end-test-ns", "end-test-ns", 1620675645)], null));
      };
    }(env11895, summary11896)], null), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [function(env11895, summary11896) {
      return function() {
        return cljs.core._vreset_BANG_.call(null, summary11896, cljs.core.partial.call(null, cljs.core.merge_with, cljs.core._PLUS_).call(null, cljs.core._deref.call(null, summary11896), (new cljs.core.Keyword(null, "report-counters", "report-counters", -1702609242)).cljs$core$IFn$_invoke$arity$1(cljs.test.get_and_clear_env_BANG_.call(null))));
      };
    }(env11895, summary11896)], null)), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [function(env11895, summary11896) {
      return function() {
        cljs.test.set_env_BANG_.call(null, env11895);
        cljs.test.do_report.call(null, cljs.core.deref.call(null, summary11896));
        return cljs.test.clear_env_BANG_.call(null);
      };
    }(env11895, summary11896)], null));
  }());
};
